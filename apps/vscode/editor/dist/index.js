"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __pow = Math.pow;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a3, b3) => {
    for (var prop in b3 || (b3 = {}))
      if (__hasOwnProp.call(b3, prop))
        __defNormalProp(a3, prop, b3[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b3)) {
        if (__propIsEnum.call(b3, prop))
          __defNormalProp(a3, prop, b3[prop]);
      }
    return a3;
  };
  var __spreadProps = (a3, b3) => __defProps(a3, __getOwnPropDescs(b3));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __decorateClass = (decorators, target, key, kind) => {
    var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
    for (var i3 = decorators.length - 1, decorator; i3 >= 0; i3--)
      if (decorator = decorators[i3])
        result = (kind ? decorator(target, key, result) : decorator(result)) || result;
    if (kind && result)
      __defProp(target, key, result);
    return result;
  };
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e2) {
          reject(e2);
        }
      };
      var step = (x3) => x3.done ? resolve(x3.value) : Promise.resolve(x3.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // ../../../node_modules/react/cjs/react.production.min.js
  var require_react_production_min = __commonJS({
    "../../../node_modules/react/cjs/react.production.min.js"(exports) {
      "use strict";
      var l3 = Symbol.for("react.element");
      var n3 = Symbol.for("react.portal");
      var p3 = Symbol.for("react.fragment");
      var q = Symbol.for("react.strict_mode");
      var r3 = Symbol.for("react.profiler");
      var t4 = Symbol.for("react.provider");
      var u3 = Symbol.for("react.context");
      var v3 = Symbol.for("react.forward_ref");
      var w3 = Symbol.for("react.suspense");
      var x3 = Symbol.for("react.memo");
      var y3 = Symbol.for("react.lazy");
      var z2 = Symbol.iterator;
      function A2(a3) {
        if (null === a3 || "object" !== typeof a3)
          return null;
        a3 = z2 && a3[z2] || a3["@@iterator"];
        return "function" === typeof a3 ? a3 : null;
      }
      var B = { isMounted: function() {
        return false;
      }, enqueueForceUpdate: function() {
      }, enqueueReplaceState: function() {
      }, enqueueSetState: function() {
      } };
      var C2 = Object.assign;
      var D3 = {};
      function E3(a3, b3, e2) {
        this.props = a3;
        this.context = b3;
        this.refs = D3;
        this.updater = e2 || B;
      }
      E3.prototype.isReactComponent = {};
      E3.prototype.setState = function(a3, b3) {
        if ("object" !== typeof a3 && "function" !== typeof a3 && null != a3)
          throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, a3, b3, "setState");
      };
      E3.prototype.forceUpdate = function(a3) {
        this.updater.enqueueForceUpdate(this, a3, "forceUpdate");
      };
      function F() {
      }
      F.prototype = E3.prototype;
      function G(a3, b3, e2) {
        this.props = a3;
        this.context = b3;
        this.refs = D3;
        this.updater = e2 || B;
      }
      var H2 = G.prototype = new F();
      H2.constructor = G;
      C2(H2, E3.prototype);
      H2.isPureReactComponent = true;
      var I = Array.isArray;
      var J = Object.prototype.hasOwnProperty;
      var K = { current: null };
      var L3 = { key: true, ref: true, __self: true, __source: true };
      function M(a3, b3, e2) {
        var d3, c3 = {}, k2 = null, h3 = null;
        if (null != b3)
          for (d3 in void 0 !== b3.ref && (h3 = b3.ref), void 0 !== b3.key && (k2 = "" + b3.key), b3)
            J.call(b3, d3) && !L3.hasOwnProperty(d3) && (c3[d3] = b3[d3]);
        var g3 = arguments.length - 2;
        if (1 === g3)
          c3.children = e2;
        else if (1 < g3) {
          for (var f3 = Array(g3), m3 = 0; m3 < g3; m3++)
            f3[m3] = arguments[m3 + 2];
          c3.children = f3;
        }
        if (a3 && a3.defaultProps)
          for (d3 in g3 = a3.defaultProps, g3)
            void 0 === c3[d3] && (c3[d3] = g3[d3]);
        return { $$typeof: l3, type: a3, key: k2, ref: h3, props: c3, _owner: K.current };
      }
      function N2(a3, b3) {
        return { $$typeof: l3, type: a3.type, key: b3, ref: a3.ref, props: a3.props, _owner: a3._owner };
      }
      function O2(a3) {
        return "object" === typeof a3 && null !== a3 && a3.$$typeof === l3;
      }
      function escape(a3) {
        var b3 = { "=": "=0", ":": "=2" };
        return "$" + a3.replace(/[=:]/g, function(a4) {
          return b3[a4];
        });
      }
      var P2 = /\/+/g;
      function Q(a3, b3) {
        return "object" === typeof a3 && null !== a3 && null != a3.key ? escape("" + a3.key) : b3.toString(36);
      }
      function R3(a3, b3, e2, d3, c3) {
        var k2 = typeof a3;
        if ("undefined" === k2 || "boolean" === k2)
          a3 = null;
        var h3 = false;
        if (null === a3)
          h3 = true;
        else
          switch (k2) {
            case "string":
            case "number":
              h3 = true;
              break;
            case "object":
              switch (a3.$$typeof) {
                case l3:
                case n3:
                  h3 = true;
              }
          }
        if (h3)
          return h3 = a3, c3 = c3(h3), a3 = "" === d3 ? "." + Q(h3, 0) : d3, I(c3) ? (e2 = "", null != a3 && (e2 = a3.replace(P2, "$&/") + "/"), R3(c3, b3, e2, "", function(a4) {
            return a4;
          })) : null != c3 && (O2(c3) && (c3 = N2(c3, e2 + (!c3.key || h3 && h3.key === c3.key ? "" : ("" + c3.key).replace(P2, "$&/") + "/") + a3)), b3.push(c3)), 1;
        h3 = 0;
        d3 = "" === d3 ? "." : d3 + ":";
        if (I(a3))
          for (var g3 = 0; g3 < a3.length; g3++) {
            k2 = a3[g3];
            var f3 = d3 + Q(k2, g3);
            h3 += R3(k2, b3, e2, f3, c3);
          }
        else if (f3 = A2(a3), "function" === typeof f3)
          for (a3 = f3.call(a3), g3 = 0; !(k2 = a3.next()).done; )
            k2 = k2.value, f3 = d3 + Q(k2, g3++), h3 += R3(k2, b3, e2, f3, c3);
        else if ("object" === k2)
          throw b3 = String(a3), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b3 ? "object with keys {" + Object.keys(a3).join(", ") + "}" : b3) + "). If you meant to render a collection of children, use an array instead.");
        return h3;
      }
      function S2(a3, b3, e2) {
        if (null == a3)
          return a3;
        var d3 = [], c3 = 0;
        R3(a3, d3, "", "", function(a4) {
          return b3.call(e2, a4, c3++);
        });
        return d3;
      }
      function T3(a3) {
        if (-1 === a3._status) {
          var b3 = a3._result;
          b3 = b3();
          b3.then(function(b4) {
            if (0 === a3._status || -1 === a3._status)
              a3._status = 1, a3._result = b4;
          }, function(b4) {
            if (0 === a3._status || -1 === a3._status)
              a3._status = 2, a3._result = b4;
          });
          -1 === a3._status && (a3._status = 0, a3._result = b3);
        }
        if (1 === a3._status)
          return a3._result.default;
        throw a3._result;
      }
      var U = { current: null };
      var V2 = { transition: null };
      var W2 = { ReactCurrentDispatcher: U, ReactCurrentBatchConfig: V2, ReactCurrentOwner: K };
      exports.Children = { map: S2, forEach: function(a3, b3, e2) {
        S2(a3, function() {
          b3.apply(this, arguments);
        }, e2);
      }, count: function(a3) {
        var b3 = 0;
        S2(a3, function() {
          b3++;
        });
        return b3;
      }, toArray: function(a3) {
        return S2(a3, function(a4) {
          return a4;
        }) || [];
      }, only: function(a3) {
        if (!O2(a3))
          throw Error("React.Children.only expected to receive a single React element child.");
        return a3;
      } };
      exports.Component = E3;
      exports.Fragment = p3;
      exports.Profiler = r3;
      exports.PureComponent = G;
      exports.StrictMode = q;
      exports.Suspense = w3;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W2;
      exports.cloneElement = function(a3, b3, e2) {
        if (null === a3 || void 0 === a3)
          throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a3 + ".");
        var d3 = C2({}, a3.props), c3 = a3.key, k2 = a3.ref, h3 = a3._owner;
        if (null != b3) {
          void 0 !== b3.ref && (k2 = b3.ref, h3 = K.current);
          void 0 !== b3.key && (c3 = "" + b3.key);
          if (a3.type && a3.type.defaultProps)
            var g3 = a3.type.defaultProps;
          for (f3 in b3)
            J.call(b3, f3) && !L3.hasOwnProperty(f3) && (d3[f3] = void 0 === b3[f3] && void 0 !== g3 ? g3[f3] : b3[f3]);
        }
        var f3 = arguments.length - 2;
        if (1 === f3)
          d3.children = e2;
        else if (1 < f3) {
          g3 = Array(f3);
          for (var m3 = 0; m3 < f3; m3++)
            g3[m3] = arguments[m3 + 2];
          d3.children = g3;
        }
        return { $$typeof: l3, type: a3.type, key: c3, ref: k2, props: d3, _owner: h3 };
      };
      exports.createContext = function(a3) {
        a3 = { $$typeof: u3, _currentValue: a3, _currentValue2: a3, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
        a3.Provider = { $$typeof: t4, _context: a3 };
        return a3.Consumer = a3;
      };
      exports.createElement = M;
      exports.createFactory = function(a3) {
        var b3 = M.bind(null, a3);
        b3.type = a3;
        return b3;
      };
      exports.createRef = function() {
        return { current: null };
      };
      exports.forwardRef = function(a3) {
        return { $$typeof: v3, render: a3 };
      };
      exports.isValidElement = O2;
      exports.lazy = function(a3) {
        return { $$typeof: y3, _payload: { _status: -1, _result: a3 }, _init: T3 };
      };
      exports.memo = function(a3, b3) {
        return { $$typeof: x3, type: a3, compare: void 0 === b3 ? null : b3 };
      };
      exports.startTransition = function(a3) {
        var b3 = V2.transition;
        V2.transition = {};
        try {
          a3();
        } finally {
          V2.transition = b3;
        }
      };
      exports.unstable_act = function() {
        throw Error("act(...) is not supported in production builds of React.");
      };
      exports.useCallback = function(a3, b3) {
        return U.current.useCallback(a3, b3);
      };
      exports.useContext = function(a3) {
        return U.current.useContext(a3);
      };
      exports.useDebugValue = function() {
      };
      exports.useDeferredValue = function(a3) {
        return U.current.useDeferredValue(a3);
      };
      exports.useEffect = function(a3, b3) {
        return U.current.useEffect(a3, b3);
      };
      exports.useId = function() {
        return U.current.useId();
      };
      exports.useImperativeHandle = function(a3, b3, e2) {
        return U.current.useImperativeHandle(a3, b3, e2);
      };
      exports.useInsertionEffect = function(a3, b3) {
        return U.current.useInsertionEffect(a3, b3);
      };
      exports.useLayoutEffect = function(a3, b3) {
        return U.current.useLayoutEffect(a3, b3);
      };
      exports.useMemo = function(a3, b3) {
        return U.current.useMemo(a3, b3);
      };
      exports.useReducer = function(a3, b3, e2) {
        return U.current.useReducer(a3, b3, e2);
      };
      exports.useRef = function(a3) {
        return U.current.useRef(a3);
      };
      exports.useState = function(a3) {
        return U.current.useState(a3);
      };
      exports.useSyncExternalStore = function(a3, b3, e2) {
        return U.current.useSyncExternalStore(a3, b3, e2);
      };
      exports.useTransition = function() {
        return U.current.useTransition();
      };
      exports.version = "18.2.0";
    }
  });

  // ../../../node_modules/react/index.js
  var require_react = __commonJS({
    "../../../node_modules/react/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // ../../../node_modules/scheduler/cjs/scheduler.production.min.js
  var require_scheduler_production_min = __commonJS({
    "../../../node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
      "use strict";
      function f3(a3, b3) {
        var c3 = a3.length;
        a3.push(b3);
        a:
          for (; 0 < c3; ) {
            var d3 = c3 - 1 >>> 1, e2 = a3[d3];
            if (0 < g3(e2, b3))
              a3[d3] = b3, a3[c3] = e2, c3 = d3;
            else
              break a;
          }
      }
      function h3(a3) {
        return 0 === a3.length ? null : a3[0];
      }
      function k2(a3) {
        if (0 === a3.length)
          return null;
        var b3 = a3[0], c3 = a3.pop();
        if (c3 !== b3) {
          a3[0] = c3;
          a:
            for (var d3 = 0, e2 = a3.length, w3 = e2 >>> 1; d3 < w3; ) {
              var m3 = 2 * (d3 + 1) - 1, C2 = a3[m3], n3 = m3 + 1, x3 = a3[n3];
              if (0 > g3(C2, c3))
                n3 < e2 && 0 > g3(x3, C2) ? (a3[d3] = x3, a3[n3] = c3, d3 = n3) : (a3[d3] = C2, a3[m3] = c3, d3 = m3);
              else if (n3 < e2 && 0 > g3(x3, c3))
                a3[d3] = x3, a3[n3] = c3, d3 = n3;
              else
                break a;
            }
        }
        return b3;
      }
      function g3(a3, b3) {
        var c3 = a3.sortIndex - b3.sortIndex;
        return 0 !== c3 ? c3 : a3.id - b3.id;
      }
      if ("object" === typeof performance && "function" === typeof performance.now) {
        l3 = performance;
        exports.unstable_now = function() {
          return l3.now();
        };
      } else {
        p3 = Date, q = p3.now();
        exports.unstable_now = function() {
          return p3.now() - q;
        };
      }
      var l3;
      var p3;
      var q;
      var r3 = [];
      var t4 = [];
      var u3 = 1;
      var v3 = null;
      var y3 = 3;
      var z2 = false;
      var A2 = false;
      var B = false;
      var D3 = "function" === typeof setTimeout ? setTimeout : null;
      var E3 = "function" === typeof clearTimeout ? clearTimeout : null;
      var F = "undefined" !== typeof setImmediate ? setImmediate : null;
      "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function G(a3) {
        for (var b3 = h3(t4); null !== b3; ) {
          if (null === b3.callback)
            k2(t4);
          else if (b3.startTime <= a3)
            k2(t4), b3.sortIndex = b3.expirationTime, f3(r3, b3);
          else
            break;
          b3 = h3(t4);
        }
      }
      function H2(a3) {
        B = false;
        G(a3);
        if (!A2)
          if (null !== h3(r3))
            A2 = true, I(J);
          else {
            var b3 = h3(t4);
            null !== b3 && K(H2, b3.startTime - a3);
          }
      }
      function J(a3, b3) {
        A2 = false;
        B && (B = false, E3(L3), L3 = -1);
        z2 = true;
        var c3 = y3;
        try {
          G(b3);
          for (v3 = h3(r3); null !== v3 && (!(v3.expirationTime > b3) || a3 && !M()); ) {
            var d3 = v3.callback;
            if ("function" === typeof d3) {
              v3.callback = null;
              y3 = v3.priorityLevel;
              var e2 = d3(v3.expirationTime <= b3);
              b3 = exports.unstable_now();
              "function" === typeof e2 ? v3.callback = e2 : v3 === h3(r3) && k2(r3);
              G(b3);
            } else
              k2(r3);
            v3 = h3(r3);
          }
          if (null !== v3)
            var w3 = true;
          else {
            var m3 = h3(t4);
            null !== m3 && K(H2, m3.startTime - b3);
            w3 = false;
          }
          return w3;
        } finally {
          v3 = null, y3 = c3, z2 = false;
        }
      }
      var N2 = false;
      var O2 = null;
      var L3 = -1;
      var P2 = 5;
      var Q = -1;
      function M() {
        return exports.unstable_now() - Q < P2 ? false : true;
      }
      function R3() {
        if (null !== O2) {
          var a3 = exports.unstable_now();
          Q = a3;
          var b3 = true;
          try {
            b3 = O2(true, a3);
          } finally {
            b3 ? S2() : (N2 = false, O2 = null);
          }
        } else
          N2 = false;
      }
      var S2;
      if ("function" === typeof F)
        S2 = function() {
          F(R3);
        };
      else if ("undefined" !== typeof MessageChannel) {
        T3 = new MessageChannel(), U = T3.port2;
        T3.port1.onmessage = R3;
        S2 = function() {
          U.postMessage(null);
        };
      } else
        S2 = function() {
          D3(R3, 0);
        };
      var T3;
      var U;
      function I(a3) {
        O2 = a3;
        N2 || (N2 = true, S2());
      }
      function K(a3, b3) {
        L3 = D3(function() {
          a3(exports.unstable_now());
        }, b3);
      }
      exports.unstable_IdlePriority = 5;
      exports.unstable_ImmediatePriority = 1;
      exports.unstable_LowPriority = 4;
      exports.unstable_NormalPriority = 3;
      exports.unstable_Profiling = null;
      exports.unstable_UserBlockingPriority = 2;
      exports.unstable_cancelCallback = function(a3) {
        a3.callback = null;
      };
      exports.unstable_continueExecution = function() {
        A2 || z2 || (A2 = true, I(J));
      };
      exports.unstable_forceFrameRate = function(a3) {
        0 > a3 || 125 < a3 ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a3 ? Math.floor(1e3 / a3) : 5;
      };
      exports.unstable_getCurrentPriorityLevel = function() {
        return y3;
      };
      exports.unstable_getFirstCallbackNode = function() {
        return h3(r3);
      };
      exports.unstable_next = function(a3) {
        switch (y3) {
          case 1:
          case 2:
          case 3:
            var b3 = 3;
            break;
          default:
            b3 = y3;
        }
        var c3 = y3;
        y3 = b3;
        try {
          return a3();
        } finally {
          y3 = c3;
        }
      };
      exports.unstable_pauseExecution = function() {
      };
      exports.unstable_requestPaint = function() {
      };
      exports.unstable_runWithPriority = function(a3, b3) {
        switch (a3) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a3 = 3;
        }
        var c3 = y3;
        y3 = a3;
        try {
          return b3();
        } finally {
          y3 = c3;
        }
      };
      exports.unstable_scheduleCallback = function(a3, b3, c3) {
        var d3 = exports.unstable_now();
        "object" === typeof c3 && null !== c3 ? (c3 = c3.delay, c3 = "number" === typeof c3 && 0 < c3 ? d3 + c3 : d3) : c3 = d3;
        switch (a3) {
          case 1:
            var e2 = -1;
            break;
          case 2:
            e2 = 250;
            break;
          case 5:
            e2 = 1073741823;
            break;
          case 4:
            e2 = 1e4;
            break;
          default:
            e2 = 5e3;
        }
        e2 = c3 + e2;
        a3 = { id: u3++, callback: b3, priorityLevel: a3, startTime: c3, expirationTime: e2, sortIndex: -1 };
        c3 > d3 ? (a3.sortIndex = c3, f3(t4, a3), null === h3(r3) && a3 === h3(t4) && (B ? (E3(L3), L3 = -1) : B = true, K(H2, c3 - d3))) : (a3.sortIndex = e2, f3(r3, a3), A2 || z2 || (A2 = true, I(J)));
        return a3;
      };
      exports.unstable_shouldYield = M;
      exports.unstable_wrapCallback = function(a3) {
        var b3 = y3;
        return function() {
          var c3 = y3;
          y3 = b3;
          try {
            return a3.apply(this, arguments);
          } finally {
            y3 = c3;
          }
        };
      };
    }
  });

  // ../../../node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../../../node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_scheduler_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // ../../../node_modules/react-dom/cjs/react-dom.production.min.js
  var require_react_dom_production_min = __commonJS({
    "../../../node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
      "use strict";
      var aa = require_react();
      var ca = require_scheduler();
      function p3(a3) {
        for (var b3 = "https://reactjs.org/docs/error-decoder.html?invariant=" + a3, c3 = 1; c3 < arguments.length; c3++)
          b3 += "&args[]=" + encodeURIComponent(arguments[c3]);
        return "Minified React error #" + a3 + "; visit " + b3 + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      var da = /* @__PURE__ */ new Set();
      var ea = {};
      function fa(a3, b3) {
        ha(a3, b3);
        ha(a3 + "Capture", b3);
      }
      function ha(a3, b3) {
        ea[a3] = b3;
        for (a3 = 0; a3 < b3.length; a3++)
          da.add(b3[a3]);
      }
      var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
      var ja = Object.prototype.hasOwnProperty;
      var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
      var la = {};
      var ma = {};
      function oa(a3) {
        if (ja.call(ma, a3))
          return true;
        if (ja.call(la, a3))
          return false;
        if (ka.test(a3))
          return ma[a3] = true;
        la[a3] = true;
        return false;
      }
      function pa(a3, b3, c3, d3) {
        if (null !== c3 && 0 === c3.type)
          return false;
        switch (typeof b3) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            if (d3)
              return false;
            if (null !== c3)
              return !c3.acceptsBooleans;
            a3 = a3.toLowerCase().slice(0, 5);
            return "data-" !== a3 && "aria-" !== a3;
          default:
            return false;
        }
      }
      function qa(a3, b3, c3, d3) {
        if (null === b3 || "undefined" === typeof b3 || pa(a3, b3, c3, d3))
          return true;
        if (d3)
          return false;
        if (null !== c3)
          switch (c3.type) {
            case 3:
              return !b3;
            case 4:
              return false === b3;
            case 5:
              return isNaN(b3);
            case 6:
              return isNaN(b3) || 1 > b3;
          }
        return false;
      }
      function v3(a3, b3, c3, d3, e2, f3, g3) {
        this.acceptsBooleans = 2 === b3 || 3 === b3 || 4 === b3;
        this.attributeName = d3;
        this.attributeNamespace = e2;
        this.mustUseProperty = c3;
        this.propertyName = a3;
        this.type = b3;
        this.sanitizeURL = f3;
        this.removeEmptyString = g3;
      }
      var z2 = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a3) {
        z2[a3] = new v3(a3, 0, false, a3, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a3) {
        var b3 = a3[0];
        z2[b3] = new v3(b3, 1, false, a3[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a3) {
        z2[a3] = new v3(a3, 2, false, a3.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a3) {
        z2[a3] = new v3(a3, 2, false, a3, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a3) {
        z2[a3] = new v3(a3, 3, false, a3.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(a3) {
        z2[a3] = new v3(a3, 3, true, a3, null, false, false);
      });
      ["capture", "download"].forEach(function(a3) {
        z2[a3] = new v3(a3, 4, false, a3, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(a3) {
        z2[a3] = new v3(a3, 6, false, a3, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(a3) {
        z2[a3] = new v3(a3, 5, false, a3.toLowerCase(), null, false, false);
      });
      var ra = /[\-:]([a-z])/g;
      function sa(a3) {
        return a3[1].toUpperCase();
      }
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a3) {
        var b3 = a3.replace(
          ra,
          sa
        );
        z2[b3] = new v3(b3, 1, false, a3, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a3) {
        var b3 = a3.replace(ra, sa);
        z2[b3] = new v3(b3, 1, false, a3, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(a3) {
        var b3 = a3.replace(ra, sa);
        z2[b3] = new v3(b3, 1, false, a3, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(a3) {
        z2[a3] = new v3(a3, 1, false, a3.toLowerCase(), null, false, false);
      });
      z2.xlinkHref = new v3("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(a3) {
        z2[a3] = new v3(a3, 1, false, a3.toLowerCase(), null, true, true);
      });
      function ta(a3, b3, c3, d3) {
        var e2 = z2.hasOwnProperty(b3) ? z2[b3] : null;
        if (null !== e2 ? 0 !== e2.type : d3 || !(2 < b3.length) || "o" !== b3[0] && "O" !== b3[0] || "n" !== b3[1] && "N" !== b3[1])
          qa(b3, c3, e2, d3) && (c3 = null), d3 || null === e2 ? oa(b3) && (null === c3 ? a3.removeAttribute(b3) : a3.setAttribute(b3, "" + c3)) : e2.mustUseProperty ? a3[e2.propertyName] = null === c3 ? 3 === e2.type ? false : "" : c3 : (b3 = e2.attributeName, d3 = e2.attributeNamespace, null === c3 ? a3.removeAttribute(b3) : (e2 = e2.type, c3 = 3 === e2 || 4 === e2 && true === c3 ? "" : "" + c3, d3 ? a3.setAttributeNS(d3, b3, c3) : a3.setAttribute(b3, c3)));
      }
      var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var va = Symbol.for("react.element");
      var wa = Symbol.for("react.portal");
      var ya = Symbol.for("react.fragment");
      var za = Symbol.for("react.strict_mode");
      var Aa = Symbol.for("react.profiler");
      var Ba = Symbol.for("react.provider");
      var Ca = Symbol.for("react.context");
      var Da = Symbol.for("react.forward_ref");
      var Ea = Symbol.for("react.suspense");
      var Fa = Symbol.for("react.suspense_list");
      var Ga = Symbol.for("react.memo");
      var Ha = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      Symbol.for("react.debug_trace_mode");
      var Ia = Symbol.for("react.offscreen");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.cache");
      Symbol.for("react.tracing_marker");
      var Ja = Symbol.iterator;
      function Ka(a3) {
        if (null === a3 || "object" !== typeof a3)
          return null;
        a3 = Ja && a3[Ja] || a3["@@iterator"];
        return "function" === typeof a3 ? a3 : null;
      }
      var A2 = Object.assign;
      var La;
      function Ma(a3) {
        if (void 0 === La)
          try {
            throw Error();
          } catch (c3) {
            var b3 = c3.stack.trim().match(/\n( *(at )?)/);
            La = b3 && b3[1] || "";
          }
        return "\n" + La + a3;
      }
      var Na = false;
      function Oa(a3, b3) {
        if (!a3 || Na)
          return "";
        Na = true;
        var c3 = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b3)
            if (b3 = function() {
              throw Error();
            }, Object.defineProperty(b3.prototype, "props", { set: function() {
              throw Error();
            } }), "object" === typeof Reflect && Reflect.construct) {
              try {
                Reflect.construct(b3, []);
              } catch (l3) {
                var d3 = l3;
              }
              Reflect.construct(a3, [], b3);
            } else {
              try {
                b3.call();
              } catch (l3) {
                d3 = l3;
              }
              a3.call(b3.prototype);
            }
          else {
            try {
              throw Error();
            } catch (l3) {
              d3 = l3;
            }
            a3();
          }
        } catch (l3) {
          if (l3 && d3 && "string" === typeof l3.stack) {
            for (var e2 = l3.stack.split("\n"), f3 = d3.stack.split("\n"), g3 = e2.length - 1, h3 = f3.length - 1; 1 <= g3 && 0 <= h3 && e2[g3] !== f3[h3]; )
              h3--;
            for (; 1 <= g3 && 0 <= h3; g3--, h3--)
              if (e2[g3] !== f3[h3]) {
                if (1 !== g3 || 1 !== h3) {
                  do
                    if (g3--, h3--, 0 > h3 || e2[g3] !== f3[h3]) {
                      var k2 = "\n" + e2[g3].replace(" at new ", " at ");
                      a3.displayName && k2.includes("<anonymous>") && (k2 = k2.replace("<anonymous>", a3.displayName));
                      return k2;
                    }
                  while (1 <= g3 && 0 <= h3);
                }
                break;
              }
          }
        } finally {
          Na = false, Error.prepareStackTrace = c3;
        }
        return (a3 = a3 ? a3.displayName || a3.name : "") ? Ma(a3) : "";
      }
      function Pa(a3) {
        switch (a3.tag) {
          case 5:
            return Ma(a3.type);
          case 16:
            return Ma("Lazy");
          case 13:
            return Ma("Suspense");
          case 19:
            return Ma("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a3 = Oa(a3.type, false), a3;
          case 11:
            return a3 = Oa(a3.type.render, false), a3;
          case 1:
            return a3 = Oa(a3.type, true), a3;
          default:
            return "";
        }
      }
      function Qa(a3) {
        if (null == a3)
          return null;
        if ("function" === typeof a3)
          return a3.displayName || a3.name || null;
        if ("string" === typeof a3)
          return a3;
        switch (a3) {
          case ya:
            return "Fragment";
          case wa:
            return "Portal";
          case Aa:
            return "Profiler";
          case za:
            return "StrictMode";
          case Ea:
            return "Suspense";
          case Fa:
            return "SuspenseList";
        }
        if ("object" === typeof a3)
          switch (a3.$$typeof) {
            case Ca:
              return (a3.displayName || "Context") + ".Consumer";
            case Ba:
              return (a3._context.displayName || "Context") + ".Provider";
            case Da:
              var b3 = a3.render;
              a3 = a3.displayName;
              a3 || (a3 = b3.displayName || b3.name || "", a3 = "" !== a3 ? "ForwardRef(" + a3 + ")" : "ForwardRef");
              return a3;
            case Ga:
              return b3 = a3.displayName || null, null !== b3 ? b3 : Qa(a3.type) || "Memo";
            case Ha:
              b3 = a3._payload;
              a3 = a3._init;
              try {
                return Qa(a3(b3));
              } catch (c3) {
              }
          }
        return null;
      }
      function Ra(a3) {
        var b3 = a3.type;
        switch (a3.tag) {
          case 24:
            return "Cache";
          case 9:
            return (b3.displayName || "Context") + ".Consumer";
          case 10:
            return (b3._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return a3 = b3.render, a3 = a3.displayName || a3.name || "", b3.displayName || ("" !== a3 ? "ForwardRef(" + a3 + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 5:
            return b3;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return Qa(b3);
          case 8:
            return b3 === za ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if ("function" === typeof b3)
              return b3.displayName || b3.name || null;
            if ("string" === typeof b3)
              return b3;
        }
        return null;
      }
      function Sa(a3) {
        switch (typeof a3) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return a3;
          case "object":
            return a3;
          default:
            return "";
        }
      }
      function Ta(a3) {
        var b3 = a3.type;
        return (a3 = a3.nodeName) && "input" === a3.toLowerCase() && ("checkbox" === b3 || "radio" === b3);
      }
      function Ua(a3) {
        var b3 = Ta(a3) ? "checked" : "value", c3 = Object.getOwnPropertyDescriptor(a3.constructor.prototype, b3), d3 = "" + a3[b3];
        if (!a3.hasOwnProperty(b3) && "undefined" !== typeof c3 && "function" === typeof c3.get && "function" === typeof c3.set) {
          var e2 = c3.get, f3 = c3.set;
          Object.defineProperty(a3, b3, { configurable: true, get: function() {
            return e2.call(this);
          }, set: function(a4) {
            d3 = "" + a4;
            f3.call(this, a4);
          } });
          Object.defineProperty(a3, b3, { enumerable: c3.enumerable });
          return { getValue: function() {
            return d3;
          }, setValue: function(a4) {
            d3 = "" + a4;
          }, stopTracking: function() {
            a3._valueTracker = null;
            delete a3[b3];
          } };
        }
      }
      function Va(a3) {
        a3._valueTracker || (a3._valueTracker = Ua(a3));
      }
      function Wa(a3) {
        if (!a3)
          return false;
        var b3 = a3._valueTracker;
        if (!b3)
          return true;
        var c3 = b3.getValue();
        var d3 = "";
        a3 && (d3 = Ta(a3) ? a3.checked ? "true" : "false" : a3.value);
        a3 = d3;
        return a3 !== c3 ? (b3.setValue(a3), true) : false;
      }
      function Xa(a3) {
        a3 = a3 || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof a3)
          return null;
        try {
          return a3.activeElement || a3.body;
        } catch (b3) {
          return a3.body;
        }
      }
      function Ya(a3, b3) {
        var c3 = b3.checked;
        return A2({}, b3, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c3 ? c3 : a3._wrapperState.initialChecked });
      }
      function Za(a3, b3) {
        var c3 = null == b3.defaultValue ? "" : b3.defaultValue, d3 = null != b3.checked ? b3.checked : b3.defaultChecked;
        c3 = Sa(null != b3.value ? b3.value : c3);
        a3._wrapperState = { initialChecked: d3, initialValue: c3, controlled: "checkbox" === b3.type || "radio" === b3.type ? null != b3.checked : null != b3.value };
      }
      function ab(a3, b3) {
        b3 = b3.checked;
        null != b3 && ta(a3, "checked", b3, false);
      }
      function bb(a3, b3) {
        ab(a3, b3);
        var c3 = Sa(b3.value), d3 = b3.type;
        if (null != c3)
          if ("number" === d3) {
            if (0 === c3 && "" === a3.value || a3.value != c3)
              a3.value = "" + c3;
          } else
            a3.value !== "" + c3 && (a3.value = "" + c3);
        else if ("submit" === d3 || "reset" === d3) {
          a3.removeAttribute("value");
          return;
        }
        b3.hasOwnProperty("value") ? cb(a3, b3.type, c3) : b3.hasOwnProperty("defaultValue") && cb(a3, b3.type, Sa(b3.defaultValue));
        null == b3.checked && null != b3.defaultChecked && (a3.defaultChecked = !!b3.defaultChecked);
      }
      function db(a3, b3, c3) {
        if (b3.hasOwnProperty("value") || b3.hasOwnProperty("defaultValue")) {
          var d3 = b3.type;
          if (!("submit" !== d3 && "reset" !== d3 || void 0 !== b3.value && null !== b3.value))
            return;
          b3 = "" + a3._wrapperState.initialValue;
          c3 || b3 === a3.value || (a3.value = b3);
          a3.defaultValue = b3;
        }
        c3 = a3.name;
        "" !== c3 && (a3.name = "");
        a3.defaultChecked = !!a3._wrapperState.initialChecked;
        "" !== c3 && (a3.name = c3);
      }
      function cb(a3, b3, c3) {
        if ("number" !== b3 || Xa(a3.ownerDocument) !== a3)
          null == c3 ? a3.defaultValue = "" + a3._wrapperState.initialValue : a3.defaultValue !== "" + c3 && (a3.defaultValue = "" + c3);
      }
      var eb = Array.isArray;
      function fb(a3, b3, c3, d3) {
        a3 = a3.options;
        if (b3) {
          b3 = {};
          for (var e2 = 0; e2 < c3.length; e2++)
            b3["$" + c3[e2]] = true;
          for (c3 = 0; c3 < a3.length; c3++)
            e2 = b3.hasOwnProperty("$" + a3[c3].value), a3[c3].selected !== e2 && (a3[c3].selected = e2), e2 && d3 && (a3[c3].defaultSelected = true);
        } else {
          c3 = "" + Sa(c3);
          b3 = null;
          for (e2 = 0; e2 < a3.length; e2++) {
            if (a3[e2].value === c3) {
              a3[e2].selected = true;
              d3 && (a3[e2].defaultSelected = true);
              return;
            }
            null !== b3 || a3[e2].disabled || (b3 = a3[e2]);
          }
          null !== b3 && (b3.selected = true);
        }
      }
      function gb(a3, b3) {
        if (null != b3.dangerouslySetInnerHTML)
          throw Error(p3(91));
        return A2({}, b3, { value: void 0, defaultValue: void 0, children: "" + a3._wrapperState.initialValue });
      }
      function hb(a3, b3) {
        var c3 = b3.value;
        if (null == c3) {
          c3 = b3.children;
          b3 = b3.defaultValue;
          if (null != c3) {
            if (null != b3)
              throw Error(p3(92));
            if (eb(c3)) {
              if (1 < c3.length)
                throw Error(p3(93));
              c3 = c3[0];
            }
            b3 = c3;
          }
          null == b3 && (b3 = "");
          c3 = b3;
        }
        a3._wrapperState = { initialValue: Sa(c3) };
      }
      function ib(a3, b3) {
        var c3 = Sa(b3.value), d3 = Sa(b3.defaultValue);
        null != c3 && (c3 = "" + c3, c3 !== a3.value && (a3.value = c3), null == b3.defaultValue && a3.defaultValue !== c3 && (a3.defaultValue = c3));
        null != d3 && (a3.defaultValue = "" + d3);
      }
      function jb(a3) {
        var b3 = a3.textContent;
        b3 === a3._wrapperState.initialValue && "" !== b3 && null !== b3 && (a3.value = b3);
      }
      function kb(a3) {
        switch (a3) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      function lb(a3, b3) {
        return null == a3 || "http://www.w3.org/1999/xhtml" === a3 ? kb(b3) : "http://www.w3.org/2000/svg" === a3 && "foreignObject" === b3 ? "http://www.w3.org/1999/xhtml" : a3;
      }
      var mb;
      var nb = function(a3) {
        return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b3, c3, d3, e2) {
          MSApp.execUnsafeLocalFunction(function() {
            return a3(b3, c3, d3, e2);
          });
        } : a3;
      }(function(a3, b3) {
        if ("http://www.w3.org/2000/svg" !== a3.namespaceURI || "innerHTML" in a3)
          a3.innerHTML = b3;
        else {
          mb = mb || document.createElement("div");
          mb.innerHTML = "<svg>" + b3.valueOf().toString() + "</svg>";
          for (b3 = mb.firstChild; a3.firstChild; )
            a3.removeChild(a3.firstChild);
          for (; b3.firstChild; )
            a3.appendChild(b3.firstChild);
        }
      });
      function ob(a3, b3) {
        if (b3) {
          var c3 = a3.firstChild;
          if (c3 && c3 === a3.lastChild && 3 === c3.nodeType) {
            c3.nodeValue = b3;
            return;
          }
        }
        a3.textContent = b3;
      }
      var pb = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      var qb = ["Webkit", "ms", "Moz", "O"];
      Object.keys(pb).forEach(function(a3) {
        qb.forEach(function(b3) {
          b3 = b3 + a3.charAt(0).toUpperCase() + a3.substring(1);
          pb[b3] = pb[a3];
        });
      });
      function rb(a3, b3, c3) {
        return null == b3 || "boolean" === typeof b3 || "" === b3 ? "" : c3 || "number" !== typeof b3 || 0 === b3 || pb.hasOwnProperty(a3) && pb[a3] ? ("" + b3).trim() : b3 + "px";
      }
      function sb(a3, b3) {
        a3 = a3.style;
        for (var c3 in b3)
          if (b3.hasOwnProperty(c3)) {
            var d3 = 0 === c3.indexOf("--"), e2 = rb(c3, b3[c3], d3);
            "float" === c3 && (c3 = "cssFloat");
            d3 ? a3.setProperty(c3, e2) : a3[c3] = e2;
          }
      }
      var tb = A2({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
      function ub(a3, b3) {
        if (b3) {
          if (tb[a3] && (null != b3.children || null != b3.dangerouslySetInnerHTML))
            throw Error(p3(137, a3));
          if (null != b3.dangerouslySetInnerHTML) {
            if (null != b3.children)
              throw Error(p3(60));
            if ("object" !== typeof b3.dangerouslySetInnerHTML || !("__html" in b3.dangerouslySetInnerHTML))
              throw Error(p3(61));
          }
          if (null != b3.style && "object" !== typeof b3.style)
            throw Error(p3(62));
        }
      }
      function vb(a3, b3) {
        if (-1 === a3.indexOf("-"))
          return "string" === typeof b3.is;
        switch (a3) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var wb = null;
      function xb(a3) {
        a3 = a3.target || a3.srcElement || window;
        a3.correspondingUseElement && (a3 = a3.correspondingUseElement);
        return 3 === a3.nodeType ? a3.parentNode : a3;
      }
      var yb = null;
      var zb = null;
      var Ab = null;
      function Bb(a3) {
        if (a3 = Cb(a3)) {
          if ("function" !== typeof yb)
            throw Error(p3(280));
          var b3 = a3.stateNode;
          b3 && (b3 = Db(b3), yb(a3.stateNode, a3.type, b3));
        }
      }
      function Eb(a3) {
        zb ? Ab ? Ab.push(a3) : Ab = [a3] : zb = a3;
      }
      function Fb() {
        if (zb) {
          var a3 = zb, b3 = Ab;
          Ab = zb = null;
          Bb(a3);
          if (b3)
            for (a3 = 0; a3 < b3.length; a3++)
              Bb(b3[a3]);
        }
      }
      function Gb(a3, b3) {
        return a3(b3);
      }
      function Hb() {
      }
      var Ib = false;
      function Jb(a3, b3, c3) {
        if (Ib)
          return a3(b3, c3);
        Ib = true;
        try {
          return Gb(a3, b3, c3);
        } finally {
          if (Ib = false, null !== zb || null !== Ab)
            Hb(), Fb();
        }
      }
      function Kb(a3, b3) {
        var c3 = a3.stateNode;
        if (null === c3)
          return null;
        var d3 = Db(c3);
        if (null === d3)
          return null;
        c3 = d3[b3];
        a:
          switch (b3) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              (d3 = !d3.disabled) || (a3 = a3.type, d3 = !("button" === a3 || "input" === a3 || "select" === a3 || "textarea" === a3));
              a3 = !d3;
              break a;
            default:
              a3 = false;
          }
        if (a3)
          return null;
        if (c3 && "function" !== typeof c3)
          throw Error(p3(231, b3, typeof c3));
        return c3;
      }
      var Lb = false;
      if (ia)
        try {
          Mb = {};
          Object.defineProperty(Mb, "passive", { get: function() {
            Lb = true;
          } });
          window.addEventListener("test", Mb, Mb);
          window.removeEventListener("test", Mb, Mb);
        } catch (a3) {
          Lb = false;
        }
      var Mb;
      function Nb(a3, b3, c3, d3, e2, f3, g3, h3, k2) {
        var l3 = Array.prototype.slice.call(arguments, 3);
        try {
          b3.apply(c3, l3);
        } catch (m3) {
          this.onError(m3);
        }
      }
      var Ob = false;
      var Pb = null;
      var Qb = false;
      var Rb = null;
      var Sb = { onError: function(a3) {
        Ob = true;
        Pb = a3;
      } };
      function Tb(a3, b3, c3, d3, e2, f3, g3, h3, k2) {
        Ob = false;
        Pb = null;
        Nb.apply(Sb, arguments);
      }
      function Ub(a3, b3, c3, d3, e2, f3, g3, h3, k2) {
        Tb.apply(this, arguments);
        if (Ob) {
          if (Ob) {
            var l3 = Pb;
            Ob = false;
            Pb = null;
          } else
            throw Error(p3(198));
          Qb || (Qb = true, Rb = l3);
        }
      }
      function Vb(a3) {
        var b3 = a3, c3 = a3;
        if (a3.alternate)
          for (; b3.return; )
            b3 = b3.return;
        else {
          a3 = b3;
          do
            b3 = a3, 0 !== (b3.flags & 4098) && (c3 = b3.return), a3 = b3.return;
          while (a3);
        }
        return 3 === b3.tag ? c3 : null;
      }
      function Wb(a3) {
        if (13 === a3.tag) {
          var b3 = a3.memoizedState;
          null === b3 && (a3 = a3.alternate, null !== a3 && (b3 = a3.memoizedState));
          if (null !== b3)
            return b3.dehydrated;
        }
        return null;
      }
      function Xb(a3) {
        if (Vb(a3) !== a3)
          throw Error(p3(188));
      }
      function Yb(a3) {
        var b3 = a3.alternate;
        if (!b3) {
          b3 = Vb(a3);
          if (null === b3)
            throw Error(p3(188));
          return b3 !== a3 ? null : a3;
        }
        for (var c3 = a3, d3 = b3; ; ) {
          var e2 = c3.return;
          if (null === e2)
            break;
          var f3 = e2.alternate;
          if (null === f3) {
            d3 = e2.return;
            if (null !== d3) {
              c3 = d3;
              continue;
            }
            break;
          }
          if (e2.child === f3.child) {
            for (f3 = e2.child; f3; ) {
              if (f3 === c3)
                return Xb(e2), a3;
              if (f3 === d3)
                return Xb(e2), b3;
              f3 = f3.sibling;
            }
            throw Error(p3(188));
          }
          if (c3.return !== d3.return)
            c3 = e2, d3 = f3;
          else {
            for (var g3 = false, h3 = e2.child; h3; ) {
              if (h3 === c3) {
                g3 = true;
                c3 = e2;
                d3 = f3;
                break;
              }
              if (h3 === d3) {
                g3 = true;
                d3 = e2;
                c3 = f3;
                break;
              }
              h3 = h3.sibling;
            }
            if (!g3) {
              for (h3 = f3.child; h3; ) {
                if (h3 === c3) {
                  g3 = true;
                  c3 = f3;
                  d3 = e2;
                  break;
                }
                if (h3 === d3) {
                  g3 = true;
                  d3 = f3;
                  c3 = e2;
                  break;
                }
                h3 = h3.sibling;
              }
              if (!g3)
                throw Error(p3(189));
            }
          }
          if (c3.alternate !== d3)
            throw Error(p3(190));
        }
        if (3 !== c3.tag)
          throw Error(p3(188));
        return c3.stateNode.current === c3 ? a3 : b3;
      }
      function Zb(a3) {
        a3 = Yb(a3);
        return null !== a3 ? $b(a3) : null;
      }
      function $b(a3) {
        if (5 === a3.tag || 6 === a3.tag)
          return a3;
        for (a3 = a3.child; null !== a3; ) {
          var b3 = $b(a3);
          if (null !== b3)
            return b3;
          a3 = a3.sibling;
        }
        return null;
      }
      var ac = ca.unstable_scheduleCallback;
      var bc = ca.unstable_cancelCallback;
      var cc = ca.unstable_shouldYield;
      var dc = ca.unstable_requestPaint;
      var B = ca.unstable_now;
      var ec = ca.unstable_getCurrentPriorityLevel;
      var fc = ca.unstable_ImmediatePriority;
      var gc = ca.unstable_UserBlockingPriority;
      var hc = ca.unstable_NormalPriority;
      var ic = ca.unstable_LowPriority;
      var jc = ca.unstable_IdlePriority;
      var kc = null;
      var lc = null;
      function mc(a3) {
        if (lc && "function" === typeof lc.onCommitFiberRoot)
          try {
            lc.onCommitFiberRoot(kc, a3, void 0, 128 === (a3.current.flags & 128));
          } catch (b3) {
          }
      }
      var oc = Math.clz32 ? Math.clz32 : nc;
      var pc = Math.log;
      var qc = Math.LN2;
      function nc(a3) {
        a3 >>>= 0;
        return 0 === a3 ? 32 : 31 - (pc(a3) / qc | 0) | 0;
      }
      var rc = 64;
      var sc = 4194304;
      function tc(a3) {
        switch (a3 & -a3) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return a3 & 4194240;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return a3 & 130023424;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return a3;
        }
      }
      function uc(a3, b3) {
        var c3 = a3.pendingLanes;
        if (0 === c3)
          return 0;
        var d3 = 0, e2 = a3.suspendedLanes, f3 = a3.pingedLanes, g3 = c3 & 268435455;
        if (0 !== g3) {
          var h3 = g3 & ~e2;
          0 !== h3 ? d3 = tc(h3) : (f3 &= g3, 0 !== f3 && (d3 = tc(f3)));
        } else
          g3 = c3 & ~e2, 0 !== g3 ? d3 = tc(g3) : 0 !== f3 && (d3 = tc(f3));
        if (0 === d3)
          return 0;
        if (0 !== b3 && b3 !== d3 && 0 === (b3 & e2) && (e2 = d3 & -d3, f3 = b3 & -b3, e2 >= f3 || 16 === e2 && 0 !== (f3 & 4194240)))
          return b3;
        0 !== (d3 & 4) && (d3 |= c3 & 16);
        b3 = a3.entangledLanes;
        if (0 !== b3)
          for (a3 = a3.entanglements, b3 &= d3; 0 < b3; )
            c3 = 31 - oc(b3), e2 = 1 << c3, d3 |= a3[c3], b3 &= ~e2;
        return d3;
      }
      function vc(a3, b3) {
        switch (a3) {
          case 1:
          case 2:
          case 4:
            return b3 + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return b3 + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return -1;
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function wc(a3, b3) {
        for (var c3 = a3.suspendedLanes, d3 = a3.pingedLanes, e2 = a3.expirationTimes, f3 = a3.pendingLanes; 0 < f3; ) {
          var g3 = 31 - oc(f3), h3 = 1 << g3, k2 = e2[g3];
          if (-1 === k2) {
            if (0 === (h3 & c3) || 0 !== (h3 & d3))
              e2[g3] = vc(h3, b3);
          } else
            k2 <= b3 && (a3.expiredLanes |= h3);
          f3 &= ~h3;
        }
      }
      function xc(a3) {
        a3 = a3.pendingLanes & -1073741825;
        return 0 !== a3 ? a3 : a3 & 1073741824 ? 1073741824 : 0;
      }
      function yc() {
        var a3 = rc;
        rc <<= 1;
        0 === (rc & 4194240) && (rc = 64);
        return a3;
      }
      function zc(a3) {
        for (var b3 = [], c3 = 0; 31 > c3; c3++)
          b3.push(a3);
        return b3;
      }
      function Ac(a3, b3, c3) {
        a3.pendingLanes |= b3;
        536870912 !== b3 && (a3.suspendedLanes = 0, a3.pingedLanes = 0);
        a3 = a3.eventTimes;
        b3 = 31 - oc(b3);
        a3[b3] = c3;
      }
      function Bc(a3, b3) {
        var c3 = a3.pendingLanes & ~b3;
        a3.pendingLanes = b3;
        a3.suspendedLanes = 0;
        a3.pingedLanes = 0;
        a3.expiredLanes &= b3;
        a3.mutableReadLanes &= b3;
        a3.entangledLanes &= b3;
        b3 = a3.entanglements;
        var d3 = a3.eventTimes;
        for (a3 = a3.expirationTimes; 0 < c3; ) {
          var e2 = 31 - oc(c3), f3 = 1 << e2;
          b3[e2] = 0;
          d3[e2] = -1;
          a3[e2] = -1;
          c3 &= ~f3;
        }
      }
      function Cc(a3, b3) {
        var c3 = a3.entangledLanes |= b3;
        for (a3 = a3.entanglements; c3; ) {
          var d3 = 31 - oc(c3), e2 = 1 << d3;
          e2 & b3 | a3[d3] & b3 && (a3[d3] |= b3);
          c3 &= ~e2;
        }
      }
      var C2 = 0;
      function Dc(a3) {
        a3 &= -a3;
        return 1 < a3 ? 4 < a3 ? 0 !== (a3 & 268435455) ? 16 : 536870912 : 4 : 1;
      }
      var Ec;
      var Fc;
      var Gc;
      var Hc;
      var Ic;
      var Jc = false;
      var Kc = [];
      var Lc = null;
      var Mc = null;
      var Nc = null;
      var Oc = /* @__PURE__ */ new Map();
      var Pc = /* @__PURE__ */ new Map();
      var Qc = [];
      var Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function Sc(a3, b3) {
        switch (a3) {
          case "focusin":
          case "focusout":
            Lc = null;
            break;
          case "dragenter":
          case "dragleave":
            Mc = null;
            break;
          case "mouseover":
          case "mouseout":
            Nc = null;
            break;
          case "pointerover":
          case "pointerout":
            Oc.delete(b3.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            Pc.delete(b3.pointerId);
        }
      }
      function Tc(a3, b3, c3, d3, e2, f3) {
        if (null === a3 || a3.nativeEvent !== f3)
          return a3 = { blockedOn: b3, domEventName: c3, eventSystemFlags: d3, nativeEvent: f3, targetContainers: [e2] }, null !== b3 && (b3 = Cb(b3), null !== b3 && Fc(b3)), a3;
        a3.eventSystemFlags |= d3;
        b3 = a3.targetContainers;
        null !== e2 && -1 === b3.indexOf(e2) && b3.push(e2);
        return a3;
      }
      function Uc(a3, b3, c3, d3, e2) {
        switch (b3) {
          case "focusin":
            return Lc = Tc(Lc, a3, b3, c3, d3, e2), true;
          case "dragenter":
            return Mc = Tc(Mc, a3, b3, c3, d3, e2), true;
          case "mouseover":
            return Nc = Tc(Nc, a3, b3, c3, d3, e2), true;
          case "pointerover":
            var f3 = e2.pointerId;
            Oc.set(f3, Tc(Oc.get(f3) || null, a3, b3, c3, d3, e2));
            return true;
          case "gotpointercapture":
            return f3 = e2.pointerId, Pc.set(f3, Tc(Pc.get(f3) || null, a3, b3, c3, d3, e2)), true;
        }
        return false;
      }
      function Vc(a3) {
        var b3 = Wc(a3.target);
        if (null !== b3) {
          var c3 = Vb(b3);
          if (null !== c3) {
            if (b3 = c3.tag, 13 === b3) {
              if (b3 = Wb(c3), null !== b3) {
                a3.blockedOn = b3;
                Ic(a3.priority, function() {
                  Gc(c3);
                });
                return;
              }
            } else if (3 === b3 && c3.stateNode.current.memoizedState.isDehydrated) {
              a3.blockedOn = 3 === c3.tag ? c3.stateNode.containerInfo : null;
              return;
            }
          }
        }
        a3.blockedOn = null;
      }
      function Xc(a3) {
        if (null !== a3.blockedOn)
          return false;
        for (var b3 = a3.targetContainers; 0 < b3.length; ) {
          var c3 = Yc(a3.domEventName, a3.eventSystemFlags, b3[0], a3.nativeEvent);
          if (null === c3) {
            c3 = a3.nativeEvent;
            var d3 = new c3.constructor(c3.type, c3);
            wb = d3;
            c3.target.dispatchEvent(d3);
            wb = null;
          } else
            return b3 = Cb(c3), null !== b3 && Fc(b3), a3.blockedOn = c3, false;
          b3.shift();
        }
        return true;
      }
      function Zc(a3, b3, c3) {
        Xc(a3) && c3.delete(b3);
      }
      function $c() {
        Jc = false;
        null !== Lc && Xc(Lc) && (Lc = null);
        null !== Mc && Xc(Mc) && (Mc = null);
        null !== Nc && Xc(Nc) && (Nc = null);
        Oc.forEach(Zc);
        Pc.forEach(Zc);
      }
      function ad(a3, b3) {
        a3.blockedOn === b3 && (a3.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
      }
      function bd(a3) {
        function b3(b4) {
          return ad(b4, a3);
        }
        if (0 < Kc.length) {
          ad(Kc[0], a3);
          for (var c3 = 1; c3 < Kc.length; c3++) {
            var d3 = Kc[c3];
            d3.blockedOn === a3 && (d3.blockedOn = null);
          }
        }
        null !== Lc && ad(Lc, a3);
        null !== Mc && ad(Mc, a3);
        null !== Nc && ad(Nc, a3);
        Oc.forEach(b3);
        Pc.forEach(b3);
        for (c3 = 0; c3 < Qc.length; c3++)
          d3 = Qc[c3], d3.blockedOn === a3 && (d3.blockedOn = null);
        for (; 0 < Qc.length && (c3 = Qc[0], null === c3.blockedOn); )
          Vc(c3), null === c3.blockedOn && Qc.shift();
      }
      var cd = ua.ReactCurrentBatchConfig;
      var dd = true;
      function ed(a3, b3, c3, d3) {
        var e2 = C2, f3 = cd.transition;
        cd.transition = null;
        try {
          C2 = 1, fd(a3, b3, c3, d3);
        } finally {
          C2 = e2, cd.transition = f3;
        }
      }
      function gd(a3, b3, c3, d3) {
        var e2 = C2, f3 = cd.transition;
        cd.transition = null;
        try {
          C2 = 4, fd(a3, b3, c3, d3);
        } finally {
          C2 = e2, cd.transition = f3;
        }
      }
      function fd(a3, b3, c3, d3) {
        if (dd) {
          var e2 = Yc(a3, b3, c3, d3);
          if (null === e2)
            hd(a3, b3, d3, id, c3), Sc(a3, d3);
          else if (Uc(e2, a3, b3, c3, d3))
            d3.stopPropagation();
          else if (Sc(a3, d3), b3 & 4 && -1 < Rc.indexOf(a3)) {
            for (; null !== e2; ) {
              var f3 = Cb(e2);
              null !== f3 && Ec(f3);
              f3 = Yc(a3, b3, c3, d3);
              null === f3 && hd(a3, b3, d3, id, c3);
              if (f3 === e2)
                break;
              e2 = f3;
            }
            null !== e2 && d3.stopPropagation();
          } else
            hd(a3, b3, d3, null, c3);
        }
      }
      var id = null;
      function Yc(a3, b3, c3, d3) {
        id = null;
        a3 = xb(d3);
        a3 = Wc(a3);
        if (null !== a3)
          if (b3 = Vb(a3), null === b3)
            a3 = null;
          else if (c3 = b3.tag, 13 === c3) {
            a3 = Wb(b3);
            if (null !== a3)
              return a3;
            a3 = null;
          } else if (3 === c3) {
            if (b3.stateNode.current.memoizedState.isDehydrated)
              return 3 === b3.tag ? b3.stateNode.containerInfo : null;
            a3 = null;
          } else
            b3 !== a3 && (a3 = null);
        id = a3;
        return null;
      }
      function jd(a3) {
        switch (a3) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 1;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 4;
          case "message":
            switch (ec()) {
              case fc:
                return 1;
              case gc:
                return 4;
              case hc:
              case ic:
                return 16;
              case jc:
                return 536870912;
              default:
                return 16;
            }
          default:
            return 16;
        }
      }
      var kd = null;
      var ld = null;
      var md = null;
      function nd() {
        if (md)
          return md;
        var a3, b3 = ld, c3 = b3.length, d3, e2 = "value" in kd ? kd.value : kd.textContent, f3 = e2.length;
        for (a3 = 0; a3 < c3 && b3[a3] === e2[a3]; a3++)
          ;
        var g3 = c3 - a3;
        for (d3 = 1; d3 <= g3 && b3[c3 - d3] === e2[f3 - d3]; d3++)
          ;
        return md = e2.slice(a3, 1 < d3 ? 1 - d3 : void 0);
      }
      function od(a3) {
        var b3 = a3.keyCode;
        "charCode" in a3 ? (a3 = a3.charCode, 0 === a3 && 13 === b3 && (a3 = 13)) : a3 = b3;
        10 === a3 && (a3 = 13);
        return 32 <= a3 || 13 === a3 ? a3 : 0;
      }
      function pd() {
        return true;
      }
      function qd() {
        return false;
      }
      function rd(a3) {
        function b3(b4, d3, e2, f3, g3) {
          this._reactName = b4;
          this._targetInst = e2;
          this.type = d3;
          this.nativeEvent = f3;
          this.target = g3;
          this.currentTarget = null;
          for (var c3 in a3)
            a3.hasOwnProperty(c3) && (b4 = a3[c3], this[c3] = b4 ? b4(f3) : f3[c3]);
          this.isDefaultPrevented = (null != f3.defaultPrevented ? f3.defaultPrevented : false === f3.returnValue) ? pd : qd;
          this.isPropagationStopped = qd;
          return this;
        }
        A2(b3.prototype, { preventDefault: function() {
          this.defaultPrevented = true;
          var a4 = this.nativeEvent;
          a4 && (a4.preventDefault ? a4.preventDefault() : "unknown" !== typeof a4.returnValue && (a4.returnValue = false), this.isDefaultPrevented = pd);
        }, stopPropagation: function() {
          var a4 = this.nativeEvent;
          a4 && (a4.stopPropagation ? a4.stopPropagation() : "unknown" !== typeof a4.cancelBubble && (a4.cancelBubble = true), this.isPropagationStopped = pd);
        }, persist: function() {
        }, isPersistent: pd });
        return b3;
      }
      var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: function(a3) {
        return a3.timeStamp || Date.now();
      }, defaultPrevented: 0, isTrusted: 0 };
      var td = rd(sd);
      var ud = A2({}, sd, { view: 0, detail: 0 });
      var vd = rd(ud);
      var wd;
      var xd;
      var yd;
      var Ad = A2({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: function(a3) {
        return void 0 === a3.relatedTarget ? a3.fromElement === a3.srcElement ? a3.toElement : a3.fromElement : a3.relatedTarget;
      }, movementX: function(a3) {
        if ("movementX" in a3)
          return a3.movementX;
        a3 !== yd && (yd && "mousemove" === a3.type ? (wd = a3.screenX - yd.screenX, xd = a3.screenY - yd.screenY) : xd = wd = 0, yd = a3);
        return wd;
      }, movementY: function(a3) {
        return "movementY" in a3 ? a3.movementY : xd;
      } });
      var Bd = rd(Ad);
      var Cd = A2({}, Ad, { dataTransfer: 0 });
      var Dd = rd(Cd);
      var Ed = A2({}, ud, { relatedTarget: 0 });
      var Fd = rd(Ed);
      var Gd = A2({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Hd = rd(Gd);
      var Id = A2({}, sd, { clipboardData: function(a3) {
        return "clipboardData" in a3 ? a3.clipboardData : window.clipboardData;
      } });
      var Jd = rd(Id);
      var Kd = A2({}, sd, { data: 0 });
      var Ld = rd(Kd);
      var Md = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var Nd = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      var Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
      function Pd(a3) {
        var b3 = this.nativeEvent;
        return b3.getModifierState ? b3.getModifierState(a3) : (a3 = Od[a3]) ? !!b3[a3] : false;
      }
      function zd() {
        return Pd;
      }
      var Qd = A2({}, ud, { key: function(a3) {
        if (a3.key) {
          var b3 = Md[a3.key] || a3.key;
          if ("Unidentified" !== b3)
            return b3;
        }
        return "keypress" === a3.type ? (a3 = od(a3), 13 === a3 ? "Enter" : String.fromCharCode(a3)) : "keydown" === a3.type || "keyup" === a3.type ? Nd[a3.keyCode] || "Unidentified" : "";
      }, code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: function(a3) {
        return "keypress" === a3.type ? od(a3) : 0;
      }, keyCode: function(a3) {
        return "keydown" === a3.type || "keyup" === a3.type ? a3.keyCode : 0;
      }, which: function(a3) {
        return "keypress" === a3.type ? od(a3) : "keydown" === a3.type || "keyup" === a3.type ? a3.keyCode : 0;
      } });
      var Rd = rd(Qd);
      var Sd = A2({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
      var Td = rd(Sd);
      var Ud = A2({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd });
      var Vd = rd(Ud);
      var Wd = A2({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Xd = rd(Wd);
      var Yd = A2({}, Ad, {
        deltaX: function(a3) {
          return "deltaX" in a3 ? a3.deltaX : "wheelDeltaX" in a3 ? -a3.wheelDeltaX : 0;
        },
        deltaY: function(a3) {
          return "deltaY" in a3 ? a3.deltaY : "wheelDeltaY" in a3 ? -a3.wheelDeltaY : "wheelDelta" in a3 ? -a3.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var Zd = rd(Yd);
      var $d = [9, 13, 27, 32];
      var ae = ia && "CompositionEvent" in window;
      var be = null;
      ia && "documentMode" in document && (be = document.documentMode);
      var ce = ia && "TextEvent" in window && !be;
      var de = ia && (!ae || be && 8 < be && 11 >= be);
      var ee = String.fromCharCode(32);
      var fe = false;
      function ge(a3, b3) {
        switch (a3) {
          case "keyup":
            return -1 !== $d.indexOf(b3.keyCode);
          case "keydown":
            return 229 !== b3.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function he(a3) {
        a3 = a3.detail;
        return "object" === typeof a3 && "data" in a3 ? a3.data : null;
      }
      var ie = false;
      function je(a3, b3) {
        switch (a3) {
          case "compositionend":
            return he(b3);
          case "keypress":
            if (32 !== b3.which)
              return null;
            fe = true;
            return ee;
          case "textInput":
            return a3 = b3.data, a3 === ee && fe ? null : a3;
          default:
            return null;
        }
      }
      function ke(a3, b3) {
        if (ie)
          return "compositionend" === a3 || !ae && ge(a3, b3) ? (a3 = nd(), md = ld = kd = null, ie = false, a3) : null;
        switch (a3) {
          case "paste":
            return null;
          case "keypress":
            if (!(b3.ctrlKey || b3.altKey || b3.metaKey) || b3.ctrlKey && b3.altKey) {
              if (b3.char && 1 < b3.char.length)
                return b3.char;
              if (b3.which)
                return String.fromCharCode(b3.which);
            }
            return null;
          case "compositionend":
            return de && "ko" !== b3.locale ? null : b3.data;
          default:
            return null;
        }
      }
      var le = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
      function me(a3) {
        var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
        return "input" === b3 ? !!le[a3.type] : "textarea" === b3 ? true : false;
      }
      function ne(a3, b3, c3, d3) {
        Eb(d3);
        b3 = oe(b3, "onChange");
        0 < b3.length && (c3 = new td("onChange", "change", null, c3, d3), a3.push({ event: c3, listeners: b3 }));
      }
      var pe = null;
      var qe = null;
      function re(a3) {
        se(a3, 0);
      }
      function te(a3) {
        var b3 = ue(a3);
        if (Wa(b3))
          return a3;
      }
      function ve(a3, b3) {
        if ("change" === a3)
          return b3;
      }
      var we = false;
      if (ia) {
        if (ia) {
          ye = "oninput" in document;
          if (!ye) {
            ze = document.createElement("div");
            ze.setAttribute("oninput", "return;");
            ye = "function" === typeof ze.oninput;
          }
          xe = ye;
        } else
          xe = false;
        we = xe && (!document.documentMode || 9 < document.documentMode);
      }
      var xe;
      var ye;
      var ze;
      function Ae() {
        pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
      }
      function Be(a3) {
        if ("value" === a3.propertyName && te(qe)) {
          var b3 = [];
          ne(b3, qe, a3, xb(a3));
          Jb(re, b3);
        }
      }
      function Ce(a3, b3, c3) {
        "focusin" === a3 ? (Ae(), pe = b3, qe = c3, pe.attachEvent("onpropertychange", Be)) : "focusout" === a3 && Ae();
      }
      function De(a3) {
        if ("selectionchange" === a3 || "keyup" === a3 || "keydown" === a3)
          return te(qe);
      }
      function Ee(a3, b3) {
        if ("click" === a3)
          return te(b3);
      }
      function Fe(a3, b3) {
        if ("input" === a3 || "change" === a3)
          return te(b3);
      }
      function Ge(a3, b3) {
        return a3 === b3 && (0 !== a3 || 1 / a3 === 1 / b3) || a3 !== a3 && b3 !== b3;
      }
      var He = "function" === typeof Object.is ? Object.is : Ge;
      function Ie(a3, b3) {
        if (He(a3, b3))
          return true;
        if ("object" !== typeof a3 || null === a3 || "object" !== typeof b3 || null === b3)
          return false;
        var c3 = Object.keys(a3), d3 = Object.keys(b3);
        if (c3.length !== d3.length)
          return false;
        for (d3 = 0; d3 < c3.length; d3++) {
          var e2 = c3[d3];
          if (!ja.call(b3, e2) || !He(a3[e2], b3[e2]))
            return false;
        }
        return true;
      }
      function Je(a3) {
        for (; a3 && a3.firstChild; )
          a3 = a3.firstChild;
        return a3;
      }
      function Ke(a3, b3) {
        var c3 = Je(a3);
        a3 = 0;
        for (var d3; c3; ) {
          if (3 === c3.nodeType) {
            d3 = a3 + c3.textContent.length;
            if (a3 <= b3 && d3 >= b3)
              return { node: c3, offset: b3 - a3 };
            a3 = d3;
          }
          a: {
            for (; c3; ) {
              if (c3.nextSibling) {
                c3 = c3.nextSibling;
                break a;
              }
              c3 = c3.parentNode;
            }
            c3 = void 0;
          }
          c3 = Je(c3);
        }
      }
      function Le(a3, b3) {
        return a3 && b3 ? a3 === b3 ? true : a3 && 3 === a3.nodeType ? false : b3 && 3 === b3.nodeType ? Le(a3, b3.parentNode) : "contains" in a3 ? a3.contains(b3) : a3.compareDocumentPosition ? !!(a3.compareDocumentPosition(b3) & 16) : false : false;
      }
      function Me() {
        for (var a3 = window, b3 = Xa(); b3 instanceof a3.HTMLIFrameElement; ) {
          try {
            var c3 = "string" === typeof b3.contentWindow.location.href;
          } catch (d3) {
            c3 = false;
          }
          if (c3)
            a3 = b3.contentWindow;
          else
            break;
          b3 = Xa(a3.document);
        }
        return b3;
      }
      function Ne(a3) {
        var b3 = a3 && a3.nodeName && a3.nodeName.toLowerCase();
        return b3 && ("input" === b3 && ("text" === a3.type || "search" === a3.type || "tel" === a3.type || "url" === a3.type || "password" === a3.type) || "textarea" === b3 || "true" === a3.contentEditable);
      }
      function Oe(a3) {
        var b3 = Me(), c3 = a3.focusedElem, d3 = a3.selectionRange;
        if (b3 !== c3 && c3 && c3.ownerDocument && Le(c3.ownerDocument.documentElement, c3)) {
          if (null !== d3 && Ne(c3)) {
            if (b3 = d3.start, a3 = d3.end, void 0 === a3 && (a3 = b3), "selectionStart" in c3)
              c3.selectionStart = b3, c3.selectionEnd = Math.min(a3, c3.value.length);
            else if (a3 = (b3 = c3.ownerDocument || document) && b3.defaultView || window, a3.getSelection) {
              a3 = a3.getSelection();
              var e2 = c3.textContent.length, f3 = Math.min(d3.start, e2);
              d3 = void 0 === d3.end ? f3 : Math.min(d3.end, e2);
              !a3.extend && f3 > d3 && (e2 = d3, d3 = f3, f3 = e2);
              e2 = Ke(c3, f3);
              var g3 = Ke(
                c3,
                d3
              );
              e2 && g3 && (1 !== a3.rangeCount || a3.anchorNode !== e2.node || a3.anchorOffset !== e2.offset || a3.focusNode !== g3.node || a3.focusOffset !== g3.offset) && (b3 = b3.createRange(), b3.setStart(e2.node, e2.offset), a3.removeAllRanges(), f3 > d3 ? (a3.addRange(b3), a3.extend(g3.node, g3.offset)) : (b3.setEnd(g3.node, g3.offset), a3.addRange(b3)));
            }
          }
          b3 = [];
          for (a3 = c3; a3 = a3.parentNode; )
            1 === a3.nodeType && b3.push({ element: a3, left: a3.scrollLeft, top: a3.scrollTop });
          "function" === typeof c3.focus && c3.focus();
          for (c3 = 0; c3 < b3.length; c3++)
            a3 = b3[c3], a3.element.scrollLeft = a3.left, a3.element.scrollTop = a3.top;
        }
      }
      var Pe = ia && "documentMode" in document && 11 >= document.documentMode;
      var Qe = null;
      var Re = null;
      var Se = null;
      var Te = false;
      function Ue(a3, b3, c3) {
        var d3 = c3.window === c3 ? c3.document : 9 === c3.nodeType ? c3 : c3.ownerDocument;
        Te || null == Qe || Qe !== Xa(d3) || (d3 = Qe, "selectionStart" in d3 && Ne(d3) ? d3 = { start: d3.selectionStart, end: d3.selectionEnd } : (d3 = (d3.ownerDocument && d3.ownerDocument.defaultView || window).getSelection(), d3 = { anchorNode: d3.anchorNode, anchorOffset: d3.anchorOffset, focusNode: d3.focusNode, focusOffset: d3.focusOffset }), Se && Ie(Se, d3) || (Se = d3, d3 = oe(Re, "onSelect"), 0 < d3.length && (b3 = new td("onSelect", "select", null, b3, c3), a3.push({ event: b3, listeners: d3 }), b3.target = Qe)));
      }
      function Ve(a3, b3) {
        var c3 = {};
        c3[a3.toLowerCase()] = b3.toLowerCase();
        c3["Webkit" + a3] = "webkit" + b3;
        c3["Moz" + a3] = "moz" + b3;
        return c3;
      }
      var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") };
      var Xe = {};
      var Ye = {};
      ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
      function Ze(a3) {
        if (Xe[a3])
          return Xe[a3];
        if (!We[a3])
          return a3;
        var b3 = We[a3], c3;
        for (c3 in b3)
          if (b3.hasOwnProperty(c3) && c3 in Ye)
            return Xe[a3] = b3[c3];
        return a3;
      }
      var $e = Ze("animationend");
      var af = Ze("animationiteration");
      var bf = Ze("animationstart");
      var cf = Ze("transitionend");
      var df = /* @__PURE__ */ new Map();
      var ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
      function ff(a3, b3) {
        df.set(a3, b3);
        fa(b3, [a3]);
      }
      for (gf = 0; gf < ef.length; gf++) {
        hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
        ff(jf, "on" + kf);
      }
      var hf;
      var jf;
      var kf;
      var gf;
      ff($e, "onAnimationEnd");
      ff(af, "onAnimationIteration");
      ff(bf, "onAnimationStart");
      ff("dblclick", "onDoubleClick");
      ff("focusin", "onFocus");
      ff("focusout", "onBlur");
      ff(cf, "onTransitionEnd");
      ha("onMouseEnter", ["mouseout", "mouseover"]);
      ha("onMouseLeave", ["mouseout", "mouseover"]);
      ha("onPointerEnter", ["pointerout", "pointerover"]);
      ha("onPointerLeave", ["pointerout", "pointerover"]);
      fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
      var mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
      function nf(a3, b3, c3) {
        var d3 = a3.type || "unknown-event";
        a3.currentTarget = c3;
        Ub(d3, b3, void 0, a3);
        a3.currentTarget = null;
      }
      function se(a3, b3) {
        b3 = 0 !== (b3 & 4);
        for (var c3 = 0; c3 < a3.length; c3++) {
          var d3 = a3[c3], e2 = d3.event;
          d3 = d3.listeners;
          a: {
            var f3 = void 0;
            if (b3)
              for (var g3 = d3.length - 1; 0 <= g3; g3--) {
                var h3 = d3[g3], k2 = h3.instance, l3 = h3.currentTarget;
                h3 = h3.listener;
                if (k2 !== f3 && e2.isPropagationStopped())
                  break a;
                nf(e2, h3, l3);
                f3 = k2;
              }
            else
              for (g3 = 0; g3 < d3.length; g3++) {
                h3 = d3[g3];
                k2 = h3.instance;
                l3 = h3.currentTarget;
                h3 = h3.listener;
                if (k2 !== f3 && e2.isPropagationStopped())
                  break a;
                nf(e2, h3, l3);
                f3 = k2;
              }
          }
        }
        if (Qb)
          throw a3 = Rb, Qb = false, Rb = null, a3;
      }
      function D3(a3, b3) {
        var c3 = b3[of];
        void 0 === c3 && (c3 = b3[of] = /* @__PURE__ */ new Set());
        var d3 = a3 + "__bubble";
        c3.has(d3) || (pf(b3, a3, 2, false), c3.add(d3));
      }
      function qf(a3, b3, c3) {
        var d3 = 0;
        b3 && (d3 |= 4);
        pf(c3, a3, d3, b3);
      }
      var rf = "_reactListening" + Math.random().toString(36).slice(2);
      function sf(a3) {
        if (!a3[rf]) {
          a3[rf] = true;
          da.forEach(function(b4) {
            "selectionchange" !== b4 && (mf.has(b4) || qf(b4, false, a3), qf(b4, true, a3));
          });
          var b3 = 9 === a3.nodeType ? a3 : a3.ownerDocument;
          null === b3 || b3[rf] || (b3[rf] = true, qf("selectionchange", false, b3));
        }
      }
      function pf(a3, b3, c3, d3) {
        switch (jd(b3)) {
          case 1:
            var e2 = ed;
            break;
          case 4:
            e2 = gd;
            break;
          default:
            e2 = fd;
        }
        c3 = e2.bind(null, b3, c3, a3);
        e2 = void 0;
        !Lb || "touchstart" !== b3 && "touchmove" !== b3 && "wheel" !== b3 || (e2 = true);
        d3 ? void 0 !== e2 ? a3.addEventListener(b3, c3, { capture: true, passive: e2 }) : a3.addEventListener(b3, c3, true) : void 0 !== e2 ? a3.addEventListener(b3, c3, { passive: e2 }) : a3.addEventListener(b3, c3, false);
      }
      function hd(a3, b3, c3, d3, e2) {
        var f3 = d3;
        if (0 === (b3 & 1) && 0 === (b3 & 2) && null !== d3)
          a:
            for (; ; ) {
              if (null === d3)
                return;
              var g3 = d3.tag;
              if (3 === g3 || 4 === g3) {
                var h3 = d3.stateNode.containerInfo;
                if (h3 === e2 || 8 === h3.nodeType && h3.parentNode === e2)
                  break;
                if (4 === g3)
                  for (g3 = d3.return; null !== g3; ) {
                    var k2 = g3.tag;
                    if (3 === k2 || 4 === k2) {
                      if (k2 = g3.stateNode.containerInfo, k2 === e2 || 8 === k2.nodeType && k2.parentNode === e2)
                        return;
                    }
                    g3 = g3.return;
                  }
                for (; null !== h3; ) {
                  g3 = Wc(h3);
                  if (null === g3)
                    return;
                  k2 = g3.tag;
                  if (5 === k2 || 6 === k2) {
                    d3 = f3 = g3;
                    continue a;
                  }
                  h3 = h3.parentNode;
                }
              }
              d3 = d3.return;
            }
        Jb(function() {
          var d4 = f3, e3 = xb(c3), g4 = [];
          a: {
            var h4 = df.get(a3);
            if (void 0 !== h4) {
              var k3 = td, n3 = a3;
              switch (a3) {
                case "keypress":
                  if (0 === od(c3))
                    break a;
                case "keydown":
                case "keyup":
                  k3 = Rd;
                  break;
                case "focusin":
                  n3 = "focus";
                  k3 = Fd;
                  break;
                case "focusout":
                  n3 = "blur";
                  k3 = Fd;
                  break;
                case "beforeblur":
                case "afterblur":
                  k3 = Fd;
                  break;
                case "click":
                  if (2 === c3.button)
                    break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  k3 = Bd;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  k3 = Dd;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  k3 = Vd;
                  break;
                case $e:
                case af:
                case bf:
                  k3 = Hd;
                  break;
                case cf:
                  k3 = Xd;
                  break;
                case "scroll":
                  k3 = vd;
                  break;
                case "wheel":
                  k3 = Zd;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  k3 = Jd;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  k3 = Td;
              }
              var t4 = 0 !== (b3 & 4), J = !t4 && "scroll" === a3, x3 = t4 ? null !== h4 ? h4 + "Capture" : null : h4;
              t4 = [];
              for (var w3 = d4, u3; null !== w3; ) {
                u3 = w3;
                var F = u3.stateNode;
                5 === u3.tag && null !== F && (u3 = F, null !== x3 && (F = Kb(w3, x3), null != F && t4.push(tf(w3, F, u3))));
                if (J)
                  break;
                w3 = w3.return;
              }
              0 < t4.length && (h4 = new k3(h4, n3, null, c3, e3), g4.push({ event: h4, listeners: t4 }));
            }
          }
          if (0 === (b3 & 7)) {
            a: {
              h4 = "mouseover" === a3 || "pointerover" === a3;
              k3 = "mouseout" === a3 || "pointerout" === a3;
              if (h4 && c3 !== wb && (n3 = c3.relatedTarget || c3.fromElement) && (Wc(n3) || n3[uf]))
                break a;
              if (k3 || h4) {
                h4 = e3.window === e3 ? e3 : (h4 = e3.ownerDocument) ? h4.defaultView || h4.parentWindow : window;
                if (k3) {
                  if (n3 = c3.relatedTarget || c3.toElement, k3 = d4, n3 = n3 ? Wc(n3) : null, null !== n3 && (J = Vb(n3), n3 !== J || 5 !== n3.tag && 6 !== n3.tag))
                    n3 = null;
                } else
                  k3 = null, n3 = d4;
                if (k3 !== n3) {
                  t4 = Bd;
                  F = "onMouseLeave";
                  x3 = "onMouseEnter";
                  w3 = "mouse";
                  if ("pointerout" === a3 || "pointerover" === a3)
                    t4 = Td, F = "onPointerLeave", x3 = "onPointerEnter", w3 = "pointer";
                  J = null == k3 ? h4 : ue(k3);
                  u3 = null == n3 ? h4 : ue(n3);
                  h4 = new t4(F, w3 + "leave", k3, c3, e3);
                  h4.target = J;
                  h4.relatedTarget = u3;
                  F = null;
                  Wc(e3) === d4 && (t4 = new t4(x3, w3 + "enter", n3, c3, e3), t4.target = u3, t4.relatedTarget = J, F = t4);
                  J = F;
                  if (k3 && n3)
                    b: {
                      t4 = k3;
                      x3 = n3;
                      w3 = 0;
                      for (u3 = t4; u3; u3 = vf(u3))
                        w3++;
                      u3 = 0;
                      for (F = x3; F; F = vf(F))
                        u3++;
                      for (; 0 < w3 - u3; )
                        t4 = vf(t4), w3--;
                      for (; 0 < u3 - w3; )
                        x3 = vf(x3), u3--;
                      for (; w3--; ) {
                        if (t4 === x3 || null !== x3 && t4 === x3.alternate)
                          break b;
                        t4 = vf(t4);
                        x3 = vf(x3);
                      }
                      t4 = null;
                    }
                  else
                    t4 = null;
                  null !== k3 && wf(g4, h4, k3, t4, false);
                  null !== n3 && null !== J && wf(g4, J, n3, t4, true);
                }
              }
            }
            a: {
              h4 = d4 ? ue(d4) : window;
              k3 = h4.nodeName && h4.nodeName.toLowerCase();
              if ("select" === k3 || "input" === k3 && "file" === h4.type)
                var na = ve;
              else if (me(h4))
                if (we)
                  na = Fe;
                else {
                  na = De;
                  var xa = Ce;
                }
              else
                (k3 = h4.nodeName) && "input" === k3.toLowerCase() && ("checkbox" === h4.type || "radio" === h4.type) && (na = Ee);
              if (na && (na = na(a3, d4))) {
                ne(g4, na, c3, e3);
                break a;
              }
              xa && xa(a3, h4, d4);
              "focusout" === a3 && (xa = h4._wrapperState) && xa.controlled && "number" === h4.type && cb(h4, "number", h4.value);
            }
            xa = d4 ? ue(d4) : window;
            switch (a3) {
              case "focusin":
                if (me(xa) || "true" === xa.contentEditable)
                  Qe = xa, Re = d4, Se = null;
                break;
              case "focusout":
                Se = Re = Qe = null;
                break;
              case "mousedown":
                Te = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                Te = false;
                Ue(g4, c3, e3);
                break;
              case "selectionchange":
                if (Pe)
                  break;
              case "keydown":
              case "keyup":
                Ue(g4, c3, e3);
            }
            var $a;
            if (ae)
              b: {
                switch (a3) {
                  case "compositionstart":
                    var ba = "onCompositionStart";
                    break b;
                  case "compositionend":
                    ba = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    ba = "onCompositionUpdate";
                    break b;
                }
                ba = void 0;
              }
            else
              ie ? ge(a3, c3) && (ba = "onCompositionEnd") : "keydown" === a3 && 229 === c3.keyCode && (ba = "onCompositionStart");
            ba && (de && "ko" !== c3.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e3, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d4, ba), 0 < xa.length && (ba = new Ld(ba, a3, null, c3, e3), g4.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he(c3), null !== $a && (ba.data = $a))));
            if ($a = ce ? je(a3, c3) : ke(a3, c3))
              d4 = oe(d4, "onBeforeInput"), 0 < d4.length && (e3 = new Ld("onBeforeInput", "beforeinput", null, c3, e3), g4.push({ event: e3, listeners: d4 }), e3.data = $a);
          }
          se(g4, b3);
        });
      }
      function tf(a3, b3, c3) {
        return { instance: a3, listener: b3, currentTarget: c3 };
      }
      function oe(a3, b3) {
        for (var c3 = b3 + "Capture", d3 = []; null !== a3; ) {
          var e2 = a3, f3 = e2.stateNode;
          5 === e2.tag && null !== f3 && (e2 = f3, f3 = Kb(a3, c3), null != f3 && d3.unshift(tf(a3, f3, e2)), f3 = Kb(a3, b3), null != f3 && d3.push(tf(a3, f3, e2)));
          a3 = a3.return;
        }
        return d3;
      }
      function vf(a3) {
        if (null === a3)
          return null;
        do
          a3 = a3.return;
        while (a3 && 5 !== a3.tag);
        return a3 ? a3 : null;
      }
      function wf(a3, b3, c3, d3, e2) {
        for (var f3 = b3._reactName, g3 = []; null !== c3 && c3 !== d3; ) {
          var h3 = c3, k2 = h3.alternate, l3 = h3.stateNode;
          if (null !== k2 && k2 === d3)
            break;
          5 === h3.tag && null !== l3 && (h3 = l3, e2 ? (k2 = Kb(c3, f3), null != k2 && g3.unshift(tf(c3, k2, h3))) : e2 || (k2 = Kb(c3, f3), null != k2 && g3.push(tf(c3, k2, h3))));
          c3 = c3.return;
        }
        0 !== g3.length && a3.push({ event: b3, listeners: g3 });
      }
      var xf = /\r\n?/g;
      var yf = /\u0000|\uFFFD/g;
      function zf(a3) {
        return ("string" === typeof a3 ? a3 : "" + a3).replace(xf, "\n").replace(yf, "");
      }
      function Af(a3, b3, c3) {
        b3 = zf(b3);
        if (zf(a3) !== b3 && c3)
          throw Error(p3(425));
      }
      function Bf() {
      }
      var Cf = null;
      var Df = null;
      function Ef(a3, b3) {
        return "textarea" === a3 || "noscript" === a3 || "string" === typeof b3.children || "number" === typeof b3.children || "object" === typeof b3.dangerouslySetInnerHTML && null !== b3.dangerouslySetInnerHTML && null != b3.dangerouslySetInnerHTML.__html;
      }
      var Ff = "function" === typeof setTimeout ? setTimeout : void 0;
      var Gf = "function" === typeof clearTimeout ? clearTimeout : void 0;
      var Hf = "function" === typeof Promise ? Promise : void 0;
      var Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a3) {
        return Hf.resolve(null).then(a3).catch(If);
      } : Ff;
      function If(a3) {
        setTimeout(function() {
          throw a3;
        });
      }
      function Kf(a3, b3) {
        var c3 = b3, d3 = 0;
        do {
          var e2 = c3.nextSibling;
          a3.removeChild(c3);
          if (e2 && 8 === e2.nodeType)
            if (c3 = e2.data, "/$" === c3) {
              if (0 === d3) {
                a3.removeChild(e2);
                bd(b3);
                return;
              }
              d3--;
            } else
              "$" !== c3 && "$?" !== c3 && "$!" !== c3 || d3++;
          c3 = e2;
        } while (c3);
        bd(b3);
      }
      function Lf(a3) {
        for (; null != a3; a3 = a3.nextSibling) {
          var b3 = a3.nodeType;
          if (1 === b3 || 3 === b3)
            break;
          if (8 === b3) {
            b3 = a3.data;
            if ("$" === b3 || "$!" === b3 || "$?" === b3)
              break;
            if ("/$" === b3)
              return null;
          }
        }
        return a3;
      }
      function Mf(a3) {
        a3 = a3.previousSibling;
        for (var b3 = 0; a3; ) {
          if (8 === a3.nodeType) {
            var c3 = a3.data;
            if ("$" === c3 || "$!" === c3 || "$?" === c3) {
              if (0 === b3)
                return a3;
              b3--;
            } else
              "/$" === c3 && b3++;
          }
          a3 = a3.previousSibling;
        }
        return null;
      }
      var Nf = Math.random().toString(36).slice(2);
      var Of = "__reactFiber$" + Nf;
      var Pf = "__reactProps$" + Nf;
      var uf = "__reactContainer$" + Nf;
      var of = "__reactEvents$" + Nf;
      var Qf = "__reactListeners$" + Nf;
      var Rf = "__reactHandles$" + Nf;
      function Wc(a3) {
        var b3 = a3[Of];
        if (b3)
          return b3;
        for (var c3 = a3.parentNode; c3; ) {
          if (b3 = c3[uf] || c3[Of]) {
            c3 = b3.alternate;
            if (null !== b3.child || null !== c3 && null !== c3.child)
              for (a3 = Mf(a3); null !== a3; ) {
                if (c3 = a3[Of])
                  return c3;
                a3 = Mf(a3);
              }
            return b3;
          }
          a3 = c3;
          c3 = a3.parentNode;
        }
        return null;
      }
      function Cb(a3) {
        a3 = a3[Of] || a3[uf];
        return !a3 || 5 !== a3.tag && 6 !== a3.tag && 13 !== a3.tag && 3 !== a3.tag ? null : a3;
      }
      function ue(a3) {
        if (5 === a3.tag || 6 === a3.tag)
          return a3.stateNode;
        throw Error(p3(33));
      }
      function Db(a3) {
        return a3[Pf] || null;
      }
      var Sf = [];
      var Tf = -1;
      function Uf(a3) {
        return { current: a3 };
      }
      function E3(a3) {
        0 > Tf || (a3.current = Sf[Tf], Sf[Tf] = null, Tf--);
      }
      function G(a3, b3) {
        Tf++;
        Sf[Tf] = a3.current;
        a3.current = b3;
      }
      var Vf = {};
      var H2 = Uf(Vf);
      var Wf = Uf(false);
      var Xf = Vf;
      function Yf(a3, b3) {
        var c3 = a3.type.contextTypes;
        if (!c3)
          return Vf;
        var d3 = a3.stateNode;
        if (d3 && d3.__reactInternalMemoizedUnmaskedChildContext === b3)
          return d3.__reactInternalMemoizedMaskedChildContext;
        var e2 = {}, f3;
        for (f3 in c3)
          e2[f3] = b3[f3];
        d3 && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = b3, a3.__reactInternalMemoizedMaskedChildContext = e2);
        return e2;
      }
      function Zf(a3) {
        a3 = a3.childContextTypes;
        return null !== a3 && void 0 !== a3;
      }
      function $f() {
        E3(Wf);
        E3(H2);
      }
      function ag(a3, b3, c3) {
        if (H2.current !== Vf)
          throw Error(p3(168));
        G(H2, b3);
        G(Wf, c3);
      }
      function bg(a3, b3, c3) {
        var d3 = a3.stateNode;
        b3 = b3.childContextTypes;
        if ("function" !== typeof d3.getChildContext)
          return c3;
        d3 = d3.getChildContext();
        for (var e2 in d3)
          if (!(e2 in b3))
            throw Error(p3(108, Ra(a3) || "Unknown", e2));
        return A2({}, c3, d3);
      }
      function cg(a3) {
        a3 = (a3 = a3.stateNode) && a3.__reactInternalMemoizedMergedChildContext || Vf;
        Xf = H2.current;
        G(H2, a3);
        G(Wf, Wf.current);
        return true;
      }
      function dg(a3, b3, c3) {
        var d3 = a3.stateNode;
        if (!d3)
          throw Error(p3(169));
        c3 ? (a3 = bg(a3, b3, Xf), d3.__reactInternalMemoizedMergedChildContext = a3, E3(Wf), E3(H2), G(H2, a3)) : E3(Wf);
        G(Wf, c3);
      }
      var eg = null;
      var fg = false;
      var gg = false;
      function hg(a3) {
        null === eg ? eg = [a3] : eg.push(a3);
      }
      function ig(a3) {
        fg = true;
        hg(a3);
      }
      function jg() {
        if (!gg && null !== eg) {
          gg = true;
          var a3 = 0, b3 = C2;
          try {
            var c3 = eg;
            for (C2 = 1; a3 < c3.length; a3++) {
              var d3 = c3[a3];
              do
                d3 = d3(true);
              while (null !== d3);
            }
            eg = null;
            fg = false;
          } catch (e2) {
            throw null !== eg && (eg = eg.slice(a3 + 1)), ac(fc, jg), e2;
          } finally {
            C2 = b3, gg = false;
          }
        }
        return null;
      }
      var kg = [];
      var lg = 0;
      var mg = null;
      var ng = 0;
      var og = [];
      var pg = 0;
      var qg = null;
      var rg = 1;
      var sg = "";
      function tg(a3, b3) {
        kg[lg++] = ng;
        kg[lg++] = mg;
        mg = a3;
        ng = b3;
      }
      function ug(a3, b3, c3) {
        og[pg++] = rg;
        og[pg++] = sg;
        og[pg++] = qg;
        qg = a3;
        var d3 = rg;
        a3 = sg;
        var e2 = 32 - oc(d3) - 1;
        d3 &= ~(1 << e2);
        c3 += 1;
        var f3 = 32 - oc(b3) + e2;
        if (30 < f3) {
          var g3 = e2 - e2 % 5;
          f3 = (d3 & (1 << g3) - 1).toString(32);
          d3 >>= g3;
          e2 -= g3;
          rg = 1 << 32 - oc(b3) + e2 | c3 << e2 | d3;
          sg = f3 + a3;
        } else
          rg = 1 << f3 | c3 << e2 | d3, sg = a3;
      }
      function vg(a3) {
        null !== a3.return && (tg(a3, 1), ug(a3, 1, 0));
      }
      function wg(a3) {
        for (; a3 === mg; )
          mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
        for (; a3 === qg; )
          qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
      }
      var xg = null;
      var yg = null;
      var I = false;
      var zg = null;
      function Ag(a3, b3) {
        var c3 = Bg(5, null, null, 0);
        c3.elementType = "DELETED";
        c3.stateNode = b3;
        c3.return = a3;
        b3 = a3.deletions;
        null === b3 ? (a3.deletions = [c3], a3.flags |= 16) : b3.push(c3);
      }
      function Cg(a3, b3) {
        switch (a3.tag) {
          case 5:
            var c3 = a3.type;
            b3 = 1 !== b3.nodeType || c3.toLowerCase() !== b3.nodeName.toLowerCase() ? null : b3;
            return null !== b3 ? (a3.stateNode = b3, xg = a3, yg = Lf(b3.firstChild), true) : false;
          case 6:
            return b3 = "" === a3.pendingProps || 3 !== b3.nodeType ? null : b3, null !== b3 ? (a3.stateNode = b3, xg = a3, yg = null, true) : false;
          case 13:
            return b3 = 8 !== b3.nodeType ? null : b3, null !== b3 ? (c3 = null !== qg ? { id: rg, overflow: sg } : null, a3.memoizedState = { dehydrated: b3, treeContext: c3, retryLane: 1073741824 }, c3 = Bg(18, null, null, 0), c3.stateNode = b3, c3.return = a3, a3.child = c3, xg = a3, yg = null, true) : false;
          default:
            return false;
        }
      }
      function Dg(a3) {
        return 0 !== (a3.mode & 1) && 0 === (a3.flags & 128);
      }
      function Eg(a3) {
        if (I) {
          var b3 = yg;
          if (b3) {
            var c3 = b3;
            if (!Cg(a3, b3)) {
              if (Dg(a3))
                throw Error(p3(418));
              b3 = Lf(c3.nextSibling);
              var d3 = xg;
              b3 && Cg(a3, b3) ? Ag(d3, c3) : (a3.flags = a3.flags & -4097 | 2, I = false, xg = a3);
            }
          } else {
            if (Dg(a3))
              throw Error(p3(418));
            a3.flags = a3.flags & -4097 | 2;
            I = false;
            xg = a3;
          }
        }
      }
      function Fg(a3) {
        for (a3 = a3.return; null !== a3 && 5 !== a3.tag && 3 !== a3.tag && 13 !== a3.tag; )
          a3 = a3.return;
        xg = a3;
      }
      function Gg(a3) {
        if (a3 !== xg)
          return false;
        if (!I)
          return Fg(a3), I = true, false;
        var b3;
        (b3 = 3 !== a3.tag) && !(b3 = 5 !== a3.tag) && (b3 = a3.type, b3 = "head" !== b3 && "body" !== b3 && !Ef(a3.type, a3.memoizedProps));
        if (b3 && (b3 = yg)) {
          if (Dg(a3))
            throw Hg(), Error(p3(418));
          for (; b3; )
            Ag(a3, b3), b3 = Lf(b3.nextSibling);
        }
        Fg(a3);
        if (13 === a3.tag) {
          a3 = a3.memoizedState;
          a3 = null !== a3 ? a3.dehydrated : null;
          if (!a3)
            throw Error(p3(317));
          a: {
            a3 = a3.nextSibling;
            for (b3 = 0; a3; ) {
              if (8 === a3.nodeType) {
                var c3 = a3.data;
                if ("/$" === c3) {
                  if (0 === b3) {
                    yg = Lf(a3.nextSibling);
                    break a;
                  }
                  b3--;
                } else
                  "$" !== c3 && "$!" !== c3 && "$?" !== c3 || b3++;
              }
              a3 = a3.nextSibling;
            }
            yg = null;
          }
        } else
          yg = xg ? Lf(a3.stateNode.nextSibling) : null;
        return true;
      }
      function Hg() {
        for (var a3 = yg; a3; )
          a3 = Lf(a3.nextSibling);
      }
      function Ig() {
        yg = xg = null;
        I = false;
      }
      function Jg(a3) {
        null === zg ? zg = [a3] : zg.push(a3);
      }
      var Kg = ua.ReactCurrentBatchConfig;
      function Lg(a3, b3) {
        if (a3 && a3.defaultProps) {
          b3 = A2({}, b3);
          a3 = a3.defaultProps;
          for (var c3 in a3)
            void 0 === b3[c3] && (b3[c3] = a3[c3]);
          return b3;
        }
        return b3;
      }
      var Mg = Uf(null);
      var Ng = null;
      var Og = null;
      var Pg = null;
      function Qg() {
        Pg = Og = Ng = null;
      }
      function Rg(a3) {
        var b3 = Mg.current;
        E3(Mg);
        a3._currentValue = b3;
      }
      function Sg(a3, b3, c3) {
        for (; null !== a3; ) {
          var d3 = a3.alternate;
          (a3.childLanes & b3) !== b3 ? (a3.childLanes |= b3, null !== d3 && (d3.childLanes |= b3)) : null !== d3 && (d3.childLanes & b3) !== b3 && (d3.childLanes |= b3);
          if (a3 === c3)
            break;
          a3 = a3.return;
        }
      }
      function Tg(a3, b3) {
        Ng = a3;
        Pg = Og = null;
        a3 = a3.dependencies;
        null !== a3 && null !== a3.firstContext && (0 !== (a3.lanes & b3) && (Ug = true), a3.firstContext = null);
      }
      function Vg(a3) {
        var b3 = a3._currentValue;
        if (Pg !== a3)
          if (a3 = { context: a3, memoizedValue: b3, next: null }, null === Og) {
            if (null === Ng)
              throw Error(p3(308));
            Og = a3;
            Ng.dependencies = { lanes: 0, firstContext: a3 };
          } else
            Og = Og.next = a3;
        return b3;
      }
      var Wg = null;
      function Xg(a3) {
        null === Wg ? Wg = [a3] : Wg.push(a3);
      }
      function Yg(a3, b3, c3, d3) {
        var e2 = b3.interleaved;
        null === e2 ? (c3.next = c3, Xg(b3)) : (c3.next = e2.next, e2.next = c3);
        b3.interleaved = c3;
        return Zg(a3, d3);
      }
      function Zg(a3, b3) {
        a3.lanes |= b3;
        var c3 = a3.alternate;
        null !== c3 && (c3.lanes |= b3);
        c3 = a3;
        for (a3 = a3.return; null !== a3; )
          a3.childLanes |= b3, c3 = a3.alternate, null !== c3 && (c3.childLanes |= b3), c3 = a3, a3 = a3.return;
        return 3 === c3.tag ? c3.stateNode : null;
      }
      var $g = false;
      function ah(a3) {
        a3.updateQueue = { baseState: a3.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
      }
      function bh(a3, b3) {
        a3 = a3.updateQueue;
        b3.updateQueue === a3 && (b3.updateQueue = { baseState: a3.baseState, firstBaseUpdate: a3.firstBaseUpdate, lastBaseUpdate: a3.lastBaseUpdate, shared: a3.shared, effects: a3.effects });
      }
      function ch(a3, b3) {
        return { eventTime: a3, lane: b3, tag: 0, payload: null, callback: null, next: null };
      }
      function dh(a3, b3, c3) {
        var d3 = a3.updateQueue;
        if (null === d3)
          return null;
        d3 = d3.shared;
        if (0 !== (K & 2)) {
          var e2 = d3.pending;
          null === e2 ? b3.next = b3 : (b3.next = e2.next, e2.next = b3);
          d3.pending = b3;
          return Zg(a3, c3);
        }
        e2 = d3.interleaved;
        null === e2 ? (b3.next = b3, Xg(d3)) : (b3.next = e2.next, e2.next = b3);
        d3.interleaved = b3;
        return Zg(a3, c3);
      }
      function eh(a3, b3, c3) {
        b3 = b3.updateQueue;
        if (null !== b3 && (b3 = b3.shared, 0 !== (c3 & 4194240))) {
          var d3 = b3.lanes;
          d3 &= a3.pendingLanes;
          c3 |= d3;
          b3.lanes = c3;
          Cc(a3, c3);
        }
      }
      function fh(a3, b3) {
        var c3 = a3.updateQueue, d3 = a3.alternate;
        if (null !== d3 && (d3 = d3.updateQueue, c3 === d3)) {
          var e2 = null, f3 = null;
          c3 = c3.firstBaseUpdate;
          if (null !== c3) {
            do {
              var g3 = { eventTime: c3.eventTime, lane: c3.lane, tag: c3.tag, payload: c3.payload, callback: c3.callback, next: null };
              null === f3 ? e2 = f3 = g3 : f3 = f3.next = g3;
              c3 = c3.next;
            } while (null !== c3);
            null === f3 ? e2 = f3 = b3 : f3 = f3.next = b3;
          } else
            e2 = f3 = b3;
          c3 = { baseState: d3.baseState, firstBaseUpdate: e2, lastBaseUpdate: f3, shared: d3.shared, effects: d3.effects };
          a3.updateQueue = c3;
          return;
        }
        a3 = c3.lastBaseUpdate;
        null === a3 ? c3.firstBaseUpdate = b3 : a3.next = b3;
        c3.lastBaseUpdate = b3;
      }
      function gh(a3, b3, c3, d3) {
        var e2 = a3.updateQueue;
        $g = false;
        var f3 = e2.firstBaseUpdate, g3 = e2.lastBaseUpdate, h3 = e2.shared.pending;
        if (null !== h3) {
          e2.shared.pending = null;
          var k2 = h3, l3 = k2.next;
          k2.next = null;
          null === g3 ? f3 = l3 : g3.next = l3;
          g3 = k2;
          var m3 = a3.alternate;
          null !== m3 && (m3 = m3.updateQueue, h3 = m3.lastBaseUpdate, h3 !== g3 && (null === h3 ? m3.firstBaseUpdate = l3 : h3.next = l3, m3.lastBaseUpdate = k2));
        }
        if (null !== f3) {
          var q = e2.baseState;
          g3 = 0;
          m3 = l3 = k2 = null;
          h3 = f3;
          do {
            var r3 = h3.lane, y3 = h3.eventTime;
            if ((d3 & r3) === r3) {
              null !== m3 && (m3 = m3.next = {
                eventTime: y3,
                lane: 0,
                tag: h3.tag,
                payload: h3.payload,
                callback: h3.callback,
                next: null
              });
              a: {
                var n3 = a3, t4 = h3;
                r3 = b3;
                y3 = c3;
                switch (t4.tag) {
                  case 1:
                    n3 = t4.payload;
                    if ("function" === typeof n3) {
                      q = n3.call(y3, q, r3);
                      break a;
                    }
                    q = n3;
                    break a;
                  case 3:
                    n3.flags = n3.flags & -65537 | 128;
                  case 0:
                    n3 = t4.payload;
                    r3 = "function" === typeof n3 ? n3.call(y3, q, r3) : n3;
                    if (null === r3 || void 0 === r3)
                      break a;
                    q = A2({}, q, r3);
                    break a;
                  case 2:
                    $g = true;
                }
              }
              null !== h3.callback && 0 !== h3.lane && (a3.flags |= 64, r3 = e2.effects, null === r3 ? e2.effects = [h3] : r3.push(h3));
            } else
              y3 = { eventTime: y3, lane: r3, tag: h3.tag, payload: h3.payload, callback: h3.callback, next: null }, null === m3 ? (l3 = m3 = y3, k2 = q) : m3 = m3.next = y3, g3 |= r3;
            h3 = h3.next;
            if (null === h3)
              if (h3 = e2.shared.pending, null === h3)
                break;
              else
                r3 = h3, h3 = r3.next, r3.next = null, e2.lastBaseUpdate = r3, e2.shared.pending = null;
          } while (1);
          null === m3 && (k2 = q);
          e2.baseState = k2;
          e2.firstBaseUpdate = l3;
          e2.lastBaseUpdate = m3;
          b3 = e2.shared.interleaved;
          if (null !== b3) {
            e2 = b3;
            do
              g3 |= e2.lane, e2 = e2.next;
            while (e2 !== b3);
          } else
            null === f3 && (e2.shared.lanes = 0);
          hh |= g3;
          a3.lanes = g3;
          a3.memoizedState = q;
        }
      }
      function ih(a3, b3, c3) {
        a3 = b3.effects;
        b3.effects = null;
        if (null !== a3)
          for (b3 = 0; b3 < a3.length; b3++) {
            var d3 = a3[b3], e2 = d3.callback;
            if (null !== e2) {
              d3.callback = null;
              d3 = c3;
              if ("function" !== typeof e2)
                throw Error(p3(191, e2));
              e2.call(d3);
            }
          }
      }
      var jh = new aa.Component().refs;
      function kh(a3, b3, c3, d3) {
        b3 = a3.memoizedState;
        c3 = c3(d3, b3);
        c3 = null === c3 || void 0 === c3 ? b3 : A2({}, b3, c3);
        a3.memoizedState = c3;
        0 === a3.lanes && (a3.updateQueue.baseState = c3);
      }
      var nh = { isMounted: function(a3) {
        return (a3 = a3._reactInternals) ? Vb(a3) === a3 : false;
      }, enqueueSetState: function(a3, b3, c3) {
        a3 = a3._reactInternals;
        var d3 = L3(), e2 = lh(a3), f3 = ch(d3, e2);
        f3.payload = b3;
        void 0 !== c3 && null !== c3 && (f3.callback = c3);
        b3 = dh(a3, f3, e2);
        null !== b3 && (mh(b3, a3, e2, d3), eh(b3, a3, e2));
      }, enqueueReplaceState: function(a3, b3, c3) {
        a3 = a3._reactInternals;
        var d3 = L3(), e2 = lh(a3), f3 = ch(d3, e2);
        f3.tag = 1;
        f3.payload = b3;
        void 0 !== c3 && null !== c3 && (f3.callback = c3);
        b3 = dh(a3, f3, e2);
        null !== b3 && (mh(b3, a3, e2, d3), eh(b3, a3, e2));
      }, enqueueForceUpdate: function(a3, b3) {
        a3 = a3._reactInternals;
        var c3 = L3(), d3 = lh(a3), e2 = ch(c3, d3);
        e2.tag = 2;
        void 0 !== b3 && null !== b3 && (e2.callback = b3);
        b3 = dh(a3, e2, d3);
        null !== b3 && (mh(b3, a3, d3, c3), eh(b3, a3, d3));
      } };
      function oh(a3, b3, c3, d3, e2, f3, g3) {
        a3 = a3.stateNode;
        return "function" === typeof a3.shouldComponentUpdate ? a3.shouldComponentUpdate(d3, f3, g3) : b3.prototype && b3.prototype.isPureReactComponent ? !Ie(c3, d3) || !Ie(e2, f3) : true;
      }
      function ph(a3, b3, c3) {
        var d3 = false, e2 = Vf;
        var f3 = b3.contextType;
        "object" === typeof f3 && null !== f3 ? f3 = Vg(f3) : (e2 = Zf(b3) ? Xf : H2.current, d3 = b3.contextTypes, f3 = (d3 = null !== d3 && void 0 !== d3) ? Yf(a3, e2) : Vf);
        b3 = new b3(c3, f3);
        a3.memoizedState = null !== b3.state && void 0 !== b3.state ? b3.state : null;
        b3.updater = nh;
        a3.stateNode = b3;
        b3._reactInternals = a3;
        d3 && (a3 = a3.stateNode, a3.__reactInternalMemoizedUnmaskedChildContext = e2, a3.__reactInternalMemoizedMaskedChildContext = f3);
        return b3;
      }
      function qh(a3, b3, c3, d3) {
        a3 = b3.state;
        "function" === typeof b3.componentWillReceiveProps && b3.componentWillReceiveProps(c3, d3);
        "function" === typeof b3.UNSAFE_componentWillReceiveProps && b3.UNSAFE_componentWillReceiveProps(c3, d3);
        b3.state !== a3 && nh.enqueueReplaceState(b3, b3.state, null);
      }
      function rh(a3, b3, c3, d3) {
        var e2 = a3.stateNode;
        e2.props = c3;
        e2.state = a3.memoizedState;
        e2.refs = jh;
        ah(a3);
        var f3 = b3.contextType;
        "object" === typeof f3 && null !== f3 ? e2.context = Vg(f3) : (f3 = Zf(b3) ? Xf : H2.current, e2.context = Yf(a3, f3));
        e2.state = a3.memoizedState;
        f3 = b3.getDerivedStateFromProps;
        "function" === typeof f3 && (kh(a3, b3, f3, c3), e2.state = a3.memoizedState);
        "function" === typeof b3.getDerivedStateFromProps || "function" === typeof e2.getSnapshotBeforeUpdate || "function" !== typeof e2.UNSAFE_componentWillMount && "function" !== typeof e2.componentWillMount || (b3 = e2.state, "function" === typeof e2.componentWillMount && e2.componentWillMount(), "function" === typeof e2.UNSAFE_componentWillMount && e2.UNSAFE_componentWillMount(), b3 !== e2.state && nh.enqueueReplaceState(e2, e2.state, null), gh(a3, c3, e2, d3), e2.state = a3.memoizedState);
        "function" === typeof e2.componentDidMount && (a3.flags |= 4194308);
      }
      function sh(a3, b3, c3) {
        a3 = c3.ref;
        if (null !== a3 && "function" !== typeof a3 && "object" !== typeof a3) {
          if (c3._owner) {
            c3 = c3._owner;
            if (c3) {
              if (1 !== c3.tag)
                throw Error(p3(309));
              var d3 = c3.stateNode;
            }
            if (!d3)
              throw Error(p3(147, a3));
            var e2 = d3, f3 = "" + a3;
            if (null !== b3 && null !== b3.ref && "function" === typeof b3.ref && b3.ref._stringRef === f3)
              return b3.ref;
            b3 = function(a4) {
              var b4 = e2.refs;
              b4 === jh && (b4 = e2.refs = {});
              null === a4 ? delete b4[f3] : b4[f3] = a4;
            };
            b3._stringRef = f3;
            return b3;
          }
          if ("string" !== typeof a3)
            throw Error(p3(284));
          if (!c3._owner)
            throw Error(p3(290, a3));
        }
        return a3;
      }
      function th(a3, b3) {
        a3 = Object.prototype.toString.call(b3);
        throw Error(p3(31, "[object Object]" === a3 ? "object with keys {" + Object.keys(b3).join(", ") + "}" : a3));
      }
      function uh(a3) {
        var b3 = a3._init;
        return b3(a3._payload);
      }
      function vh(a3) {
        function b3(b4, c4) {
          if (a3) {
            var d4 = b4.deletions;
            null === d4 ? (b4.deletions = [c4], b4.flags |= 16) : d4.push(c4);
          }
        }
        function c3(c4, d4) {
          if (!a3)
            return null;
          for (; null !== d4; )
            b3(c4, d4), d4 = d4.sibling;
          return null;
        }
        function d3(a4, b4) {
          for (a4 = /* @__PURE__ */ new Map(); null !== b4; )
            null !== b4.key ? a4.set(b4.key, b4) : a4.set(b4.index, b4), b4 = b4.sibling;
          return a4;
        }
        function e2(a4, b4) {
          a4 = wh(a4, b4);
          a4.index = 0;
          a4.sibling = null;
          return a4;
        }
        function f3(b4, c4, d4) {
          b4.index = d4;
          if (!a3)
            return b4.flags |= 1048576, c4;
          d4 = b4.alternate;
          if (null !== d4)
            return d4 = d4.index, d4 < c4 ? (b4.flags |= 2, c4) : d4;
          b4.flags |= 2;
          return c4;
        }
        function g3(b4) {
          a3 && null === b4.alternate && (b4.flags |= 2);
          return b4;
        }
        function h3(a4, b4, c4, d4) {
          if (null === b4 || 6 !== b4.tag)
            return b4 = xh(c4, a4.mode, d4), b4.return = a4, b4;
          b4 = e2(b4, c4);
          b4.return = a4;
          return b4;
        }
        function k2(a4, b4, c4, d4) {
          var f4 = c4.type;
          if (f4 === ya)
            return m3(a4, b4, c4.props.children, d4, c4.key);
          if (null !== b4 && (b4.elementType === f4 || "object" === typeof f4 && null !== f4 && f4.$$typeof === Ha && uh(f4) === b4.type))
            return d4 = e2(b4, c4.props), d4.ref = sh(a4, b4, c4), d4.return = a4, d4;
          d4 = yh(c4.type, c4.key, c4.props, null, a4.mode, d4);
          d4.ref = sh(a4, b4, c4);
          d4.return = a4;
          return d4;
        }
        function l3(a4, b4, c4, d4) {
          if (null === b4 || 4 !== b4.tag || b4.stateNode.containerInfo !== c4.containerInfo || b4.stateNode.implementation !== c4.implementation)
            return b4 = zh(c4, a4.mode, d4), b4.return = a4, b4;
          b4 = e2(b4, c4.children || []);
          b4.return = a4;
          return b4;
        }
        function m3(a4, b4, c4, d4, f4) {
          if (null === b4 || 7 !== b4.tag)
            return b4 = Ah(c4, a4.mode, d4, f4), b4.return = a4, b4;
          b4 = e2(b4, c4);
          b4.return = a4;
          return b4;
        }
        function q(a4, b4, c4) {
          if ("string" === typeof b4 && "" !== b4 || "number" === typeof b4)
            return b4 = xh("" + b4, a4.mode, c4), b4.return = a4, b4;
          if ("object" === typeof b4 && null !== b4) {
            switch (b4.$$typeof) {
              case va:
                return c4 = yh(b4.type, b4.key, b4.props, null, a4.mode, c4), c4.ref = sh(a4, null, b4), c4.return = a4, c4;
              case wa:
                return b4 = zh(b4, a4.mode, c4), b4.return = a4, b4;
              case Ha:
                var d4 = b4._init;
                return q(a4, d4(b4._payload), c4);
            }
            if (eb(b4) || Ka(b4))
              return b4 = Ah(b4, a4.mode, c4, null), b4.return = a4, b4;
            th(a4, b4);
          }
          return null;
        }
        function r3(a4, b4, c4, d4) {
          var e3 = null !== b4 ? b4.key : null;
          if ("string" === typeof c4 && "" !== c4 || "number" === typeof c4)
            return null !== e3 ? null : h3(a4, b4, "" + c4, d4);
          if ("object" === typeof c4 && null !== c4) {
            switch (c4.$$typeof) {
              case va:
                return c4.key === e3 ? k2(a4, b4, c4, d4) : null;
              case wa:
                return c4.key === e3 ? l3(a4, b4, c4, d4) : null;
              case Ha:
                return e3 = c4._init, r3(
                  a4,
                  b4,
                  e3(c4._payload),
                  d4
                );
            }
            if (eb(c4) || Ka(c4))
              return null !== e3 ? null : m3(a4, b4, c4, d4, null);
            th(a4, c4);
          }
          return null;
        }
        function y3(a4, b4, c4, d4, e3) {
          if ("string" === typeof d4 && "" !== d4 || "number" === typeof d4)
            return a4 = a4.get(c4) || null, h3(b4, a4, "" + d4, e3);
          if ("object" === typeof d4 && null !== d4) {
            switch (d4.$$typeof) {
              case va:
                return a4 = a4.get(null === d4.key ? c4 : d4.key) || null, k2(b4, a4, d4, e3);
              case wa:
                return a4 = a4.get(null === d4.key ? c4 : d4.key) || null, l3(b4, a4, d4, e3);
              case Ha:
                var f4 = d4._init;
                return y3(a4, b4, c4, f4(d4._payload), e3);
            }
            if (eb(d4) || Ka(d4))
              return a4 = a4.get(c4) || null, m3(b4, a4, d4, e3, null);
            th(b4, d4);
          }
          return null;
        }
        function n3(e3, g4, h4, k3) {
          for (var l4 = null, m4 = null, u3 = g4, w3 = g4 = 0, x3 = null; null !== u3 && w3 < h4.length; w3++) {
            u3.index > w3 ? (x3 = u3, u3 = null) : x3 = u3.sibling;
            var n4 = r3(e3, u3, h4[w3], k3);
            if (null === n4) {
              null === u3 && (u3 = x3);
              break;
            }
            a3 && u3 && null === n4.alternate && b3(e3, u3);
            g4 = f3(n4, g4, w3);
            null === m4 ? l4 = n4 : m4.sibling = n4;
            m4 = n4;
            u3 = x3;
          }
          if (w3 === h4.length)
            return c3(e3, u3), I && tg(e3, w3), l4;
          if (null === u3) {
            for (; w3 < h4.length; w3++)
              u3 = q(e3, h4[w3], k3), null !== u3 && (g4 = f3(u3, g4, w3), null === m4 ? l4 = u3 : m4.sibling = u3, m4 = u3);
            I && tg(e3, w3);
            return l4;
          }
          for (u3 = d3(e3, u3); w3 < h4.length; w3++)
            x3 = y3(u3, e3, w3, h4[w3], k3), null !== x3 && (a3 && null !== x3.alternate && u3.delete(null === x3.key ? w3 : x3.key), g4 = f3(x3, g4, w3), null === m4 ? l4 = x3 : m4.sibling = x3, m4 = x3);
          a3 && u3.forEach(function(a4) {
            return b3(e3, a4);
          });
          I && tg(e3, w3);
          return l4;
        }
        function t4(e3, g4, h4, k3) {
          var l4 = Ka(h4);
          if ("function" !== typeof l4)
            throw Error(p3(150));
          h4 = l4.call(h4);
          if (null == h4)
            throw Error(p3(151));
          for (var u3 = l4 = null, m4 = g4, w3 = g4 = 0, x3 = null, n4 = h4.next(); null !== m4 && !n4.done; w3++, n4 = h4.next()) {
            m4.index > w3 ? (x3 = m4, m4 = null) : x3 = m4.sibling;
            var t5 = r3(e3, m4, n4.value, k3);
            if (null === t5) {
              null === m4 && (m4 = x3);
              break;
            }
            a3 && m4 && null === t5.alternate && b3(e3, m4);
            g4 = f3(t5, g4, w3);
            null === u3 ? l4 = t5 : u3.sibling = t5;
            u3 = t5;
            m4 = x3;
          }
          if (n4.done)
            return c3(
              e3,
              m4
            ), I && tg(e3, w3), l4;
          if (null === m4) {
            for (; !n4.done; w3++, n4 = h4.next())
              n4 = q(e3, n4.value, k3), null !== n4 && (g4 = f3(n4, g4, w3), null === u3 ? l4 = n4 : u3.sibling = n4, u3 = n4);
            I && tg(e3, w3);
            return l4;
          }
          for (m4 = d3(e3, m4); !n4.done; w3++, n4 = h4.next())
            n4 = y3(m4, e3, w3, n4.value, k3), null !== n4 && (a3 && null !== n4.alternate && m4.delete(null === n4.key ? w3 : n4.key), g4 = f3(n4, g4, w3), null === u3 ? l4 = n4 : u3.sibling = n4, u3 = n4);
          a3 && m4.forEach(function(a4) {
            return b3(e3, a4);
          });
          I && tg(e3, w3);
          return l4;
        }
        function J(a4, d4, f4, h4) {
          "object" === typeof f4 && null !== f4 && f4.type === ya && null === f4.key && (f4 = f4.props.children);
          if ("object" === typeof f4 && null !== f4) {
            switch (f4.$$typeof) {
              case va:
                a: {
                  for (var k3 = f4.key, l4 = d4; null !== l4; ) {
                    if (l4.key === k3) {
                      k3 = f4.type;
                      if (k3 === ya) {
                        if (7 === l4.tag) {
                          c3(a4, l4.sibling);
                          d4 = e2(l4, f4.props.children);
                          d4.return = a4;
                          a4 = d4;
                          break a;
                        }
                      } else if (l4.elementType === k3 || "object" === typeof k3 && null !== k3 && k3.$$typeof === Ha && uh(k3) === l4.type) {
                        c3(a4, l4.sibling);
                        d4 = e2(l4, f4.props);
                        d4.ref = sh(a4, l4, f4);
                        d4.return = a4;
                        a4 = d4;
                        break a;
                      }
                      c3(a4, l4);
                      break;
                    } else
                      b3(a4, l4);
                    l4 = l4.sibling;
                  }
                  f4.type === ya ? (d4 = Ah(f4.props.children, a4.mode, h4, f4.key), d4.return = a4, a4 = d4) : (h4 = yh(f4.type, f4.key, f4.props, null, a4.mode, h4), h4.ref = sh(a4, d4, f4), h4.return = a4, a4 = h4);
                }
                return g3(a4);
              case wa:
                a: {
                  for (l4 = f4.key; null !== d4; ) {
                    if (d4.key === l4)
                      if (4 === d4.tag && d4.stateNode.containerInfo === f4.containerInfo && d4.stateNode.implementation === f4.implementation) {
                        c3(a4, d4.sibling);
                        d4 = e2(d4, f4.children || []);
                        d4.return = a4;
                        a4 = d4;
                        break a;
                      } else {
                        c3(a4, d4);
                        break;
                      }
                    else
                      b3(a4, d4);
                    d4 = d4.sibling;
                  }
                  d4 = zh(f4, a4.mode, h4);
                  d4.return = a4;
                  a4 = d4;
                }
                return g3(a4);
              case Ha:
                return l4 = f4._init, J(a4, d4, l4(f4._payload), h4);
            }
            if (eb(f4))
              return n3(a4, d4, f4, h4);
            if (Ka(f4))
              return t4(a4, d4, f4, h4);
            th(a4, f4);
          }
          return "string" === typeof f4 && "" !== f4 || "number" === typeof f4 ? (f4 = "" + f4, null !== d4 && 6 === d4.tag ? (c3(a4, d4.sibling), d4 = e2(d4, f4), d4.return = a4, a4 = d4) : (c3(a4, d4), d4 = xh(f4, a4.mode, h4), d4.return = a4, a4 = d4), g3(a4)) : c3(a4, d4);
        }
        return J;
      }
      var Bh = vh(true);
      var Ch = vh(false);
      var Dh = {};
      var Eh = Uf(Dh);
      var Fh = Uf(Dh);
      var Gh = Uf(Dh);
      function Hh(a3) {
        if (a3 === Dh)
          throw Error(p3(174));
        return a3;
      }
      function Ih(a3, b3) {
        G(Gh, b3);
        G(Fh, a3);
        G(Eh, Dh);
        a3 = b3.nodeType;
        switch (a3) {
          case 9:
          case 11:
            b3 = (b3 = b3.documentElement) ? b3.namespaceURI : lb(null, "");
            break;
          default:
            a3 = 8 === a3 ? b3.parentNode : b3, b3 = a3.namespaceURI || null, a3 = a3.tagName, b3 = lb(b3, a3);
        }
        E3(Eh);
        G(Eh, b3);
      }
      function Jh() {
        E3(Eh);
        E3(Fh);
        E3(Gh);
      }
      function Kh(a3) {
        Hh(Gh.current);
        var b3 = Hh(Eh.current);
        var c3 = lb(b3, a3.type);
        b3 !== c3 && (G(Fh, a3), G(Eh, c3));
      }
      function Lh(a3) {
        Fh.current === a3 && (E3(Eh), E3(Fh));
      }
      var M = Uf(0);
      function Mh(a3) {
        for (var b3 = a3; null !== b3; ) {
          if (13 === b3.tag) {
            var c3 = b3.memoizedState;
            if (null !== c3 && (c3 = c3.dehydrated, null === c3 || "$?" === c3.data || "$!" === c3.data))
              return b3;
          } else if (19 === b3.tag && void 0 !== b3.memoizedProps.revealOrder) {
            if (0 !== (b3.flags & 128))
              return b3;
          } else if (null !== b3.child) {
            b3.child.return = b3;
            b3 = b3.child;
            continue;
          }
          if (b3 === a3)
            break;
          for (; null === b3.sibling; ) {
            if (null === b3.return || b3.return === a3)
              return null;
            b3 = b3.return;
          }
          b3.sibling.return = b3.return;
          b3 = b3.sibling;
        }
        return null;
      }
      var Nh = [];
      function Oh() {
        for (var a3 = 0; a3 < Nh.length; a3++)
          Nh[a3]._workInProgressVersionPrimary = null;
        Nh.length = 0;
      }
      var Ph = ua.ReactCurrentDispatcher;
      var Qh = ua.ReactCurrentBatchConfig;
      var Rh = 0;
      var N2 = null;
      var O2 = null;
      var P2 = null;
      var Sh = false;
      var Th = false;
      var Uh = 0;
      var Vh = 0;
      function Q() {
        throw Error(p3(321));
      }
      function Wh(a3, b3) {
        if (null === b3)
          return false;
        for (var c3 = 0; c3 < b3.length && c3 < a3.length; c3++)
          if (!He(a3[c3], b3[c3]))
            return false;
        return true;
      }
      function Xh(a3, b3, c3, d3, e2, f3) {
        Rh = f3;
        N2 = b3;
        b3.memoizedState = null;
        b3.updateQueue = null;
        b3.lanes = 0;
        Ph.current = null === a3 || null === a3.memoizedState ? Yh : Zh;
        a3 = c3(d3, e2);
        if (Th) {
          f3 = 0;
          do {
            Th = false;
            Uh = 0;
            if (25 <= f3)
              throw Error(p3(301));
            f3 += 1;
            P2 = O2 = null;
            b3.updateQueue = null;
            Ph.current = $h;
            a3 = c3(d3, e2);
          } while (Th);
        }
        Ph.current = ai;
        b3 = null !== O2 && null !== O2.next;
        Rh = 0;
        P2 = O2 = N2 = null;
        Sh = false;
        if (b3)
          throw Error(p3(300));
        return a3;
      }
      function bi() {
        var a3 = 0 !== Uh;
        Uh = 0;
        return a3;
      }
      function ci() {
        var a3 = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        null === P2 ? N2.memoizedState = P2 = a3 : P2 = P2.next = a3;
        return P2;
      }
      function di() {
        if (null === O2) {
          var a3 = N2.alternate;
          a3 = null !== a3 ? a3.memoizedState : null;
        } else
          a3 = O2.next;
        var b3 = null === P2 ? N2.memoizedState : P2.next;
        if (null !== b3)
          P2 = b3, O2 = a3;
        else {
          if (null === a3)
            throw Error(p3(310));
          O2 = a3;
          a3 = { memoizedState: O2.memoizedState, baseState: O2.baseState, baseQueue: O2.baseQueue, queue: O2.queue, next: null };
          null === P2 ? N2.memoizedState = P2 = a3 : P2 = P2.next = a3;
        }
        return P2;
      }
      function ei(a3, b3) {
        return "function" === typeof b3 ? b3(a3) : b3;
      }
      function fi(a3) {
        var b3 = di(), c3 = b3.queue;
        if (null === c3)
          throw Error(p3(311));
        c3.lastRenderedReducer = a3;
        var d3 = O2, e2 = d3.baseQueue, f3 = c3.pending;
        if (null !== f3) {
          if (null !== e2) {
            var g3 = e2.next;
            e2.next = f3.next;
            f3.next = g3;
          }
          d3.baseQueue = e2 = f3;
          c3.pending = null;
        }
        if (null !== e2) {
          f3 = e2.next;
          d3 = d3.baseState;
          var h3 = g3 = null, k2 = null, l3 = f3;
          do {
            var m3 = l3.lane;
            if ((Rh & m3) === m3)
              null !== k2 && (k2 = k2.next = { lane: 0, action: l3.action, hasEagerState: l3.hasEagerState, eagerState: l3.eagerState, next: null }), d3 = l3.hasEagerState ? l3.eagerState : a3(d3, l3.action);
            else {
              var q = {
                lane: m3,
                action: l3.action,
                hasEagerState: l3.hasEagerState,
                eagerState: l3.eagerState,
                next: null
              };
              null === k2 ? (h3 = k2 = q, g3 = d3) : k2 = k2.next = q;
              N2.lanes |= m3;
              hh |= m3;
            }
            l3 = l3.next;
          } while (null !== l3 && l3 !== f3);
          null === k2 ? g3 = d3 : k2.next = h3;
          He(d3, b3.memoizedState) || (Ug = true);
          b3.memoizedState = d3;
          b3.baseState = g3;
          b3.baseQueue = k2;
          c3.lastRenderedState = d3;
        }
        a3 = c3.interleaved;
        if (null !== a3) {
          e2 = a3;
          do
            f3 = e2.lane, N2.lanes |= f3, hh |= f3, e2 = e2.next;
          while (e2 !== a3);
        } else
          null === e2 && (c3.lanes = 0);
        return [b3.memoizedState, c3.dispatch];
      }
      function gi(a3) {
        var b3 = di(), c3 = b3.queue;
        if (null === c3)
          throw Error(p3(311));
        c3.lastRenderedReducer = a3;
        var d3 = c3.dispatch, e2 = c3.pending, f3 = b3.memoizedState;
        if (null !== e2) {
          c3.pending = null;
          var g3 = e2 = e2.next;
          do
            f3 = a3(f3, g3.action), g3 = g3.next;
          while (g3 !== e2);
          He(f3, b3.memoizedState) || (Ug = true);
          b3.memoizedState = f3;
          null === b3.baseQueue && (b3.baseState = f3);
          c3.lastRenderedState = f3;
        }
        return [f3, d3];
      }
      function hi() {
      }
      function ii(a3, b3) {
        var c3 = N2, d3 = di(), e2 = b3(), f3 = !He(d3.memoizedState, e2);
        f3 && (d3.memoizedState = e2, Ug = true);
        d3 = d3.queue;
        ji(ki.bind(null, c3, d3, a3), [a3]);
        if (d3.getSnapshot !== b3 || f3 || null !== P2 && P2.memoizedState.tag & 1) {
          c3.flags |= 2048;
          li(9, mi.bind(null, c3, d3, e2, b3), void 0, null);
          if (null === R3)
            throw Error(p3(349));
          0 !== (Rh & 30) || ni(c3, b3, e2);
        }
        return e2;
      }
      function ni(a3, b3, c3) {
        a3.flags |= 16384;
        a3 = { getSnapshot: b3, value: c3 };
        b3 = N2.updateQueue;
        null === b3 ? (b3 = { lastEffect: null, stores: null }, N2.updateQueue = b3, b3.stores = [a3]) : (c3 = b3.stores, null === c3 ? b3.stores = [a3] : c3.push(a3));
      }
      function mi(a3, b3, c3, d3) {
        b3.value = c3;
        b3.getSnapshot = d3;
        oi(b3) && pi(a3);
      }
      function ki(a3, b3, c3) {
        return c3(function() {
          oi(b3) && pi(a3);
        });
      }
      function oi(a3) {
        var b3 = a3.getSnapshot;
        a3 = a3.value;
        try {
          var c3 = b3();
          return !He(a3, c3);
        } catch (d3) {
          return true;
        }
      }
      function pi(a3) {
        var b3 = Zg(a3, 1);
        null !== b3 && mh(b3, a3, 1, -1);
      }
      function qi(a3) {
        var b3 = ci();
        "function" === typeof a3 && (a3 = a3());
        b3.memoizedState = b3.baseState = a3;
        a3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: ei, lastRenderedState: a3 };
        b3.queue = a3;
        a3 = a3.dispatch = ri.bind(null, N2, a3);
        return [b3.memoizedState, a3];
      }
      function li(a3, b3, c3, d3) {
        a3 = { tag: a3, create: b3, destroy: c3, deps: d3, next: null };
        b3 = N2.updateQueue;
        null === b3 ? (b3 = { lastEffect: null, stores: null }, N2.updateQueue = b3, b3.lastEffect = a3.next = a3) : (c3 = b3.lastEffect, null === c3 ? b3.lastEffect = a3.next = a3 : (d3 = c3.next, c3.next = a3, a3.next = d3, b3.lastEffect = a3));
        return a3;
      }
      function si() {
        return di().memoizedState;
      }
      function ti(a3, b3, c3, d3) {
        var e2 = ci();
        N2.flags |= a3;
        e2.memoizedState = li(1 | b3, c3, void 0, void 0 === d3 ? null : d3);
      }
      function ui(a3, b3, c3, d3) {
        var e2 = di();
        d3 = void 0 === d3 ? null : d3;
        var f3 = void 0;
        if (null !== O2) {
          var g3 = O2.memoizedState;
          f3 = g3.destroy;
          if (null !== d3 && Wh(d3, g3.deps)) {
            e2.memoizedState = li(b3, c3, f3, d3);
            return;
          }
        }
        N2.flags |= a3;
        e2.memoizedState = li(1 | b3, c3, f3, d3);
      }
      function vi(a3, b3) {
        return ti(8390656, 8, a3, b3);
      }
      function ji(a3, b3) {
        return ui(2048, 8, a3, b3);
      }
      function wi(a3, b3) {
        return ui(4, 2, a3, b3);
      }
      function xi(a3, b3) {
        return ui(4, 4, a3, b3);
      }
      function yi(a3, b3) {
        if ("function" === typeof b3)
          return a3 = a3(), b3(a3), function() {
            b3(null);
          };
        if (null !== b3 && void 0 !== b3)
          return a3 = a3(), b3.current = a3, function() {
            b3.current = null;
          };
      }
      function zi(a3, b3, c3) {
        c3 = null !== c3 && void 0 !== c3 ? c3.concat([a3]) : null;
        return ui(4, 4, yi.bind(null, b3, a3), c3);
      }
      function Ai() {
      }
      function Bi(a3, b3) {
        var c3 = di();
        b3 = void 0 === b3 ? null : b3;
        var d3 = c3.memoizedState;
        if (null !== d3 && null !== b3 && Wh(b3, d3[1]))
          return d3[0];
        c3.memoizedState = [a3, b3];
        return a3;
      }
      function Ci(a3, b3) {
        var c3 = di();
        b3 = void 0 === b3 ? null : b3;
        var d3 = c3.memoizedState;
        if (null !== d3 && null !== b3 && Wh(b3, d3[1]))
          return d3[0];
        a3 = a3();
        c3.memoizedState = [a3, b3];
        return a3;
      }
      function Di(a3, b3, c3) {
        if (0 === (Rh & 21))
          return a3.baseState && (a3.baseState = false, Ug = true), a3.memoizedState = c3;
        He(c3, b3) || (c3 = yc(), N2.lanes |= c3, hh |= c3, a3.baseState = true);
        return b3;
      }
      function Ei(a3, b3) {
        var c3 = C2;
        C2 = 0 !== c3 && 4 > c3 ? c3 : 4;
        a3(true);
        var d3 = Qh.transition;
        Qh.transition = {};
        try {
          a3(false), b3();
        } finally {
          C2 = c3, Qh.transition = d3;
        }
      }
      function Fi() {
        return di().memoizedState;
      }
      function Gi(a3, b3, c3) {
        var d3 = lh(a3);
        c3 = { lane: d3, action: c3, hasEagerState: false, eagerState: null, next: null };
        if (Hi(a3))
          Ii(b3, c3);
        else if (c3 = Yg(a3, b3, c3, d3), null !== c3) {
          var e2 = L3();
          mh(c3, a3, d3, e2);
          Ji(c3, b3, d3);
        }
      }
      function ri(a3, b3, c3) {
        var d3 = lh(a3), e2 = { lane: d3, action: c3, hasEagerState: false, eagerState: null, next: null };
        if (Hi(a3))
          Ii(b3, e2);
        else {
          var f3 = a3.alternate;
          if (0 === a3.lanes && (null === f3 || 0 === f3.lanes) && (f3 = b3.lastRenderedReducer, null !== f3))
            try {
              var g3 = b3.lastRenderedState, h3 = f3(g3, c3);
              e2.hasEagerState = true;
              e2.eagerState = h3;
              if (He(h3, g3)) {
                var k2 = b3.interleaved;
                null === k2 ? (e2.next = e2, Xg(b3)) : (e2.next = k2.next, k2.next = e2);
                b3.interleaved = e2;
                return;
              }
            } catch (l3) {
            } finally {
            }
          c3 = Yg(a3, b3, e2, d3);
          null !== c3 && (e2 = L3(), mh(c3, a3, d3, e2), Ji(c3, b3, d3));
        }
      }
      function Hi(a3) {
        var b3 = a3.alternate;
        return a3 === N2 || null !== b3 && b3 === N2;
      }
      function Ii(a3, b3) {
        Th = Sh = true;
        var c3 = a3.pending;
        null === c3 ? b3.next = b3 : (b3.next = c3.next, c3.next = b3);
        a3.pending = b3;
      }
      function Ji(a3, b3, c3) {
        if (0 !== (c3 & 4194240)) {
          var d3 = b3.lanes;
          d3 &= a3.pendingLanes;
          c3 |= d3;
          b3.lanes = c3;
          Cc(a3, c3);
        }
      }
      var ai = { readContext: Vg, useCallback: Q, useContext: Q, useEffect: Q, useImperativeHandle: Q, useInsertionEffect: Q, useLayoutEffect: Q, useMemo: Q, useReducer: Q, useRef: Q, useState: Q, useDebugValue: Q, useDeferredValue: Q, useTransition: Q, useMutableSource: Q, useSyncExternalStore: Q, useId: Q, unstable_isNewReconciler: false };
      var Yh = { readContext: Vg, useCallback: function(a3, b3) {
        ci().memoizedState = [a3, void 0 === b3 ? null : b3];
        return a3;
      }, useContext: Vg, useEffect: vi, useImperativeHandle: function(a3, b3, c3) {
        c3 = null !== c3 && void 0 !== c3 ? c3.concat([a3]) : null;
        return ti(
          4194308,
          4,
          yi.bind(null, b3, a3),
          c3
        );
      }, useLayoutEffect: function(a3, b3) {
        return ti(4194308, 4, a3, b3);
      }, useInsertionEffect: function(a3, b3) {
        return ti(4, 2, a3, b3);
      }, useMemo: function(a3, b3) {
        var c3 = ci();
        b3 = void 0 === b3 ? null : b3;
        a3 = a3();
        c3.memoizedState = [a3, b3];
        return a3;
      }, useReducer: function(a3, b3, c3) {
        var d3 = ci();
        b3 = void 0 !== c3 ? c3(b3) : b3;
        d3.memoizedState = d3.baseState = b3;
        a3 = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a3, lastRenderedState: b3 };
        d3.queue = a3;
        a3 = a3.dispatch = Gi.bind(null, N2, a3);
        return [d3.memoizedState, a3];
      }, useRef: function(a3) {
        var b3 = ci();
        a3 = { current: a3 };
        return b3.memoizedState = a3;
      }, useState: qi, useDebugValue: Ai, useDeferredValue: function(a3) {
        return ci().memoizedState = a3;
      }, useTransition: function() {
        var a3 = qi(false), b3 = a3[0];
        a3 = Ei.bind(null, a3[1]);
        ci().memoizedState = a3;
        return [b3, a3];
      }, useMutableSource: function() {
      }, useSyncExternalStore: function(a3, b3, c3) {
        var d3 = N2, e2 = ci();
        if (I) {
          if (void 0 === c3)
            throw Error(p3(407));
          c3 = c3();
        } else {
          c3 = b3();
          if (null === R3)
            throw Error(p3(349));
          0 !== (Rh & 30) || ni(d3, b3, c3);
        }
        e2.memoizedState = c3;
        var f3 = { value: c3, getSnapshot: b3 };
        e2.queue = f3;
        vi(ki.bind(
          null,
          d3,
          f3,
          a3
        ), [a3]);
        d3.flags |= 2048;
        li(9, mi.bind(null, d3, f3, c3, b3), void 0, null);
        return c3;
      }, useId: function() {
        var a3 = ci(), b3 = R3.identifierPrefix;
        if (I) {
          var c3 = sg;
          var d3 = rg;
          c3 = (d3 & ~(1 << 32 - oc(d3) - 1)).toString(32) + c3;
          b3 = ":" + b3 + "R" + c3;
          c3 = Uh++;
          0 < c3 && (b3 += "H" + c3.toString(32));
          b3 += ":";
        } else
          c3 = Vh++, b3 = ":" + b3 + "r" + c3.toString(32) + ":";
        return a3.memoizedState = b3;
      }, unstable_isNewReconciler: false };
      var Zh = {
        readContext: Vg,
        useCallback: Bi,
        useContext: Vg,
        useEffect: ji,
        useImperativeHandle: zi,
        useInsertionEffect: wi,
        useLayoutEffect: xi,
        useMemo: Ci,
        useReducer: fi,
        useRef: si,
        useState: function() {
          return fi(ei);
        },
        useDebugValue: Ai,
        useDeferredValue: function(a3) {
          var b3 = di();
          return Di(b3, O2.memoizedState, a3);
        },
        useTransition: function() {
          var a3 = fi(ei)[0], b3 = di().memoizedState;
          return [a3, b3];
        },
        useMutableSource: hi,
        useSyncExternalStore: ii,
        useId: Fi,
        unstable_isNewReconciler: false
      };
      var $h = { readContext: Vg, useCallback: Bi, useContext: Vg, useEffect: ji, useImperativeHandle: zi, useInsertionEffect: wi, useLayoutEffect: xi, useMemo: Ci, useReducer: gi, useRef: si, useState: function() {
        return gi(ei);
      }, useDebugValue: Ai, useDeferredValue: function(a3) {
        var b3 = di();
        return null === O2 ? b3.memoizedState = a3 : Di(b3, O2.memoizedState, a3);
      }, useTransition: function() {
        var a3 = gi(ei)[0], b3 = di().memoizedState;
        return [a3, b3];
      }, useMutableSource: hi, useSyncExternalStore: ii, useId: Fi, unstable_isNewReconciler: false };
      function Ki(a3, b3) {
        try {
          var c3 = "", d3 = b3;
          do
            c3 += Pa(d3), d3 = d3.return;
          while (d3);
          var e2 = c3;
        } catch (f3) {
          e2 = "\nError generating stack: " + f3.message + "\n" + f3.stack;
        }
        return { value: a3, source: b3, stack: e2, digest: null };
      }
      function Li(a3, b3, c3) {
        return { value: a3, source: null, stack: null != c3 ? c3 : null, digest: null != b3 ? b3 : null };
      }
      function Mi(a3, b3) {
        try {
          console.error(b3.value);
        } catch (c3) {
          setTimeout(function() {
            throw c3;
          });
        }
      }
      var Ni = "function" === typeof WeakMap ? WeakMap : Map;
      function Oi(a3, b3, c3) {
        c3 = ch(-1, c3);
        c3.tag = 3;
        c3.payload = { element: null };
        var d3 = b3.value;
        c3.callback = function() {
          Pi || (Pi = true, Qi = d3);
          Mi(a3, b3);
        };
        return c3;
      }
      function Ri(a3, b3, c3) {
        c3 = ch(-1, c3);
        c3.tag = 3;
        var d3 = a3.type.getDerivedStateFromError;
        if ("function" === typeof d3) {
          var e2 = b3.value;
          c3.payload = function() {
            return d3(e2);
          };
          c3.callback = function() {
            Mi(a3, b3);
          };
        }
        var f3 = a3.stateNode;
        null !== f3 && "function" === typeof f3.componentDidCatch && (c3.callback = function() {
          Mi(a3, b3);
          "function" !== typeof d3 && (null === Si ? Si = /* @__PURE__ */ new Set([this]) : Si.add(this));
          var c4 = b3.stack;
          this.componentDidCatch(b3.value, { componentStack: null !== c4 ? c4 : "" });
        });
        return c3;
      }
      function Ti(a3, b3, c3) {
        var d3 = a3.pingCache;
        if (null === d3) {
          d3 = a3.pingCache = new Ni();
          var e2 = /* @__PURE__ */ new Set();
          d3.set(b3, e2);
        } else
          e2 = d3.get(b3), void 0 === e2 && (e2 = /* @__PURE__ */ new Set(), d3.set(b3, e2));
        e2.has(c3) || (e2.add(c3), a3 = Ui.bind(null, a3, b3, c3), b3.then(a3, a3));
      }
      function Vi(a3) {
        do {
          var b3;
          if (b3 = 13 === a3.tag)
            b3 = a3.memoizedState, b3 = null !== b3 ? null !== b3.dehydrated ? true : false : true;
          if (b3)
            return a3;
          a3 = a3.return;
        } while (null !== a3);
        return null;
      }
      function Wi(a3, b3, c3, d3, e2) {
        if (0 === (a3.mode & 1))
          return a3 === b3 ? a3.flags |= 65536 : (a3.flags |= 128, c3.flags |= 131072, c3.flags &= -52805, 1 === c3.tag && (null === c3.alternate ? c3.tag = 17 : (b3 = ch(-1, 1), b3.tag = 2, dh(c3, b3, 1))), c3.lanes |= 1), a3;
        a3.flags |= 65536;
        a3.lanes = e2;
        return a3;
      }
      var Xi = ua.ReactCurrentOwner;
      var Ug = false;
      function Yi(a3, b3, c3, d3) {
        b3.child = null === a3 ? Ch(b3, null, c3, d3) : Bh(b3, a3.child, c3, d3);
      }
      function Zi(a3, b3, c3, d3, e2) {
        c3 = c3.render;
        var f3 = b3.ref;
        Tg(b3, e2);
        d3 = Xh(a3, b3, c3, d3, f3, e2);
        c3 = bi();
        if (null !== a3 && !Ug)
          return b3.updateQueue = a3.updateQueue, b3.flags &= -2053, a3.lanes &= ~e2, $i(a3, b3, e2);
        I && c3 && vg(b3);
        b3.flags |= 1;
        Yi(a3, b3, d3, e2);
        return b3.child;
      }
      function aj(a3, b3, c3, d3, e2) {
        if (null === a3) {
          var f3 = c3.type;
          if ("function" === typeof f3 && !bj(f3) && void 0 === f3.defaultProps && null === c3.compare && void 0 === c3.defaultProps)
            return b3.tag = 15, b3.type = f3, cj(a3, b3, f3, d3, e2);
          a3 = yh(c3.type, null, d3, b3, b3.mode, e2);
          a3.ref = b3.ref;
          a3.return = b3;
          return b3.child = a3;
        }
        f3 = a3.child;
        if (0 === (a3.lanes & e2)) {
          var g3 = f3.memoizedProps;
          c3 = c3.compare;
          c3 = null !== c3 ? c3 : Ie;
          if (c3(g3, d3) && a3.ref === b3.ref)
            return $i(a3, b3, e2);
        }
        b3.flags |= 1;
        a3 = wh(f3, d3);
        a3.ref = b3.ref;
        a3.return = b3;
        return b3.child = a3;
      }
      function cj(a3, b3, c3, d3, e2) {
        if (null !== a3) {
          var f3 = a3.memoizedProps;
          if (Ie(f3, d3) && a3.ref === b3.ref)
            if (Ug = false, b3.pendingProps = d3 = f3, 0 !== (a3.lanes & e2))
              0 !== (a3.flags & 131072) && (Ug = true);
            else
              return b3.lanes = a3.lanes, $i(a3, b3, e2);
        }
        return dj(a3, b3, c3, d3, e2);
      }
      function ej(a3, b3, c3) {
        var d3 = b3.pendingProps, e2 = d3.children, f3 = null !== a3 ? a3.memoizedState : null;
        if ("hidden" === d3.mode)
          if (0 === (b3.mode & 1))
            b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G(fj, gj), gj |= c3;
          else {
            if (0 === (c3 & 1073741824))
              return a3 = null !== f3 ? f3.baseLanes | c3 : c3, b3.lanes = b3.childLanes = 1073741824, b3.memoizedState = { baseLanes: a3, cachePool: null, transitions: null }, b3.updateQueue = null, G(fj, gj), gj |= a3, null;
            b3.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
            d3 = null !== f3 ? f3.baseLanes : c3;
            G(fj, gj);
            gj |= d3;
          }
        else
          null !== f3 ? (d3 = f3.baseLanes | c3, b3.memoizedState = null) : d3 = c3, G(fj, gj), gj |= d3;
        Yi(a3, b3, e2, c3);
        return b3.child;
      }
      function hj(a3, b3) {
        var c3 = b3.ref;
        if (null === a3 && null !== c3 || null !== a3 && a3.ref !== c3)
          b3.flags |= 512, b3.flags |= 2097152;
      }
      function dj(a3, b3, c3, d3, e2) {
        var f3 = Zf(c3) ? Xf : H2.current;
        f3 = Yf(b3, f3);
        Tg(b3, e2);
        c3 = Xh(a3, b3, c3, d3, f3, e2);
        d3 = bi();
        if (null !== a3 && !Ug)
          return b3.updateQueue = a3.updateQueue, b3.flags &= -2053, a3.lanes &= ~e2, $i(a3, b3, e2);
        I && d3 && vg(b3);
        b3.flags |= 1;
        Yi(a3, b3, c3, e2);
        return b3.child;
      }
      function ij(a3, b3, c3, d3, e2) {
        if (Zf(c3)) {
          var f3 = true;
          cg(b3);
        } else
          f3 = false;
        Tg(b3, e2);
        if (null === b3.stateNode)
          jj(a3, b3), ph(b3, c3, d3), rh(b3, c3, d3, e2), d3 = true;
        else if (null === a3) {
          var g3 = b3.stateNode, h3 = b3.memoizedProps;
          g3.props = h3;
          var k2 = g3.context, l3 = c3.contextType;
          "object" === typeof l3 && null !== l3 ? l3 = Vg(l3) : (l3 = Zf(c3) ? Xf : H2.current, l3 = Yf(b3, l3));
          var m3 = c3.getDerivedStateFromProps, q = "function" === typeof m3 || "function" === typeof g3.getSnapshotBeforeUpdate;
          q || "function" !== typeof g3.UNSAFE_componentWillReceiveProps && "function" !== typeof g3.componentWillReceiveProps || (h3 !== d3 || k2 !== l3) && qh(b3, g3, d3, l3);
          $g = false;
          var r3 = b3.memoizedState;
          g3.state = r3;
          gh(b3, d3, g3, e2);
          k2 = b3.memoizedState;
          h3 !== d3 || r3 !== k2 || Wf.current || $g ? ("function" === typeof m3 && (kh(b3, c3, m3, d3), k2 = b3.memoizedState), (h3 = $g || oh(b3, c3, h3, d3, r3, k2, l3)) ? (q || "function" !== typeof g3.UNSAFE_componentWillMount && "function" !== typeof g3.componentWillMount || ("function" === typeof g3.componentWillMount && g3.componentWillMount(), "function" === typeof g3.UNSAFE_componentWillMount && g3.UNSAFE_componentWillMount()), "function" === typeof g3.componentDidMount && (b3.flags |= 4194308)) : ("function" === typeof g3.componentDidMount && (b3.flags |= 4194308), b3.memoizedProps = d3, b3.memoizedState = k2), g3.props = d3, g3.state = k2, g3.context = l3, d3 = h3) : ("function" === typeof g3.componentDidMount && (b3.flags |= 4194308), d3 = false);
        } else {
          g3 = b3.stateNode;
          bh(a3, b3);
          h3 = b3.memoizedProps;
          l3 = b3.type === b3.elementType ? h3 : Lg(b3.type, h3);
          g3.props = l3;
          q = b3.pendingProps;
          r3 = g3.context;
          k2 = c3.contextType;
          "object" === typeof k2 && null !== k2 ? k2 = Vg(k2) : (k2 = Zf(c3) ? Xf : H2.current, k2 = Yf(b3, k2));
          var y3 = c3.getDerivedStateFromProps;
          (m3 = "function" === typeof y3 || "function" === typeof g3.getSnapshotBeforeUpdate) || "function" !== typeof g3.UNSAFE_componentWillReceiveProps && "function" !== typeof g3.componentWillReceiveProps || (h3 !== q || r3 !== k2) && qh(b3, g3, d3, k2);
          $g = false;
          r3 = b3.memoizedState;
          g3.state = r3;
          gh(b3, d3, g3, e2);
          var n3 = b3.memoizedState;
          h3 !== q || r3 !== n3 || Wf.current || $g ? ("function" === typeof y3 && (kh(b3, c3, y3, d3), n3 = b3.memoizedState), (l3 = $g || oh(b3, c3, l3, d3, r3, n3, k2) || false) ? (m3 || "function" !== typeof g3.UNSAFE_componentWillUpdate && "function" !== typeof g3.componentWillUpdate || ("function" === typeof g3.componentWillUpdate && g3.componentWillUpdate(d3, n3, k2), "function" === typeof g3.UNSAFE_componentWillUpdate && g3.UNSAFE_componentWillUpdate(d3, n3, k2)), "function" === typeof g3.componentDidUpdate && (b3.flags |= 4), "function" === typeof g3.getSnapshotBeforeUpdate && (b3.flags |= 1024)) : ("function" !== typeof g3.componentDidUpdate || h3 === a3.memoizedProps && r3 === a3.memoizedState || (b3.flags |= 4), "function" !== typeof g3.getSnapshotBeforeUpdate || h3 === a3.memoizedProps && r3 === a3.memoizedState || (b3.flags |= 1024), b3.memoizedProps = d3, b3.memoizedState = n3), g3.props = d3, g3.state = n3, g3.context = k2, d3 = l3) : ("function" !== typeof g3.componentDidUpdate || h3 === a3.memoizedProps && r3 === a3.memoizedState || (b3.flags |= 4), "function" !== typeof g3.getSnapshotBeforeUpdate || h3 === a3.memoizedProps && r3 === a3.memoizedState || (b3.flags |= 1024), d3 = false);
        }
        return kj(a3, b3, c3, d3, f3, e2);
      }
      function kj(a3, b3, c3, d3, e2, f3) {
        hj(a3, b3);
        var g3 = 0 !== (b3.flags & 128);
        if (!d3 && !g3)
          return e2 && dg(b3, c3, false), $i(a3, b3, f3);
        d3 = b3.stateNode;
        Xi.current = b3;
        var h3 = g3 && "function" !== typeof c3.getDerivedStateFromError ? null : d3.render();
        b3.flags |= 1;
        null !== a3 && g3 ? (b3.child = Bh(b3, a3.child, null, f3), b3.child = Bh(b3, null, h3, f3)) : Yi(a3, b3, h3, f3);
        b3.memoizedState = d3.state;
        e2 && dg(b3, c3, true);
        return b3.child;
      }
      function lj(a3) {
        var b3 = a3.stateNode;
        b3.pendingContext ? ag(a3, b3.pendingContext, b3.pendingContext !== b3.context) : b3.context && ag(a3, b3.context, false);
        Ih(a3, b3.containerInfo);
      }
      function mj(a3, b3, c3, d3, e2) {
        Ig();
        Jg(e2);
        b3.flags |= 256;
        Yi(a3, b3, c3, d3);
        return b3.child;
      }
      var nj = { dehydrated: null, treeContext: null, retryLane: 0 };
      function oj(a3) {
        return { baseLanes: a3, cachePool: null, transitions: null };
      }
      function pj(a3, b3, c3) {
        var d3 = b3.pendingProps, e2 = M.current, f3 = false, g3 = 0 !== (b3.flags & 128), h3;
        (h3 = g3) || (h3 = null !== a3 && null === a3.memoizedState ? false : 0 !== (e2 & 2));
        if (h3)
          f3 = true, b3.flags &= -129;
        else if (null === a3 || null !== a3.memoizedState)
          e2 |= 1;
        G(M, e2 & 1);
        if (null === a3) {
          Eg(b3);
          a3 = b3.memoizedState;
          if (null !== a3 && (a3 = a3.dehydrated, null !== a3))
            return 0 === (b3.mode & 1) ? b3.lanes = 1 : "$!" === a3.data ? b3.lanes = 8 : b3.lanes = 1073741824, null;
          g3 = d3.children;
          a3 = d3.fallback;
          return f3 ? (d3 = b3.mode, f3 = b3.child, g3 = { mode: "hidden", children: g3 }, 0 === (d3 & 1) && null !== f3 ? (f3.childLanes = 0, f3.pendingProps = g3) : f3 = qj(g3, d3, 0, null), a3 = Ah(a3, d3, c3, null), f3.return = b3, a3.return = b3, f3.sibling = a3, b3.child = f3, b3.child.memoizedState = oj(c3), b3.memoizedState = nj, a3) : rj(b3, g3);
        }
        e2 = a3.memoizedState;
        if (null !== e2 && (h3 = e2.dehydrated, null !== h3))
          return sj(a3, b3, g3, d3, h3, e2, c3);
        if (f3) {
          f3 = d3.fallback;
          g3 = b3.mode;
          e2 = a3.child;
          h3 = e2.sibling;
          var k2 = { mode: "hidden", children: d3.children };
          0 === (g3 & 1) && b3.child !== e2 ? (d3 = b3.child, d3.childLanes = 0, d3.pendingProps = k2, b3.deletions = null) : (d3 = wh(e2, k2), d3.subtreeFlags = e2.subtreeFlags & 14680064);
          null !== h3 ? f3 = wh(h3, f3) : (f3 = Ah(f3, g3, c3, null), f3.flags |= 2);
          f3.return = b3;
          d3.return = b3;
          d3.sibling = f3;
          b3.child = d3;
          d3 = f3;
          f3 = b3.child;
          g3 = a3.child.memoizedState;
          g3 = null === g3 ? oj(c3) : { baseLanes: g3.baseLanes | c3, cachePool: null, transitions: g3.transitions };
          f3.memoizedState = g3;
          f3.childLanes = a3.childLanes & ~c3;
          b3.memoizedState = nj;
          return d3;
        }
        f3 = a3.child;
        a3 = f3.sibling;
        d3 = wh(f3, { mode: "visible", children: d3.children });
        0 === (b3.mode & 1) && (d3.lanes = c3);
        d3.return = b3;
        d3.sibling = null;
        null !== a3 && (c3 = b3.deletions, null === c3 ? (b3.deletions = [a3], b3.flags |= 16) : c3.push(a3));
        b3.child = d3;
        b3.memoizedState = null;
        return d3;
      }
      function rj(a3, b3) {
        b3 = qj({ mode: "visible", children: b3 }, a3.mode, 0, null);
        b3.return = a3;
        return a3.child = b3;
      }
      function tj(a3, b3, c3, d3) {
        null !== d3 && Jg(d3);
        Bh(b3, a3.child, null, c3);
        a3 = rj(b3, b3.pendingProps.children);
        a3.flags |= 2;
        b3.memoizedState = null;
        return a3;
      }
      function sj(a3, b3, c3, d3, e2, f3, g3) {
        if (c3) {
          if (b3.flags & 256)
            return b3.flags &= -257, d3 = Li(Error(p3(422))), tj(a3, b3, g3, d3);
          if (null !== b3.memoizedState)
            return b3.child = a3.child, b3.flags |= 128, null;
          f3 = d3.fallback;
          e2 = b3.mode;
          d3 = qj({ mode: "visible", children: d3.children }, e2, 0, null);
          f3 = Ah(f3, e2, g3, null);
          f3.flags |= 2;
          d3.return = b3;
          f3.return = b3;
          d3.sibling = f3;
          b3.child = d3;
          0 !== (b3.mode & 1) && Bh(b3, a3.child, null, g3);
          b3.child.memoizedState = oj(g3);
          b3.memoizedState = nj;
          return f3;
        }
        if (0 === (b3.mode & 1))
          return tj(a3, b3, g3, null);
        if ("$!" === e2.data) {
          d3 = e2.nextSibling && e2.nextSibling.dataset;
          if (d3)
            var h3 = d3.dgst;
          d3 = h3;
          f3 = Error(p3(419));
          d3 = Li(f3, d3, void 0);
          return tj(a3, b3, g3, d3);
        }
        h3 = 0 !== (g3 & a3.childLanes);
        if (Ug || h3) {
          d3 = R3;
          if (null !== d3) {
            switch (g3 & -g3) {
              case 4:
                e2 = 2;
                break;
              case 16:
                e2 = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e2 = 32;
                break;
              case 536870912:
                e2 = 268435456;
                break;
              default:
                e2 = 0;
            }
            e2 = 0 !== (e2 & (d3.suspendedLanes | g3)) ? 0 : e2;
            0 !== e2 && e2 !== f3.retryLane && (f3.retryLane = e2, Zg(a3, e2), mh(d3, a3, e2, -1));
          }
          uj();
          d3 = Li(Error(p3(421)));
          return tj(a3, b3, g3, d3);
        }
        if ("$?" === e2.data)
          return b3.flags |= 128, b3.child = a3.child, b3 = vj.bind(null, a3), e2._reactRetry = b3, null;
        a3 = f3.treeContext;
        yg = Lf(e2.nextSibling);
        xg = b3;
        I = true;
        zg = null;
        null !== a3 && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a3.id, sg = a3.overflow, qg = b3);
        b3 = rj(b3, d3.children);
        b3.flags |= 4096;
        return b3;
      }
      function wj(a3, b3, c3) {
        a3.lanes |= b3;
        var d3 = a3.alternate;
        null !== d3 && (d3.lanes |= b3);
        Sg(a3.return, b3, c3);
      }
      function xj(a3, b3, c3, d3, e2) {
        var f3 = a3.memoizedState;
        null === f3 ? a3.memoizedState = { isBackwards: b3, rendering: null, renderingStartTime: 0, last: d3, tail: c3, tailMode: e2 } : (f3.isBackwards = b3, f3.rendering = null, f3.renderingStartTime = 0, f3.last = d3, f3.tail = c3, f3.tailMode = e2);
      }
      function yj(a3, b3, c3) {
        var d3 = b3.pendingProps, e2 = d3.revealOrder, f3 = d3.tail;
        Yi(a3, b3, d3.children, c3);
        d3 = M.current;
        if (0 !== (d3 & 2))
          d3 = d3 & 1 | 2, b3.flags |= 128;
        else {
          if (null !== a3 && 0 !== (a3.flags & 128))
            a:
              for (a3 = b3.child; null !== a3; ) {
                if (13 === a3.tag)
                  null !== a3.memoizedState && wj(a3, c3, b3);
                else if (19 === a3.tag)
                  wj(a3, c3, b3);
                else if (null !== a3.child) {
                  a3.child.return = a3;
                  a3 = a3.child;
                  continue;
                }
                if (a3 === b3)
                  break a;
                for (; null === a3.sibling; ) {
                  if (null === a3.return || a3.return === b3)
                    break a;
                  a3 = a3.return;
                }
                a3.sibling.return = a3.return;
                a3 = a3.sibling;
              }
          d3 &= 1;
        }
        G(M, d3);
        if (0 === (b3.mode & 1))
          b3.memoizedState = null;
        else
          switch (e2) {
            case "forwards":
              c3 = b3.child;
              for (e2 = null; null !== c3; )
                a3 = c3.alternate, null !== a3 && null === Mh(a3) && (e2 = c3), c3 = c3.sibling;
              c3 = e2;
              null === c3 ? (e2 = b3.child, b3.child = null) : (e2 = c3.sibling, c3.sibling = null);
              xj(b3, false, e2, c3, f3);
              break;
            case "backwards":
              c3 = null;
              e2 = b3.child;
              for (b3.child = null; null !== e2; ) {
                a3 = e2.alternate;
                if (null !== a3 && null === Mh(a3)) {
                  b3.child = e2;
                  break;
                }
                a3 = e2.sibling;
                e2.sibling = c3;
                c3 = e2;
                e2 = a3;
              }
              xj(b3, true, c3, null, f3);
              break;
            case "together":
              xj(b3, false, null, null, void 0);
              break;
            default:
              b3.memoizedState = null;
          }
        return b3.child;
      }
      function jj(a3, b3) {
        0 === (b3.mode & 1) && null !== a3 && (a3.alternate = null, b3.alternate = null, b3.flags |= 2);
      }
      function $i(a3, b3, c3) {
        null !== a3 && (b3.dependencies = a3.dependencies);
        hh |= b3.lanes;
        if (0 === (c3 & b3.childLanes))
          return null;
        if (null !== a3 && b3.child !== a3.child)
          throw Error(p3(153));
        if (null !== b3.child) {
          a3 = b3.child;
          c3 = wh(a3, a3.pendingProps);
          b3.child = c3;
          for (c3.return = b3; null !== a3.sibling; )
            a3 = a3.sibling, c3 = c3.sibling = wh(a3, a3.pendingProps), c3.return = b3;
          c3.sibling = null;
        }
        return b3.child;
      }
      function zj(a3, b3, c3) {
        switch (b3.tag) {
          case 3:
            lj(b3);
            Ig();
            break;
          case 5:
            Kh(b3);
            break;
          case 1:
            Zf(b3.type) && cg(b3);
            break;
          case 4:
            Ih(b3, b3.stateNode.containerInfo);
            break;
          case 10:
            var d3 = b3.type._context, e2 = b3.memoizedProps.value;
            G(Mg, d3._currentValue);
            d3._currentValue = e2;
            break;
          case 13:
            d3 = b3.memoizedState;
            if (null !== d3) {
              if (null !== d3.dehydrated)
                return G(M, M.current & 1), b3.flags |= 128, null;
              if (0 !== (c3 & b3.child.childLanes))
                return pj(a3, b3, c3);
              G(M, M.current & 1);
              a3 = $i(a3, b3, c3);
              return null !== a3 ? a3.sibling : null;
            }
            G(M, M.current & 1);
            break;
          case 19:
            d3 = 0 !== (c3 & b3.childLanes);
            if (0 !== (a3.flags & 128)) {
              if (d3)
                return yj(a3, b3, c3);
              b3.flags |= 128;
            }
            e2 = b3.memoizedState;
            null !== e2 && (e2.rendering = null, e2.tail = null, e2.lastEffect = null);
            G(M, M.current);
            if (d3)
              break;
            else
              return null;
          case 22:
          case 23:
            return b3.lanes = 0, ej(a3, b3, c3);
        }
        return $i(a3, b3, c3);
      }
      var Aj;
      var Bj;
      var Cj;
      var Dj;
      Aj = function(a3, b3) {
        for (var c3 = b3.child; null !== c3; ) {
          if (5 === c3.tag || 6 === c3.tag)
            a3.appendChild(c3.stateNode);
          else if (4 !== c3.tag && null !== c3.child) {
            c3.child.return = c3;
            c3 = c3.child;
            continue;
          }
          if (c3 === b3)
            break;
          for (; null === c3.sibling; ) {
            if (null === c3.return || c3.return === b3)
              return;
            c3 = c3.return;
          }
          c3.sibling.return = c3.return;
          c3 = c3.sibling;
        }
      };
      Bj = function() {
      };
      Cj = function(a3, b3, c3, d3) {
        var e2 = a3.memoizedProps;
        if (e2 !== d3) {
          a3 = b3.stateNode;
          Hh(Eh.current);
          var f3 = null;
          switch (c3) {
            case "input":
              e2 = Ya(a3, e2);
              d3 = Ya(a3, d3);
              f3 = [];
              break;
            case "select":
              e2 = A2({}, e2, { value: void 0 });
              d3 = A2({}, d3, { value: void 0 });
              f3 = [];
              break;
            case "textarea":
              e2 = gb(a3, e2);
              d3 = gb(a3, d3);
              f3 = [];
              break;
            default:
              "function" !== typeof e2.onClick && "function" === typeof d3.onClick && (a3.onclick = Bf);
          }
          ub(c3, d3);
          var g3;
          c3 = null;
          for (l3 in e2)
            if (!d3.hasOwnProperty(l3) && e2.hasOwnProperty(l3) && null != e2[l3])
              if ("style" === l3) {
                var h3 = e2[l3];
                for (g3 in h3)
                  h3.hasOwnProperty(g3) && (c3 || (c3 = {}), c3[g3] = "");
              } else
                "dangerouslySetInnerHTML" !== l3 && "children" !== l3 && "suppressContentEditableWarning" !== l3 && "suppressHydrationWarning" !== l3 && "autoFocus" !== l3 && (ea.hasOwnProperty(l3) ? f3 || (f3 = []) : (f3 = f3 || []).push(l3, null));
          for (l3 in d3) {
            var k2 = d3[l3];
            h3 = null != e2 ? e2[l3] : void 0;
            if (d3.hasOwnProperty(l3) && k2 !== h3 && (null != k2 || null != h3))
              if ("style" === l3)
                if (h3) {
                  for (g3 in h3)
                    !h3.hasOwnProperty(g3) || k2 && k2.hasOwnProperty(g3) || (c3 || (c3 = {}), c3[g3] = "");
                  for (g3 in k2)
                    k2.hasOwnProperty(g3) && h3[g3] !== k2[g3] && (c3 || (c3 = {}), c3[g3] = k2[g3]);
                } else
                  c3 || (f3 || (f3 = []), f3.push(
                    l3,
                    c3
                  )), c3 = k2;
              else
                "dangerouslySetInnerHTML" === l3 ? (k2 = k2 ? k2.__html : void 0, h3 = h3 ? h3.__html : void 0, null != k2 && h3 !== k2 && (f3 = f3 || []).push(l3, k2)) : "children" === l3 ? "string" !== typeof k2 && "number" !== typeof k2 || (f3 = f3 || []).push(l3, "" + k2) : "suppressContentEditableWarning" !== l3 && "suppressHydrationWarning" !== l3 && (ea.hasOwnProperty(l3) ? (null != k2 && "onScroll" === l3 && D3("scroll", a3), f3 || h3 === k2 || (f3 = [])) : (f3 = f3 || []).push(l3, k2));
          }
          c3 && (f3 = f3 || []).push("style", c3);
          var l3 = f3;
          if (b3.updateQueue = l3)
            b3.flags |= 4;
        }
      };
      Dj = function(a3, b3, c3, d3) {
        c3 !== d3 && (b3.flags |= 4);
      };
      function Ej(a3, b3) {
        if (!I)
          switch (a3.tailMode) {
            case "hidden":
              b3 = a3.tail;
              for (var c3 = null; null !== b3; )
                null !== b3.alternate && (c3 = b3), b3 = b3.sibling;
              null === c3 ? a3.tail = null : c3.sibling = null;
              break;
            case "collapsed":
              c3 = a3.tail;
              for (var d3 = null; null !== c3; )
                null !== c3.alternate && (d3 = c3), c3 = c3.sibling;
              null === d3 ? b3 || null === a3.tail ? a3.tail = null : a3.tail.sibling = null : d3.sibling = null;
          }
      }
      function S2(a3) {
        var b3 = null !== a3.alternate && a3.alternate.child === a3.child, c3 = 0, d3 = 0;
        if (b3)
          for (var e2 = a3.child; null !== e2; )
            c3 |= e2.lanes | e2.childLanes, d3 |= e2.subtreeFlags & 14680064, d3 |= e2.flags & 14680064, e2.return = a3, e2 = e2.sibling;
        else
          for (e2 = a3.child; null !== e2; )
            c3 |= e2.lanes | e2.childLanes, d3 |= e2.subtreeFlags, d3 |= e2.flags, e2.return = a3, e2 = e2.sibling;
        a3.subtreeFlags |= d3;
        a3.childLanes = c3;
        return b3;
      }
      function Fj(a3, b3, c3) {
        var d3 = b3.pendingProps;
        wg(b3);
        switch (b3.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return S2(b3), null;
          case 1:
            return Zf(b3.type) && $f(), S2(b3), null;
          case 3:
            d3 = b3.stateNode;
            Jh();
            E3(Wf);
            E3(H2);
            Oh();
            d3.pendingContext && (d3.context = d3.pendingContext, d3.pendingContext = null);
            if (null === a3 || null === a3.child)
              Gg(b3) ? b3.flags |= 4 : null === a3 || a3.memoizedState.isDehydrated && 0 === (b3.flags & 256) || (b3.flags |= 1024, null !== zg && (Gj(zg), zg = null));
            Bj(a3, b3);
            S2(b3);
            return null;
          case 5:
            Lh(b3);
            var e2 = Hh(Gh.current);
            c3 = b3.type;
            if (null !== a3 && null != b3.stateNode)
              Cj(a3, b3, c3, d3, e2), a3.ref !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
            else {
              if (!d3) {
                if (null === b3.stateNode)
                  throw Error(p3(166));
                S2(b3);
                return null;
              }
              a3 = Hh(Eh.current);
              if (Gg(b3)) {
                d3 = b3.stateNode;
                c3 = b3.type;
                var f3 = b3.memoizedProps;
                d3[Of] = b3;
                d3[Pf] = f3;
                a3 = 0 !== (b3.mode & 1);
                switch (c3) {
                  case "dialog":
                    D3("cancel", d3);
                    D3("close", d3);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D3("load", d3);
                    break;
                  case "video":
                  case "audio":
                    for (e2 = 0; e2 < lf.length; e2++)
                      D3(lf[e2], d3);
                    break;
                  case "source":
                    D3("error", d3);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D3(
                      "error",
                      d3
                    );
                    D3("load", d3);
                    break;
                  case "details":
                    D3("toggle", d3);
                    break;
                  case "input":
                    Za(d3, f3);
                    D3("invalid", d3);
                    break;
                  case "select":
                    d3._wrapperState = { wasMultiple: !!f3.multiple };
                    D3("invalid", d3);
                    break;
                  case "textarea":
                    hb(d3, f3), D3("invalid", d3);
                }
                ub(c3, f3);
                e2 = null;
                for (var g3 in f3)
                  if (f3.hasOwnProperty(g3)) {
                    var h3 = f3[g3];
                    "children" === g3 ? "string" === typeof h3 ? d3.textContent !== h3 && (true !== f3.suppressHydrationWarning && Af(d3.textContent, h3, a3), e2 = ["children", h3]) : "number" === typeof h3 && d3.textContent !== "" + h3 && (true !== f3.suppressHydrationWarning && Af(
                      d3.textContent,
                      h3,
                      a3
                    ), e2 = ["children", "" + h3]) : ea.hasOwnProperty(g3) && null != h3 && "onScroll" === g3 && D3("scroll", d3);
                  }
                switch (c3) {
                  case "input":
                    Va(d3);
                    db(d3, f3, true);
                    break;
                  case "textarea":
                    Va(d3);
                    jb(d3);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    "function" === typeof f3.onClick && (d3.onclick = Bf);
                }
                d3 = e2;
                b3.updateQueue = d3;
                null !== d3 && (b3.flags |= 4);
              } else {
                g3 = 9 === e2.nodeType ? e2 : e2.ownerDocument;
                "http://www.w3.org/1999/xhtml" === a3 && (a3 = kb(c3));
                "http://www.w3.org/1999/xhtml" === a3 ? "script" === c3 ? (a3 = g3.createElement("div"), a3.innerHTML = "<script><\/script>", a3 = a3.removeChild(a3.firstChild)) : "string" === typeof d3.is ? a3 = g3.createElement(c3, { is: d3.is }) : (a3 = g3.createElement(c3), "select" === c3 && (g3 = a3, d3.multiple ? g3.multiple = true : d3.size && (g3.size = d3.size))) : a3 = g3.createElementNS(a3, c3);
                a3[Of] = b3;
                a3[Pf] = d3;
                Aj(a3, b3, false, false);
                b3.stateNode = a3;
                a: {
                  g3 = vb(c3, d3);
                  switch (c3) {
                    case "dialog":
                      D3("cancel", a3);
                      D3("close", a3);
                      e2 = d3;
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      D3("load", a3);
                      e2 = d3;
                      break;
                    case "video":
                    case "audio":
                      for (e2 = 0; e2 < lf.length; e2++)
                        D3(lf[e2], a3);
                      e2 = d3;
                      break;
                    case "source":
                      D3("error", a3);
                      e2 = d3;
                      break;
                    case "img":
                    case "image":
                    case "link":
                      D3(
                        "error",
                        a3
                      );
                      D3("load", a3);
                      e2 = d3;
                      break;
                    case "details":
                      D3("toggle", a3);
                      e2 = d3;
                      break;
                    case "input":
                      Za(a3, d3);
                      e2 = Ya(a3, d3);
                      D3("invalid", a3);
                      break;
                    case "option":
                      e2 = d3;
                      break;
                    case "select":
                      a3._wrapperState = { wasMultiple: !!d3.multiple };
                      e2 = A2({}, d3, { value: void 0 });
                      D3("invalid", a3);
                      break;
                    case "textarea":
                      hb(a3, d3);
                      e2 = gb(a3, d3);
                      D3("invalid", a3);
                      break;
                    default:
                      e2 = d3;
                  }
                  ub(c3, e2);
                  h3 = e2;
                  for (f3 in h3)
                    if (h3.hasOwnProperty(f3)) {
                      var k2 = h3[f3];
                      "style" === f3 ? sb(a3, k2) : "dangerouslySetInnerHTML" === f3 ? (k2 = k2 ? k2.__html : void 0, null != k2 && nb(a3, k2)) : "children" === f3 ? "string" === typeof k2 ? ("textarea" !== c3 || "" !== k2) && ob(a3, k2) : "number" === typeof k2 && ob(a3, "" + k2) : "suppressContentEditableWarning" !== f3 && "suppressHydrationWarning" !== f3 && "autoFocus" !== f3 && (ea.hasOwnProperty(f3) ? null != k2 && "onScroll" === f3 && D3("scroll", a3) : null != k2 && ta(a3, f3, k2, g3));
                    }
                  switch (c3) {
                    case "input":
                      Va(a3);
                      db(a3, d3, false);
                      break;
                    case "textarea":
                      Va(a3);
                      jb(a3);
                      break;
                    case "option":
                      null != d3.value && a3.setAttribute("value", "" + Sa(d3.value));
                      break;
                    case "select":
                      a3.multiple = !!d3.multiple;
                      f3 = d3.value;
                      null != f3 ? fb(a3, !!d3.multiple, f3, false) : null != d3.defaultValue && fb(
                        a3,
                        !!d3.multiple,
                        d3.defaultValue,
                        true
                      );
                      break;
                    default:
                      "function" === typeof e2.onClick && (a3.onclick = Bf);
                  }
                  switch (c3) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      d3 = !!d3.autoFocus;
                      break a;
                    case "img":
                      d3 = true;
                      break a;
                    default:
                      d3 = false;
                  }
                }
                d3 && (b3.flags |= 4);
              }
              null !== b3.ref && (b3.flags |= 512, b3.flags |= 2097152);
            }
            S2(b3);
            return null;
          case 6:
            if (a3 && null != b3.stateNode)
              Dj(a3, b3, a3.memoizedProps, d3);
            else {
              if ("string" !== typeof d3 && null === b3.stateNode)
                throw Error(p3(166));
              c3 = Hh(Gh.current);
              Hh(Eh.current);
              if (Gg(b3)) {
                d3 = b3.stateNode;
                c3 = b3.memoizedProps;
                d3[Of] = b3;
                if (f3 = d3.nodeValue !== c3) {
                  if (a3 = xg, null !== a3)
                    switch (a3.tag) {
                      case 3:
                        Af(d3.nodeValue, c3, 0 !== (a3.mode & 1));
                        break;
                      case 5:
                        true !== a3.memoizedProps.suppressHydrationWarning && Af(d3.nodeValue, c3, 0 !== (a3.mode & 1));
                    }
                }
                f3 && (b3.flags |= 4);
              } else
                d3 = (9 === c3.nodeType ? c3 : c3.ownerDocument).createTextNode(d3), d3[Of] = b3, b3.stateNode = d3;
            }
            S2(b3);
            return null;
          case 13:
            E3(M);
            d3 = b3.memoizedState;
            if (null === a3 || null !== a3.memoizedState && null !== a3.memoizedState.dehydrated) {
              if (I && null !== yg && 0 !== (b3.mode & 1) && 0 === (b3.flags & 128))
                Hg(), Ig(), b3.flags |= 98560, f3 = false;
              else if (f3 = Gg(b3), null !== d3 && null !== d3.dehydrated) {
                if (null === a3) {
                  if (!f3)
                    throw Error(p3(318));
                  f3 = b3.memoizedState;
                  f3 = null !== f3 ? f3.dehydrated : null;
                  if (!f3)
                    throw Error(p3(317));
                  f3[Of] = b3;
                } else
                  Ig(), 0 === (b3.flags & 128) && (b3.memoizedState = null), b3.flags |= 4;
                S2(b3);
                f3 = false;
              } else
                null !== zg && (Gj(zg), zg = null), f3 = true;
              if (!f3)
                return b3.flags & 65536 ? b3 : null;
            }
            if (0 !== (b3.flags & 128))
              return b3.lanes = c3, b3;
            d3 = null !== d3;
            d3 !== (null !== a3 && null !== a3.memoizedState) && d3 && (b3.child.flags |= 8192, 0 !== (b3.mode & 1) && (null === a3 || 0 !== (M.current & 1) ? 0 === T3 && (T3 = 3) : uj()));
            null !== b3.updateQueue && (b3.flags |= 4);
            S2(b3);
            return null;
          case 4:
            return Jh(), Bj(a3, b3), null === a3 && sf(b3.stateNode.containerInfo), S2(b3), null;
          case 10:
            return Rg(b3.type._context), S2(b3), null;
          case 17:
            return Zf(b3.type) && $f(), S2(b3), null;
          case 19:
            E3(M);
            f3 = b3.memoizedState;
            if (null === f3)
              return S2(b3), null;
            d3 = 0 !== (b3.flags & 128);
            g3 = f3.rendering;
            if (null === g3)
              if (d3)
                Ej(f3, false);
              else {
                if (0 !== T3 || null !== a3 && 0 !== (a3.flags & 128))
                  for (a3 = b3.child; null !== a3; ) {
                    g3 = Mh(a3);
                    if (null !== g3) {
                      b3.flags |= 128;
                      Ej(f3, false);
                      d3 = g3.updateQueue;
                      null !== d3 && (b3.updateQueue = d3, b3.flags |= 4);
                      b3.subtreeFlags = 0;
                      d3 = c3;
                      for (c3 = b3.child; null !== c3; )
                        f3 = c3, a3 = d3, f3.flags &= 14680066, g3 = f3.alternate, null === g3 ? (f3.childLanes = 0, f3.lanes = a3, f3.child = null, f3.subtreeFlags = 0, f3.memoizedProps = null, f3.memoizedState = null, f3.updateQueue = null, f3.dependencies = null, f3.stateNode = null) : (f3.childLanes = g3.childLanes, f3.lanes = g3.lanes, f3.child = g3.child, f3.subtreeFlags = 0, f3.deletions = null, f3.memoizedProps = g3.memoizedProps, f3.memoizedState = g3.memoizedState, f3.updateQueue = g3.updateQueue, f3.type = g3.type, a3 = g3.dependencies, f3.dependencies = null === a3 ? null : { lanes: a3.lanes, firstContext: a3.firstContext }), c3 = c3.sibling;
                      G(M, M.current & 1 | 2);
                      return b3.child;
                    }
                    a3 = a3.sibling;
                  }
                null !== f3.tail && B() > Hj && (b3.flags |= 128, d3 = true, Ej(f3, false), b3.lanes = 4194304);
              }
            else {
              if (!d3)
                if (a3 = Mh(g3), null !== a3) {
                  if (b3.flags |= 128, d3 = true, c3 = a3.updateQueue, null !== c3 && (b3.updateQueue = c3, b3.flags |= 4), Ej(f3, true), null === f3.tail && "hidden" === f3.tailMode && !g3.alternate && !I)
                    return S2(b3), null;
                } else
                  2 * B() - f3.renderingStartTime > Hj && 1073741824 !== c3 && (b3.flags |= 128, d3 = true, Ej(f3, false), b3.lanes = 4194304);
              f3.isBackwards ? (g3.sibling = b3.child, b3.child = g3) : (c3 = f3.last, null !== c3 ? c3.sibling = g3 : b3.child = g3, f3.last = g3);
            }
            if (null !== f3.tail)
              return b3 = f3.tail, f3.rendering = b3, f3.tail = b3.sibling, f3.renderingStartTime = B(), b3.sibling = null, c3 = M.current, G(M, d3 ? c3 & 1 | 2 : c3 & 1), b3;
            S2(b3);
            return null;
          case 22:
          case 23:
            return Ij(), d3 = null !== b3.memoizedState, null !== a3 && null !== a3.memoizedState !== d3 && (b3.flags |= 8192), d3 && 0 !== (b3.mode & 1) ? 0 !== (gj & 1073741824) && (S2(b3), b3.subtreeFlags & 6 && (b3.flags |= 8192)) : S2(b3), null;
          case 24:
            return null;
          case 25:
            return null;
        }
        throw Error(p3(156, b3.tag));
      }
      function Jj(a3, b3) {
        wg(b3);
        switch (b3.tag) {
          case 1:
            return Zf(b3.type) && $f(), a3 = b3.flags, a3 & 65536 ? (b3.flags = a3 & -65537 | 128, b3) : null;
          case 3:
            return Jh(), E3(Wf), E3(H2), Oh(), a3 = b3.flags, 0 !== (a3 & 65536) && 0 === (a3 & 128) ? (b3.flags = a3 & -65537 | 128, b3) : null;
          case 5:
            return Lh(b3), null;
          case 13:
            E3(M);
            a3 = b3.memoizedState;
            if (null !== a3 && null !== a3.dehydrated) {
              if (null === b3.alternate)
                throw Error(p3(340));
              Ig();
            }
            a3 = b3.flags;
            return a3 & 65536 ? (b3.flags = a3 & -65537 | 128, b3) : null;
          case 19:
            return E3(M), null;
          case 4:
            return Jh(), null;
          case 10:
            return Rg(b3.type._context), null;
          case 22:
          case 23:
            return Ij(), null;
          case 24:
            return null;
          default:
            return null;
        }
      }
      var Kj = false;
      var U = false;
      var Lj = "function" === typeof WeakSet ? WeakSet : Set;
      var V2 = null;
      function Mj(a3, b3) {
        var c3 = a3.ref;
        if (null !== c3)
          if ("function" === typeof c3)
            try {
              c3(null);
            } catch (d3) {
              W2(a3, b3, d3);
            }
          else
            c3.current = null;
      }
      function Nj(a3, b3, c3) {
        try {
          c3();
        } catch (d3) {
          W2(a3, b3, d3);
        }
      }
      var Oj = false;
      function Pj(a3, b3) {
        Cf = dd;
        a3 = Me();
        if (Ne(a3)) {
          if ("selectionStart" in a3)
            var c3 = { start: a3.selectionStart, end: a3.selectionEnd };
          else
            a: {
              c3 = (c3 = a3.ownerDocument) && c3.defaultView || window;
              var d3 = c3.getSelection && c3.getSelection();
              if (d3 && 0 !== d3.rangeCount) {
                c3 = d3.anchorNode;
                var e2 = d3.anchorOffset, f3 = d3.focusNode;
                d3 = d3.focusOffset;
                try {
                  c3.nodeType, f3.nodeType;
                } catch (F) {
                  c3 = null;
                  break a;
                }
                var g3 = 0, h3 = -1, k2 = -1, l3 = 0, m3 = 0, q = a3, r3 = null;
                b:
                  for (; ; ) {
                    for (var y3; ; ) {
                      q !== c3 || 0 !== e2 && 3 !== q.nodeType || (h3 = g3 + e2);
                      q !== f3 || 0 !== d3 && 3 !== q.nodeType || (k2 = g3 + d3);
                      3 === q.nodeType && (g3 += q.nodeValue.length);
                      if (null === (y3 = q.firstChild))
                        break;
                      r3 = q;
                      q = y3;
                    }
                    for (; ; ) {
                      if (q === a3)
                        break b;
                      r3 === c3 && ++l3 === e2 && (h3 = g3);
                      r3 === f3 && ++m3 === d3 && (k2 = g3);
                      if (null !== (y3 = q.nextSibling))
                        break;
                      q = r3;
                      r3 = q.parentNode;
                    }
                    q = y3;
                  }
                c3 = -1 === h3 || -1 === k2 ? null : { start: h3, end: k2 };
              } else
                c3 = null;
            }
          c3 = c3 || { start: 0, end: 0 };
        } else
          c3 = null;
        Df = { focusedElem: a3, selectionRange: c3 };
        dd = false;
        for (V2 = b3; null !== V2; )
          if (b3 = V2, a3 = b3.child, 0 !== (b3.subtreeFlags & 1028) && null !== a3)
            a3.return = b3, V2 = a3;
          else
            for (; null !== V2; ) {
              b3 = V2;
              try {
                var n3 = b3.alternate;
                if (0 !== (b3.flags & 1024))
                  switch (b3.tag) {
                    case 0:
                    case 11:
                    case 15:
                      break;
                    case 1:
                      if (null !== n3) {
                        var t4 = n3.memoizedProps, J = n3.memoizedState, x3 = b3.stateNode, w3 = x3.getSnapshotBeforeUpdate(b3.elementType === b3.type ? t4 : Lg(b3.type, t4), J);
                        x3.__reactInternalSnapshotBeforeUpdate = w3;
                      }
                      break;
                    case 3:
                      var u3 = b3.stateNode.containerInfo;
                      1 === u3.nodeType ? u3.textContent = "" : 9 === u3.nodeType && u3.documentElement && u3.removeChild(u3.documentElement);
                      break;
                    case 5:
                    case 6:
                    case 4:
                    case 17:
                      break;
                    default:
                      throw Error(p3(163));
                  }
              } catch (F) {
                W2(b3, b3.return, F);
              }
              a3 = b3.sibling;
              if (null !== a3) {
                a3.return = b3.return;
                V2 = a3;
                break;
              }
              V2 = b3.return;
            }
        n3 = Oj;
        Oj = false;
        return n3;
      }
      function Qj(a3, b3, c3) {
        var d3 = b3.updateQueue;
        d3 = null !== d3 ? d3.lastEffect : null;
        if (null !== d3) {
          var e2 = d3 = d3.next;
          do {
            if ((e2.tag & a3) === a3) {
              var f3 = e2.destroy;
              e2.destroy = void 0;
              void 0 !== f3 && Nj(b3, c3, f3);
            }
            e2 = e2.next;
          } while (e2 !== d3);
        }
      }
      function Rj(a3, b3) {
        b3 = b3.updateQueue;
        b3 = null !== b3 ? b3.lastEffect : null;
        if (null !== b3) {
          var c3 = b3 = b3.next;
          do {
            if ((c3.tag & a3) === a3) {
              var d3 = c3.create;
              c3.destroy = d3();
            }
            c3 = c3.next;
          } while (c3 !== b3);
        }
      }
      function Sj(a3) {
        var b3 = a3.ref;
        if (null !== b3) {
          var c3 = a3.stateNode;
          switch (a3.tag) {
            case 5:
              a3 = c3;
              break;
            default:
              a3 = c3;
          }
          "function" === typeof b3 ? b3(a3) : b3.current = a3;
        }
      }
      function Tj(a3) {
        var b3 = a3.alternate;
        null !== b3 && (a3.alternate = null, Tj(b3));
        a3.child = null;
        a3.deletions = null;
        a3.sibling = null;
        5 === a3.tag && (b3 = a3.stateNode, null !== b3 && (delete b3[Of], delete b3[Pf], delete b3[of], delete b3[Qf], delete b3[Rf]));
        a3.stateNode = null;
        a3.return = null;
        a3.dependencies = null;
        a3.memoizedProps = null;
        a3.memoizedState = null;
        a3.pendingProps = null;
        a3.stateNode = null;
        a3.updateQueue = null;
      }
      function Uj(a3) {
        return 5 === a3.tag || 3 === a3.tag || 4 === a3.tag;
      }
      function Vj(a3) {
        a:
          for (; ; ) {
            for (; null === a3.sibling; ) {
              if (null === a3.return || Uj(a3.return))
                return null;
              a3 = a3.return;
            }
            a3.sibling.return = a3.return;
            for (a3 = a3.sibling; 5 !== a3.tag && 6 !== a3.tag && 18 !== a3.tag; ) {
              if (a3.flags & 2)
                continue a;
              if (null === a3.child || 4 === a3.tag)
                continue a;
              else
                a3.child.return = a3, a3 = a3.child;
            }
            if (!(a3.flags & 2))
              return a3.stateNode;
          }
      }
      function Wj(a3, b3, c3) {
        var d3 = a3.tag;
        if (5 === d3 || 6 === d3)
          a3 = a3.stateNode, b3 ? 8 === c3.nodeType ? c3.parentNode.insertBefore(a3, b3) : c3.insertBefore(a3, b3) : (8 === c3.nodeType ? (b3 = c3.parentNode, b3.insertBefore(a3, c3)) : (b3 = c3, b3.appendChild(a3)), c3 = c3._reactRootContainer, null !== c3 && void 0 !== c3 || null !== b3.onclick || (b3.onclick = Bf));
        else if (4 !== d3 && (a3 = a3.child, null !== a3))
          for (Wj(a3, b3, c3), a3 = a3.sibling; null !== a3; )
            Wj(a3, b3, c3), a3 = a3.sibling;
      }
      function Xj(a3, b3, c3) {
        var d3 = a3.tag;
        if (5 === d3 || 6 === d3)
          a3 = a3.stateNode, b3 ? c3.insertBefore(a3, b3) : c3.appendChild(a3);
        else if (4 !== d3 && (a3 = a3.child, null !== a3))
          for (Xj(a3, b3, c3), a3 = a3.sibling; null !== a3; )
            Xj(a3, b3, c3), a3 = a3.sibling;
      }
      var X = null;
      var Yj = false;
      function Zj(a3, b3, c3) {
        for (c3 = c3.child; null !== c3; )
          ak(a3, b3, c3), c3 = c3.sibling;
      }
      function ak(a3, b3, c3) {
        if (lc && "function" === typeof lc.onCommitFiberUnmount)
          try {
            lc.onCommitFiberUnmount(kc, c3);
          } catch (h3) {
          }
        switch (c3.tag) {
          case 5:
            U || Mj(c3, b3);
          case 6:
            var d3 = X, e2 = Yj;
            X = null;
            Zj(a3, b3, c3);
            X = d3;
            Yj = e2;
            null !== X && (Yj ? (a3 = X, c3 = c3.stateNode, 8 === a3.nodeType ? a3.parentNode.removeChild(c3) : a3.removeChild(c3)) : X.removeChild(c3.stateNode));
            break;
          case 18:
            null !== X && (Yj ? (a3 = X, c3 = c3.stateNode, 8 === a3.nodeType ? Kf(a3.parentNode, c3) : 1 === a3.nodeType && Kf(a3, c3), bd(a3)) : Kf(X, c3.stateNode));
            break;
          case 4:
            d3 = X;
            e2 = Yj;
            X = c3.stateNode.containerInfo;
            Yj = true;
            Zj(a3, b3, c3);
            X = d3;
            Yj = e2;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!U && (d3 = c3.updateQueue, null !== d3 && (d3 = d3.lastEffect, null !== d3))) {
              e2 = d3 = d3.next;
              do {
                var f3 = e2, g3 = f3.destroy;
                f3 = f3.tag;
                void 0 !== g3 && (0 !== (f3 & 2) ? Nj(c3, b3, g3) : 0 !== (f3 & 4) && Nj(c3, b3, g3));
                e2 = e2.next;
              } while (e2 !== d3);
            }
            Zj(a3, b3, c3);
            break;
          case 1:
            if (!U && (Mj(c3, b3), d3 = c3.stateNode, "function" === typeof d3.componentWillUnmount))
              try {
                d3.props = c3.memoizedProps, d3.state = c3.memoizedState, d3.componentWillUnmount();
              } catch (h3) {
                W2(c3, b3, h3);
              }
            Zj(a3, b3, c3);
            break;
          case 21:
            Zj(a3, b3, c3);
            break;
          case 22:
            c3.mode & 1 ? (U = (d3 = U) || null !== c3.memoizedState, Zj(a3, b3, c3), U = d3) : Zj(a3, b3, c3);
            break;
          default:
            Zj(a3, b3, c3);
        }
      }
      function bk(a3) {
        var b3 = a3.updateQueue;
        if (null !== b3) {
          a3.updateQueue = null;
          var c3 = a3.stateNode;
          null === c3 && (c3 = a3.stateNode = new Lj());
          b3.forEach(function(b4) {
            var d3 = ck.bind(null, a3, b4);
            c3.has(b4) || (c3.add(b4), b4.then(d3, d3));
          });
        }
      }
      function dk(a3, b3) {
        var c3 = b3.deletions;
        if (null !== c3)
          for (var d3 = 0; d3 < c3.length; d3++) {
            var e2 = c3[d3];
            try {
              var f3 = a3, g3 = b3, h3 = g3;
              a:
                for (; null !== h3; ) {
                  switch (h3.tag) {
                    case 5:
                      X = h3.stateNode;
                      Yj = false;
                      break a;
                    case 3:
                      X = h3.stateNode.containerInfo;
                      Yj = true;
                      break a;
                    case 4:
                      X = h3.stateNode.containerInfo;
                      Yj = true;
                      break a;
                  }
                  h3 = h3.return;
                }
              if (null === X)
                throw Error(p3(160));
              ak(f3, g3, e2);
              X = null;
              Yj = false;
              var k2 = e2.alternate;
              null !== k2 && (k2.return = null);
              e2.return = null;
            } catch (l3) {
              W2(e2, b3, l3);
            }
          }
        if (b3.subtreeFlags & 12854)
          for (b3 = b3.child; null !== b3; )
            ek(b3, a3), b3 = b3.sibling;
      }
      function ek(a3, b3) {
        var c3 = a3.alternate, d3 = a3.flags;
        switch (a3.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            dk(b3, a3);
            fk(a3);
            if (d3 & 4) {
              try {
                Qj(3, a3, a3.return), Rj(3, a3);
              } catch (t4) {
                W2(a3, a3.return, t4);
              }
              try {
                Qj(5, a3, a3.return);
              } catch (t4) {
                W2(a3, a3.return, t4);
              }
            }
            break;
          case 1:
            dk(b3, a3);
            fk(a3);
            d3 & 512 && null !== c3 && Mj(c3, c3.return);
            break;
          case 5:
            dk(b3, a3);
            fk(a3);
            d3 & 512 && null !== c3 && Mj(c3, c3.return);
            if (a3.flags & 32) {
              var e2 = a3.stateNode;
              try {
                ob(e2, "");
              } catch (t4) {
                W2(a3, a3.return, t4);
              }
            }
            if (d3 & 4 && (e2 = a3.stateNode, null != e2)) {
              var f3 = a3.memoizedProps, g3 = null !== c3 ? c3.memoizedProps : f3, h3 = a3.type, k2 = a3.updateQueue;
              a3.updateQueue = null;
              if (null !== k2)
                try {
                  "input" === h3 && "radio" === f3.type && null != f3.name && ab(e2, f3);
                  vb(h3, g3);
                  var l3 = vb(h3, f3);
                  for (g3 = 0; g3 < k2.length; g3 += 2) {
                    var m3 = k2[g3], q = k2[g3 + 1];
                    "style" === m3 ? sb(e2, q) : "dangerouslySetInnerHTML" === m3 ? nb(e2, q) : "children" === m3 ? ob(e2, q) : ta(e2, m3, q, l3);
                  }
                  switch (h3) {
                    case "input":
                      bb(e2, f3);
                      break;
                    case "textarea":
                      ib(e2, f3);
                      break;
                    case "select":
                      var r3 = e2._wrapperState.wasMultiple;
                      e2._wrapperState.wasMultiple = !!f3.multiple;
                      var y3 = f3.value;
                      null != y3 ? fb(e2, !!f3.multiple, y3, false) : r3 !== !!f3.multiple && (null != f3.defaultValue ? fb(
                        e2,
                        !!f3.multiple,
                        f3.defaultValue,
                        true
                      ) : fb(e2, !!f3.multiple, f3.multiple ? [] : "", false));
                  }
                  e2[Pf] = f3;
                } catch (t4) {
                  W2(a3, a3.return, t4);
                }
            }
            break;
          case 6:
            dk(b3, a3);
            fk(a3);
            if (d3 & 4) {
              if (null === a3.stateNode)
                throw Error(p3(162));
              e2 = a3.stateNode;
              f3 = a3.memoizedProps;
              try {
                e2.nodeValue = f3;
              } catch (t4) {
                W2(a3, a3.return, t4);
              }
            }
            break;
          case 3:
            dk(b3, a3);
            fk(a3);
            if (d3 & 4 && null !== c3 && c3.memoizedState.isDehydrated)
              try {
                bd(b3.containerInfo);
              } catch (t4) {
                W2(a3, a3.return, t4);
              }
            break;
          case 4:
            dk(b3, a3);
            fk(a3);
            break;
          case 13:
            dk(b3, a3);
            fk(a3);
            e2 = a3.child;
            e2.flags & 8192 && (f3 = null !== e2.memoizedState, e2.stateNode.isHidden = f3, !f3 || null !== e2.alternate && null !== e2.alternate.memoizedState || (gk = B()));
            d3 & 4 && bk(a3);
            break;
          case 22:
            m3 = null !== c3 && null !== c3.memoizedState;
            a3.mode & 1 ? (U = (l3 = U) || m3, dk(b3, a3), U = l3) : dk(b3, a3);
            fk(a3);
            if (d3 & 8192) {
              l3 = null !== a3.memoizedState;
              if ((a3.stateNode.isHidden = l3) && !m3 && 0 !== (a3.mode & 1))
                for (V2 = a3, m3 = a3.child; null !== m3; ) {
                  for (q = V2 = m3; null !== V2; ) {
                    r3 = V2;
                    y3 = r3.child;
                    switch (r3.tag) {
                      case 0:
                      case 11:
                      case 14:
                      case 15:
                        Qj(4, r3, r3.return);
                        break;
                      case 1:
                        Mj(r3, r3.return);
                        var n3 = r3.stateNode;
                        if ("function" === typeof n3.componentWillUnmount) {
                          d3 = r3;
                          c3 = r3.return;
                          try {
                            b3 = d3, n3.props = b3.memoizedProps, n3.state = b3.memoizedState, n3.componentWillUnmount();
                          } catch (t4) {
                            W2(d3, c3, t4);
                          }
                        }
                        break;
                      case 5:
                        Mj(r3, r3.return);
                        break;
                      case 22:
                        if (null !== r3.memoizedState) {
                          hk(q);
                          continue;
                        }
                    }
                    null !== y3 ? (y3.return = r3, V2 = y3) : hk(q);
                  }
                  m3 = m3.sibling;
                }
              a:
                for (m3 = null, q = a3; ; ) {
                  if (5 === q.tag) {
                    if (null === m3) {
                      m3 = q;
                      try {
                        e2 = q.stateNode, l3 ? (f3 = e2.style, "function" === typeof f3.setProperty ? f3.setProperty("display", "none", "important") : f3.display = "none") : (h3 = q.stateNode, k2 = q.memoizedProps.style, g3 = void 0 !== k2 && null !== k2 && k2.hasOwnProperty("display") ? k2.display : null, h3.style.display = rb("display", g3));
                      } catch (t4) {
                        W2(a3, a3.return, t4);
                      }
                    }
                  } else if (6 === q.tag) {
                    if (null === m3)
                      try {
                        q.stateNode.nodeValue = l3 ? "" : q.memoizedProps;
                      } catch (t4) {
                        W2(a3, a3.return, t4);
                      }
                  } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a3) && null !== q.child) {
                    q.child.return = q;
                    q = q.child;
                    continue;
                  }
                  if (q === a3)
                    break a;
                  for (; null === q.sibling; ) {
                    if (null === q.return || q.return === a3)
                      break a;
                    m3 === q && (m3 = null);
                    q = q.return;
                  }
                  m3 === q && (m3 = null);
                  q.sibling.return = q.return;
                  q = q.sibling;
                }
            }
            break;
          case 19:
            dk(b3, a3);
            fk(a3);
            d3 & 4 && bk(a3);
            break;
          case 21:
            break;
          default:
            dk(
              b3,
              a3
            ), fk(a3);
        }
      }
      function fk(a3) {
        var b3 = a3.flags;
        if (b3 & 2) {
          try {
            a: {
              for (var c3 = a3.return; null !== c3; ) {
                if (Uj(c3)) {
                  var d3 = c3;
                  break a;
                }
                c3 = c3.return;
              }
              throw Error(p3(160));
            }
            switch (d3.tag) {
              case 5:
                var e2 = d3.stateNode;
                d3.flags & 32 && (ob(e2, ""), d3.flags &= -33);
                var f3 = Vj(a3);
                Xj(a3, f3, e2);
                break;
              case 3:
              case 4:
                var g3 = d3.stateNode.containerInfo, h3 = Vj(a3);
                Wj(a3, h3, g3);
                break;
              default:
                throw Error(p3(161));
            }
          } catch (k2) {
            W2(a3, a3.return, k2);
          }
          a3.flags &= -3;
        }
        b3 & 4096 && (a3.flags &= -4097);
      }
      function ik(a3, b3, c3) {
        V2 = a3;
        jk(a3, b3, c3);
      }
      function jk(a3, b3, c3) {
        for (var d3 = 0 !== (a3.mode & 1); null !== V2; ) {
          var e2 = V2, f3 = e2.child;
          if (22 === e2.tag && d3) {
            var g3 = null !== e2.memoizedState || Kj;
            if (!g3) {
              var h3 = e2.alternate, k2 = null !== h3 && null !== h3.memoizedState || U;
              h3 = Kj;
              var l3 = U;
              Kj = g3;
              if ((U = k2) && !l3)
                for (V2 = e2; null !== V2; )
                  g3 = V2, k2 = g3.child, 22 === g3.tag && null !== g3.memoizedState ? kk(e2) : null !== k2 ? (k2.return = g3, V2 = k2) : kk(e2);
              for (; null !== f3; )
                V2 = f3, jk(f3, b3, c3), f3 = f3.sibling;
              V2 = e2;
              Kj = h3;
              U = l3;
            }
            lk(a3, b3, c3);
          } else
            0 !== (e2.subtreeFlags & 8772) && null !== f3 ? (f3.return = e2, V2 = f3) : lk(a3, b3, c3);
        }
      }
      function lk(a3) {
        for (; null !== V2; ) {
          var b3 = V2;
          if (0 !== (b3.flags & 8772)) {
            var c3 = b3.alternate;
            try {
              if (0 !== (b3.flags & 8772))
                switch (b3.tag) {
                  case 0:
                  case 11:
                  case 15:
                    U || Rj(5, b3);
                    break;
                  case 1:
                    var d3 = b3.stateNode;
                    if (b3.flags & 4 && !U)
                      if (null === c3)
                        d3.componentDidMount();
                      else {
                        var e2 = b3.elementType === b3.type ? c3.memoizedProps : Lg(b3.type, c3.memoizedProps);
                        d3.componentDidUpdate(e2, c3.memoizedState, d3.__reactInternalSnapshotBeforeUpdate);
                      }
                    var f3 = b3.updateQueue;
                    null !== f3 && ih(b3, f3, d3);
                    break;
                  case 3:
                    var g3 = b3.updateQueue;
                    if (null !== g3) {
                      c3 = null;
                      if (null !== b3.child)
                        switch (b3.child.tag) {
                          case 5:
                            c3 = b3.child.stateNode;
                            break;
                          case 1:
                            c3 = b3.child.stateNode;
                        }
                      ih(b3, g3, c3);
                    }
                    break;
                  case 5:
                    var h3 = b3.stateNode;
                    if (null === c3 && b3.flags & 4) {
                      c3 = h3;
                      var k2 = b3.memoizedProps;
                      switch (b3.type) {
                        case "button":
                        case "input":
                        case "select":
                        case "textarea":
                          k2.autoFocus && c3.focus();
                          break;
                        case "img":
                          k2.src && (c3.src = k2.src);
                      }
                    }
                    break;
                  case 6:
                    break;
                  case 4:
                    break;
                  case 12:
                    break;
                  case 13:
                    if (null === b3.memoizedState) {
                      var l3 = b3.alternate;
                      if (null !== l3) {
                        var m3 = l3.memoizedState;
                        if (null !== m3) {
                          var q = m3.dehydrated;
                          null !== q && bd(q);
                        }
                      }
                    }
                    break;
                  case 19:
                  case 17:
                  case 21:
                  case 22:
                  case 23:
                  case 25:
                    break;
                  default:
                    throw Error(p3(163));
                }
              U || b3.flags & 512 && Sj(b3);
            } catch (r3) {
              W2(b3, b3.return, r3);
            }
          }
          if (b3 === a3) {
            V2 = null;
            break;
          }
          c3 = b3.sibling;
          if (null !== c3) {
            c3.return = b3.return;
            V2 = c3;
            break;
          }
          V2 = b3.return;
        }
      }
      function hk(a3) {
        for (; null !== V2; ) {
          var b3 = V2;
          if (b3 === a3) {
            V2 = null;
            break;
          }
          var c3 = b3.sibling;
          if (null !== c3) {
            c3.return = b3.return;
            V2 = c3;
            break;
          }
          V2 = b3.return;
        }
      }
      function kk(a3) {
        for (; null !== V2; ) {
          var b3 = V2;
          try {
            switch (b3.tag) {
              case 0:
              case 11:
              case 15:
                var c3 = b3.return;
                try {
                  Rj(4, b3);
                } catch (k2) {
                  W2(b3, c3, k2);
                }
                break;
              case 1:
                var d3 = b3.stateNode;
                if ("function" === typeof d3.componentDidMount) {
                  var e2 = b3.return;
                  try {
                    d3.componentDidMount();
                  } catch (k2) {
                    W2(b3, e2, k2);
                  }
                }
                var f3 = b3.return;
                try {
                  Sj(b3);
                } catch (k2) {
                  W2(b3, f3, k2);
                }
                break;
              case 5:
                var g3 = b3.return;
                try {
                  Sj(b3);
                } catch (k2) {
                  W2(b3, g3, k2);
                }
            }
          } catch (k2) {
            W2(b3, b3.return, k2);
          }
          if (b3 === a3) {
            V2 = null;
            break;
          }
          var h3 = b3.sibling;
          if (null !== h3) {
            h3.return = b3.return;
            V2 = h3;
            break;
          }
          V2 = b3.return;
        }
      }
      var mk = Math.ceil;
      var nk = ua.ReactCurrentDispatcher;
      var ok = ua.ReactCurrentOwner;
      var pk = ua.ReactCurrentBatchConfig;
      var K = 0;
      var R3 = null;
      var Y = null;
      var Z = 0;
      var gj = 0;
      var fj = Uf(0);
      var T3 = 0;
      var qk = null;
      var hh = 0;
      var rk = 0;
      var sk = 0;
      var tk = null;
      var uk = null;
      var gk = 0;
      var Hj = Infinity;
      var vk = null;
      var Pi = false;
      var Qi = null;
      var Si = null;
      var wk = false;
      var xk = null;
      var yk = 0;
      var zk = 0;
      var Ak = null;
      var Bk = -1;
      var Ck = 0;
      function L3() {
        return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
      }
      function lh(a3) {
        if (0 === (a3.mode & 1))
          return 1;
        if (0 !== (K & 2) && 0 !== Z)
          return Z & -Z;
        if (null !== Kg.transition)
          return 0 === Ck && (Ck = yc()), Ck;
        a3 = C2;
        if (0 !== a3)
          return a3;
        a3 = window.event;
        a3 = void 0 === a3 ? 16 : jd(a3.type);
        return a3;
      }
      function mh(a3, b3, c3, d3) {
        if (50 < zk)
          throw zk = 0, Ak = null, Error(p3(185));
        Ac(a3, c3, d3);
        if (0 === (K & 2) || a3 !== R3)
          a3 === R3 && (0 === (K & 2) && (rk |= c3), 4 === T3 && Dk(a3, Z)), Ek(a3, d3), 1 === c3 && 0 === K && 0 === (b3.mode & 1) && (Hj = B() + 500, fg && jg());
      }
      function Ek(a3, b3) {
        var c3 = a3.callbackNode;
        wc(a3, b3);
        var d3 = uc(a3, a3 === R3 ? Z : 0);
        if (0 === d3)
          null !== c3 && bc(c3), a3.callbackNode = null, a3.callbackPriority = 0;
        else if (b3 = d3 & -d3, a3.callbackPriority !== b3) {
          null != c3 && bc(c3);
          if (1 === b3)
            0 === a3.tag ? ig(Fk.bind(null, a3)) : hg(Fk.bind(null, a3)), Jf(function() {
              0 === (K & 6) && jg();
            }), c3 = null;
          else {
            switch (Dc(d3)) {
              case 1:
                c3 = fc;
                break;
              case 4:
                c3 = gc;
                break;
              case 16:
                c3 = hc;
                break;
              case 536870912:
                c3 = jc;
                break;
              default:
                c3 = hc;
            }
            c3 = Gk(c3, Hk.bind(null, a3));
          }
          a3.callbackPriority = b3;
          a3.callbackNode = c3;
        }
      }
      function Hk(a3, b3) {
        Bk = -1;
        Ck = 0;
        if (0 !== (K & 6))
          throw Error(p3(327));
        var c3 = a3.callbackNode;
        if (Ik() && a3.callbackNode !== c3)
          return null;
        var d3 = uc(a3, a3 === R3 ? Z : 0);
        if (0 === d3)
          return null;
        if (0 !== (d3 & 30) || 0 !== (d3 & a3.expiredLanes) || b3)
          b3 = Jk(a3, d3);
        else {
          b3 = d3;
          var e2 = K;
          K |= 2;
          var f3 = Kk();
          if (R3 !== a3 || Z !== b3)
            vk = null, Hj = B() + 500, Lk(a3, b3);
          do
            try {
              Mk();
              break;
            } catch (h3) {
              Nk(a3, h3);
            }
          while (1);
          Qg();
          nk.current = f3;
          K = e2;
          null !== Y ? b3 = 0 : (R3 = null, Z = 0, b3 = T3);
        }
        if (0 !== b3) {
          2 === b3 && (e2 = xc(a3), 0 !== e2 && (d3 = e2, b3 = Ok(a3, e2)));
          if (1 === b3)
            throw c3 = qk, Lk(a3, 0), Dk(a3, d3), Ek(a3, B()), c3;
          if (6 === b3)
            Dk(a3, d3);
          else {
            e2 = a3.current.alternate;
            if (0 === (d3 & 30) && !Pk(e2) && (b3 = Jk(a3, d3), 2 === b3 && (f3 = xc(a3), 0 !== f3 && (d3 = f3, b3 = Ok(a3, f3))), 1 === b3))
              throw c3 = qk, Lk(a3, 0), Dk(a3, d3), Ek(a3, B()), c3;
            a3.finishedWork = e2;
            a3.finishedLanes = d3;
            switch (b3) {
              case 0:
              case 1:
                throw Error(p3(345));
              case 2:
                Qk(a3, uk, vk);
                break;
              case 3:
                Dk(a3, d3);
                if ((d3 & 130023424) === d3 && (b3 = gk + 500 - B(), 10 < b3)) {
                  if (0 !== uc(a3, 0))
                    break;
                  e2 = a3.suspendedLanes;
                  if ((e2 & d3) !== d3) {
                    L3();
                    a3.pingedLanes |= a3.suspendedLanes & e2;
                    break;
                  }
                  a3.timeoutHandle = Ff(Qk.bind(null, a3, uk, vk), b3);
                  break;
                }
                Qk(a3, uk, vk);
                break;
              case 4:
                Dk(a3, d3);
                if ((d3 & 4194240) === d3)
                  break;
                b3 = a3.eventTimes;
                for (e2 = -1; 0 < d3; ) {
                  var g3 = 31 - oc(d3);
                  f3 = 1 << g3;
                  g3 = b3[g3];
                  g3 > e2 && (e2 = g3);
                  d3 &= ~f3;
                }
                d3 = e2;
                d3 = B() - d3;
                d3 = (120 > d3 ? 120 : 480 > d3 ? 480 : 1080 > d3 ? 1080 : 1920 > d3 ? 1920 : 3e3 > d3 ? 3e3 : 4320 > d3 ? 4320 : 1960 * mk(d3 / 1960)) - d3;
                if (10 < d3) {
                  a3.timeoutHandle = Ff(Qk.bind(null, a3, uk, vk), d3);
                  break;
                }
                Qk(a3, uk, vk);
                break;
              case 5:
                Qk(a3, uk, vk);
                break;
              default:
                throw Error(p3(329));
            }
          }
        }
        Ek(a3, B());
        return a3.callbackNode === c3 ? Hk.bind(null, a3) : null;
      }
      function Ok(a3, b3) {
        var c3 = tk;
        a3.current.memoizedState.isDehydrated && (Lk(a3, b3).flags |= 256);
        a3 = Jk(a3, b3);
        2 !== a3 && (b3 = uk, uk = c3, null !== b3 && Gj(b3));
        return a3;
      }
      function Gj(a3) {
        null === uk ? uk = a3 : uk.push.apply(uk, a3);
      }
      function Pk(a3) {
        for (var b3 = a3; ; ) {
          if (b3.flags & 16384) {
            var c3 = b3.updateQueue;
            if (null !== c3 && (c3 = c3.stores, null !== c3))
              for (var d3 = 0; d3 < c3.length; d3++) {
                var e2 = c3[d3], f3 = e2.getSnapshot;
                e2 = e2.value;
                try {
                  if (!He(f3(), e2))
                    return false;
                } catch (g3) {
                  return false;
                }
              }
          }
          c3 = b3.child;
          if (b3.subtreeFlags & 16384 && null !== c3)
            c3.return = b3, b3 = c3;
          else {
            if (b3 === a3)
              break;
            for (; null === b3.sibling; ) {
              if (null === b3.return || b3.return === a3)
                return true;
              b3 = b3.return;
            }
            b3.sibling.return = b3.return;
            b3 = b3.sibling;
          }
        }
        return true;
      }
      function Dk(a3, b3) {
        b3 &= ~sk;
        b3 &= ~rk;
        a3.suspendedLanes |= b3;
        a3.pingedLanes &= ~b3;
        for (a3 = a3.expirationTimes; 0 < b3; ) {
          var c3 = 31 - oc(b3), d3 = 1 << c3;
          a3[c3] = -1;
          b3 &= ~d3;
        }
      }
      function Fk(a3) {
        if (0 !== (K & 6))
          throw Error(p3(327));
        Ik();
        var b3 = uc(a3, 0);
        if (0 === (b3 & 1))
          return Ek(a3, B()), null;
        var c3 = Jk(a3, b3);
        if (0 !== a3.tag && 2 === c3) {
          var d3 = xc(a3);
          0 !== d3 && (b3 = d3, c3 = Ok(a3, d3));
        }
        if (1 === c3)
          throw c3 = qk, Lk(a3, 0), Dk(a3, b3), Ek(a3, B()), c3;
        if (6 === c3)
          throw Error(p3(345));
        a3.finishedWork = a3.current.alternate;
        a3.finishedLanes = b3;
        Qk(a3, uk, vk);
        Ek(a3, B());
        return null;
      }
      function Rk(a3, b3) {
        var c3 = K;
        K |= 1;
        try {
          return a3(b3);
        } finally {
          K = c3, 0 === K && (Hj = B() + 500, fg && jg());
        }
      }
      function Sk(a3) {
        null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
        var b3 = K;
        K |= 1;
        var c3 = pk.transition, d3 = C2;
        try {
          if (pk.transition = null, C2 = 1, a3)
            return a3();
        } finally {
          C2 = d3, pk.transition = c3, K = b3, 0 === (K & 6) && jg();
        }
      }
      function Ij() {
        gj = fj.current;
        E3(fj);
      }
      function Lk(a3, b3) {
        a3.finishedWork = null;
        a3.finishedLanes = 0;
        var c3 = a3.timeoutHandle;
        -1 !== c3 && (a3.timeoutHandle = -1, Gf(c3));
        if (null !== Y)
          for (c3 = Y.return; null !== c3; ) {
            var d3 = c3;
            wg(d3);
            switch (d3.tag) {
              case 1:
                d3 = d3.type.childContextTypes;
                null !== d3 && void 0 !== d3 && $f();
                break;
              case 3:
                Jh();
                E3(Wf);
                E3(H2);
                Oh();
                break;
              case 5:
                Lh(d3);
                break;
              case 4:
                Jh();
                break;
              case 13:
                E3(M);
                break;
              case 19:
                E3(M);
                break;
              case 10:
                Rg(d3.type._context);
                break;
              case 22:
              case 23:
                Ij();
            }
            c3 = c3.return;
          }
        R3 = a3;
        Y = a3 = wh(a3.current, null);
        Z = gj = b3;
        T3 = 0;
        qk = null;
        sk = rk = hh = 0;
        uk = tk = null;
        if (null !== Wg) {
          for (b3 = 0; b3 < Wg.length; b3++)
            if (c3 = Wg[b3], d3 = c3.interleaved, null !== d3) {
              c3.interleaved = null;
              var e2 = d3.next, f3 = c3.pending;
              if (null !== f3) {
                var g3 = f3.next;
                f3.next = e2;
                d3.next = g3;
              }
              c3.pending = d3;
            }
          Wg = null;
        }
        return a3;
      }
      function Nk(a3, b3) {
        do {
          var c3 = Y;
          try {
            Qg();
            Ph.current = ai;
            if (Sh) {
              for (var d3 = N2.memoizedState; null !== d3; ) {
                var e2 = d3.queue;
                null !== e2 && (e2.pending = null);
                d3 = d3.next;
              }
              Sh = false;
            }
            Rh = 0;
            P2 = O2 = N2 = null;
            Th = false;
            Uh = 0;
            ok.current = null;
            if (null === c3 || null === c3.return) {
              T3 = 1;
              qk = b3;
              Y = null;
              break;
            }
            a: {
              var f3 = a3, g3 = c3.return, h3 = c3, k2 = b3;
              b3 = Z;
              h3.flags |= 32768;
              if (null !== k2 && "object" === typeof k2 && "function" === typeof k2.then) {
                var l3 = k2, m3 = h3, q = m3.tag;
                if (0 === (m3.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                  var r3 = m3.alternate;
                  r3 ? (m3.updateQueue = r3.updateQueue, m3.memoizedState = r3.memoizedState, m3.lanes = r3.lanes) : (m3.updateQueue = null, m3.memoizedState = null);
                }
                var y3 = Vi(g3);
                if (null !== y3) {
                  y3.flags &= -257;
                  Wi(y3, g3, h3, f3, b3);
                  y3.mode & 1 && Ti(f3, l3, b3);
                  b3 = y3;
                  k2 = l3;
                  var n3 = b3.updateQueue;
                  if (null === n3) {
                    var t4 = /* @__PURE__ */ new Set();
                    t4.add(k2);
                    b3.updateQueue = t4;
                  } else
                    n3.add(k2);
                  break a;
                } else {
                  if (0 === (b3 & 1)) {
                    Ti(f3, l3, b3);
                    uj();
                    break a;
                  }
                  k2 = Error(p3(426));
                }
              } else if (I && h3.mode & 1) {
                var J = Vi(g3);
                if (null !== J) {
                  0 === (J.flags & 65536) && (J.flags |= 256);
                  Wi(J, g3, h3, f3, b3);
                  Jg(Ki(k2, h3));
                  break a;
                }
              }
              f3 = k2 = Ki(k2, h3);
              4 !== T3 && (T3 = 2);
              null === tk ? tk = [f3] : tk.push(f3);
              f3 = g3;
              do {
                switch (f3.tag) {
                  case 3:
                    f3.flags |= 65536;
                    b3 &= -b3;
                    f3.lanes |= b3;
                    var x3 = Oi(f3, k2, b3);
                    fh(f3, x3);
                    break a;
                  case 1:
                    h3 = k2;
                    var w3 = f3.type, u3 = f3.stateNode;
                    if (0 === (f3.flags & 128) && ("function" === typeof w3.getDerivedStateFromError || null !== u3 && "function" === typeof u3.componentDidCatch && (null === Si || !Si.has(u3)))) {
                      f3.flags |= 65536;
                      b3 &= -b3;
                      f3.lanes |= b3;
                      var F = Ri(f3, h3, b3);
                      fh(f3, F);
                      break a;
                    }
                }
                f3 = f3.return;
              } while (null !== f3);
            }
            Tk(c3);
          } catch (na) {
            b3 = na;
            Y === c3 && null !== c3 && (Y = c3 = c3.return);
            continue;
          }
          break;
        } while (1);
      }
      function Kk() {
        var a3 = nk.current;
        nk.current = ai;
        return null === a3 ? ai : a3;
      }
      function uj() {
        if (0 === T3 || 3 === T3 || 2 === T3)
          T3 = 4;
        null === R3 || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R3, Z);
      }
      function Jk(a3, b3) {
        var c3 = K;
        K |= 2;
        var d3 = Kk();
        if (R3 !== a3 || Z !== b3)
          vk = null, Lk(a3, b3);
        do
          try {
            Uk();
            break;
          } catch (e2) {
            Nk(a3, e2);
          }
        while (1);
        Qg();
        K = c3;
        nk.current = d3;
        if (null !== Y)
          throw Error(p3(261));
        R3 = null;
        Z = 0;
        return T3;
      }
      function Uk() {
        for (; null !== Y; )
          Vk(Y);
      }
      function Mk() {
        for (; null !== Y && !cc(); )
          Vk(Y);
      }
      function Vk(a3) {
        var b3 = Wk(a3.alternate, a3, gj);
        a3.memoizedProps = a3.pendingProps;
        null === b3 ? Tk(a3) : Y = b3;
        ok.current = null;
      }
      function Tk(a3) {
        var b3 = a3;
        do {
          var c3 = b3.alternate;
          a3 = b3.return;
          if (0 === (b3.flags & 32768)) {
            if (c3 = Fj(c3, b3, gj), null !== c3) {
              Y = c3;
              return;
            }
          } else {
            c3 = Jj(c3, b3);
            if (null !== c3) {
              c3.flags &= 32767;
              Y = c3;
              return;
            }
            if (null !== a3)
              a3.flags |= 32768, a3.subtreeFlags = 0, a3.deletions = null;
            else {
              T3 = 6;
              Y = null;
              return;
            }
          }
          b3 = b3.sibling;
          if (null !== b3) {
            Y = b3;
            return;
          }
          Y = b3 = a3;
        } while (null !== b3);
        0 === T3 && (T3 = 5);
      }
      function Qk(a3, b3, c3) {
        var d3 = C2, e2 = pk.transition;
        try {
          pk.transition = null, C2 = 1, Xk(a3, b3, c3, d3);
        } finally {
          pk.transition = e2, C2 = d3;
        }
        return null;
      }
      function Xk(a3, b3, c3, d3) {
        do
          Ik();
        while (null !== xk);
        if (0 !== (K & 6))
          throw Error(p3(327));
        c3 = a3.finishedWork;
        var e2 = a3.finishedLanes;
        if (null === c3)
          return null;
        a3.finishedWork = null;
        a3.finishedLanes = 0;
        if (c3 === a3.current)
          throw Error(p3(177));
        a3.callbackNode = null;
        a3.callbackPriority = 0;
        var f3 = c3.lanes | c3.childLanes;
        Bc(a3, f3);
        a3 === R3 && (Y = R3 = null, Z = 0);
        0 === (c3.subtreeFlags & 2064) && 0 === (c3.flags & 2064) || wk || (wk = true, Gk(hc, function() {
          Ik();
          return null;
        }));
        f3 = 0 !== (c3.flags & 15990);
        if (0 !== (c3.subtreeFlags & 15990) || f3) {
          f3 = pk.transition;
          pk.transition = null;
          var g3 = C2;
          C2 = 1;
          var h3 = K;
          K |= 4;
          ok.current = null;
          Pj(a3, c3);
          ek(c3, a3);
          Oe(Df);
          dd = !!Cf;
          Df = Cf = null;
          a3.current = c3;
          ik(c3, a3, e2);
          dc();
          K = h3;
          C2 = g3;
          pk.transition = f3;
        } else
          a3.current = c3;
        wk && (wk = false, xk = a3, yk = e2);
        f3 = a3.pendingLanes;
        0 === f3 && (Si = null);
        mc(c3.stateNode, d3);
        Ek(a3, B());
        if (null !== b3)
          for (d3 = a3.onRecoverableError, c3 = 0; c3 < b3.length; c3++)
            e2 = b3[c3], d3(e2.value, { componentStack: e2.stack, digest: e2.digest });
        if (Pi)
          throw Pi = false, a3 = Qi, Qi = null, a3;
        0 !== (yk & 1) && 0 !== a3.tag && Ik();
        f3 = a3.pendingLanes;
        0 !== (f3 & 1) ? a3 === Ak ? zk++ : (zk = 0, Ak = a3) : zk = 0;
        jg();
        return null;
      }
      function Ik() {
        if (null !== xk) {
          var a3 = Dc(yk), b3 = pk.transition, c3 = C2;
          try {
            pk.transition = null;
            C2 = 16 > a3 ? 16 : a3;
            if (null === xk)
              var d3 = false;
            else {
              a3 = xk;
              xk = null;
              yk = 0;
              if (0 !== (K & 6))
                throw Error(p3(331));
              var e2 = K;
              K |= 4;
              for (V2 = a3.current; null !== V2; ) {
                var f3 = V2, g3 = f3.child;
                if (0 !== (V2.flags & 16)) {
                  var h3 = f3.deletions;
                  if (null !== h3) {
                    for (var k2 = 0; k2 < h3.length; k2++) {
                      var l3 = h3[k2];
                      for (V2 = l3; null !== V2; ) {
                        var m3 = V2;
                        switch (m3.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Qj(8, m3, f3);
                        }
                        var q = m3.child;
                        if (null !== q)
                          q.return = m3, V2 = q;
                        else
                          for (; null !== V2; ) {
                            m3 = V2;
                            var r3 = m3.sibling, y3 = m3.return;
                            Tj(m3);
                            if (m3 === l3) {
                              V2 = null;
                              break;
                            }
                            if (null !== r3) {
                              r3.return = y3;
                              V2 = r3;
                              break;
                            }
                            V2 = y3;
                          }
                      }
                    }
                    var n3 = f3.alternate;
                    if (null !== n3) {
                      var t4 = n3.child;
                      if (null !== t4) {
                        n3.child = null;
                        do {
                          var J = t4.sibling;
                          t4.sibling = null;
                          t4 = J;
                        } while (null !== t4);
                      }
                    }
                    V2 = f3;
                  }
                }
                if (0 !== (f3.subtreeFlags & 2064) && null !== g3)
                  g3.return = f3, V2 = g3;
                else
                  b:
                    for (; null !== V2; ) {
                      f3 = V2;
                      if (0 !== (f3.flags & 2048))
                        switch (f3.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Qj(9, f3, f3.return);
                        }
                      var x3 = f3.sibling;
                      if (null !== x3) {
                        x3.return = f3.return;
                        V2 = x3;
                        break b;
                      }
                      V2 = f3.return;
                    }
              }
              var w3 = a3.current;
              for (V2 = w3; null !== V2; ) {
                g3 = V2;
                var u3 = g3.child;
                if (0 !== (g3.subtreeFlags & 2064) && null !== u3)
                  u3.return = g3, V2 = u3;
                else
                  b:
                    for (g3 = w3; null !== V2; ) {
                      h3 = V2;
                      if (0 !== (h3.flags & 2048))
                        try {
                          switch (h3.tag) {
                            case 0:
                            case 11:
                            case 15:
                              Rj(9, h3);
                          }
                        } catch (na) {
                          W2(h3, h3.return, na);
                        }
                      if (h3 === g3) {
                        V2 = null;
                        break b;
                      }
                      var F = h3.sibling;
                      if (null !== F) {
                        F.return = h3.return;
                        V2 = F;
                        break b;
                      }
                      V2 = h3.return;
                    }
              }
              K = e2;
              jg();
              if (lc && "function" === typeof lc.onPostCommitFiberRoot)
                try {
                  lc.onPostCommitFiberRoot(kc, a3);
                } catch (na) {
                }
              d3 = true;
            }
            return d3;
          } finally {
            C2 = c3, pk.transition = b3;
          }
        }
        return false;
      }
      function Yk(a3, b3, c3) {
        b3 = Ki(c3, b3);
        b3 = Oi(a3, b3, 1);
        a3 = dh(a3, b3, 1);
        b3 = L3();
        null !== a3 && (Ac(a3, 1, b3), Ek(a3, b3));
      }
      function W2(a3, b3, c3) {
        if (3 === a3.tag)
          Yk(a3, a3, c3);
        else
          for (; null !== b3; ) {
            if (3 === b3.tag) {
              Yk(b3, a3, c3);
              break;
            } else if (1 === b3.tag) {
              var d3 = b3.stateNode;
              if ("function" === typeof b3.type.getDerivedStateFromError || "function" === typeof d3.componentDidCatch && (null === Si || !Si.has(d3))) {
                a3 = Ki(c3, a3);
                a3 = Ri(b3, a3, 1);
                b3 = dh(b3, a3, 1);
                a3 = L3();
                null !== b3 && (Ac(b3, 1, a3), Ek(b3, a3));
                break;
              }
            }
            b3 = b3.return;
          }
      }
      function Ui(a3, b3, c3) {
        var d3 = a3.pingCache;
        null !== d3 && d3.delete(b3);
        b3 = L3();
        a3.pingedLanes |= a3.suspendedLanes & c3;
        R3 === a3 && (Z & c3) === c3 && (4 === T3 || 3 === T3 && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a3, 0) : sk |= c3);
        Ek(a3, b3);
      }
      function Zk(a3, b3) {
        0 === b3 && (0 === (a3.mode & 1) ? b3 = 1 : (b3 = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
        var c3 = L3();
        a3 = Zg(a3, b3);
        null !== a3 && (Ac(a3, b3, c3), Ek(a3, c3));
      }
      function vj(a3) {
        var b3 = a3.memoizedState, c3 = 0;
        null !== b3 && (c3 = b3.retryLane);
        Zk(a3, c3);
      }
      function ck(a3, b3) {
        var c3 = 0;
        switch (a3.tag) {
          case 13:
            var d3 = a3.stateNode;
            var e2 = a3.memoizedState;
            null !== e2 && (c3 = e2.retryLane);
            break;
          case 19:
            d3 = a3.stateNode;
            break;
          default:
            throw Error(p3(314));
        }
        null !== d3 && d3.delete(b3);
        Zk(a3, c3);
      }
      var Wk;
      Wk = function(a3, b3, c3) {
        if (null !== a3)
          if (a3.memoizedProps !== b3.pendingProps || Wf.current)
            Ug = true;
          else {
            if (0 === (a3.lanes & c3) && 0 === (b3.flags & 128))
              return Ug = false, zj(a3, b3, c3);
            Ug = 0 !== (a3.flags & 131072) ? true : false;
          }
        else
          Ug = false, I && 0 !== (b3.flags & 1048576) && ug(b3, ng, b3.index);
        b3.lanes = 0;
        switch (b3.tag) {
          case 2:
            var d3 = b3.type;
            jj(a3, b3);
            a3 = b3.pendingProps;
            var e2 = Yf(b3, H2.current);
            Tg(b3, c3);
            e2 = Xh(null, b3, d3, a3, e2, c3);
            var f3 = bi();
            b3.flags |= 1;
            "object" === typeof e2 && null !== e2 && "function" === typeof e2.render && void 0 === e2.$$typeof ? (b3.tag = 1, b3.memoizedState = null, b3.updateQueue = null, Zf(d3) ? (f3 = true, cg(b3)) : f3 = false, b3.memoizedState = null !== e2.state && void 0 !== e2.state ? e2.state : null, ah(b3), e2.updater = nh, b3.stateNode = e2, e2._reactInternals = b3, rh(b3, d3, a3, c3), b3 = kj(null, b3, d3, true, f3, c3)) : (b3.tag = 0, I && f3 && vg(b3), Yi(null, b3, e2, c3), b3 = b3.child);
            return b3;
          case 16:
            d3 = b3.elementType;
            a: {
              jj(a3, b3);
              a3 = b3.pendingProps;
              e2 = d3._init;
              d3 = e2(d3._payload);
              b3.type = d3;
              e2 = b3.tag = $k(d3);
              a3 = Lg(d3, a3);
              switch (e2) {
                case 0:
                  b3 = dj(null, b3, d3, a3, c3);
                  break a;
                case 1:
                  b3 = ij(null, b3, d3, a3, c3);
                  break a;
                case 11:
                  b3 = Zi(null, b3, d3, a3, c3);
                  break a;
                case 14:
                  b3 = aj(null, b3, d3, Lg(d3.type, a3), c3);
                  break a;
              }
              throw Error(p3(
                306,
                d3,
                ""
              ));
            }
            return b3;
          case 0:
            return d3 = b3.type, e2 = b3.pendingProps, e2 = b3.elementType === d3 ? e2 : Lg(d3, e2), dj(a3, b3, d3, e2, c3);
          case 1:
            return d3 = b3.type, e2 = b3.pendingProps, e2 = b3.elementType === d3 ? e2 : Lg(d3, e2), ij(a3, b3, d3, e2, c3);
          case 3:
            a: {
              lj(b3);
              if (null === a3)
                throw Error(p3(387));
              d3 = b3.pendingProps;
              f3 = b3.memoizedState;
              e2 = f3.element;
              bh(a3, b3);
              gh(b3, d3, null, c3);
              var g3 = b3.memoizedState;
              d3 = g3.element;
              if (f3.isDehydrated)
                if (f3 = { element: d3, isDehydrated: false, cache: g3.cache, pendingSuspenseBoundaries: g3.pendingSuspenseBoundaries, transitions: g3.transitions }, b3.updateQueue.baseState = f3, b3.memoizedState = f3, b3.flags & 256) {
                  e2 = Ki(Error(p3(423)), b3);
                  b3 = mj(a3, b3, d3, c3, e2);
                  break a;
                } else if (d3 !== e2) {
                  e2 = Ki(Error(p3(424)), b3);
                  b3 = mj(a3, b3, d3, c3, e2);
                  break a;
                } else
                  for (yg = Lf(b3.stateNode.containerInfo.firstChild), xg = b3, I = true, zg = null, c3 = Ch(b3, null, d3, c3), b3.child = c3; c3; )
                    c3.flags = c3.flags & -3 | 4096, c3 = c3.sibling;
              else {
                Ig();
                if (d3 === e2) {
                  b3 = $i(a3, b3, c3);
                  break a;
                }
                Yi(a3, b3, d3, c3);
              }
              b3 = b3.child;
            }
            return b3;
          case 5:
            return Kh(b3), null === a3 && Eg(b3), d3 = b3.type, e2 = b3.pendingProps, f3 = null !== a3 ? a3.memoizedProps : null, g3 = e2.children, Ef(d3, e2) ? g3 = null : null !== f3 && Ef(d3, f3) && (b3.flags |= 32), hj(a3, b3), Yi(a3, b3, g3, c3), b3.child;
          case 6:
            return null === a3 && Eg(b3), null;
          case 13:
            return pj(a3, b3, c3);
          case 4:
            return Ih(b3, b3.stateNode.containerInfo), d3 = b3.pendingProps, null === a3 ? b3.child = Bh(b3, null, d3, c3) : Yi(a3, b3, d3, c3), b3.child;
          case 11:
            return d3 = b3.type, e2 = b3.pendingProps, e2 = b3.elementType === d3 ? e2 : Lg(d3, e2), Zi(a3, b3, d3, e2, c3);
          case 7:
            return Yi(a3, b3, b3.pendingProps, c3), b3.child;
          case 8:
            return Yi(a3, b3, b3.pendingProps.children, c3), b3.child;
          case 12:
            return Yi(a3, b3, b3.pendingProps.children, c3), b3.child;
          case 10:
            a: {
              d3 = b3.type._context;
              e2 = b3.pendingProps;
              f3 = b3.memoizedProps;
              g3 = e2.value;
              G(Mg, d3._currentValue);
              d3._currentValue = g3;
              if (null !== f3)
                if (He(f3.value, g3)) {
                  if (f3.children === e2.children && !Wf.current) {
                    b3 = $i(a3, b3, c3);
                    break a;
                  }
                } else
                  for (f3 = b3.child, null !== f3 && (f3.return = b3); null !== f3; ) {
                    var h3 = f3.dependencies;
                    if (null !== h3) {
                      g3 = f3.child;
                      for (var k2 = h3.firstContext; null !== k2; ) {
                        if (k2.context === d3) {
                          if (1 === f3.tag) {
                            k2 = ch(-1, c3 & -c3);
                            k2.tag = 2;
                            var l3 = f3.updateQueue;
                            if (null !== l3) {
                              l3 = l3.shared;
                              var m3 = l3.pending;
                              null === m3 ? k2.next = k2 : (k2.next = m3.next, m3.next = k2);
                              l3.pending = k2;
                            }
                          }
                          f3.lanes |= c3;
                          k2 = f3.alternate;
                          null !== k2 && (k2.lanes |= c3);
                          Sg(
                            f3.return,
                            c3,
                            b3
                          );
                          h3.lanes |= c3;
                          break;
                        }
                        k2 = k2.next;
                      }
                    } else if (10 === f3.tag)
                      g3 = f3.type === b3.type ? null : f3.child;
                    else if (18 === f3.tag) {
                      g3 = f3.return;
                      if (null === g3)
                        throw Error(p3(341));
                      g3.lanes |= c3;
                      h3 = g3.alternate;
                      null !== h3 && (h3.lanes |= c3);
                      Sg(g3, c3, b3);
                      g3 = f3.sibling;
                    } else
                      g3 = f3.child;
                    if (null !== g3)
                      g3.return = f3;
                    else
                      for (g3 = f3; null !== g3; ) {
                        if (g3 === b3) {
                          g3 = null;
                          break;
                        }
                        f3 = g3.sibling;
                        if (null !== f3) {
                          f3.return = g3.return;
                          g3 = f3;
                          break;
                        }
                        g3 = g3.return;
                      }
                    f3 = g3;
                  }
              Yi(a3, b3, e2.children, c3);
              b3 = b3.child;
            }
            return b3;
          case 9:
            return e2 = b3.type, d3 = b3.pendingProps.children, Tg(b3, c3), e2 = Vg(e2), d3 = d3(e2), b3.flags |= 1, Yi(a3, b3, d3, c3), b3.child;
          case 14:
            return d3 = b3.type, e2 = Lg(d3, b3.pendingProps), e2 = Lg(d3.type, e2), aj(a3, b3, d3, e2, c3);
          case 15:
            return cj(a3, b3, b3.type, b3.pendingProps, c3);
          case 17:
            return d3 = b3.type, e2 = b3.pendingProps, e2 = b3.elementType === d3 ? e2 : Lg(d3, e2), jj(a3, b3), b3.tag = 1, Zf(d3) ? (a3 = true, cg(b3)) : a3 = false, Tg(b3, c3), ph(b3, d3, e2), rh(b3, d3, e2, c3), kj(null, b3, d3, true, a3, c3);
          case 19:
            return yj(a3, b3, c3);
          case 22:
            return ej(a3, b3, c3);
        }
        throw Error(p3(156, b3.tag));
      };
      function Gk(a3, b3) {
        return ac(a3, b3);
      }
      function al(a3, b3, c3, d3) {
        this.tag = a3;
        this.key = c3;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b3;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d3;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function Bg(a3, b3, c3, d3) {
        return new al(a3, b3, c3, d3);
      }
      function bj(a3) {
        a3 = a3.prototype;
        return !(!a3 || !a3.isReactComponent);
      }
      function $k(a3) {
        if ("function" === typeof a3)
          return bj(a3) ? 1 : 0;
        if (void 0 !== a3 && null !== a3) {
          a3 = a3.$$typeof;
          if (a3 === Da)
            return 11;
          if (a3 === Ga)
            return 14;
        }
        return 2;
      }
      function wh(a3, b3) {
        var c3 = a3.alternate;
        null === c3 ? (c3 = Bg(a3.tag, b3, a3.key, a3.mode), c3.elementType = a3.elementType, c3.type = a3.type, c3.stateNode = a3.stateNode, c3.alternate = a3, a3.alternate = c3) : (c3.pendingProps = b3, c3.type = a3.type, c3.flags = 0, c3.subtreeFlags = 0, c3.deletions = null);
        c3.flags = a3.flags & 14680064;
        c3.childLanes = a3.childLanes;
        c3.lanes = a3.lanes;
        c3.child = a3.child;
        c3.memoizedProps = a3.memoizedProps;
        c3.memoizedState = a3.memoizedState;
        c3.updateQueue = a3.updateQueue;
        b3 = a3.dependencies;
        c3.dependencies = null === b3 ? null : { lanes: b3.lanes, firstContext: b3.firstContext };
        c3.sibling = a3.sibling;
        c3.index = a3.index;
        c3.ref = a3.ref;
        return c3;
      }
      function yh(a3, b3, c3, d3, e2, f3) {
        var g3 = 2;
        d3 = a3;
        if ("function" === typeof a3)
          bj(a3) && (g3 = 1);
        else if ("string" === typeof a3)
          g3 = 5;
        else
          a:
            switch (a3) {
              case ya:
                return Ah(c3.children, e2, f3, b3);
              case za:
                g3 = 8;
                e2 |= 8;
                break;
              case Aa:
                return a3 = Bg(12, c3, b3, e2 | 2), a3.elementType = Aa, a3.lanes = f3, a3;
              case Ea:
                return a3 = Bg(13, c3, b3, e2), a3.elementType = Ea, a3.lanes = f3, a3;
              case Fa:
                return a3 = Bg(19, c3, b3, e2), a3.elementType = Fa, a3.lanes = f3, a3;
              case Ia:
                return qj(c3, e2, f3, b3);
              default:
                if ("object" === typeof a3 && null !== a3)
                  switch (a3.$$typeof) {
                    case Ba:
                      g3 = 10;
                      break a;
                    case Ca:
                      g3 = 9;
                      break a;
                    case Da:
                      g3 = 11;
                      break a;
                    case Ga:
                      g3 = 14;
                      break a;
                    case Ha:
                      g3 = 16;
                      d3 = null;
                      break a;
                  }
                throw Error(p3(130, null == a3 ? a3 : typeof a3, ""));
            }
        b3 = Bg(g3, c3, b3, e2);
        b3.elementType = a3;
        b3.type = d3;
        b3.lanes = f3;
        return b3;
      }
      function Ah(a3, b3, c3, d3) {
        a3 = Bg(7, a3, d3, b3);
        a3.lanes = c3;
        return a3;
      }
      function qj(a3, b3, c3, d3) {
        a3 = Bg(22, a3, d3, b3);
        a3.elementType = Ia;
        a3.lanes = c3;
        a3.stateNode = { isHidden: false };
        return a3;
      }
      function xh(a3, b3, c3) {
        a3 = Bg(6, a3, null, b3);
        a3.lanes = c3;
        return a3;
      }
      function zh(a3, b3, c3) {
        b3 = Bg(4, null !== a3.children ? a3.children : [], a3.key, b3);
        b3.lanes = c3;
        b3.stateNode = { containerInfo: a3.containerInfo, pendingChildren: null, implementation: a3.implementation };
        return b3;
      }
      function bl(a3, b3, c3, d3, e2) {
        this.tag = b3;
        this.containerInfo = a3;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.callbackNode = this.pendingContext = this.context = null;
        this.callbackPriority = 0;
        this.eventTimes = zc(0);
        this.expirationTimes = zc(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = zc(0);
        this.identifierPrefix = d3;
        this.onRecoverableError = e2;
        this.mutableSourceEagerHydrationData = null;
      }
      function cl(a3, b3, c3, d3, e2, f3, g3, h3, k2) {
        a3 = new bl(a3, b3, c3, h3, k2);
        1 === b3 ? (b3 = 1, true === f3 && (b3 |= 8)) : b3 = 0;
        f3 = Bg(3, null, null, b3);
        a3.current = f3;
        f3.stateNode = a3;
        f3.memoizedState = { element: d3, isDehydrated: c3, cache: null, transitions: null, pendingSuspenseBoundaries: null };
        ah(f3);
        return a3;
      }
      function dl(a3, b3, c3) {
        var d3 = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return { $$typeof: wa, key: null == d3 ? null : "" + d3, children: a3, containerInfo: b3, implementation: c3 };
      }
      function el(a3) {
        if (!a3)
          return Vf;
        a3 = a3._reactInternals;
        a: {
          if (Vb(a3) !== a3 || 1 !== a3.tag)
            throw Error(p3(170));
          var b3 = a3;
          do {
            switch (b3.tag) {
              case 3:
                b3 = b3.stateNode.context;
                break a;
              case 1:
                if (Zf(b3.type)) {
                  b3 = b3.stateNode.__reactInternalMemoizedMergedChildContext;
                  break a;
                }
            }
            b3 = b3.return;
          } while (null !== b3);
          throw Error(p3(171));
        }
        if (1 === a3.tag) {
          var c3 = a3.type;
          if (Zf(c3))
            return bg(a3, c3, b3);
        }
        return b3;
      }
      function fl(a3, b3, c3, d3, e2, f3, g3, h3, k2) {
        a3 = cl(c3, d3, true, a3, e2, f3, g3, h3, k2);
        a3.context = el(null);
        c3 = a3.current;
        d3 = L3();
        e2 = lh(c3);
        f3 = ch(d3, e2);
        f3.callback = void 0 !== b3 && null !== b3 ? b3 : null;
        dh(c3, f3, e2);
        a3.current.lanes = e2;
        Ac(a3, e2, d3);
        Ek(a3, d3);
        return a3;
      }
      function gl(a3, b3, c3, d3) {
        var e2 = b3.current, f3 = L3(), g3 = lh(e2);
        c3 = el(c3);
        null === b3.context ? b3.context = c3 : b3.pendingContext = c3;
        b3 = ch(f3, g3);
        b3.payload = { element: a3 };
        d3 = void 0 === d3 ? null : d3;
        null !== d3 && (b3.callback = d3);
        a3 = dh(e2, b3, g3);
        null !== a3 && (mh(a3, e2, g3, f3), eh(a3, e2, g3));
        return g3;
      }
      function hl(a3) {
        a3 = a3.current;
        if (!a3.child)
          return null;
        switch (a3.child.tag) {
          case 5:
            return a3.child.stateNode;
          default:
            return a3.child.stateNode;
        }
      }
      function il(a3, b3) {
        a3 = a3.memoizedState;
        if (null !== a3 && null !== a3.dehydrated) {
          var c3 = a3.retryLane;
          a3.retryLane = 0 !== c3 && c3 < b3 ? c3 : b3;
        }
      }
      function jl(a3, b3) {
        il(a3, b3);
        (a3 = a3.alternate) && il(a3, b3);
      }
      function kl() {
        return null;
      }
      var ll = "function" === typeof reportError ? reportError : function(a3) {
        console.error(a3);
      };
      function ml(a3) {
        this._internalRoot = a3;
      }
      nl.prototype.render = ml.prototype.render = function(a3) {
        var b3 = this._internalRoot;
        if (null === b3)
          throw Error(p3(409));
        gl(a3, b3, null, null);
      };
      nl.prototype.unmount = ml.prototype.unmount = function() {
        var a3 = this._internalRoot;
        if (null !== a3) {
          this._internalRoot = null;
          var b3 = a3.containerInfo;
          Sk(function() {
            gl(null, a3, null, null);
          });
          b3[uf] = null;
        }
      };
      function nl(a3) {
        this._internalRoot = a3;
      }
      nl.prototype.unstable_scheduleHydration = function(a3) {
        if (a3) {
          var b3 = Hc();
          a3 = { blockedOn: null, target: a3, priority: b3 };
          for (var c3 = 0; c3 < Qc.length && 0 !== b3 && b3 < Qc[c3].priority; c3++)
            ;
          Qc.splice(c3, 0, a3);
          0 === c3 && Vc(a3);
        }
      };
      function ol(a3) {
        return !(!a3 || 1 !== a3.nodeType && 9 !== a3.nodeType && 11 !== a3.nodeType);
      }
      function pl(a3) {
        return !(!a3 || 1 !== a3.nodeType && 9 !== a3.nodeType && 11 !== a3.nodeType && (8 !== a3.nodeType || " react-mount-point-unstable " !== a3.nodeValue));
      }
      function ql() {
      }
      function rl(a3, b3, c3, d3, e2) {
        if (e2) {
          if ("function" === typeof d3) {
            var f3 = d3;
            d3 = function() {
              var a4 = hl(g3);
              f3.call(a4);
            };
          }
          var g3 = fl(b3, d3, a3, 0, null, false, false, "", ql);
          a3._reactRootContainer = g3;
          a3[uf] = g3.current;
          sf(8 === a3.nodeType ? a3.parentNode : a3);
          Sk();
          return g3;
        }
        for (; e2 = a3.lastChild; )
          a3.removeChild(e2);
        if ("function" === typeof d3) {
          var h3 = d3;
          d3 = function() {
            var a4 = hl(k2);
            h3.call(a4);
          };
        }
        var k2 = cl(a3, 0, false, null, null, false, false, "", ql);
        a3._reactRootContainer = k2;
        a3[uf] = k2.current;
        sf(8 === a3.nodeType ? a3.parentNode : a3);
        Sk(function() {
          gl(b3, k2, c3, d3);
        });
        return k2;
      }
      function sl(a3, b3, c3, d3, e2) {
        var f3 = c3._reactRootContainer;
        if (f3) {
          var g3 = f3;
          if ("function" === typeof e2) {
            var h3 = e2;
            e2 = function() {
              var a4 = hl(g3);
              h3.call(a4);
            };
          }
          gl(b3, g3, a3, e2);
        } else
          g3 = rl(c3, b3, a3, e2, d3);
        return hl(g3);
      }
      Ec = function(a3) {
        switch (a3.tag) {
          case 3:
            var b3 = a3.stateNode;
            if (b3.current.memoizedState.isDehydrated) {
              var c3 = tc(b3.pendingLanes);
              0 !== c3 && (Cc(b3, c3 | 1), Ek(b3, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
            }
            break;
          case 13:
            Sk(function() {
              var b4 = Zg(a3, 1);
              if (null !== b4) {
                var c4 = L3();
                mh(b4, a3, 1, c4);
              }
            }), jl(a3, 1);
        }
      };
      Fc = function(a3) {
        if (13 === a3.tag) {
          var b3 = Zg(a3, 134217728);
          if (null !== b3) {
            var c3 = L3();
            mh(b3, a3, 134217728, c3);
          }
          jl(a3, 134217728);
        }
      };
      Gc = function(a3) {
        if (13 === a3.tag) {
          var b3 = lh(a3), c3 = Zg(a3, b3);
          if (null !== c3) {
            var d3 = L3();
            mh(c3, a3, b3, d3);
          }
          jl(a3, b3);
        }
      };
      Hc = function() {
        return C2;
      };
      Ic = function(a3, b3) {
        var c3 = C2;
        try {
          return C2 = a3, b3();
        } finally {
          C2 = c3;
        }
      };
      yb = function(a3, b3, c3) {
        switch (b3) {
          case "input":
            bb(a3, c3);
            b3 = c3.name;
            if ("radio" === c3.type && null != b3) {
              for (c3 = a3; c3.parentNode; )
                c3 = c3.parentNode;
              c3 = c3.querySelectorAll("input[name=" + JSON.stringify("" + b3) + '][type="radio"]');
              for (b3 = 0; b3 < c3.length; b3++) {
                var d3 = c3[b3];
                if (d3 !== a3 && d3.form === a3.form) {
                  var e2 = Db(d3);
                  if (!e2)
                    throw Error(p3(90));
                  Wa(d3);
                  bb(d3, e2);
                }
              }
            }
            break;
          case "textarea":
            ib(a3, c3);
            break;
          case "select":
            b3 = c3.value, null != b3 && fb(a3, !!c3.multiple, b3, false);
        }
      };
      Gb = Rk;
      Hb = Sk;
      var tl = { usingClientEntryPoint: false, Events: [Cb, ue, Db, Eb, Fb, Rk] };
      var ul = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.2.0", rendererPackageName: "react-dom" };
      var vl = { bundleType: ul.bundleType, version: ul.version, rendererPackageName: ul.rendererPackageName, rendererConfig: ul.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: function(a3) {
        a3 = Zb(a3);
        return null === a3 ? null : a3.stateNode;
      }, findFiberByHostInstance: ul.findFiberByHostInstance || kl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.2.0-next-9e3b772b8-20220608" };
      if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!wl.isDisabled && wl.supportsFiber)
          try {
            kc = wl.inject(vl), lc = wl;
          } catch (a3) {
          }
      }
      var wl;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
      exports.createPortal = function(a3, b3) {
        var c3 = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!ol(b3))
          throw Error(p3(200));
        return dl(a3, b3, null, c3);
      };
      exports.createRoot = function(a3, b3) {
        if (!ol(a3))
          throw Error(p3(299));
        var c3 = false, d3 = "", e2 = ll;
        null !== b3 && void 0 !== b3 && (true === b3.unstable_strictMode && (c3 = true), void 0 !== b3.identifierPrefix && (d3 = b3.identifierPrefix), void 0 !== b3.onRecoverableError && (e2 = b3.onRecoverableError));
        b3 = cl(a3, 1, false, null, null, c3, false, d3, e2);
        a3[uf] = b3.current;
        sf(8 === a3.nodeType ? a3.parentNode : a3);
        return new ml(b3);
      };
      exports.findDOMNode = function(a3) {
        if (null == a3)
          return null;
        if (1 === a3.nodeType)
          return a3;
        var b3 = a3._reactInternals;
        if (void 0 === b3) {
          if ("function" === typeof a3.render)
            throw Error(p3(188));
          a3 = Object.keys(a3).join(",");
          throw Error(p3(268, a3));
        }
        a3 = Zb(b3);
        a3 = null === a3 ? null : a3.stateNode;
        return a3;
      };
      exports.flushSync = function(a3) {
        return Sk(a3);
      };
      exports.hydrate = function(a3, b3, c3) {
        if (!pl(b3))
          throw Error(p3(200));
        return sl(null, a3, b3, true, c3);
      };
      exports.hydrateRoot = function(a3, b3, c3) {
        if (!ol(a3))
          throw Error(p3(405));
        var d3 = null != c3 && c3.hydratedSources || null, e2 = false, f3 = "", g3 = ll;
        null !== c3 && void 0 !== c3 && (true === c3.unstable_strictMode && (e2 = true), void 0 !== c3.identifierPrefix && (f3 = c3.identifierPrefix), void 0 !== c3.onRecoverableError && (g3 = c3.onRecoverableError));
        b3 = fl(b3, null, a3, 1, null != c3 ? c3 : null, e2, false, f3, g3);
        a3[uf] = b3.current;
        sf(a3);
        if (d3)
          for (a3 = 0; a3 < d3.length; a3++)
            c3 = d3[a3], e2 = c3._getVersion, e2 = e2(c3._source), null == b3.mutableSourceEagerHydrationData ? b3.mutableSourceEagerHydrationData = [c3, e2] : b3.mutableSourceEagerHydrationData.push(
              c3,
              e2
            );
        return new nl(b3);
      };
      exports.render = function(a3, b3, c3) {
        if (!pl(b3))
          throw Error(p3(200));
        return sl(null, a3, b3, false, c3);
      };
      exports.unmountComponentAtNode = function(a3) {
        if (!pl(a3))
          throw Error(p3(40));
        return a3._reactRootContainer ? (Sk(function() {
          sl(null, null, a3, false, function() {
            a3._reactRootContainer = null;
            a3[uf] = null;
          });
        }), true) : false;
      };
      exports.unstable_batchedUpdates = Rk;
      exports.unstable_renderSubtreeIntoContainer = function(a3, b3, c3, d3) {
        if (!pl(c3))
          throw Error(p3(200));
        if (null == a3 || void 0 === a3._reactInternals)
          throw Error(p3(38));
        return sl(a3, b3, c3, false, d3);
      };
      exports.version = "18.2.0-next-9e3b772b8-20220608";
    }
  });

  // ../../../node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../../../node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        if (false) {
          throw new Error("^_^");
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      if (true) {
        checkDCE();
        module.exports = require_react_dom_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // ../../../node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../../../node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m3 = require_react_dom();
      if (true) {
        exports.createRoot = m3.createRoot;
        exports.hydrateRoot = m3.hydrateRoot;
      } else {
        i3 = m3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c3, o3) {
          i3.usingClientEntryPoint = true;
          try {
            return m3.createRoot(c3, o3);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c3, h3, o3) {
          i3.usingClientEntryPoint = true;
          try {
            return m3.hydrateRoot(c3, h3, o3);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
      }
      var i3;
    }
  });

  // ../../../node_modules/lodash.isequal/index.js
  var require_lodash = __commonJS({
    "../../../node_modules/lodash.isequal/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var MAX_SAFE_INTEGER = 9007199254740991;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var asyncTag = "[object AsyncFunction]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var nullTag = "[object Null]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var proxyTag = "[object Proxy]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var undefinedTag = "[object Undefined]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      function arrayFilter(array2, predicate) {
        var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
        while (++index2 < length) {
          var value = array2[index2];
          if (predicate(value, index2, array2)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      function arrayPush(array2, values) {
        var index2 = -1, length = values.length, offset = array2.length;
        while (++index2 < length) {
          array2[offset + index2] = values[index2];
        }
        return array2;
      }
      function arraySome(array2, predicate) {
        var index2 = -1, length = array2 == null ? 0 : array2.length;
        while (++index2 < length) {
          if (predicate(array2[index2], index2, array2)) {
            return true;
          }
        }
        return false;
      }
      function baseTimes(n3, iteratee) {
        var index2 = -1, result = Array(n3);
        while (++index2 < n3) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      function baseUnary(func) {
        return function(value) {
          return func(value);
        };
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function getValue(object2, key) {
        return object2 == null ? void 0 : object2[key];
      }
      function mapToArray(map) {
        var index2 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      function overArg(func, transform) {
        return function(arg) {
          return func(transform(arg));
        };
      }
      function setToArray(set) {
        var index2 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var nativeObjectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var Buffer3 = moduleExports ? root.Buffer : void 0;
      var Symbol2 = root.Symbol;
      var Uint8Array2 = root.Uint8Array;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var splice = arrayProto.splice;
      var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var nativeIsBuffer = Buffer3 ? Buffer3.isBuffer : void 0;
      var nativeKeys = overArg(Object.keys, Object);
      var DataView2 = getNative(root, "DataView");
      var Map2 = getNative(root, "Map");
      var Promise2 = getNative(root, "Promise");
      var Set2 = getNative(root, "Set");
      var WeakMap2 = getNative(root, "WeakMap");
      var nativeCreate = getNative(Object, "create");
      var dataViewCtorString = toSource(DataView2);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function Hash(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index2 = -1, length = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index2 = -1, length = values == null ? 0 : values.length;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values[index2]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function Stack2(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      function stackGet(key) {
        return this.__data__.get(key);
      }
      function stackHas(key) {
        return this.__data__.has(key);
      }
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      Stack2.prototype.clear = stackClear;
      Stack2.prototype["delete"] = stackDelete;
      Stack2.prototype.get = stackGet;
      Stack2.prototype.has = stackHas;
      Stack2.prototype.set = stackSet;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex(key, length)))) {
            result.push(key);
          }
        }
        return result;
      }
      function assocIndexOf(array2, key) {
        var length = array2.length;
        while (length--) {
          if (eq(array2[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
        var result = keysFunc(object2);
        return isArray(object2) ? result : arrayPush(result, symbolsFunc(object2));
      }
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      function baseIsEqual(value, other, bitmask, customizer, stack3) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack3);
      }
      function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack3) {
        var objIsArr = isArray(object2), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object2), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer(object2)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack3 || (stack3 = new Stack2());
          return objIsArr || isTypedArray(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack3) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack3);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
            stack3 || (stack3 = new Stack2());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack3);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack3 || (stack3 = new Stack2());
        return equalObjects(object2, other, bitmask, customizer, equalFunc, stack3);
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      function baseKeys(object2) {
        if (!isPrototype(object2)) {
          return nativeKeys(object2);
        }
        var result = [];
        for (var key in Object(object2)) {
          if (hasOwnProperty2.call(object2, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      function equalArrays(array2, other, bitmask, customizer, equalFunc, stack3) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var stacked = stack3.get(array2);
        if (stacked && stack3.get(other)) {
          return stacked == other;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack3.set(array2, other);
        stack3.set(other, array2);
        while (++index2 < arrLength) {
          var arrValue = array2[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack3) : customizer(arrValue, othValue, index2, array2, other, stack3);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack3))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack3))) {
            result = false;
            break;
          }
        }
        stack3["delete"](array2);
        stack3["delete"](other);
        return result;
      }
      function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack3) {
        switch (tag) {
          case dataViewTag:
            if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
              return false;
            }
            object2 = object2.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object2, +other);
          case errorTag:
            return object2.name == other.name && object2.message == other.message;
          case regexpTag:
          case stringTag:
            return object2 == other + "";
          case mapTag:
            var convert = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);
            if (object2.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack3.get(object2);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack3.set(object2, other);
            var result = equalArrays(convert(object2), convert(other), bitmask, customizer, equalFunc, stack3);
            stack3["delete"](object2);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object2) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      function equalObjects(object2, other, bitmask, customizer, equalFunc, stack3) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var stacked = stack3.get(object2);
        if (stacked && stack3.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack3.set(object2, other);
        stack3.set(other, object2);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object2[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack3) : customizer(objValue, othValue, key, object2, other, stack3);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack3) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object2.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack3["delete"](object2);
        stack3["delete"](other);
        return result;
      }
      function getAllKeys(object2) {
        return baseGetAllKeys(object2, keys, getSymbols);
      }
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object2, key) {
        var value = getValue(object2, key);
        return baseIsNative(value) ? value : void 0;
      }
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      var getSymbols = !nativeGetSymbols ? stubArray : function(object2) {
        if (object2 == null) {
          return [];
        }
        object2 = Object(object2);
        return arrayFilter(nativeGetSymbols(object2), function(symbol) {
          return propertyIsEnumerable.call(object2, symbol);
        });
      };
      var getTag = baseGetTag;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      function isIndex(value, length) {
        length = length == null ? MAX_SAFE_INTEGER : length;
        return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      var isArray = Array.isArray;
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }
      var isBuffer = nativeIsBuffer || stubFalse;
      function isEqual2(value, other) {
        return baseIsEqual(value, other);
      }
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      function keys(object2) {
        return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
      }
      function stubArray() {
        return [];
      }
      function stubFalse() {
        return false;
      }
      module.exports = isEqual2;
    }
  });

  // ../../../node_modules/eventemitter3/index.js
  var require_eventemitter3 = __commonJS({
    "../../../node_modules/eventemitter3/index.js"(exports, module) {
      "use strict";
      var has = Object.prototype.hasOwnProperty;
      var prefix = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = /* @__PURE__ */ Object.create(null);
        if (!new Events().__proto__)
          prefix = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function addListener(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener = new EE(fn, context || emitter, once), evt = prefix ? prefix + event : event;
        if (!emitter._events[evt])
          emitter._events[evt] = listener, emitter._eventsCount++;
        else if (!emitter._events[evt].fn)
          emitter._events[evt].push(listener);
        else
          emitter._events[evt] = [emitter._events[evt], listener];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0)
          emitter._events = new Events();
        else
          delete emitter._events[evt];
      }
      function EventEmitter2() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        var names = [], events, name;
        if (this._eventsCount === 0)
          return names;
        for (name in events = this._events) {
          if (has.call(events, name))
            names.push(prefix ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }
        return names;
      };
      EventEmitter2.prototype.listeners = function listeners(event) {
        var evt = prefix ? prefix + event : event, handlers = this._events[evt];
        if (!handlers)
          return [];
        if (handlers.fn)
          return [handlers.fn];
        for (var i3 = 0, l3 = handlers.length, ee = new Array(l3); i3 < l3; i3++) {
          ee[i3] = handlers[i3].fn;
        }
        return ee;
      };
      EventEmitter2.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix ? prefix + event : event, listeners = this._events[evt];
        if (!listeners)
          return 0;
        if (listeners.fn)
          return 1;
        return listeners.length;
      };
      EventEmitter2.prototype.emit = function emit(event, a1, a22, a3, a4, a5) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          return false;
        var listeners = this._events[evt], len = arguments.length, args, i3;
        if (listeners.fn) {
          if (listeners.once)
            this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a22), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a22, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a22, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a22, a3, a4, a5), true;
          }
          for (i3 = 1, args = new Array(len - 1); i3 < len; i3++) {
            args[i3 - 1] = arguments[i3];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i3 = 0; i3 < length; i3++) {
            if (listeners[i3].once)
              this.removeListener(event, listeners[i3].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i3].fn.call(listeners[i3].context);
                break;
              case 2:
                listeners[i3].fn.call(listeners[i3].context, a1);
                break;
              case 3:
                listeners[i3].fn.call(listeners[i3].context, a1, a22);
                break;
              case 4:
                listeners[i3].fn.call(listeners[i3].context, a1, a22, a3);
                break;
              default:
                if (!args)
                  for (j = 1, args = new Array(len - 1); j < len; j++) {
                    args[j - 1] = arguments[j];
                  }
                listeners[i3].fn.apply(listeners[i3].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter2.prototype.on = function on(event, fn, context) {
        return addListener(this, event, fn, context, false);
      };
      EventEmitter2.prototype.once = function once(event, fn, context) {
        return addListener(this, event, fn, context, true);
      };
      EventEmitter2.prototype.removeListener = function removeListener(event, fn, context, once) {
        var evt = prefix ? prefix + event : event;
        if (!this._events[evt])
          return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i3 = 0, events = [], length = listeners.length; i3 < length; i3++) {
            if (listeners[i3].fn !== fn || once && !listeners[i3].once || context && listeners[i3].context !== context) {
              events.push(listeners[i3]);
            }
          }
          if (events.length)
            this._events[evt] = events.length === 1 ? events[0] : events;
          else
            clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix ? prefix + event : event;
          if (this._events[evt])
            clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
      EventEmitter2.prefixed = prefix;
      EventEmitter2.EventEmitter = EventEmitter2;
      if ("undefined" !== typeof module) {
        module.exports = EventEmitter2;
      }
    }
  });

  // ../../../node_modules/react/cjs/react-jsx-runtime.production.min.js
  var require_react_jsx_runtime_production_min = __commonJS({
    "../../../node_modules/react/cjs/react-jsx-runtime.production.min.js"(exports) {
      "use strict";
      var f3 = require_react();
      var k2 = Symbol.for("react.element");
      var l3 = Symbol.for("react.fragment");
      var m3 = Object.prototype.hasOwnProperty;
      var n3 = f3.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
      var p3 = { key: true, ref: true, __self: true, __source: true };
      function q(c3, a3, g3) {
        var b3, d3 = {}, e2 = null, h3 = null;
        void 0 !== g3 && (e2 = "" + g3);
        void 0 !== a3.key && (e2 = "" + a3.key);
        void 0 !== a3.ref && (h3 = a3.ref);
        for (b3 in a3)
          m3.call(a3, b3) && !p3.hasOwnProperty(b3) && (d3[b3] = a3[b3]);
        if (c3 && c3.defaultProps)
          for (b3 in a3 = c3.defaultProps, a3)
            void 0 === d3[b3] && (d3[b3] = a3[b3]);
        return { $$typeof: k2, type: c3, key: e2, ref: h3, props: d3, _owner: n3.current };
      }
      exports.Fragment = l3;
      exports.jsx = q;
      exports.jsxs = q;
    }
  });

  // ../../../node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../../../node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_jsx_runtime_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // ../../../node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "../../../node_modules/classnames/index.js"(exports, module) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        var nativeCodeString = "[native code]";
        function classNames21() {
          var classes = [];
          for (var i3 = 0; i3 < arguments.length; i3++) {
            var arg = arguments[i3];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames21.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (typeof module !== "undefined" && module.exports) {
          classNames21.default = classNames21;
          module.exports = classNames21;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames21;
          });
        } else {
          window.classNames = classNames21;
        }
      })();
    }
  });

  // ../../../node_modules/lodash.uniq/index.js
  var require_lodash2 = __commonJS({
    "../../../node_modules/lodash.uniq/index.js"(exports, module) {
      var LARGE_ARRAY_SIZE = 200;
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var INFINITY = 1 / 0;
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      function arrayIncludes(array2, value) {
        var length = array2 ? array2.length : 0;
        return !!length && baseIndexOf(array2, value, 0) > -1;
      }
      function arrayIncludesWith(array2, value, comparator) {
        var index2 = -1, length = array2 ? array2.length : 0;
        while (++index2 < length) {
          if (comparator(value, array2[index2])) {
            return true;
          }
        }
        return false;
      }
      function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index2-- : ++index2 < length) {
          if (predicate(array2[index2], index2, array2)) {
            return index2;
          }
        }
        return -1;
      }
      function baseIndexOf(array2, value, fromIndex) {
        if (value !== value) {
          return baseFindIndex(array2, baseIsNaN, fromIndex);
        }
        var index2 = fromIndex - 1, length = array2.length;
        while (++index2 < length) {
          if (array2[index2] === value) {
            return index2;
          }
        }
        return -1;
      }
      function baseIsNaN(value) {
        return value !== value;
      }
      function cacheHas(cache, key) {
        return cache.has(key);
      }
      function getValue(object2, key) {
        return object2 == null ? void 0 : object2[key];
      }
      function isHostObject(value) {
        var result = false;
        if (value != null && typeof value.toString != "function") {
          try {
            result = !!(value + "");
          } catch (e2) {
          }
        }
        return result;
      }
      function setToArray(set) {
        var index2 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      var arrayProto = Array.prototype;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var coreJsData = root["__core-js_shared__"];
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var objectToString = objectProto.toString;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      var splice = arrayProto.splice;
      var Map2 = getNative(root, "Map");
      var Set2 = getNative(root, "Set");
      var nativeCreate = getNative(Object, "create");
      function Hash(entries) {
        var index2 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
      }
      function hashDelete(key) {
        return this.has(key) && delete this.__data__[key];
      }
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      function hashSet(key, value) {
        var data = this.__data__;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      function ListCache(entries) {
        var index2 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function listCacheClear() {
        this.__data__ = [];
      }
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index2 == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index2, 1);
        }
        return true;
      }
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      function MapCache(entries) {
        var index2 = -1, length = entries ? entries.length : 0;
        this.clear();
        while (++index2 < length) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      function mapCacheClear() {
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      function mapCacheDelete(key) {
        return getMapData(this, key)["delete"](key);
      }
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      function mapCacheSet(key, value) {
        getMapData(this, key).set(key, value);
        return this;
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      function SetCache(values) {
        var index2 = -1, length = values ? values.length : 0;
        this.__data__ = new MapCache();
        while (++index2 < length) {
          this.add(values[index2]);
        }
      }
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      function assocIndexOf(array2, key) {
        var length = array2.length;
        while (length--) {
          if (eq(array2[length][0], key)) {
            return length;
          }
        }
        return -1;
      }
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      function baseUniq(array2, iteratee, comparator) {
        var index2 = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        } else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array2);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index2 < length) {
            var value = array2[index2], computed2 = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed2 === computed2) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed2) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed2);
              }
              result.push(value);
            } else if (!includes(seen, computed2, comparator)) {
              if (seen !== result) {
                seen.push(computed2);
              }
              result.push(value);
            }
          }
        return result;
      }
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop3 : function(values) {
        return new Set2(values);
      };
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      function getNative(object2, key) {
        var value = getValue(object2, key);
        return baseIsNative(value) ? value : void 0;
      }
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      function isMasked(func) {
        return !!maskSrcKey && maskSrcKey in func;
      }
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e2) {
          }
          try {
            return func + "";
          } catch (e2) {
          }
        }
        return "";
      }
      function uniq3(array2) {
        return array2 && array2.length ? baseUniq(array2) : [];
      }
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      function isFunction(value) {
        var tag = isObject(value) ? objectToString.call(value) : "";
        return tag == funcTag || tag == genTag;
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function noop3() {
      }
      module.exports = uniq3;
    }
  });

  // ../../../node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "../../../node_modules/base64-js/index.js"(exports) {
      "use strict";
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i3 = 0, len = code3.length; i3 < len; ++i3) {
        lookup[i3] = code3[i3];
        revLookup[code3.charCodeAt(i3)] = i3;
      }
      var i3;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i4;
        for (i4 = 0; i4 < len2; i4 += 4) {
          tmp = revLookup[b64.charCodeAt(i4)] << 18 | revLookup[b64.charCodeAt(i4 + 1)] << 12 | revLookup[b64.charCodeAt(i4 + 2)] << 6 | revLookup[b64.charCodeAt(i4 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i4)] << 2 | revLookup[b64.charCodeAt(i4 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i4)] << 10 | revLookup[b64.charCodeAt(i4 + 1)] << 4 | revLookup[b64.charCodeAt(i4 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i4 = start; i4 < end; i4 += 3) {
          tmp = (uint8[i4] << 16 & 16711680) + (uint8[i4 + 1] << 8 & 65280) + (uint8[i4 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i4 = 0, len22 = len2 - extraBytes; i4 < len22; i4 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i4, i4 + maxChunkLength > len22 ? len22 : i4 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // ../../../node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "../../../node_modules/ieee754/index.js"(exports) {
      exports.read = function(buffer, offset, isLE, mLen, nBytes) {
        var e2, m3;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i3 = isLE ? nBytes - 1 : 0;
        var d3 = isLE ? -1 : 1;
        var s3 = buffer[offset + i3];
        i3 += d3;
        e2 = s3 & (1 << -nBits) - 1;
        s3 >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e2 = e2 * 256 + buffer[offset + i3], i3 += d3, nBits -= 8) {
        }
        m3 = e2 & (1 << -nBits) - 1;
        e2 >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m3 = m3 * 256 + buffer[offset + i3], i3 += d3, nBits -= 8) {
        }
        if (e2 === 0) {
          e2 = 1 - eBias;
        } else if (e2 === eMax) {
          return m3 ? NaN : (s3 ? -1 : 1) * Infinity;
        } else {
          m3 = m3 + Math.pow(2, mLen);
          e2 = e2 - eBias;
        }
        return (s3 ? -1 : 1) * m3 * Math.pow(2, e2 - mLen);
      };
      exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
        var e2, m3, c3;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i3 = isLE ? 0 : nBytes - 1;
        var d3 = isLE ? 1 : -1;
        var s3 = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m3 = isNaN(value) ? 1 : 0;
          e2 = eMax;
        } else {
          e2 = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c3 = Math.pow(2, -e2)) < 1) {
            e2--;
            c3 *= 2;
          }
          if (e2 + eBias >= 1) {
            value += rt / c3;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c3 >= 2) {
            e2++;
            c3 /= 2;
          }
          if (e2 + eBias >= eMax) {
            m3 = 0;
            e2 = eMax;
          } else if (e2 + eBias >= 1) {
            m3 = (value * c3 - 1) * Math.pow(2, mLen);
            e2 = e2 + eBias;
          } else {
            m3 = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e2 = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i3] = m3 & 255, i3 += d3, m3 /= 256, mLen -= 8) {
        }
        e2 = e2 << mLen | m3;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i3] = e2 & 255, i3 += d3, e2 /= 256, eLen -= 8) {
        }
        buffer[offset + i3 - d3] |= s3 * 128;
      };
    }
  });

  // ../../../node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "../../../node_modules/buffer/index.js"(exports) {
      "use strict";
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer3;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer3.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer3.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e2) {
          return false;
        }
      }
      Object.defineProperty(Buffer3.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer3.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer3.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer3.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer2(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer3.prototype);
        return buf;
      }
      function Buffer3(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer3.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer3.from(valueOf, encodingOrOffset, length);
        }
        const b3 = fromObject(value);
        if (b3)
          return b3;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer3.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer3.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer3.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer3, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer2(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer2(size).fill(fill, encoding) : createBuffer2(size).fill(fill);
        }
        return createBuffer2(size);
      }
      Buffer3.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer2(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer3.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer3.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string2, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer3.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string2, encoding) | 0;
        let buf = createBuffer2(length);
        const actual = buf.write(string2, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array2) {
        const length = array2.length < 0 ? 0 : checked(array2.length) | 0;
        const buf = createBuffer2(length);
        for (let i3 = 0; i3 < length; i3 += 1) {
          buf[i3] = array2[i3] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array2, byteOffset, length) {
        if (byteOffset < 0 || array2.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array2.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array2);
        } else if (length === void 0) {
          buf = new Uint8Array(array2, byteOffset);
        } else {
          buf = new Uint8Array(array2, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer3.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer3.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer2(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer2(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer3.alloc(+length);
      }
      Buffer3.isBuffer = function isBuffer(b3) {
        return b3 != null && b3._isBuffer === true && b3 !== Buffer3.prototype;
      };
      Buffer3.compare = function compare(a3, b3) {
        if (isInstance(a3, Uint8Array))
          a3 = Buffer3.from(a3, a3.offset, a3.byteLength);
        if (isInstance(b3, Uint8Array))
          b3 = Buffer3.from(b3, b3.offset, b3.byteLength);
        if (!Buffer3.isBuffer(a3) || !Buffer3.isBuffer(b3)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a3 === b3)
          return 0;
        let x3 = a3.length;
        let y3 = b3.length;
        for (let i3 = 0, len = Math.min(x3, y3); i3 < len; ++i3) {
          if (a3[i3] !== b3[i3]) {
            x3 = a3[i3];
            y3 = b3[i3];
            break;
          }
        }
        if (x3 < y3)
          return -1;
        if (y3 < x3)
          return 1;
        return 0;
      };
      Buffer3.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer3.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer3.alloc(0);
        }
        let i3;
        if (length === void 0) {
          length = 0;
          for (i3 = 0; i3 < list.length; ++i3) {
            length += list[i3].length;
          }
        }
        const buffer = Buffer3.allocUnsafe(length);
        let pos = 0;
        for (i3 = 0; i3 < list.length; ++i3) {
          let buf = list[i3];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer3.isBuffer(buf))
                buf = Buffer3.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer3.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string2, encoding) {
        if (Buffer3.isBuffer(string2)) {
          return string2.length;
        }
        if (ArrayBuffer.isView(string2) || isInstance(string2, ArrayBuffer)) {
          return string2.byteLength;
        }
        if (typeof string2 !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string2
          );
        }
        const len = string2.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string2).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string2).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string2).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer3.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer3.prototype._isBuffer = true;
      function swap(b3, n3, m3) {
        const i3 = b3[n3];
        b3[n3] = b3[m3];
        b3[m3] = i3;
      }
      Buffer3.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i3 = 0; i3 < len; i3 += 2) {
          swap(this, i3, i3 + 1);
        }
        return this;
      };
      Buffer3.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i3 = 0; i3 < len; i3 += 4) {
          swap(this, i3, i3 + 3);
          swap(this, i3 + 1, i3 + 2);
        }
        return this;
      };
      Buffer3.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i3 = 0; i3 < len; i3 += 8) {
          swap(this, i3, i3 + 7);
          swap(this, i3 + 1, i3 + 6);
          swap(this, i3 + 2, i3 + 5);
          swap(this, i3 + 3, i3 + 4);
        }
        return this;
      };
      Buffer3.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer3.prototype.toLocaleString = Buffer3.prototype.toString;
      Buffer3.prototype.equals = function equals2(b3) {
        if (!Buffer3.isBuffer(b3))
          throw new TypeError("Argument must be a Buffer");
        if (this === b3)
          return true;
        return Buffer3.compare(this, b3) === 0;
      };
      Buffer3.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer3.prototype[customInspectSymbol] = Buffer3.prototype.inspect;
      }
      Buffer3.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer3.from(target, target.offset, target.byteLength);
        }
        if (!Buffer3.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x3 = thisEnd - thisStart;
        let y3 = end - start;
        const len = Math.min(x3, y3);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i3 = 0; i3 < len; ++i3) {
          if (thisCopy[i3] !== targetCopy[i3]) {
            x3 = thisCopy[i3];
            y3 = targetCopy[i3];
            break;
          }
        }
        if (x3 < y3)
          return -1;
        if (y3 < x3)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer3.from(val, encoding);
        }
        if (Buffer3.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i4) {
          if (indexSize === 1) {
            return buf[i4];
          } else {
            return buf.readUInt16BE(i4 * indexSize);
          }
        }
        let i3;
        if (dir) {
          let foundIndex = -1;
          for (i3 = byteOffset; i3 < arrLength; i3++) {
            if (read(arr, i3) === read(val, foundIndex === -1 ? 0 : i3 - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i3;
              if (i3 - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i3 -= i3 - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i3 = byteOffset; i3 >= 0; i3--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i3 + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i3;
          }
        }
        return -1;
      }
      Buffer3.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer3.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer3.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string2, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string2.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i3;
        for (i3 = 0; i3 < length; ++i3) {
          const parsed = parseInt(string2.substr(i3 * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i3;
          buf[offset + i3] = parsed;
        }
        return i3;
      }
      function utf8Write(buf, string2, offset, length) {
        return blitBuffer(utf8ToBytes(string2, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string2, offset, length) {
        return blitBuffer(asciiToBytes(string2), buf, offset, length);
      }
      function base64Write(buf, string2, offset, length) {
        return blitBuffer(base64ToBytes(string2), buf, offset, length);
      }
      function ucs2Write(buf, string2, offset, length) {
        return blitBuffer(utf16leToBytes(string2, buf.length - offset), buf, offset, length);
      }
      Buffer3.prototype.write = function write(string2, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string2.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string2, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string2, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string2, offset, length);
            case "base64":
              return base64Write(this, string2, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string2, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer3.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i3 = start;
        while (i3 < end) {
          const firstByte = buf[i3];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i3 + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i3 + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i3 + 1];
                thirdByte = buf[i3 + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i3 + 1];
                thirdByte = buf[i3 + 2];
                fourthByte = buf[i3 + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i3 += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i3 = 0;
        while (i3 < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i3, i3 += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i3 = start; i3 < end; ++i3) {
          ret += String.fromCharCode(buf[i3] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i3 = start; i3 < end; ++i3) {
          ret += String.fromCharCode(buf[i3]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i3 = start; i3 < end; ++i3) {
          out += hexSliceLookupTable[buf[i3]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i3 = 0; i3 < bytes.length - 1; i3 += 2) {
          res += String.fromCharCode(bytes[i3] + bytes[i3 + 1] * 256);
        }
        return res;
      }
      Buffer3.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer3.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer3.prototype.readUintLE = Buffer3.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i3 = 0;
        while (++i3 < byteLength2 && (mul *= 256)) {
          val += this[offset + i3] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUintBE = Buffer3.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer3.prototype.readUint8 = Buffer3.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer3.prototype.readUint16LE = Buffer3.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer3.prototype.readUint16BE = Buffer3.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer3.prototype.readUint32LE = Buffer3.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer3.prototype.readUint32BE = Buffer3.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer3.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last2 = this[offset + 7];
        if (first === void 0 || last2 === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * __pow(2, 8) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 24);
        const hi = this[++offset] + this[++offset] * __pow(2, 8) + this[++offset] * __pow(2, 16) + last2 * __pow(2, 24);
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer3.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last2 = this[offset + 7];
        if (first === void 0 || last2 === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * __pow(2, 24) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 8) + this[++offset];
        const lo = this[++offset] * __pow(2, 24) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 8) + last2;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer3.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i3 = 0;
        while (++i3 < byteLength2 && (mul *= 256)) {
          val += this[offset + i3] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer3.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i3 = byteLength2;
        let mul = 1;
        let val = this[offset + --i3];
        while (i3 > 0 && (mul *= 256)) {
          val += this[offset + --i3] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer3.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer3.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer3.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer3.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer3.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last2 = this[offset + 7];
        if (first === void 0 || last2 === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * __pow(2, 8) + this[offset + 6] * __pow(2, 16) + (last2 << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * __pow(2, 8) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 24));
      });
      Buffer3.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last2 = this[offset + 7];
        if (first === void 0 || last2 === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 8) + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * __pow(2, 24) + this[++offset] * __pow(2, 16) + this[++offset] * __pow(2, 8) + last2);
      });
      Buffer3.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer3.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer3.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer3.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min2) {
        if (!Buffer3.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min2)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer3.prototype.writeUintLE = Buffer3.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i3 = 0;
        this[offset] = value & 255;
        while (++i3 < byteLength2 && (mul *= 256)) {
          this[offset + i3] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeUintBE = Buffer3.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i3 = byteLength2 - 1;
        let mul = 1;
        this[offset + i3] = value & 255;
        while (--i3 >= 0 && (mul *= 256)) {
          this[offset + i3] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeUint8 = Buffer3.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeUint16LE = Buffer3.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer3.prototype.writeUint16BE = Buffer3.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer3.prototype.writeUint32LE = Buffer3.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer3.prototype.writeUint32BE = Buffer3.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min2, max) {
        checkIntBI(value, min2, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min2, max) {
        checkIntBI(value, min2, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer3.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer3.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer3.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i3 = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i3 < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i3 - 1] !== 0) {
            sub = 1;
          }
          this[offset + i3] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i3 = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i3] = value & 255;
        while (--i3 >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i3 + 1] !== 0) {
            sub = 1;
          }
          this[offset + i3] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer3.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer3.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer3.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer3.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer3.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer3.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer3.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min2) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer3.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer3.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer3.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer3.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer3.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer3.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer3.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code3 = val.charCodeAt(0);
            if (encoding === "utf8" && code3 < 128 || encoding === "latin1") {
              val = code3;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i3;
        if (typeof val === "number") {
          for (i3 = start; i3 < end; ++i3) {
            this[i3] = val;
          }
        } else {
          const bytes = Buffer3.isBuffer(val) ? val : Buffer3.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i3 = 0; i3 < end - start; ++i3) {
            this[i3 + start] = bytes[i3 % len];
          }
        }
        return this;
      };
      var errors = {};
      function E3(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E3(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E3(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E3(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg2 = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > __pow(2, 32)) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > __pow(BigInt(2), BigInt(32)) || input < -__pow(BigInt(2), BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg2 += ` It must be ${range}. Received ${received}`;
          return msg2;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i3 = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i3 >= start + 4; i3 -= 3) {
          res = `_${val.slice(i3 - 3, i3)}${res}`;
        }
        return `${val.slice(0, i3)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min2, max, buf, offset, byteLength2) {
        if (value > max || value < min2) {
          const n3 = typeof min2 === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min2 === 0 || min2 === BigInt(0)) {
              range = `>= 0${n3} and < 2${n3} ** ${(byteLength2 + 1) * 8}${n3}`;
            } else {
              range = `>= -(2${n3} ** ${(byteLength2 + 1) * 8 - 1}${n3}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n3}`;
            }
          } else {
            range = `>= ${min2}${n3} and <= ${max}${n3}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string2, units) {
        units = units || Infinity;
        let codePoint;
        const length = string2.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i3 = 0; i3 < length; ++i3) {
          codePoint = string2.charCodeAt(i3);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i3 + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i3 = 0; i3 < str.length; ++i3) {
          byteArray.push(str.charCodeAt(i3) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c3, hi, lo;
        const byteArray = [];
        for (let i3 = 0; i3 < str.length; ++i3) {
          if ((units -= 2) < 0)
            break;
          c3 = str.charCodeAt(i3);
          hi = c3 >> 8;
          lo = c3 % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i3;
        for (i3 = 0; i3 < length; ++i3) {
          if (i3 + offset >= dst.length || i3 >= src.length)
            break;
          dst[i3 + offset] = src[i3];
        }
        return i3;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i3 = 0; i3 < 16; ++i3) {
          const i16 = i3 * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i3] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // ../../../node_modules/lodash.throttle/index.js
  var require_lodash3 = __commonJS({
    "../../../node_modules/lodash.throttle/index.js"(exports, module) {
      var FUNC_ERROR_TEXT = "Expected a function";
      var NAN = 0 / 0;
      var symbolTag = "[object Symbol]";
      var reTrim = /^\s+|\s+$/g;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root = freeGlobal || freeSelf || Function("return this")();
      var objectProto = Object.prototype;
      var objectToString = objectProto.toString;
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      var now = function() {
        return root.Date.now();
      };
      function debounce2(func, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
          return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush() {
          return timerId === void 0 ? result : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }
      function throttle4(func, wait, options) {
        var leading = true, trailing = true;
        if (typeof func != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = "leading" in options ? !!options.leading : leading;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        return debounce2(func, wait, {
          "leading": leading,
          "maxWait": wait,
          "trailing": trailing
        });
      }
      function isObject(value) {
        var type = typeof value;
        return !!value && (type == "object" || type == "function");
      }
      function isObjectLike(value) {
        return !!value && typeof value == "object";
      }
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
      }
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, "");
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = throttle4;
    }
  });

  // ../../../node_modules/lz-string/libs/lz-string.js
  var require_lz_string = __commonJS({
    "../../../node_modules/lz-string/libs/lz-string.js"(exports, module) {
      var LZString = function() {
        var f3 = String.fromCharCode;
        var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
        var baseReverseDic = {};
        function getBaseValue(alphabet, character) {
          if (!baseReverseDic[alphabet]) {
            baseReverseDic[alphabet] = {};
            for (var i3 = 0; i3 < alphabet.length; i3++) {
              baseReverseDic[alphabet][alphabet.charAt(i3)] = i3;
            }
          }
          return baseReverseDic[alphabet][character];
        }
        var LZString2 = {
          compressToBase64: function(input) {
            if (input == null)
              return "";
            var res = LZString2._compress(input, 6, function(a3) {
              return keyStrBase64.charAt(a3);
            });
            switch (res.length % 4) {
              default:
              case 0:
                return res;
              case 1:
                return res + "===";
              case 2:
                return res + "==";
              case 3:
                return res + "=";
            }
          },
          decompressFromBase64: function(input) {
            if (input == null)
              return "";
            if (input == "")
              return null;
            return LZString2._decompress(input.length, 32, function(index2) {
              return getBaseValue(keyStrBase64, input.charAt(index2));
            });
          },
          compressToUTF16: function(input) {
            if (input == null)
              return "";
            return LZString2._compress(input, 15, function(a3) {
              return f3(a3 + 32);
            }) + " ";
          },
          decompressFromUTF16: function(compressed) {
            if (compressed == null)
              return "";
            if (compressed == "")
              return null;
            return LZString2._decompress(compressed.length, 16384, function(index2) {
              return compressed.charCodeAt(index2) - 32;
            });
          },
          //compress into uint8array (UCS-2 big endian format)
          compressToUint8Array: function(uncompressed) {
            var compressed = LZString2.compress(uncompressed);
            var buf = new Uint8Array(compressed.length * 2);
            for (var i3 = 0, TotalLen = compressed.length; i3 < TotalLen; i3++) {
              var current_value = compressed.charCodeAt(i3);
              buf[i3 * 2] = current_value >>> 8;
              buf[i3 * 2 + 1] = current_value % 256;
            }
            return buf;
          },
          //decompress from uint8array (UCS-2 big endian format)
          decompressFromUint8Array: function(compressed) {
            if (compressed === null || compressed === void 0) {
              return LZString2.decompress(compressed);
            } else {
              var buf = new Array(compressed.length / 2);
              for (var i3 = 0, TotalLen = buf.length; i3 < TotalLen; i3++) {
                buf[i3] = compressed[i3 * 2] * 256 + compressed[i3 * 2 + 1];
              }
              var result = [];
              buf.forEach(function(c3) {
                result.push(f3(c3));
              });
              return LZString2.decompress(result.join(""));
            }
          },
          //compress into a string that is already URI encoded
          compressToEncodedURIComponent: function(input) {
            if (input == null)
              return "";
            return LZString2._compress(input, 6, function(a3) {
              return keyStrUriSafe.charAt(a3);
            });
          },
          //decompress from an output of compressToEncodedURIComponent
          decompressFromEncodedURIComponent: function(input) {
            if (input == null)
              return "";
            if (input == "")
              return null;
            input = input.replace(/ /g, "+");
            return LZString2._decompress(input.length, 32, function(index2) {
              return getBaseValue(keyStrUriSafe, input.charAt(index2));
            });
          },
          compress: function(uncompressed) {
            return LZString2._compress(uncompressed, 16, function(a3) {
              return f3(a3);
            });
          },
          _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
            if (uncompressed == null)
              return "";
            var i3, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
            for (ii = 0; ii < uncompressed.length; ii += 1) {
              context_c = uncompressed.charAt(ii);
              if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
                context_dictionary[context_c] = context_dictSize++;
                context_dictionaryToCreate[context_c] = true;
              }
              context_wc = context_w + context_c;
              if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
                context_w = context_wc;
              } else {
                if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                  if (context_w.charCodeAt(0) < 256) {
                    for (i3 = 0; i3 < context_numBits; i3++) {
                      context_data_val = context_data_val << 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                    }
                    value = context_w.charCodeAt(0);
                    for (i3 = 0; i3 < 8; i3++) {
                      context_data_val = context_data_val << 1 | value & 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = value >> 1;
                    }
                  } else {
                    value = 1;
                    for (i3 = 0; i3 < context_numBits; i3++) {
                      context_data_val = context_data_val << 1 | value;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = 0;
                    }
                    value = context_w.charCodeAt(0);
                    for (i3 = 0; i3 < 16; i3++) {
                      context_data_val = context_data_val << 1 | value & 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = value >> 1;
                    }
                  }
                  context_enlargeIn--;
                  if (context_enlargeIn == 0) {
                    context_enlargeIn = Math.pow(2, context_numBits);
                    context_numBits++;
                  }
                  delete context_dictionaryToCreate[context_w];
                } else {
                  value = context_dictionary[context_w];
                  for (i3 = 0; i3 < context_numBits; i3++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                context_dictionary[context_wc] = context_dictSize++;
                context_w = String(context_c);
              }
            }
            if (context_w !== "") {
              if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                if (context_w.charCodeAt(0) < 256) {
                  for (i3 = 0; i3 < context_numBits; i3++) {
                    context_data_val = context_data_val << 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                  }
                  value = context_w.charCodeAt(0);
                  for (i3 = 0; i3 < 8; i3++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                } else {
                  value = 1;
                  for (i3 = 0; i3 < context_numBits; i3++) {
                    context_data_val = context_data_val << 1 | value;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = 0;
                  }
                  value = context_w.charCodeAt(0);
                  for (i3 = 0; i3 < 16; i3++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
                delete context_dictionaryToCreate[context_w];
              } else {
                value = context_dictionary[context_w];
                for (i3 = 0; i3 < context_numBits; i3++) {
                  context_data_val = context_data_val << 1 | value & 1;
                  if (context_data_position == bitsPerChar - 1) {
                    context_data_position = 0;
                    context_data.push(getCharFromInt(context_data_val));
                    context_data_val = 0;
                  } else {
                    context_data_position++;
                  }
                  value = value >> 1;
                }
              }
              context_enlargeIn--;
              if (context_enlargeIn == 0) {
                context_enlargeIn = Math.pow(2, context_numBits);
                context_numBits++;
              }
            }
            value = 2;
            for (i3 = 0; i3 < context_numBits; i3++) {
              context_data_val = context_data_val << 1 | value & 1;
              if (context_data_position == bitsPerChar - 1) {
                context_data_position = 0;
                context_data.push(getCharFromInt(context_data_val));
                context_data_val = 0;
              } else {
                context_data_position++;
              }
              value = value >> 1;
            }
            while (true) {
              context_data_val = context_data_val << 1;
              if (context_data_position == bitsPerChar - 1) {
                context_data.push(getCharFromInt(context_data_val));
                break;
              } else
                context_data_position++;
            }
            return context_data.join("");
          },
          decompress: function(compressed) {
            if (compressed == null)
              return "";
            if (compressed == "")
              return null;
            return LZString2._decompress(compressed.length, 32768, function(index2) {
              return compressed.charCodeAt(index2);
            });
          },
          _decompress: function(length, resetValue, getNextValue) {
            var dictionary = [], next, enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i3, w3, bits, resb, maxpower, power, c3, data = { val: getNextValue(0), position: resetValue, index: 1 };
            for (i3 = 0; i3 < 3; i3 += 1) {
              dictionary[i3] = i3;
            }
            bits = 0;
            maxpower = Math.pow(2, 2);
            power = 1;
            while (power != maxpower) {
              resb = data.val & data.position;
              data.position >>= 1;
              if (data.position == 0) {
                data.position = resetValue;
                data.val = getNextValue(data.index++);
              }
              bits |= (resb > 0 ? 1 : 0) * power;
              power <<= 1;
            }
            switch (next = bits) {
              case 0:
                bits = 0;
                maxpower = Math.pow(2, 8);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                c3 = f3(bits);
                break;
              case 1:
                bits = 0;
                maxpower = Math.pow(2, 16);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                c3 = f3(bits);
                break;
              case 2:
                return "";
            }
            dictionary[3] = c3;
            w3 = c3;
            result.push(c3);
            while (true) {
              if (data.index > length) {
                return "";
              }
              bits = 0;
              maxpower = Math.pow(2, numBits);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              switch (c3 = bits) {
                case 0:
                  bits = 0;
                  maxpower = Math.pow(2, 8);
                  power = 1;
                  while (power != maxpower) {
                    resb = data.val & data.position;
                    data.position >>= 1;
                    if (data.position == 0) {
                      data.position = resetValue;
                      data.val = getNextValue(data.index++);
                    }
                    bits |= (resb > 0 ? 1 : 0) * power;
                    power <<= 1;
                  }
                  dictionary[dictSize++] = f3(bits);
                  c3 = dictSize - 1;
                  enlargeIn--;
                  break;
                case 1:
                  bits = 0;
                  maxpower = Math.pow(2, 16);
                  power = 1;
                  while (power != maxpower) {
                    resb = data.val & data.position;
                    data.position >>= 1;
                    if (data.position == 0) {
                      data.position = resetValue;
                      data.val = getNextValue(data.index++);
                    }
                    bits |= (resb > 0 ? 1 : 0) * power;
                    power <<= 1;
                  }
                  dictionary[dictSize++] = f3(bits);
                  c3 = dictSize - 1;
                  enlargeIn--;
                  break;
                case 2:
                  return result.join("");
              }
              if (enlargeIn == 0) {
                enlargeIn = Math.pow(2, numBits);
                numBits++;
              }
              if (dictionary[c3]) {
                entry = dictionary[c3];
              } else {
                if (c3 === dictSize) {
                  entry = w3 + w3.charAt(0);
                } else {
                  return null;
                }
              }
              result.push(entry);
              dictionary[dictSize++] = w3 + entry.charAt(0);
              enlargeIn--;
              w3 = entry;
              if (enlargeIn == 0) {
                enlargeIn = Math.pow(2, numBits);
                numBits++;
              }
            }
          }
        };
        return LZString2;
      }();
      if (typeof define === "function" && define.amd) {
        define(function() {
          return LZString;
        });
      } else if (typeof module !== "undefined" && module != null) {
        module.exports = LZString;
      } else if (typeof angular !== "undefined" && angular != null) {
        angular.module("LZString", []).factory("LZString", function() {
          return LZString;
        });
      }
    }
  });

  // src/index.tsx
  var React73 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // ../../../packages/utils/src/lib/array.ts
  function dedupe(input, equals2) {
    const result = [];
    mainLoop:
      for (const item of input) {
        for (const existing of result) {
          if (equals2 ? equals2(item, existing) : item === existing) {
            continue mainLoop;
          }
        }
        result.push(item);
      }
    return result;
  }
  function compact(arr) {
    return arr.filter((i3) => i3 !== void 0 && i3 !== null);
  }
  function last(arr) {
    return arr[arr.length - 1];
  }
  function minBy(arr, fn) {
    let min2;
    let minVal = Infinity;
    for (const item of arr) {
      const val = fn(item);
      if (val < minVal) {
        min2 = item;
        minVal = val;
      }
    }
    return min2;
  }
  function partition(arr, predicate) {
    const satisfies = [];
    const doesNotSatisfy = [];
    for (const item of arr) {
      if (predicate(item)) {
        satisfies.push(item);
      } else {
        doesNotSatisfy.push(item);
      }
    }
    return [satisfies, doesNotSatisfy];
  }

  // ../../../packages/utils/src/lib/function.ts
  function omitFromStackTrace(fn) {
    const wrappedFn = (...args) => {
      try {
        return fn(...args);
      } catch (error) {
        if (error instanceof Error && Error.captureStackTrace) {
          Error.captureStackTrace(error, wrappedFn);
        }
        throw error;
      }
    };
    return wrappedFn;
  }

  // ../../../packages/utils/src/lib/control.ts
  var Result = {
    ok(value) {
      return { ok: true, value };
    },
    err(error) {
      return { ok: false, error };
    }
  };
  function exhaustiveSwitchError(value, property) {
    const debugValue = property && value && typeof value === "object" && property in value ? value[property] : value;
    throw new Error(`Unknown switch case ${debugValue}`);
  }
  var assert = omitFromStackTrace(
    (value, message) => {
      if (!value) {
        throw new Error(message || "Assertion Error");
      }
    }
  );
  var assertExists = omitFromStackTrace((value, message) => {
    if (value == null) {
      throw new Error(message != null ? message : "value must be defined");
    }
    return value;
  });

  // ../../../packages/utils/src/lib/debounce.ts
  function debounce(callback, wait) {
    let state = void 0;
    const fn = (...args) => {
      if (!state) {
        state = {};
        state.promise = new Promise((resolve, reject) => {
          state.resolve = resolve;
          state.reject = reject;
        });
      }
      clearTimeout(state.timeout);
      state.latestArgs = args;
      state.timeout = setTimeout(() => {
        const s3 = state;
        state = void 0;
        try {
          s3.resolve(callback(...s3.latestArgs));
        } catch (e2) {
          s3.reject(e2);
        }
      }, wait);
      return state.promise;
    };
    fn.cancel = () => {
      if (!state)
        return;
      clearTimeout(state.timeout);
    };
    return fn;
  }

  // ../../../packages/utils/src/lib/error.ts
  var annotationsByError = /* @__PURE__ */ new WeakMap();
  function annotateError(error, annotations) {
    if (typeof error !== "object" || error === null)
      return;
    let currentAnnotations = annotationsByError.get(error);
    if (!currentAnnotations) {
      currentAnnotations = { tags: {}, extras: {} };
      annotationsByError.set(error, currentAnnotations);
    }
    if (annotations.tags) {
      currentAnnotations.tags = __spreadValues(__spreadValues({}, currentAnnotations.tags), annotations.tags);
    }
    if (annotations.extras) {
      currentAnnotations.extras = __spreadValues(__spreadValues({}, currentAnnotations.extras), annotations.extras);
    }
  }

  // ../../../packages/utils/src/lib/hash.ts
  function getHashForString(string2) {
    let hash = 0;
    for (let i3 = 0; i3 < string2.length; i3++) {
      hash = (hash << 5) - hash + string2.charCodeAt(i3);
      hash |= 0;
    }
    return hash + "";
  }

  // ../../../packages/utils/src/lib/number.ts
  function rng(seed = "") {
    let x3 = 0;
    let y3 = 0;
    let z2 = 0;
    let w3 = 0;
    function next() {
      const t4 = x3 ^ x3 << 11;
      x3 = y3;
      y3 = z2;
      z2 = w3;
      w3 ^= (w3 >>> 19 ^ t4 ^ t4 >>> 8) >>> 0;
      return w3 / 4294967296 * 2;
    }
    for (let k2 = 0; k2 < seed.length + 64; k2++) {
      x3 ^= seed.charCodeAt(k2) | 0;
      next();
    }
    return next;
  }
  function modulate(value, rangeA, rangeB, clamp3 = false) {
    const [fromLow, fromHigh] = rangeA;
    const [v0, v1] = rangeB;
    const result = v0 + (value - fromLow) / (fromHigh - fromLow) * (v1 - v0);
    return clamp3 ? v0 < v1 ? Math.max(Math.min(result, v1), v0) : Math.max(Math.min(result, v0), v1) : result;
  }

  // ../../../packages/utils/src/lib/object.ts
  function hasOwnProperty(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  }
  function getOwnProperty(obj, key) {
    if (!hasOwnProperty(obj, key)) {
      return void 0;
    }
    return obj[key];
  }
  function deepCopy(obj) {
    if (!obj)
      return obj;
    if (Array.isArray(obj)) {
      const arr = [];
      const length = obj.length;
      for (let i3 = 0; i3 < length; i3++)
        arr.push(deepCopy(obj[i3]));
      return arr;
    } else if (typeof obj === "object") {
      const keys = Object.keys(obj);
      const length = keys.length;
      const newObject = {};
      for (let i3 = 0; i3 < length; i3++) {
        const key = keys[i3];
        newObject[key] = deepCopy(obj[key]);
      }
      return newObject;
    }
    return obj;
  }
  function objectMapValues(object2) {
    return Object.values(object2);
  }
  function objectMapEntries(object2) {
    return Object.entries(object2);
  }

  // ../../../packages/utils/src/lib/raf.ts
  var isTest = () => typeof process !== "undefined" && false;
  var rafQueue = [];
  var tick = () => {
    const queue = rafQueue.splice(0, rafQueue.length);
    for (const fn of queue) {
      fn();
    }
  };
  var frame;
  function raf() {
    if (frame) {
      return;
    }
    frame = requestAnimationFrame(() => {
      frame = void 0;
      tick();
    });
  }
  function throttledRaf(fn) {
    if (isTest()) {
      return fn();
    }
    if (rafQueue.includes(fn)) {
      return;
    }
    rafQueue.push(fn);
    raf();
  }

  // ../../../packages/utils/src/lib/value.ts
  function isNonNull(value) {
    return value !== null;
  }
  function isNonNullish(value) {
    return value !== null && value !== void 0;
  }
  var structuredClone = typeof window !== "undefined" && window.structuredClone ? window.structuredClone : (i3) => i3 ? JSON.parse(JSON.stringify(i3)) : i3;

  // ../../../packages/tlstore/src/lib/IncrementalSetConstructor.ts
  var IncrementalSetConstructor = class {
    constructor(previousValue) {
      this.previousValue = previousValue;
      /**
       * The next value of the set.
       *
       * @internal
       */
      __publicField(this, "nextValue");
      /**
       * The diff of the set.
       *
       * @internal
       */
      __publicField(this, "diff");
    }
    /**
     * Get the next value of the set.
     *
     * @public
     */
    get() {
      var _a5, _b2, _c, _d, _e, _f;
      const numRemoved = (_c = (_b2 = (_a5 = this.diff) == null ? void 0 : _a5.removed) == null ? void 0 : _b2.size) != null ? _c : 0;
      const numAdded = (_f = (_e = (_d = this.diff) == null ? void 0 : _d.added) == null ? void 0 : _e.size) != null ? _f : 0;
      if (numRemoved === 0 && numAdded === 0) {
        return void 0;
      }
      return { value: this.nextValue, diff: this.diff };
    }
    /**
     * Add an item to the set.
     *
     * @param item - The item to add.
     * @param wasAlreadyPresent - Whether the item was already present in the set.
     * @internal
     */
    _add(item, wasAlreadyPresent) {
      var _a5, _b2, _c, _d, _e;
      (_a5 = this.nextValue) != null ? _a5 : this.nextValue = new Set(this.previousValue);
      this.nextValue.add(item);
      (_b2 = this.diff) != null ? _b2 : this.diff = {};
      if (wasAlreadyPresent) {
        (_c = this.diff.removed) == null ? void 0 : _c.delete(item);
      } else {
        (_e = (_d = this.diff).added) != null ? _e : _d.added = /* @__PURE__ */ new Set();
        this.diff.added.add(item);
      }
    }
    /**
     * Add an item to the set.
     *
     * @param item - The item to add.
     * @public
     */
    add(item) {
      var _a5, _b2, _c;
      const wasAlreadyPresent = this.previousValue.has(item);
      if (wasAlreadyPresent) {
        const wasRemoved = (_b2 = (_a5 = this.diff) == null ? void 0 : _a5.removed) == null ? void 0 : _b2.has(item);
        if (!wasRemoved)
          return;
        return this._add(item, wasAlreadyPresent);
      }
      const isCurrentlyPresent = (_c = this.nextValue) == null ? void 0 : _c.has(item);
      if (isCurrentlyPresent)
        return;
      this._add(item, wasAlreadyPresent);
    }
    /**
     * Remove an item from the set.
     *
     * @param item - The item to remove.
     * @param wasAlreadyPresent - Whether the item was already present in the set.
     * @internal
     */
    _remove(item, wasAlreadyPresent) {
      var _a5, _b2, _c, _d, _e;
      (_a5 = this.nextValue) != null ? _a5 : this.nextValue = new Set(this.previousValue);
      this.nextValue.delete(item);
      (_b2 = this.diff) != null ? _b2 : this.diff = {};
      if (wasAlreadyPresent) {
        (_d = (_c = this.diff).removed) != null ? _d : _c.removed = /* @__PURE__ */ new Set();
        this.diff.removed.add(item);
      } else {
        (_e = this.diff.added) == null ? void 0 : _e.delete(item);
      }
    }
    /**
     * Remove an item from the set.
     *
     * @param item - The item to remove.
     * @public
     */
    remove(item) {
      var _a5, _b2, _c, _d;
      const wasAlreadyPresent = this.previousValue.has(item);
      if (!wasAlreadyPresent) {
        const wasAdded = (_b2 = (_a5 = this.diff) == null ? void 0 : _a5.added) == null ? void 0 : _b2.has(item);
        if (!wasAdded)
          return;
        return this._remove(item, wasAlreadyPresent);
      }
      const hasAlreadyBeenRemoved = (_d = (_c = this.diff) == null ? void 0 : _c.removed) == null ? void 0 : _d.has(item);
      if (hasAlreadyBeenRemoved)
        return;
      this._remove(item, wasAlreadyPresent);
    }
  };

  // ../../../node_modules/nanoid/index.browser.js
  var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
    byte &= 63;
    if (byte < 36) {
      id += byte.toString(36);
    } else if (byte < 62) {
      id += (byte - 26).toString(36).toUpperCase();
    } else if (byte > 62) {
      id += "-";
    } else {
      id += "_";
    }
    return id;
  }, "");

  // ../../../packages/tlstore/src/lib/RecordType.ts
  var RecordType = class {
    constructor(typeName, config) {
      this.typeName = typeName;
      __publicField(this, "createDefaultProperties");
      __publicField(this, "migrations");
      __publicField(this, "validator");
      __publicField(this, "scope");
      /**
       * Check whether a record is an instance of this record type.
       *
       * @example
       *
       * ```ts
       * const result = recordType.isInstance(someRecord)
       * ```
       *
       * @param record - The record to check.
       * @returns Whether the record is an instance of this record type.
       */
      __publicField(this, "isInstance", (record) => {
        return (record == null ? void 0 : record.typeName) === this.typeName;
      });
      var _a5, _b2;
      this.createDefaultProperties = config.createDefaultProperties;
      this.migrations = config.migrations;
      this.validator = (_a5 = config.validator) != null ? _a5 : { validate: (r3) => r3 };
      this.scope = (_b2 = config.scope) != null ? _b2 : "document";
    }
    /**
     * Create a new record of this type.
     *
     * @param properties - The properties of the record.
     * @returns The new record.
     */
    create(properties) {
      const result = __spreadProps(__spreadValues({}, this.createDefaultProperties()), { id: this.createId() });
      for (const [k2, v3] of Object.entries(properties)) {
        if (v3 !== void 0) {
          result[k2] = v3;
        }
      }
      result.typeName = this.typeName;
      return result;
    }
    /**
     * Clone a record of this type.
     *
     * @param record - The record to clone.
     * @returns The cloned record.
     * @public
     */
    clone(record) {
      return __spreadProps(__spreadValues({}, structuredClone(record)), { id: this.createId() });
    }
    /**
     * Create a new ID for this record type.
     *
     * @example
     *
     * ```ts
     * const id = recordType.createId()
     * ```
     *
     * @returns The new ID.
     * @public
     */
    createId() {
      return this.typeName + ":" + nanoid();
    }
    /**
     * Create a new ID for this record type based on the given ID.
     *
     * @example
     *
     * ```ts
     * const id = recordType.createCustomId('myId')
     * ```
     *
     * @param id - The ID to base the new ID on.
     * @returns The new ID.
     */
    createCustomId(id) {
      return this.typeName + ":" + id;
    }
    /**
     * Takes an id like `user:123` and returns the part after the colon `123`
     *
     * @param id - The id
     * @returns
     */
    parseId(id) {
      if (!this.isId(id)) {
        throw new Error(`ID "${id}" is not a valid ID for type "${this.typeName}"`);
      }
      return id.slice(this.typeName.length + 1);
    }
    /**
     * Check whether an id is an id of this type.
     *
     * @example
     *
     * ```ts
     * const result = recordType.isIn('someId')
     * ```
     *
     * @param id - The id to check.
     * @returns Whether the id is an id of this type.
     */
    isId(id) {
      if (!id)
        return false;
      for (let i3 = 0; i3 < this.typeName.length; i3++) {
        if (id[i3] !== this.typeName[i3])
          return false;
      }
      return id[this.typeName.length] === ":";
    }
    /**
     * Create a new RecordType that has the same type name as this RecordType and includes the given
     * default properties.
     *
     * @example
     *
     * ```ts
     * const authorType = createRecordType('author', () => ({ living: true }))
     * const deadAuthorType = authorType.withDefaultProperties({ living: false })
     * ```
     *
     * @param fn - A function that returns the default properties of the new RecordType.
     * @returns The new RecordType.
     */
    withDefaultProperties(createDefaultProperties) {
      return new RecordType(this.typeName, {
        createDefaultProperties,
        migrations: this.migrations,
        validator: this.validator,
        scope: this.scope
      });
    }
    /**
     * Check that the passed in record passes the validations for this type. Returns its input
     * correctly typed if it does, but throws an error otherwise.
     */
    validate(record) {
      return this.validator.validate(record);
    }
  };
  function createRecordType(typeName, config) {
    var _a5;
    return new RecordType(typeName, {
      createDefaultProperties: () => ({}),
      migrations: (_a5 = config.migrations) != null ? _a5 : { currentVersion: 0, firstVersion: 0, migrators: {} },
      validator: config.validator,
      scope: config.scope
    });
  }

  // ../../../node_modules/signia/dist/esm/ArraySet.mjs
  var ARRAY_SIZE_THRESHOLD = 8;
  var ArraySet = class {
    constructor() {
      __publicField(this, "arraySize", 0);
      __publicField(this, "array", Array(ARRAY_SIZE_THRESHOLD));
      __publicField(this, "set", null);
    }
    /**
     * Get whether this ArraySet has any elements.
     *
     * @returns True if this ArraySet has any elements, false otherwise.
     */
    get isEmpty() {
      if (this.array) {
        return this.arraySize === 0;
      }
      if (this.set) {
        return this.set.size === 0;
      }
      throw new Error("no set or array");
    }
    /**
     * Add an item to the ArraySet if it is not already present.
     *
     * @param elem - The element to add.
     */
    add(elem) {
      if (this.array) {
        const idx = this.array.indexOf(elem);
        if (idx !== -1) {
          return false;
        }
        if (this.arraySize < ARRAY_SIZE_THRESHOLD) {
          this.array[this.arraySize] = elem;
          this.arraySize++;
          return true;
        } else {
          this.set = new Set(this.array);
          this.array = null;
          this.set.add(elem);
          return true;
        }
      }
      if (this.set) {
        if (this.set.has(elem)) {
          return false;
        }
        this.set.add(elem);
        return true;
      }
      throw new Error("no set or array");
    }
    /**
     * Remove an item from the ArraySet if it is present.
     *
     * @param elem - The element to remove
     */
    remove(elem) {
      if (this.array) {
        const idx = this.array.indexOf(elem);
        if (idx === -1) {
          return false;
        }
        this.array[idx] = void 0;
        this.arraySize--;
        if (idx !== this.arraySize) {
          this.array[idx] = this.array[this.arraySize];
          this.array[this.arraySize] = void 0;
        }
        return true;
      }
      if (this.set) {
        if (!this.set.has(elem)) {
          return false;
        }
        this.set.delete(elem);
        return true;
      }
      throw new Error("no set or array");
    }
    /**
     * Run a callback for each element in the ArraySet.
     *
     * @param visitor The callback to run for each element.
     */
    visit(visitor) {
      if (this.array) {
        for (let i3 = 0; i3 < this.arraySize; i3++) {
          const elem = this.array[i3];
          if (typeof elem !== "undefined") {
            visitor(elem);
          }
        }
        return;
      }
      if (this.set) {
        this.set.forEach(visitor);
        return;
      }
      throw new Error("no set or array");
    }
  };

  // ../../../node_modules/signia/dist/esm/helpers.mjs
  function isChild(x3) {
    return x3 && typeof x3 === "object" && "parents" in x3;
  }
  function haveParentsChanged(child) {
    for (let i3 = 0, n3 = child.parents.length; i3 < n3; i3++) {
      child.parents[i3].__unsafe__getWithoutCapture();
      if (child.parents[i3].lastChangedEpoch !== child.parentEpochs[i3]) {
        return true;
      }
    }
    return false;
  }
  var detach = (parent, child) => {
    if (!parent.children.remove(child)) {
      return;
    }
    if (parent.children.isEmpty && isChild(parent)) {
      for (let i3 = 0, n3 = parent.parents.length; i3 < n3; i3++) {
        detach(parent.parents[i3], parent);
      }
    }
  };
  var attach = (parent, child) => {
    if (!parent.children.add(child)) {
      return;
    }
    if (isChild(parent)) {
      for (let i3 = 0, n3 = parent.parents.length; i3 < n3; i3++) {
        attach(parent.parents[i3], parent);
      }
    }
  };
  function equals(a3, b3) {
    const shallowEquals = a3 === b3 || Object.is(a3, b3) || Boolean(a3 && b3 && typeof a3.equals === "function" && a3.equals(b3));
    return shallowEquals;
  }
  var EMPTY_ARRAY = Object.freeze([]);

  // ../../../node_modules/signia/dist/esm/capture.mjs
  var signiaKey = Symbol.for("__signia__");
  var global2 = globalThis;
  if (global2[signiaKey]) {
    console.error(
      'Multiple versions of signia detected. This will cause unexpected behavior. Please add "resolutions" (yarn/pnpm) or "overrides" (npm) in your package.json to ensure only one version of signia is loaded.'
    );
  } else {
    global2[signiaKey] = true;
  }
  var CaptureStackFrame = class {
    constructor(below, child) {
      __publicField(this, "offset", 0);
      __publicField(this, "numNewParents", 0);
      __publicField(this, "maybeRemoved");
      this.below = below;
      this.child = child;
    }
  };
  var stack = null;
  function startCapturingParents(child) {
    stack = new CaptureStackFrame(stack, child);
  }
  function stopCapturingParents() {
    const frame2 = stack;
    stack = frame2.below;
    const didParentsChange = frame2.numNewParents > 0 || frame2.offset !== frame2.child.parents.length;
    if (!didParentsChange) {
      return;
    }
    for (let i3 = frame2.offset; i3 < frame2.child.parents.length; i3++) {
      const p3 = frame2.child.parents[i3];
      const parentWasRemoved = frame2.child.parents.indexOf(p3) >= frame2.offset;
      if (parentWasRemoved) {
        detach(p3, frame2.child);
      }
    }
    frame2.child.parents.length = frame2.offset;
    frame2.child.parentEpochs.length = frame2.offset;
    if (stack == null ? void 0 : stack.maybeRemoved) {
      for (let i3 = 0; i3 < stack.maybeRemoved.length; i3++) {
        const maybeRemovedParent = stack.maybeRemoved[i3];
        if (frame2.child.parents.indexOf(maybeRemovedParent) === -1) {
          detach(maybeRemovedParent, frame2.child);
        }
      }
    }
  }
  function maybeCaptureParent(p3) {
    if (stack) {
      const idx = stack.child.parents.indexOf(p3);
      if (idx < 0) {
        stack.numNewParents++;
        if (stack.child.isActivelyListening) {
          attach(p3, stack.child);
        }
      }
      if (idx < 0 || idx >= stack.offset) {
        if (idx !== stack.offset && idx > 0) {
          const maybeRemovedParent = stack.child.parents[stack.offset];
          if (!stack.maybeRemoved) {
            stack.maybeRemoved = [maybeRemovedParent];
          } else if (stack.maybeRemoved.indexOf(maybeRemovedParent) === -1) {
            stack.maybeRemoved.push(maybeRemovedParent);
          }
        }
        stack.child.parents[stack.offset] = p3;
        stack.child.parentEpochs[stack.offset] = p3.lastChangedEpoch;
        stack.offset++;
      }
    }
  }

  // ../../../node_modules/signia/dist/esm/types.mjs
  var RESET_VALUE = Symbol("RESET_VALUE");

  // ../../../node_modules/signia/dist/esm/HistoryBuffer.mjs
  var HistoryBuffer = class {
    constructor(capacity) {
      __publicField(this, "index", 0);
      // use a wrap around buffer to store the last N values
      __publicField(this, "buffer");
      this.capacity = capacity;
      this.buffer = new Array(capacity);
    }
    /**
     * Add a diff to the history buffer.
     *
     * @param lastComputedEpoch The epoch when the diff was computed.
     * @param currentEpoch The current epoch.
     * @param diff (optional) The diff to add, or else a reset value.
     */
    pushEntry(lastComputedEpoch, currentEpoch, diff) {
      if (diff === void 0) {
        return;
      }
      if (diff === RESET_VALUE) {
        this.clear();
        return;
      }
      this.buffer[this.index] = [lastComputedEpoch, currentEpoch, diff];
      this.index = (this.index + 1) % this.capacity;
    }
    /**
     * Clear the history buffer.
     */
    clear() {
      this.index = 0;
      this.buffer.fill(void 0);
    }
    /**
     * Get the diffs since the given epoch.
     *
     * @param epoch The epoch to get diffs since.
     * @returns An array of diffs or a flag to reset the history buffer.
     */
    getChangesSince(sinceEpoch) {
      const { index: index2, capacity, buffer } = this;
      for (let i3 = 0; i3 < capacity; i3++) {
        const offset = (index2 - 1 + capacity - i3) % capacity;
        const elem = buffer[offset];
        if (!elem) {
          return RESET_VALUE;
        }
        const [fromEpoch, toEpoch] = elem;
        if (i3 === 0 && sinceEpoch >= toEpoch) {
          return [];
        }
        if (fromEpoch <= sinceEpoch && sinceEpoch < toEpoch) {
          const len = i3 + 1;
          const result = new Array(len);
          for (let j = 0; j < len; j++) {
            result[j] = buffer[(offset + j) % capacity][2];
          }
          return result;
        }
      }
      return RESET_VALUE;
    }
  };

  // ../../../node_modules/signia/dist/esm/constants.mjs
  var GLOBAL_START_EPOCH = -1;

  // ../../../node_modules/signia/dist/esm/transactions.mjs
  var globalEpoch = GLOBAL_START_EPOCH + 1;
  var globalIsReacting = false;
  function advanceGlobalEpoch() {
    globalEpoch++;
  }
  var Transaction = class {
    constructor(parent) {
      __publicField(this, "initialAtomValues", /* @__PURE__ */ new Map());
      this.parent = parent;
    }
    /**
     * Get whether this transaction is a root (no parents).
     *
     * @public
     */
    get isRoot() {
      return this.parent === null;
    }
    /**
     * Commit the transaction's changes.
     *
     * @public
     */
    commit() {
      if (this.isRoot) {
        const atoms = this.initialAtomValues;
        this.initialAtomValues = /* @__PURE__ */ new Map();
        flushChanges(atoms.keys());
      } else {
        this.initialAtomValues.forEach((value, atom2) => {
          if (!this.parent.initialAtomValues.has(atom2)) {
            this.parent.initialAtomValues.set(atom2, value);
          }
        });
      }
    }
    /**
     * Abort the transaction.
     *
     * @public
     */
    abort() {
      globalEpoch++;
      this.initialAtomValues.forEach((value, atom2) => {
        var _a5;
        atom2.set(value);
        (_a5 = atom2.historyBuffer) == null ? void 0 : _a5.clear();
      });
      this.commit();
    }
  };
  function flushChanges(atoms) {
    if (globalIsReacting) {
      throw new Error("cannot change atoms during reaction cycle");
    }
    try {
      globalIsReacting = true;
      const reactors = /* @__PURE__ */ new Set();
      const traverse = (node) => {
        if (node.lastTraversedEpoch === globalEpoch) {
          return;
        }
        node.lastTraversedEpoch = globalEpoch;
        if ("maybeScheduleEffect" in node) {
          reactors.add(node);
        } else {
          ;
          node.children.visit(traverse);
        }
      };
      for (const atom2 of atoms) {
        atom2.children.visit(traverse);
      }
      for (const r3 of reactors) {
        r3.maybeScheduleEffect();
      }
    } finally {
      globalIsReacting = false;
    }
  }
  function atomDidChange(atom2, previousValue) {
    if (!currentTransaction) {
      flushChanges([atom2]);
    } else if (!currentTransaction.initialAtomValues.has(atom2)) {
      currentTransaction.initialAtomValues.set(atom2, previousValue);
    }
  }
  var currentTransaction = null;
  function transaction(fn) {
    const txn = new Transaction(currentTransaction);
    currentTransaction = txn;
    try {
      let rollback = false;
      const result = fn(() => rollback = true);
      if (rollback) {
        txn.abort();
      } else {
        txn.commit();
      }
      return result;
    } catch (e2) {
      txn.abort();
      throw e2;
    } finally {
      currentTransaction = currentTransaction.parent;
    }
  }
  function transact(fn) {
    if (currentTransaction) {
      return fn();
    }
    return transaction(fn);
  }

  // ../../../node_modules/signia/dist/esm/Atom.mjs
  var _Atom = class {
    constructor(name, current, options) {
      __publicField(this, "isEqual");
      __publicField(this, "computeDiff");
      __publicField(this, "lastChangedEpoch", globalEpoch);
      __publicField(this, "children", new ArraySet());
      __publicField(this, "historyBuffer");
      var _a5;
      this.name = name;
      this.current = current;
      this.isEqual = (_a5 = options == null ? void 0 : options.isEqual) != null ? _a5 : null;
      if (!options)
        return;
      if (options.historyLength) {
        this.historyBuffer = new HistoryBuffer(options.historyLength);
      }
      this.computeDiff = options.computeDiff;
    }
    __unsafe__getWithoutCapture() {
      return this.current;
    }
    get value() {
      maybeCaptureParent(this);
      return this.current;
    }
    set(value, diff) {
      var _a5, _b2, _c, _d;
      if ((_b2 = (_a5 = this.isEqual) == null ? void 0 : _a5.call(this, this.current, value)) != null ? _b2 : equals(this.current, value)) {
        return this.current;
      }
      advanceGlobalEpoch();
      if (this.historyBuffer) {
        this.historyBuffer.pushEntry(
          this.lastChangedEpoch,
          globalEpoch,
          (_d = diff != null ? diff : (_c = this.computeDiff) == null ? void 0 : _c.call(this, this.current, value, this.lastChangedEpoch, globalEpoch)) != null ? _d : RESET_VALUE
        );
      }
      this.lastChangedEpoch = globalEpoch;
      const oldValue = this.current;
      this.current = value;
      atomDidChange(this, oldValue);
      return value;
    }
    update(updater) {
      return this.set(updater(this.current));
    }
    getDiffSince(epoch) {
      var _a5, _b2;
      maybeCaptureParent(this);
      if (epoch >= this.lastChangedEpoch) {
        return EMPTY_ARRAY;
      }
      return (_b2 = (_a5 = this.historyBuffer) == null ? void 0 : _a5.getChangesSince(epoch)) != null ? _b2 : RESET_VALUE;
    }
  };
  function atom(name, initialValue, options) {
    return new _Atom(name, initialValue, options);
  }

  // ../../../node_modules/signia/dist/esm/Computed.mjs
  var UNINITIALIZED = Symbol("UNINITIALIZED");
  var isUninitialized = (value) => {
    return value === UNINITIALIZED;
  };
  var WithDiff = class {
    constructor(value, diff) {
      this.value = value;
      this.diff = diff;
    }
  };
  function withDiff(value, diff) {
    return new WithDiff(value, diff);
  }
  var _Computed = class {
    constructor(name, derive, options) {
      __publicField(this, "lastChangedEpoch", GLOBAL_START_EPOCH);
      __publicField(this, "lastTraversedEpoch", GLOBAL_START_EPOCH);
      /**
       * The epoch when the reactor was last checked.
       */
      __publicField(this, "lastCheckedEpoch", GLOBAL_START_EPOCH);
      __publicField(this, "parents", []);
      __publicField(this, "parentEpochs", []);
      __publicField(this, "children", new ArraySet());
      __publicField(this, "historyBuffer");
      // The last-computed value of this signal.
      __publicField(this, "state", UNINITIALIZED);
      __publicField(this, "computeDiff");
      __publicField(this, "isEqual");
      var _a5;
      this.name = name;
      this.derive = derive;
      if (options == null ? void 0 : options.historyLength) {
        this.historyBuffer = new HistoryBuffer(options.historyLength);
      }
      this.computeDiff = options == null ? void 0 : options.computeDiff;
      this.isEqual = (_a5 = options == null ? void 0 : options.isEqual) != null ? _a5 : equals;
    }
    get isActivelyListening() {
      return !this.children.isEmpty;
    }
    __unsafe__getWithoutCapture() {
      var _a5, _b2;
      const isNew = this.lastChangedEpoch === GLOBAL_START_EPOCH;
      if (!isNew && (this.lastCheckedEpoch === globalEpoch || !haveParentsChanged(this))) {
        this.lastCheckedEpoch = globalEpoch;
        return this.state;
      }
      try {
        startCapturingParents(this);
        const result = this.derive(this.state, this.lastCheckedEpoch);
        const newState = result instanceof WithDiff ? result.value : result;
        if (this.state === UNINITIALIZED || !this.isEqual(newState, this.state)) {
          if (this.historyBuffer && !isNew) {
            const diff = result instanceof WithDiff ? result.diff : void 0;
            this.historyBuffer.pushEntry(
              this.lastChangedEpoch,
              globalEpoch,
              (_b2 = diff != null ? diff : (_a5 = this.computeDiff) == null ? void 0 : _a5.call(this, this.state, newState, this.lastCheckedEpoch, globalEpoch)) != null ? _b2 : RESET_VALUE
            );
          }
          this.lastChangedEpoch = globalEpoch;
          this.state = newState;
        }
        this.lastCheckedEpoch = globalEpoch;
        return this.state;
      } finally {
        stopCapturingParents();
      }
    }
    get value() {
      const value = this.__unsafe__getWithoutCapture();
      maybeCaptureParent(this);
      return value;
    }
    getDiffSince(epoch) {
      var _a5, _b2;
      this.value;
      if (epoch >= this.lastChangedEpoch) {
        return EMPTY_ARRAY;
      }
      return (_b2 = (_a5 = this.historyBuffer) == null ? void 0 : _a5.getChangesSince(epoch)) != null ? _b2 : RESET_VALUE;
    }
  };
  function computedAnnotation(options = {}, _target, key, descriptor) {
    const originalMethod = descriptor.get;
    const derivationKey = Symbol.for("__signia__computed__" + key);
    descriptor.get = function() {
      let d3 = this[derivationKey];
      if (!d3) {
        d3 = new _Computed(key, originalMethod.bind(this), options);
        Object.defineProperty(this, derivationKey, {
          enumerable: false,
          configurable: false,
          writable: false,
          value: d3
        });
      }
      return d3.value;
    };
    return descriptor;
  }
  function computed() {
    if (arguments.length === 1) {
      const options = arguments[0];
      return (target, key, descriptor) => computedAnnotation(options, target, key, descriptor);
    } else if (typeof arguments[0] === "string") {
      return new _Computed(arguments[0], arguments[1], arguments[2]);
    } else {
      return computedAnnotation(void 0, arguments[0], arguments[1], arguments[2]);
    }
  }

  // ../../../node_modules/signia/dist/esm/EffectScheduler.mjs
  var EffectScheduler = class {
    constructor(name, runEffect, options) {
      __publicField(this, "_isActivelyListening", false);
      /** @internal */
      __publicField(this, "lastTraversedEpoch", GLOBAL_START_EPOCH);
      __publicField(this, "lastReactedEpoch", GLOBAL_START_EPOCH);
      __publicField(this, "_scheduleCount", 0);
      /** @internal */
      __publicField(this, "parentEpochs", []);
      /** @internal */
      __publicField(this, "parents", []);
      __publicField(this, "_scheduleEffect");
      __publicField(this, "maybeExecute", () => {
        if (!this._isActivelyListening)
          return;
        this.execute();
      });
      this.name = name;
      this.runEffect = runEffect;
      this._scheduleEffect = options == null ? void 0 : options.scheduleEffect;
    }
    /**
     * Whether this scheduler is attached and actively listening to its parents.
     * @public
     */
    get isActivelyListening() {
      return this._isActivelyListening;
    }
    /**
     * The number of times this effect has been scheduled.
     * @public
     */
    get scheduleCount() {
      return this._scheduleCount;
    }
    /** @internal */
    maybeScheduleEffect() {
      if (!this._isActivelyListening)
        return;
      if (this.lastReactedEpoch === globalEpoch)
        return;
      if (this.parents.length && !haveParentsChanged(this)) {
        this.lastReactedEpoch = globalEpoch;
        return;
      }
      this.scheduleEffect();
    }
    /** @internal */
    scheduleEffect() {
      this._scheduleCount++;
      if (this._scheduleEffect) {
        this._scheduleEffect(this.maybeExecute);
      } else {
        this.execute();
      }
    }
    /**
     * Makes this scheduler become 'actively listening' to its parents.
     * If it has been executed before it will immediately become eligible to receive 'maybeScheduleEffect' calls.
     * If it has not executed before it will need to be manually executed once to become eligible for scheduling, i.e. by calling [[EffectScheduler.execute]].
     * @public
     */
    attach() {
      this._isActivelyListening = true;
      for (let i3 = 0, n3 = this.parents.length; i3 < n3; i3++) {
        attach(this.parents[i3], this);
      }
    }
    /**
     * Makes this scheduler stop 'actively listening' to its parents.
     * It will no longer be eligible to receive 'maybeScheduleEffect' calls until [[EffectScheduler.attach]] is called again.
     */
    detach() {
      this._isActivelyListening = false;
      for (let i3 = 0, n3 = this.parents.length; i3 < n3; i3++) {
        detach(this.parents[i3], this);
      }
    }
    /**
     * Executes the effect immediately and returns the result.
     * @returns The result of the effect.
     */
    execute() {
      try {
        startCapturingParents(this);
        const result = this.runEffect(this.lastReactedEpoch);
        this.lastReactedEpoch = globalEpoch;
        return result;
      } finally {
        stopCapturingParents();
      }
    }
  };
  function react(name, fn, options) {
    const scheduler = new EffectScheduler(name, fn, options);
    scheduler.attach();
    scheduler.scheduleEffect();
    return () => {
      scheduler.detach();
    };
  }
  function reactor(name, fn, options) {
    const scheduler = new EffectScheduler(name, fn, options);
    return {
      scheduler,
      start: (options2) => {
        var _a5;
        const force = (_a5 = options2 == null ? void 0 : options2.force) != null ? _a5 : false;
        scheduler.attach();
        if (force) {
          scheduler.scheduleEffect();
        } else {
          scheduler.maybeScheduleEffect();
        }
      },
      stop: () => {
        scheduler.detach();
      }
    };
  }

  // ../../../packages/tlstore/src/lib/Cache.ts
  var Cache = class {
    constructor() {
      /** The map of items to their cached values. */
      __publicField(this, "items", /* @__PURE__ */ new WeakMap());
    }
    /**
     * Get the cached value for a given record. If the record is not present in the map, the callback
     * will be used to create the value (with the result being stored in the cache for next time).
     *
     * @param item - The item to get.
     * @param cb - The callback to use to create the value when a cached value is not found.
     */
    get(item, cb) {
      if (!this.items.has(item)) {
        this.items.set(item, cb(item));
      }
      return this.items.get(item);
    }
  };

  // ../../../packages/tlstore/src/lib/devFreeze.ts
  function devFreeze(object2) {
    if (true) {
      return object2;
    }
    const proto = Object.getPrototypeOf(object2);
    if (proto && !(proto === Array.prototype || proto === Object.prototype)) {
      console.error("cannot include non-js data in a record", object2);
      throw new Error("cannot include non-js data in a record");
    }
    const propNames = Object.getOwnPropertyNames(object2);
    for (const name of propNames) {
      const value = object2[name];
      if (value && typeof value === "object") {
        devFreeze(value);
      }
    }
    return Object.freeze(object2);
  }

  // ../../../packages/tlstore/src/lib/StoreQueries.ts
  var import_lodash = __toESM(require_lodash());

  // ../../../packages/tlstore/src/lib/setUtils.ts
  function intersectSets(sets) {
    if (sets.length === 0)
      return /* @__PURE__ */ new Set();
    const first = sets[0];
    const rest = sets.slice(1);
    const result = /* @__PURE__ */ new Set();
    for (const val of first) {
      if (rest.every((set) => set.has(val))) {
        result.add(val);
      }
    }
    return result;
  }
  function diffSets(prev, next) {
    var _a5, _b2;
    const result = {};
    for (const val of next) {
      if (!prev.has(val)) {
        (_a5 = result.added) != null ? _a5 : result.added = /* @__PURE__ */ new Set();
        result.added.add(val);
      }
    }
    for (const val of prev) {
      if (!next.has(val)) {
        (_b2 = result.removed) != null ? _b2 : result.removed = /* @__PURE__ */ new Set();
        result.removed.add(val);
      }
    }
    return result.added || result.removed ? result : void 0;
  }

  // ../../../packages/tlstore/src/lib/executeQuery.ts
  function objectMatchesQuery(query, object2) {
    for (const [key, _matcher] of Object.entries(query)) {
      const matcher = _matcher;
      const value = object2[key];
      if ("eq" in matcher && value !== matcher.eq)
        return false;
      if ("neq" in matcher && value === matcher.neq)
        return false;
      if ("gt" in matcher && (typeof value !== "number" || value <= matcher.gt))
        return false;
    }
    return true;
  }
  function executeQuery(store, typeName, query) {
    const matchIds = Object.fromEntries(Object.keys(query).map((key) => [key, /* @__PURE__ */ new Set()]));
    for (const [k2, matcher] of Object.entries(query)) {
      if ("eq" in matcher) {
        const index2 = store.index(typeName, k2);
        const ids = index2.value.get(matcher.eq);
        if (ids) {
          for (const id of ids) {
            matchIds[k2].add(id);
          }
        }
      } else if ("neq" in matcher) {
        const index2 = store.index(typeName, k2);
        for (const [value, ids] of index2.value) {
          if (value !== matcher.neq) {
            for (const id of ids) {
              matchIds[k2].add(id);
            }
          }
        }
      } else if ("gt" in matcher) {
        const index2 = store.index(typeName, k2);
        for (const [value, ids] of index2.value) {
          if (value > matcher.gt) {
            for (const id of ids) {
              matchIds[k2].add(id);
            }
          }
        }
      }
    }
    return intersectSets(Object.values(matchIds));
  }

  // ../../../packages/tlstore/src/lib/StoreQueries.ts
  var StoreQueries = class {
    constructor(atoms, history) {
      this.atoms = atoms;
      this.history = history;
      /**
       * A cache of derivations (indexes).
       *
       * @internal
       */
      __publicField(this, "indexCache", /* @__PURE__ */ new Map());
      /**
       * A cache of derivations (filtered histories).
       *
       * @internal
       */
      __publicField(this, "historyCache", /* @__PURE__ */ new Map());
    }
    /**
     * Create a derivation that contains the hisotry for a given type
     *
     * @param typeName - The name of the type to filter by.
     * @returns A derivation that returns the ids of all records of the given type.
     * @public
     */
    filterHistory(typeName) {
      if (this.historyCache.has(typeName)) {
        return this.historyCache.get(typeName);
      }
      const filtered = computed(
        "filterHistory:" + typeName,
        (lastValue, lastComputedEpoch) => {
          if (isUninitialized(lastValue)) {
            return this.history.value;
          }
          const diff = this.history.getDiffSince(lastComputedEpoch);
          if (diff === RESET_VALUE)
            return this.history.value;
          const res = { added: {}, removed: {}, updated: {} };
          let numAdded = 0;
          let numRemoved = 0;
          let numUpdated = 0;
          for (const changes of diff) {
            for (const added of Object.values(changes.added)) {
              if (added.typeName === typeName) {
                if (res.removed[added.id]) {
                  const original = res.removed[added.id];
                  delete res.removed[added.id];
                  numRemoved--;
                  if (original !== added) {
                    res.updated[added.id] = [original, added];
                    numUpdated++;
                  }
                } else {
                  res.added[added.id] = added;
                  numAdded++;
                }
              }
            }
            for (const [from, to] of Object.values(changes.updated)) {
              if (to.typeName === typeName) {
                if (res.added[to.id]) {
                  res.added[to.id] = to;
                } else if (res.updated[to.id]) {
                  res.updated[to.id] = [res.updated[to.id][0], to];
                } else {
                  res.updated[to.id] = [from, to];
                  numUpdated++;
                }
              }
            }
            for (const removed of Object.values(changes.removed)) {
              if (removed.typeName === typeName) {
                if (res.added[removed.id]) {
                  delete res.added[removed.id];
                  numAdded--;
                } else if (res.updated[removed.id]) {
                  res.removed[removed.id] = res.updated[removed.id][0];
                  delete res.updated[removed.id];
                  numUpdated--;
                  numRemoved++;
                } else {
                  res.removed[removed.id] = removed;
                  numRemoved++;
                }
              }
            }
          }
          if (numAdded || numRemoved || numUpdated) {
            return withDiff(this.history.value, res);
          } else {
            return lastValue;
          }
        },
        { historyLength: 100 }
      );
      this.historyCache.set(typeName, filtered);
      return filtered;
    }
    /**
     * Create a derivation that returns an index on a property for the given type.
     *
     * @param typeName - The name of the type.
     * @param property - The name of the property.
     * @public
     */
    index(typeName, property) {
      const cacheKey = typeName + ":" + property;
      if (this.indexCache.has(cacheKey)) {
        return this.indexCache.get(cacheKey);
      }
      const index2 = this.__uncached_createIndex(typeName, property);
      this.indexCache.set(cacheKey, index2);
      return index2;
    }
    /**
     * Create a derivation that returns an index on a property for the given type.
     *
     * @param typeName - The name of the type?.
     * @param property - The name of the property?.
     * @internal
     */
    __uncached_createIndex(typeName, property) {
      const typeHistory = this.filterHistory(typeName);
      const fromScratch = () => {
        typeHistory.value;
        const res = /* @__PURE__ */ new Map();
        for (const atom2 of Object.values(this.atoms.value)) {
          const record = atom2.value;
          if (record.typeName === typeName) {
            const value = record[property];
            if (!res.has(value)) {
              res.set(value, /* @__PURE__ */ new Set());
            }
            res.get(value).add(record.id);
          }
        }
        return res;
      };
      return computed(
        "index:" + typeName + ":" + property,
        (prevValue, lastComputedEpoch) => {
          if (isUninitialized(prevValue))
            return fromScratch();
          const history = typeHistory.getDiffSince(lastComputedEpoch);
          if (history === RESET_VALUE) {
            return fromScratch();
          }
          const setConstructors = /* @__PURE__ */ new Map();
          const add = (value, id) => {
            var _a5;
            let setConstructor = setConstructors.get(value);
            if (!setConstructor)
              setConstructor = new IncrementalSetConstructor((_a5 = prevValue.get(value)) != null ? _a5 : /* @__PURE__ */ new Set());
            setConstructor.add(id);
            setConstructors.set(value, setConstructor);
          };
          const remove = (value, id) => {
            var _a5;
            let set = setConstructors.get(value);
            if (!set)
              set = new IncrementalSetConstructor((_a5 = prevValue.get(value)) != null ? _a5 : /* @__PURE__ */ new Set());
            set.remove(id);
            setConstructors.set(value, set);
          };
          for (const changes of history) {
            for (const record of Object.values(changes.added)) {
              if (record.typeName === typeName) {
                const value = record[property];
                add(value, record.id);
              }
            }
            for (const [from, to] of Object.values(changes.updated)) {
              if (to.typeName === typeName) {
                const prev = from[property];
                const next = to[property];
                if (prev !== next) {
                  remove(prev, to.id);
                  add(next, to.id);
                }
              }
            }
            for (const record of Object.values(changes.removed)) {
              if (record.typeName === typeName) {
                const value = record[property];
                remove(value, record.id);
              }
            }
          }
          let nextValue = void 0;
          let nextDiff = void 0;
          for (const [value, setConstructor] of setConstructors) {
            const result = setConstructor.get();
            if (!result)
              continue;
            if (!nextValue)
              nextValue = new Map(prevValue);
            if (!nextDiff)
              nextDiff = /* @__PURE__ */ new Map();
            if (result.value.size === 0) {
              nextValue.delete(value);
            } else {
              nextValue.set(value, result.value);
            }
            nextDiff.set(value, result.diff);
          }
          if (nextValue && nextDiff) {
            return withDiff(nextValue, nextDiff);
          }
          return prevValue;
        },
        { historyLength: 100 }
      );
    }
    /**
     * Create a derivation that will return a signle record matching the given query.
     *
     * It will return undefined if there is no matching record
     *
     * @param typeName - The name of the type?
     * @param queryCreator - A function that returns the query expression.
     * @param name - (optinal) The name of the query.
     */
    record(typeName, queryCreator = () => ({}), name = "record:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
      const ids = this.ids(typeName, queryCreator, name);
      return computed(name, () => {
        var _a5;
        for (const id of ids.value) {
          return (_a5 = this.atoms.value[id]) == null ? void 0 : _a5.value;
        }
        return void 0;
      });
    }
    /**
     * Create a derivation that will return an array of records matching the given query
     *
     * @param typeName - The name of the type?
     * @param queryCreator - A function that returns the query expression.
     * @param name - (optinal) The name of the query.
     */
    records(typeName, queryCreator = () => ({}), name = "records:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
      const ids = this.ids(typeName, queryCreator, "ids:" + name);
      return computed(name, () => {
        return [...ids.value].map((id) => {
          const atom2 = this.atoms.value[id];
          if (!atom2) {
            throw new Error("no atom found for record id: " + id);
          }
          return atom2.value;
        });
      });
    }
    /**
     * Create a derivation that will return the ids of all records of the given type.
     *
     * @param typeName - The name of the type.
     * @param queryCreator - A function that returns the query expression.
     * @param name - (optinal) The name of the query.
     */
    ids(typeName, queryCreator = () => ({}), name = "ids:" + typeName + (queryCreator ? ":" + queryCreator.toString() : "")) {
      const typeHistory = this.filterHistory(typeName);
      const fromScratch = () => {
        typeHistory.value;
        const query = queryCreator();
        if (Object.keys(query).length === 0) {
          return new Set(
            Object.values(this.atoms.value).flatMap((v3) => {
              const r3 = v3.value;
              if (r3.typeName === typeName) {
                return r3.id;
              } else {
                return [];
              }
            })
          );
        }
        return executeQuery(this, typeName, query);
      };
      const fromScratchWithDiff = (prevValue) => {
        const nextValue = fromScratch();
        const diff = diffSets(prevValue, nextValue);
        if (diff) {
          return withDiff(nextValue, diff);
        } else {
          return prevValue;
        }
      };
      const cachedQuery = computed("ids_query:" + name, queryCreator, {
        isEqual: import_lodash.default
      });
      return computed(
        "query:" + name,
        (prevValue, lastComputedEpoch) => {
          const query = cachedQuery.value;
          if (isUninitialized(prevValue)) {
            return fromScratch();
          }
          if (lastComputedEpoch < cachedQuery.lastChangedEpoch) {
            return fromScratchWithDiff(prevValue);
          }
          const history = typeHistory.getDiffSince(lastComputedEpoch);
          if (history === RESET_VALUE) {
            return fromScratchWithDiff(prevValue);
          }
          const setConstructor = new IncrementalSetConstructor(
            prevValue
          );
          for (const changes of history) {
            for (const added of Object.values(changes.added)) {
              if (added.typeName === typeName && objectMatchesQuery(query, added)) {
                setConstructor.add(added.id);
              }
            }
            for (const [_, updated] of Object.values(changes.updated)) {
              if (updated.typeName === typeName) {
                if (objectMatchesQuery(query, updated)) {
                  setConstructor.add(updated.id);
                } else {
                  setConstructor.remove(updated.id);
                }
              }
            }
            for (const removed of Object.values(changes.removed)) {
              if (removed.typeName === typeName) {
                setConstructor.remove(removed.id);
              }
            }
          }
          const result = setConstructor.get();
          if (!result) {
            return prevValue;
          }
          return withDiff(result.value, result.diff);
        },
        { historyLength: 50 }
      );
    }
    exec(typeName, query) {
      const ids = executeQuery(this, typeName, query);
      if (ids.size === 0) {
        return EMPTY_ARRAY;
      }
      const atoms = this.atoms.value;
      return [...ids].map((id) => atoms[id].value);
    }
  };

  // ../../../packages/tlstore/src/lib/Store.ts
  var Store = class {
    constructor(config) {
      /**
       * An atom containing the store's atoms.
       *
       * @internal
       * @readonly
       */
      __publicField(this, "atoms", atom("store_atoms", {}));
      /**
       * An atom containing the store's history.
       *
       * @public
       * @readonly
       */
      __publicField(this, "history", atom("history", 0, {
        historyLength: 1e3
      }));
      /**
       * A StoreQueries instance for this store.
       *
       * @public
       * @readonly
       */
      __publicField(this, "query", new StoreQueries(this.atoms, this.history));
      /**
       * A set containing listeners that have been added to this store.
       *
       * @internal
       */
      __publicField(this, "listeners", /* @__PURE__ */ new Set());
      /**
       * An array of history entries that have not yet been flushed.
       *
       * @internal
       */
      __publicField(this, "historyAccumulator", new HistoryAccumulator());
      /**
       * A reactor that responds to changes to the history by squashing the accumulated history and
       * notifying listeners of the changes.
       *
       * @internal
       */
      __publicField(this, "historyReactor");
      __publicField(this, "schema");
      __publicField(this, "props");
      /**
       * A callback fired after a record is created. Use this to perform related updates to other
       * records in the store.
       *
       * @param record - The record to be created
       */
      __publicField(this, "onAfterCreate");
      /**
       * A callback fired after each record's change.
       *
       * @param prev - The previous value, if any.
       * @param next - The next value.
       */
      __publicField(this, "onAfterChange");
      /**
       * A callback fired before a record is deleted.
       *
       * @param prev - The record that will be deleted.
       */
      __publicField(this, "onBeforeDelete");
      /**
       * A callback fired after a record is deleted.
       *
       * @param prev - The record that will be deleted.
       */
      __publicField(this, "onAfterDelete");
      // used to avoid running callbacks when rolling back changes in sync client
      __publicField(this, "_runCallbacks", true);
      /**
       * Add some records to the store. It's an error if they already exist.
       *
       * @param records - The records to add.
       * @public
       */
      __publicField(this, "put", (records, phaseOverride) => {
        transact(() => {
          const updates = {};
          const additions = {};
          const currentMap = this.atoms.__unsafe__getWithoutCapture();
          let map = null;
          let record;
          let didChange = false;
          for (let i3 = 0, n3 = records.length; i3 < n3; i3++) {
            record = records[i3];
            const recordAtom = (map != null ? map : currentMap)[record.id];
            if (recordAtom) {
              const initialValue = recordAtom.__unsafe__getWithoutCapture();
              record = this.schema.validateRecord(
                this,
                record,
                phaseOverride != null ? phaseOverride : "updateRecord",
                initialValue
              );
              recordAtom.set(devFreeze(record));
              const finalValue = recordAtom.__unsafe__getWithoutCapture();
              if (initialValue !== finalValue) {
                didChange = true;
                updates[record.id] = [initialValue, finalValue];
              }
            } else {
              didChange = true;
              record = this.schema.validateRecord(
                this,
                record,
                phaseOverride != null ? phaseOverride : "createRecord",
                null
              );
              additions[record.id] = record;
              if (!map) {
                map = __spreadValues({}, currentMap);
              }
              map[record.id] = atom("atom:" + record.id, record);
            }
          }
          if (map) {
            this.atoms.set(map);
          }
          if (!didChange)
            return;
          this.updateHistory({
            added: additions,
            updated: updates,
            removed: {}
          });
          const { onAfterCreate, onAfterChange } = this;
          if (onAfterCreate && this._runCallbacks) {
            Object.values(additions).forEach((record2) => {
              onAfterCreate(record2);
            });
          }
          if (onAfterChange && this._runCallbacks) {
            Object.values(updates).forEach(([from, to]) => {
              onAfterChange(from, to);
            });
          }
        });
      });
      /**
       * Remove some records from the store via their ids.
       *
       * @param ids - The ids of the records to remove.
       * @public
       */
      __publicField(this, "remove", (ids) => {
        transact(() => {
          if (this.onBeforeDelete && this._runCallbacks) {
            for (const id of ids) {
              const atom2 = this.atoms.__unsafe__getWithoutCapture()[id];
              if (!atom2)
                continue;
              this.onBeforeDelete(atom2.value);
            }
          }
          let removed = void 0;
          this.atoms.update((atoms) => {
            let result = void 0;
            for (const id of ids) {
              if (!(id in atoms))
                continue;
              if (!result)
                result = __spreadValues({}, atoms);
              if (!removed)
                removed = {};
              delete result[id];
              removed[id] = atoms[id].value;
            }
            return result != null ? result : atoms;
          });
          if (!removed)
            return;
          this.updateHistory({ added: {}, updated: {}, removed });
          if (this.onAfterDelete && this._runCallbacks) {
            for (let i3 = 0, n3 = ids.length; i3 < n3; i3++) {
              this.onAfterDelete(removed[ids[i3]]);
            }
          }
        });
      });
      /**
       * Get the value of a store record by its id.
       *
       * @param id - The id of the record to get.
       * @public
       */
      __publicField(this, "get", (id) => {
        var _a5;
        return (_a5 = this.atoms.value[id]) == null ? void 0 : _a5.value;
      });
      /**
       * Get the value of a store record by its id without updating its epoch.
       *
       * @param id - The id of the record to get.
       * @public
       */
      __publicField(this, "unsafeGetWithoutCapture", (id) => {
        var _a5;
        return (_a5 = this.atoms.value[id]) == null ? void 0 : _a5.__unsafe__getWithoutCapture();
      });
      /**
       * Opposite of `deserialize`. Creates a JSON payload from the record store.
       *
       * @param filter - A function to filter structs that do not satisfy the predicate.
       * @returns The record store snapshot as a JSON payload.
       */
      __publicField(this, "serialize", (filter2) => {
        const result = {};
        for (const [id, atom2] of Object.entries(this.atoms.value)) {
          const record = atom2.value;
          if (typeof filter2 === "function" && !filter2(record))
            continue;
          result[id] = record;
        }
        return result;
      });
      /**
       * The same as `serialize`, but only serializes records with a scope of `document`.
       * @returns The record store snapshot as a JSON payload.
       */
      __publicField(this, "serializeDocumentState", () => {
        return this.serialize((r3) => {
          const type = this.schema.types[r3.typeName];
          return type.scope === "document";
        });
      });
      /**
       * Opposite of `serialize`. Replace the store's current records with records as defined by a
       * simple JSON structure into the stores.
       *
       * @param snapshot - The JSON snapshot to deserialize.
       * @public
       */
      __publicField(this, "deserialize", (snapshot) => {
        transact(() => {
          this.clear();
          this.put(Object.values(snapshot));
        });
      });
      /**
       * Get an array of all values in the store.
       *
       * @returns An array of all values in the store.
       * @public
       */
      __publicField(this, "allRecords", () => {
        return Object.values(this.atoms.value).map((atom2) => atom2.value);
      });
      /**
       * Removes all records from the store.
       *
       * @public
       */
      __publicField(this, "clear", () => {
        this.remove(Object.keys(this.atoms.value));
      });
      /**
       * Update a record. To update multiple records at once, use the `update` method of the
       * `TypedStore` class.
       *
       * @param id - The id of the record to update.
       * @param updater - A function that updates the record.
       */
      __publicField(this, "update", (id, updater) => {
        const atom2 = this.atoms.value[id];
        if (!atom2) {
          console.error(`Record ${id} not found. This is probably an error`);
          return;
        }
        this.put([updater(atom2.__unsafe__getWithoutCapture())]);
      });
      /**
       * Get whether the record store has a id.
       *
       * @param id - The id of the record to check.
       * @public
       */
      __publicField(this, "has", (id) => {
        return !!this.atoms.value[id];
      });
      /**
       * Add a new listener to the store.
       *
       * @param listener - The listener to call when the store updates.
       * @returns A function to remove the listener.
       */
      __publicField(this, "listen", (listener) => {
        this._flushHistory();
        this.listeners.add(listener);
        if (!this.historyReactor.scheduler.isActivelyListening) {
          this.historyReactor.start();
        }
        return () => {
          this.listeners.delete(listener);
          if (this.listeners.size === 0) {
            this.historyReactor.stop();
          }
        };
      });
      __publicField(this, "isMergingRemoteChanges", false);
      /**
       * Merge changes from a remote source without triggering listeners.
       *
       * @param fn - A function that merges the external changes.
       * @public
       */
      __publicField(this, "mergeRemoteChanges", (fn) => {
        if (this.isMergingRemoteChanges) {
          return fn();
        }
        try {
          this.isMergingRemoteChanges = true;
          transact(fn);
        } finally {
          this.isMergingRemoteChanges = false;
        }
      });
      /**
       * Create a computed cache.
       *
       * @param name - The name of the derivation cache.
       * @param derive - A function used to derive the value of the cache.
       * @public
       */
      __publicField(this, "createComputedCache", (name, derive) => {
        const cache = new Cache();
        return {
          get: (id) => {
            const atom2 = this.atoms.value[id];
            if (!atom2) {
              return void 0;
            }
            return cache.get(
              atom2,
              () => computed(name + ":" + id, () => derive(atom2.value))
            ).value;
          }
        };
      });
      /**
       * Create a computed cache from a selector
       *
       * @param name - The name of the derivation cache.
       * @param selector - A function that returns a subset of the original shape
       * @param derive - A function used to derive the value of the cache.
       * @public
       */
      __publicField(this, "createSelectedComputedCache", (name, selector, derive) => {
        const cache = new Cache();
        return {
          get: (id) => {
            const atom2 = this.atoms.value[id];
            if (!atom2) {
              return void 0;
            }
            const d3 = computed(
              name + ":" + id + ":selector",
              () => selector(atom2.value)
            );
            return cache.get(
              atom2,
              () => computed(name + ":" + id, () => derive(d3.value))
            ).value;
          }
        };
      });
      __publicField(this, "_integrityChecker");
      __publicField(this, "_isPossiblyCorrupted", false);
      const { initialData, schema } = config;
      this.schema = schema;
      this.props = config.props;
      if (initialData) {
        this.atoms.set(
          Object.fromEntries(
            Object.entries(initialData).map(([id, record]) => [
              id,
              atom("atom:" + id, this.schema.validateRecord(this, record, "initialize", null))
            ])
          )
        );
      }
      this.historyReactor = reactor(
        "Store.historyReactor",
        () => {
          this.history.value;
          this._flushHistory();
        },
        { scheduleEffect: (cb) => throttledRaf(cb) }
      );
    }
    _flushHistory() {
      if (this.historyAccumulator.hasChanges()) {
        const entries = this.historyAccumulator.flush();
        for (const { changes, source } of entries) {
          this.listeners.forEach((l3) => l3({ changes, source }));
        }
      }
    }
    /**
     * Update the history with a diff of changes.
     *
     * @param changes - The changes to add to the history.
     */
    updateHistory(changes) {
      this.historyAccumulator.add({
        changes,
        source: this.isMergingRemoteChanges ? "remote" : "user"
      });
      if (this.listeners.size === 0) {
        this.historyAccumulator.clear();
      }
      this.history.set(this.history.value + 1, changes);
    }
    validate(phase) {
      this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null));
    }
    extractingChanges(fn) {
      const changes = [];
      const dispose = this.historyAccumulator.intercepting((entry) => changes.push(entry.changes));
      try {
        transact(fn);
        return squashRecordDiffs(changes);
      } finally {
        dispose();
      }
    }
    applyDiff(diff, runCallbacks = true) {
      const prevRunCallbacks = this._runCallbacks;
      try {
        this._runCallbacks = runCallbacks;
        transact(() => {
          const toPut = Object.values(diff.added).concat(
            Object.values(diff.updated).map(([_from, to]) => to)
          );
          const toRemove = Object.keys(diff.removed);
          if (toPut.length) {
            this.put(toPut);
          }
          if (toRemove.length) {
            this.remove(toRemove);
          }
        });
      } finally {
        this._runCallbacks = prevRunCallbacks;
      }
    }
    /** @internal */
    ensureStoreIsUsable() {
      var _a5, _b2;
      (_a5 = this._integrityChecker) != null ? _a5 : this._integrityChecker = this.schema.createIntegrityChecker(this);
      (_b2 = this._integrityChecker) == null ? void 0 : _b2.call(this);
    }
    /** @internal */
    markAsPossiblyCorrupted() {
      this._isPossiblyCorrupted = true;
    }
    /** @internal */
    isPossiblyCorrupted() {
      return this._isPossiblyCorrupted;
    }
  };
  function squashRecordDiffs(diffs) {
    const result = { added: {}, removed: {}, updated: {} };
    for (const diff of diffs) {
      for (const [id, value] of Object.entries(diff.added)) {
        if (result.removed[id]) {
          const original = result.removed[id];
          delete result.removed[id];
          if (original !== value) {
            result.updated[id] = [original, value];
          }
        } else {
          result.added[id] = value;
        }
      }
      for (const [id, [_from, to]] of Object.entries(diff.updated)) {
        if (result.added[id]) {
          result.added[id] = to;
          delete result.updated[id];
          delete result.removed[id];
          continue;
        }
        if (result.updated[id]) {
          result.updated[id][1] = to;
          delete result.removed[id];
          continue;
        }
        result.updated[id] = diff.updated[id];
        delete result.removed[id];
      }
      for (const [id, value] of Object.entries(diff.removed)) {
        if (result.added[id]) {
          delete result.added[id];
        } else if (result.updated[id]) {
          result.removed[id] = result.updated[id][0];
          delete result.updated[id];
        } else {
          result.removed[id] = value;
        }
      }
    }
    return result;
  }
  function squashHistoryEntries(entries) {
    const result = [];
    let current = entries[0];
    let entry;
    for (let i3 = 1, n3 = entries.length; i3 < n3; i3++) {
      entry = entries[i3];
      if (current.source !== entry.source) {
        result.push(current);
        current = entry;
      } else {
        current = {
          source: current.source,
          changes: squashRecordDiffs([current.changes, entry.changes])
        };
      }
    }
    result.push(current);
    return result;
  }
  var HistoryAccumulator = class {
    constructor() {
      __publicField(this, "_history", []);
      __publicField(this, "_inteceptors", /* @__PURE__ */ new Set());
    }
    intercepting(fn) {
      this._inteceptors.add(fn);
      return () => {
        this._inteceptors.delete(fn);
      };
    }
    add(entry) {
      this._history.push(entry);
      for (const interceptor of this._inteceptors) {
        interceptor(entry);
      }
    }
    flush() {
      const history = squashHistoryEntries(this._history);
      this._history = [];
      return history;
    }
    clear() {
      this._history = [];
    }
    hasChanges() {
      return this._history.length > 0;
    }
  };

  // ../../../packages/tlstore/src/lib/BaseRecord.ts
  function isRecord(record) {
    return typeof record === "object" && record !== null && "id" in record && "typeName" in record;
  }

  // ../../../packages/tlstore/src/lib/migrate.ts
  function defineMigrations({
    firstVersion,
    currentVersion,
    migrators,
    subTypeKey,
    subTypeMigrations
  }) {
    return { currentVersion, firstVersion, migrators, subTypeKey, subTypeMigrations };
  }
  function migrateRecord({
    record,
    migrations,
    fromVersion,
    toVersion
  }) {
    let currentVersion = fromVersion;
    if (!isRecord(record))
      throw new Error("[migrateRecord] object is not a record");
    const _a5 = record, { typeName, id } = _a5, others = __objRest(_a5, ["typeName", "id"]);
    let recordWithoutMeta = others;
    while (currentVersion < toVersion) {
      const nextVersion = currentVersion + 1;
      const migrator = migrations.migrators[nextVersion];
      if (!migrator) {
        return {
          type: "error",
          reason: "target-version-too-new" /* TargetVersionTooNew */
        };
      }
      recordWithoutMeta = migrator.up(recordWithoutMeta);
      currentVersion = nextVersion;
    }
    while (currentVersion > toVersion) {
      const nextVersion = currentVersion - 1;
      const migrator = migrations.migrators[currentVersion];
      if (!migrator) {
        return {
          type: "error",
          reason: "target-version-too-old" /* TargetVersionTooOld */
        };
      }
      recordWithoutMeta = migrator.down(recordWithoutMeta);
      currentVersion = nextVersion;
    }
    return {
      type: "success",
      value: __spreadProps(__spreadValues({}, recordWithoutMeta), { id, typeName })
    };
  }
  function migrate({
    value,
    migrations,
    fromVersion,
    toVersion
  }) {
    let currentVersion = fromVersion;
    while (currentVersion < toVersion) {
      const nextVersion = currentVersion + 1;
      const migrator = migrations.migrators[nextVersion];
      if (!migrator) {
        return {
          type: "error",
          reason: "target-version-too-new" /* TargetVersionTooNew */
        };
      }
      value = migrator.up(value);
      currentVersion = nextVersion;
    }
    while (currentVersion > toVersion) {
      const nextVersion = currentVersion - 1;
      const migrator = migrations.migrators[currentVersion];
      if (!migrator) {
        return {
          type: "error",
          reason: "target-version-too-old" /* TargetVersionTooOld */
        };
      }
      value = migrator.down(value);
      currentVersion = nextVersion;
    }
    return {
      type: "success",
      value
    };
  }

  // ../../../packages/tlstore/src/lib/StoreSchema.ts
  var StoreSchema = class {
    constructor(types, options) {
      this.types = types;
      this.options = options;
    }
    static create(types, options) {
      return new StoreSchema(types, options != null ? options : {});
    }
    get currentStoreVersion() {
      var _a5, _b2;
      return (_b2 = (_a5 = this.options.snapshotMigrations) == null ? void 0 : _a5.currentVersion) != null ? _b2 : 0;
    }
    validateRecord(store, record, phase, recordBefore) {
      try {
        const recordType = getOwnProperty(this.types, record.typeName);
        if (!recordType) {
          throw new Error(`Missing definition for record type ${record.typeName}`);
        }
        return recordType.validate(record);
      } catch (error) {
        if (this.options.onValidationFailure) {
          return this.options.onValidationFailure({
            store,
            record,
            phase,
            recordBefore,
            error
          });
        } else {
          throw error;
        }
      }
    }
    migratePersistedRecord(record, persistedSchema, direction = "up") {
      var _a5;
      const ourType = getOwnProperty(this.types, record.typeName);
      const persistedType = persistedSchema.recordVersions[record.typeName];
      if (!persistedType || !ourType) {
        return { type: "error", reason: "unknown-type" /* UnknownType */ };
      }
      const ourVersion = ourType.migrations.currentVersion;
      const persistedVersion = persistedType.version;
      if (ourVersion !== persistedVersion) {
        const result2 = direction === "up" ? migrateRecord({
          record,
          migrations: ourType.migrations,
          fromVersion: persistedVersion,
          toVersion: ourVersion
        }) : migrateRecord({
          record,
          migrations: ourType.migrations,
          fromVersion: ourVersion,
          toVersion: persistedVersion
        });
        if (result2.type === "error") {
          return result2;
        }
        record = result2.value;
      }
      if (!ourType.migrations.subTypeKey) {
        return { type: "success", value: record };
      }
      const ourSubTypeMigrations = (_a5 = ourType.migrations.subTypeMigrations) == null ? void 0 : _a5[record[ourType.migrations.subTypeKey]];
      const persistedSubTypeVersion = "subTypeVersions" in persistedType ? persistedType.subTypeVersions[record[ourType.migrations.subTypeKey]] : null;
      if (ourSubTypeMigrations === void 0) {
        return { type: "error", reason: "unrecognized-subtype" /* UnrecognizedSubtype */ };
      }
      if (persistedSubTypeVersion == null) {
        return { type: "error", reason: "incompatible-subtype" /* IncompatibleSubtype */ };
      }
      const result = direction === "up" ? migrateRecord({
        record,
        migrations: ourSubTypeMigrations,
        fromVersion: persistedSubTypeVersion,
        toVersion: ourSubTypeMigrations.currentVersion
      }) : migrateRecord({
        record,
        migrations: ourSubTypeMigrations,
        fromVersion: ourSubTypeMigrations.currentVersion,
        toVersion: persistedSubTypeVersion
      });
      if (result.type === "error") {
        return result;
      }
      return { type: "success", value: result.value };
    }
    migrateStoreSnapshot(storeSnapshot, persistedSchema) {
      var _a5;
      const migrations = this.options.snapshotMigrations;
      if (!migrations) {
        return { type: "success", value: storeSnapshot };
      }
      const ourStoreVersion = migrations.currentVersion;
      const persistedStoreVersion = (_a5 = persistedSchema.storeVersion) != null ? _a5 : 0;
      if (ourStoreVersion < persistedStoreVersion) {
        return { type: "error", reason: "target-version-too-old" /* TargetVersionTooOld */ };
      }
      if (ourStoreVersion > persistedStoreVersion) {
        const result = migrate({
          value: storeSnapshot,
          migrations,
          fromVersion: persistedStoreVersion,
          toVersion: ourStoreVersion
        });
        if (result.type === "error") {
          return result;
        }
        storeSnapshot = result.value;
      }
      const updated = [];
      for (const r3 of Object.values(storeSnapshot)) {
        const result = this.migratePersistedRecord(r3, persistedSchema);
        if (result.type === "error") {
          return result;
        } else if (result.value && result.value !== r3) {
          updated.push(result.value);
        }
      }
      if (updated.length) {
        storeSnapshot = __spreadValues({}, storeSnapshot);
        for (const r3 of updated) {
          storeSnapshot[r3.id] = r3;
        }
      }
      return { type: "success", value: storeSnapshot };
    }
    /** @internal */
    createIntegrityChecker(store) {
      var _a5, _b2, _c;
      return (_c = (_b2 = (_a5 = this.options).createIntegrityChecker) == null ? void 0 : _b2.call(_a5, store)) != null ? _c : void 0;
    }
    /** @internal */
    derivePresenceState(store) {
      var _a5, _b2;
      return (_b2 = (_a5 = this.options).derivePresenceState) == null ? void 0 : _b2.call(_a5, store);
    }
    serialize() {
      var _a5, _b2;
      return {
        schemaVersion: 1,
        storeVersion: (_b2 = (_a5 = this.options.snapshotMigrations) == null ? void 0 : _a5.currentVersion) != null ? _b2 : 0,
        recordVersions: Object.fromEntries(
          objectMapValues(this.types).map((type) => [
            type.typeName,
            type.migrations.subTypeKey && type.migrations.subTypeMigrations ? {
              version: type.migrations.currentVersion,
              subTypeKey: type.migrations.subTypeKey,
              subTypeVersions: type.migrations.subTypeMigrations ? Object.fromEntries(
                Object.entries(type.migrations.subTypeMigrations).map(([k2, v3]) => [
                  k2,
                  v3.currentVersion
                ])
              ) : void 0
            } : {
              version: type.migrations.currentVersion
            }
          ])
        )
      };
    }
    serializeEarliestVersion() {
      var _a5, _b2;
      return {
        schemaVersion: 1,
        storeVersion: (_b2 = (_a5 = this.options.snapshotMigrations) == null ? void 0 : _a5.firstVersion) != null ? _b2 : 0,
        recordVersions: Object.fromEntries(
          objectMapValues(this.types).map((type) => [
            type.typeName,
            type.migrations.subTypeKey && type.migrations.subTypeMigrations ? {
              version: type.migrations.firstVersion,
              subTypeKey: type.migrations.subTypeKey,
              subTypeVersions: type.migrations.subTypeMigrations ? Object.fromEntries(
                Object.entries(type.migrations.subTypeMigrations).map(([k2, v3]) => [
                  k2,
                  v3.firstVersion
                ])
              ) : void 0
            } : {
              version: type.migrations.firstVersion
            }
          ])
        )
      };
    }
  };

  // ../../../packages/tlstore/src/lib/compareSchemas.ts
  var compareSchemas = (a3, b3) => {
    if (a3.schemaVersion > b3.schemaVersion) {
      return 1;
    }
    if (a3.schemaVersion < b3.schemaVersion) {
      return -1;
    }
    if (a3.storeVersion > b3.storeVersion) {
      return 1;
    }
    if (a3.storeVersion < b3.storeVersion) {
      return -1;
    }
    for (const key of Object.keys(a3.recordVersions)) {
      const aRecordVersion = a3.recordVersions[key];
      const bRecordVersion = b3.recordVersions[key];
      if (aRecordVersion.version > bRecordVersion.version) {
        return 1;
      }
      if (aRecordVersion.version < bRecordVersion.version) {
        return -1;
      }
      if ("subTypeVersions" in aRecordVersion && !("subTypeVersions" in bRecordVersion)) {
        return 1;
      }
      if (!("subTypeVersions" in aRecordVersion) && "subTypeVersions" in bRecordVersion) {
        return -1;
      }
      if (!("subTypeVersions" in aRecordVersion) || !("subTypeVersions" in bRecordVersion)) {
        continue;
      }
      for (const subType of Object.keys(aRecordVersion.subTypeVersions)) {
        const aSubTypeVersion = aRecordVersion.subTypeVersions[subType];
        const bSubTypeVersion = bRecordVersion.subTypeVersions[subType];
        if (aSubTypeVersion > bSubTypeVersion) {
          return 1;
        }
        if (aSubTypeVersion < bSubTypeVersion) {
          return -1;
        }
      }
    }
    return 0;
  };

  // ../../../packages/tlvalidate/src/lib/validation.ts
  var validation_exports = {};
  __export(validation_exports, {
    ArrayOfValidator: () => ArrayOfValidator,
    DictValidator: () => DictValidator,
    ObjectValidator: () => ObjectValidator,
    UnionValidator: () => UnionValidator,
    ValidationError: () => ValidationError,
    Validator: () => Validator,
    any: () => any,
    array: () => array,
    arrayOf: () => arrayOf,
    bigint: () => bigint,
    boolean: () => boolean,
    boxModel: () => boxModel,
    dict: () => dict,
    integer: () => integer,
    literal: () => literal,
    model: () => model,
    nonZeroInteger: () => nonZeroInteger,
    nonZeroNumber: () => nonZeroNumber,
    number: () => number,
    object: () => object,
    point: () => point,
    positiveInteger: () => positiveInteger,
    positiveNumber: () => positiveNumber,
    setEnum: () => setEnum,
    string: () => string,
    union: () => union,
    unknown: () => unknown,
    unknownObject: () => unknownObject
  });
  function formatPath(path) {
    if (!path.length) {
      return null;
    }
    let formattedPath = "";
    for (const item of path) {
      if (typeof item === "number") {
        formattedPath += `.${item}`;
      } else if (item.startsWith("(")) {
        if (formattedPath.endsWith(")")) {
          formattedPath = `${formattedPath.slice(0, -1)}, ${item.slice(1)}`;
        } else {
          formattedPath += item;
        }
      } else {
        formattedPath += `.${item}`;
      }
    }
    if (formattedPath.startsWith(".")) {
      return formattedPath.slice(1);
    }
    return formattedPath;
  }
  var ValidationError = class extends Error {
    constructor(rawMessage, path = []) {
      const formattedPath = formatPath(path);
      const indentedMessage = rawMessage.split("\n").map((line, i3) => i3 === 0 ? line : `  ${line}`).join("\n");
      super(path ? `At ${formattedPath}: ${indentedMessage}` : indentedMessage);
      this.rawMessage = rawMessage;
      this.path = path;
      __publicField(this, "name", "ValidationError");
    }
  };
  function prefixError(path, fn) {
    try {
      return fn();
    } catch (err) {
      if (err instanceof ValidationError) {
        throw new ValidationError(err.rawMessage, [path, ...err.path]);
      }
      throw new ValidationError(err.toString(), [path]);
    }
  }
  function typeToString(value) {
    if (value === null)
      return "null";
    if (Array.isArray(value))
      return "an array";
    const type = typeof value;
    switch (type) {
      case "bigint":
      case "boolean":
      case "function":
      case "number":
      case "string":
      case "symbol":
        return `a ${type}`;
      case "object":
        return `an ${type}`;
      case "undefined":
        return "undefined";
      default:
        exhaustiveSwitchError(type);
    }
  }
  var Validator = class {
    constructor(validationFn) {
      this.validationFn = validationFn;
    }
    /**
     * Asserts that the passed value is of the correct type and returns it. The returned value is
     * guaranteed to be referentially equal to the passed value.
     */
    validate(value) {
      const validated = this.validationFn(value);
      if (false) {
        throw new ValidationError("Validator functions must return the same value they were passed");
      }
      return validated;
    }
    /**
     * Returns a new validator that also accepts null or undefined. The resulting value will always be
     * null.
     */
    nullable() {
      return new Validator((value) => {
        if (value === null)
          return null;
        return this.validate(value);
      });
    }
    /**
     * Returns a new validator that also accepts null or undefined. The resulting value will always be
     * null.
     */
    optional() {
      return new Validator((value) => {
        if (value === void 0)
          return void 0;
        return this.validate(value);
      });
    }
    /**
     * Refine this validation to a new type. The passed-in validation function should throw an error
     * if the value can't be converted to the new type, or return the new type otherwise.
     */
    refine(otherValidationFn) {
      return new Validator((value) => {
        return otherValidationFn(this.validate(value));
      });
    }
    check(nameOrCheckFn, checkFn) {
      if (typeof nameOrCheckFn === "string") {
        return this.refine((value) => {
          prefixError(`(check ${nameOrCheckFn})`, () => checkFn(value));
          return value;
        });
      } else {
        return this.refine((value) => {
          nameOrCheckFn(value);
          return value;
        });
      }
    }
  };
  var ArrayOfValidator = class extends Validator {
    constructor(itemValidator) {
      super((value) => {
        const arr = array.validate(value);
        for (let i3 = 0; i3 < arr.length; i3++) {
          prefixError(i3, () => itemValidator.validate(arr[i3]));
        }
        return arr;
      });
      this.itemValidator = itemValidator;
    }
    nonEmpty() {
      return this.check((value) => {
        if (value.length === 0) {
          throw new ValidationError("Expected a non-empty array");
        }
      });
    }
    lengthGreaterThan1() {
      return this.check((value) => {
        if (value.length <= 1) {
          throw new ValidationError("Expected an array with length greater than 1");
        }
      });
    }
  };
  var ObjectValidator = class extends Validator {
    constructor(config, shouldAllowUnknownProperties = false) {
      super((object2) => {
        if (typeof object2 !== "object" || object2 === null) {
          throw new ValidationError(`Expected object, got ${typeToString(object2)}`);
        }
        for (const [key, validator] of Object.entries(config)) {
          prefixError(key, () => {
            ;
            validator.validate(getOwnProperty(object2, key));
          });
        }
        if (!shouldAllowUnknownProperties) {
          for (const key of Object.keys(object2)) {
            if (!hasOwnProperty(config, key)) {
              throw new ValidationError(`Unexpected property`, [key]);
            }
          }
        }
        return object2;
      });
      this.config = config;
      this.shouldAllowUnknownProperties = shouldAllowUnknownProperties;
    }
    allowUnknownProperties() {
      return new ObjectValidator(this.config, true);
    }
    /**
     * Extend an object validator by adding additional properties.
     *
     * @example
     *
     * ```ts
     * const animalValidator = T.object({
     * 	name: T.string,
     * })
     * const catValidator = animalValidator.extend({
     * 	meowVolume: T.number,
     * })
     * ```
     */
    extend(extension) {
      return new ObjectValidator(__spreadValues(__spreadValues({}, this.config), extension));
    }
  };
  var UnionValidator = class extends Validator {
    constructor(key, config, unknownValueValidation) {
      super((input) => {
        if (typeof input !== "object" || input === null) {
          throw new ValidationError(`Expected an object, got ${typeToString(input)}`, []);
        }
        const variant = getOwnProperty(input, key);
        if (typeof variant !== "string") {
          throw new ValidationError(
            `Expected a string for key "${key}", got ${typeToString(variant)}`
          );
        }
        const matchingSchema = hasOwnProperty(config, variant) ? config[variant] : void 0;
        if (matchingSchema === void 0) {
          return this.unknownValueValidation(input, variant);
        }
        return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(input));
      });
      this.key = key;
      this.config = config;
      this.unknownValueValidation = unknownValueValidation;
    }
    validateUnknownVariants(unknownValueValidation) {
      return new UnionValidator(this.key, this.config, unknownValueValidation);
    }
  };
  var DictValidator = class extends Validator {
    constructor(keyValidator, valueValidator) {
      super((object2) => {
        if (typeof object2 !== "object" || object2 === null) {
          throw new ValidationError(`Expected object, got ${typeToString(object2)}`);
        }
        for (const [key, value] of Object.entries(object2)) {
          prefixError(key, () => {
            keyValidator.validate(key);
            valueValidator.validate(value);
          });
        }
        return object2;
      });
      this.keyValidator = keyValidator;
      this.valueValidator = valueValidator;
    }
  };
  function typeofValidator(type) {
    return new Validator((value) => {
      if (typeof value !== type) {
        throw new ValidationError(`Expected ${type}, got ${typeToString(value)}`);
      }
      return value;
    });
  }
  var unknown = new Validator((value) => value);
  var any = new Validator((value) => value);
  var string = typeofValidator("string");
  var number = typeofValidator("number").check((number2) => {
    if (Number.isNaN(number2)) {
      throw new ValidationError("Expected a number, got NaN");
    }
    if (!Number.isFinite(number2)) {
      throw new ValidationError(`Expected a finite number, got ${number2}`);
    }
  });
  var positiveNumber = number.check((value) => {
    if (value < 0)
      throw new ValidationError(`Expected a positive number, got ${value}`);
  });
  var nonZeroNumber = number.check((value) => {
    if (value <= 0)
      throw new ValidationError(`Expected a non-zero positive number, got ${value}`);
  });
  var integer = number.check((value) => {
    if (!Number.isInteger(value))
      throw new ValidationError(`Expected an integer, got ${value}`);
  });
  var positiveInteger = integer.check((value) => {
    if (value < 0)
      throw new ValidationError(`Expected a positive integer, got ${value}`);
  });
  var nonZeroInteger = integer.check((value) => {
    if (value <= 0)
      throw new ValidationError(`Expected a non-zero positive integer, got ${value}`);
  });
  var boolean = typeofValidator("boolean");
  var bigint = typeofValidator("bigint");
  function literal(expectedValue) {
    return new Validator((actualValue) => {
      if (actualValue !== expectedValue) {
        throw new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`);
      }
      return expectedValue;
    });
  }
  var array = new Validator((value) => {
    if (!Array.isArray(value)) {
      throw new ValidationError(`Expected an array, got ${typeToString(value)}`);
    }
    return value;
  });
  function arrayOf(itemValidator) {
    return new ArrayOfValidator(itemValidator);
  }
  var unknownObject = new Validator((value) => {
    if (typeof value !== "object" || value === null) {
      throw new ValidationError(`Expected object, got ${typeToString(value)}`);
    }
    return value;
  });
  function object(config) {
    return new ObjectValidator(config);
  }
  function dict(keyValidator, valueValidator) {
    return new DictValidator(keyValidator, valueValidator);
  }
  function union(key, config) {
    return new UnionValidator(key, config, (unknownValue, unknownVariant) => {
      throw new ValidationError(
        `Expected one of ${Object.keys(config).map((key2) => JSON.stringify(key2)).join(" or ")}, got ${JSON.stringify(unknownVariant)}`,
        [key]
      );
    });
  }
  function model(name, validator) {
    return new Validator((value) => {
      const prefix = value && typeof value === "object" && "id" in value && typeof value.id === "string" ? `${name}(id = ${value.id})` : name;
      return prefixError(prefix, () => validator.validate(value));
    });
  }
  function setEnum(values) {
    return new Validator((value) => {
      if (!values.has(value)) {
        const valuesString = Array.from(values, (value2) => JSON.stringify(value2)).join(" or ");
        throw new ValidationError(`Expected ${valuesString}, got ${value}`);
      }
      return value;
    });
  }
  var point = object({
    x: number,
    y: number,
    z: number.optional()
  });
  var boxModel = object({
    x: number,
    y: number,
    w: number,
    h: number
  });

  // ../../../packages/tlschema/src/style-types.ts
  var TL_STYLE_TYPES = /* @__PURE__ */ new Set([
    "color",
    "labelColor",
    "dash",
    "fill",
    "size",
    "opacity",
    "font",
    "align",
    "icon",
    "geo",
    "arrowheadStart",
    "arrowheadEnd",
    "spline"
  ]);
  var TL_COLOR_TYPES = /* @__PURE__ */ new Set([
    "black",
    "grey",
    "light-violet",
    "violet",
    "blue",
    "light-blue",
    "yellow",
    "orange",
    "green",
    "light-green",
    "light-red",
    "red"
  ]);
  var TL_DASH_TYPES = /* @__PURE__ */ new Set(["draw", "solid", "dashed", "dotted"]);
  var TL_FILL_TYPES = /* @__PURE__ */ new Set(["none", "semi", "solid", "pattern"]);
  var TL_SIZE_TYPES = /* @__PURE__ */ new Set(["s", "m", "l", "xl"]);
  var TL_OPACITY_TYPES = /* @__PURE__ */ new Set(["0.1", "0.25", "0.5", "0.75", "1"]);
  var TL_FONT_TYPES = /* @__PURE__ */ new Set(["draw", "sans", "serif", "mono"]);
  var TL_ALIGN_TYPES = /* @__PURE__ */ new Set(["start", "middle", "end"]);
  var TL_GEO_TYPES = /* @__PURE__ */ new Set([
    "rectangle",
    "ellipse",
    "triangle",
    "diamond",
    "pentagon",
    "hexagon",
    "octagon",
    "star",
    "rhombus",
    "rhombus-2",
    "oval",
    "trapezoid",
    "arrow-right",
    "arrow-left",
    "arrow-up",
    "arrow-down",
    "x-box",
    "check-box"
  ]);
  var TL_ARROWHEAD_TYPES = /* @__PURE__ */ new Set([
    "arrow",
    "triangle",
    "square",
    "dot",
    "pipe",
    "diamond",
    "inverted",
    "bar",
    "none"
  ]);
  var TL_SPLINE_TYPES = /* @__PURE__ */ new Set(["cubic", "line"]);
  var TL_ICON_TYPES = /* @__PURE__ */ new Set([
    "activity",
    "airplay",
    "alert-circle",
    "alert-octagon",
    "alert-triangle",
    "align-center",
    "align-justify",
    "align-left",
    "align-right",
    "anchor",
    "aperture",
    "archive",
    "arrow-down-circle",
    "arrow-down-left",
    "arrow-down-right",
    "arrow-down",
    "arrow-left-circle",
    "arrow-left",
    "arrow-right-circle",
    "arrow-right",
    "arrow-up-circle",
    "arrow-up-left",
    "arrow-up-right",
    "arrow-up",
    "at-sign",
    "award",
    "bar-chart-2",
    "bar-chart",
    "battery-charging",
    "battery",
    "bell-off",
    "bell",
    "bluetooth",
    "bold",
    "book-open",
    "book",
    "bookmark",
    "geo",
    "briefcase",
    "calendar",
    "camera-off",
    "camera",
    "cast",
    "check-circle",
    "check-square",
    "check",
    "chevron-down",
    "chevron-left",
    "chevron-right",
    "chevron-up",
    "chevrons-down",
    "chevrons-left",
    "chevrons-right",
    "chevrons-up",
    "chrome",
    "circle",
    "clipboard",
    "clock",
    "cloud-drizzle",
    "cloud-lightning",
    "cloud-off",
    "cloud-rain",
    "cloud-snow",
    "cloud",
    "codepen",
    "codesandbox",
    "coffee",
    "columns",
    "command",
    "compass",
    "copy",
    "corner-down-left",
    "corner-down-right",
    "corner-left-down",
    "corner-left-up",
    "corner-right-down",
    "corner-right-up",
    "corner-up-left",
    "corner-up-right",
    "cpu",
    "credit-card",
    "crop",
    "crosshair",
    "database",
    "delete",
    "disc",
    "divide-circle",
    "divide-square",
    "divide",
    "dollar-sign",
    "download-cloud",
    "download",
    "dribbble",
    "droplet",
    "edit-2",
    "edit-3",
    "edit",
    "external-link",
    "eye-off",
    "eye",
    "facebook",
    "fast-forward",
    "feather",
    "figma",
    "file-minus",
    "file-plus",
    "file-text",
    "file",
    "film",
    "filter",
    "flag",
    "folder-minus",
    "folder-plus",
    "folder",
    "framer",
    "frown",
    "gift",
    "git-branch",
    "git-commit",
    "git-merge",
    "git-pull-request",
    "github",
    "gitlab",
    "globe",
    "grid",
    "hard-drive",
    "hash",
    "headphones",
    "heart",
    "help-circle",
    "hexagon",
    "home",
    "image",
    "inbox",
    "info",
    "instagram",
    "italic",
    "key",
    "layers",
    "layout",
    "life-buoy",
    "link-2",
    "link",
    "linkedin",
    "list",
    "loader",
    "lock",
    "log-in",
    "log-out",
    "mail",
    "map-pin",
    "map",
    "maximize-2",
    "maximize",
    "meh",
    "menu",
    "message-circle",
    "message-square",
    "mic-off",
    "mic",
    "minimize-2",
    "minimize",
    "minus-circle",
    "minus-square",
    "minus",
    "monitor",
    "moon",
    "more-horizontal",
    "more-vertical",
    "mouse-pointer",
    "move",
    "music",
    "navigation-2",
    "navigation",
    "octagon",
    "package",
    "paperclip",
    "pause-circle",
    "pause",
    "pen-tool",
    "percent",
    "phone-call",
    "phone-forwarded",
    "phone-incoming",
    "phone-missed",
    "phone-off",
    "phone-outgoing",
    "phone",
    "pie-chart",
    "play-circle",
    "play",
    "plus-circle",
    "plus-square",
    "plus",
    "pocket",
    "power",
    "printer",
    "radio",
    "refresh-ccw",
    "refresh-cw",
    "repeat",
    "rewind",
    "rotate-ccw",
    "rotate-cw",
    "rss",
    "save",
    "scissors",
    "search",
    "send",
    "server",
    "settings",
    "share-2",
    "share",
    "shield-off",
    "shield",
    "shopping-bag",
    "shopping-cart",
    "shuffle",
    "sidebar",
    "skip-back",
    "skip-forward",
    "slack",
    "slash",
    "sliders",
    "smartphone",
    "smile",
    "speaker",
    "square",
    "star",
    "stop-circle",
    "sun",
    "sunrise",
    "sunset",
    "table",
    "tablet",
    "tag",
    "target",
    "terminal",
    "thermometer",
    "thumbs-down",
    "thumbs-up",
    "toggle-left",
    "toggle-right",
    "tool",
    "trash-2",
    "trash",
    "trello",
    "trending-down",
    "trending-up",
    "triangle",
    "truck",
    "tv",
    "twitch",
    "twitter",
    "type",
    "umbrella",
    "underline",
    "unlock",
    "upload-cloud",
    "upload",
    "user-check",
    "user-minus",
    "user-plus",
    "user-x",
    "user",
    "users",
    "video-off",
    "video",
    "voicemail",
    "volume-1",
    "volume-2",
    "volume-x",
    "volume",
    "watch",
    "wifi-off",
    "wifi",
    "wind",
    "x-circle",
    "x-octagon",
    "x-square",
    "x",
    "youtube",
    "zap-off",
    "zap",
    "zoom-in",
    "zoom-out"
  ]);

  // ../../../packages/tlschema/src/validation.ts
  function idValidator(prefix) {
    return validation_exports.string.refine((id) => {
      if (!id.startsWith(`${prefix}:`)) {
        throw new Error(`${prefix} ID must start with "${prefix}:"`);
      }
      return id;
    });
  }
  var userIdValidator = idValidator("user");
  var assetIdValidator = idValidator("asset");
  var pageIdValidator = idValidator("page");
  var shapeIdValidator = idValidator("shape");
  var instanceIdValidator = idValidator("instance");
  var parentIdValidator = validation_exports.string.refine((id) => {
    if (!id.startsWith("page:") && !id.startsWith("shape:")) {
      throw new Error('Parent ID must start with "page:" or "shape:"');
    }
    return id;
  });
  var colorValidator = validation_exports.setEnum(TL_COLOR_TYPES);
  var dashValidator = validation_exports.setEnum(TL_DASH_TYPES);
  var fillValidator = validation_exports.setEnum(TL_FILL_TYPES);
  var geoValidator = validation_exports.setEnum(TL_GEO_TYPES);
  var sizeValidator = validation_exports.setEnum(TL_SIZE_TYPES);
  var fontValidator = validation_exports.setEnum(TL_FONT_TYPES);
  var alignValidator = validation_exports.setEnum(TL_ALIGN_TYPES);
  var arrowheadValidator = validation_exports.setEnum(TL_ARROWHEAD_TYPES);
  var opacityValidator = validation_exports.setEnum(TL_OPACITY_TYPES);
  var iconValidator = validation_exports.setEnum(TL_ICON_TYPES);
  var splineValidator = validation_exports.setEnum(TL_SPLINE_TYPES);

  // ../../../packages/tlschema/src/records/TLCamera.ts
  var cameraTypeValidator = validation_exports.model(
    "camera",
    validation_exports.object({
      typeName: validation_exports.literal("camera"),
      id: idValidator("camera"),
      x: validation_exports.number,
      y: validation_exports.number,
      z: validation_exports.number
    })
  );
  var Versions = {
    Initial: 0
  };
  var cameraTypeMigrations = defineMigrations({
    firstVersion: Versions.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions.Initial,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {}
  });
  var TLCamera = createRecordType("camera", {
    migrations: cameraTypeMigrations,
    validator: cameraTypeValidator,
    scope: "instance"
  }).withDefaultProperties(
    () => ({
      x: 0,
      y: 0,
      z: 1
    })
  );

  // ../../../packages/tlschema/src/records/TLDocument.ts
  var documentTypeValidator = validation_exports.model(
    "document",
    validation_exports.object({
      typeName: validation_exports.literal("document"),
      id: validation_exports.literal("document:document"),
      gridSize: validation_exports.number
    })
  );
  var Versions2 = {
    Initial: 0
  };
  var documentTypeMigrations = defineMigrations({
    firstVersion: Versions2.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions2.Initial,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {}
  });
  var TLDocument = createRecordType("document", {
    migrations: documentTypeMigrations,
    validator: documentTypeValidator,
    scope: "document"
  }).withDefaultProperties(
    () => ({
      gridSize: 10
    })
  );
  var TLDOCUMENT_ID = TLDocument.createCustomId("document");

  // ../../../packages/tlschema/src/ui-types.ts
  var TL_UI_COLOR_TYPES = /* @__PURE__ */ new Set([
    "accent",
    "white",
    "black",
    "selection-stroke",
    "selection-fill",
    "muted-1"
  ]);
  var uiColorTypeValidator = validation_exports.setEnum(TL_UI_COLOR_TYPES);
  var TL_CURSOR_TYPES = /* @__PURE__ */ new Set([
    "none",
    "default",
    "pointer",
    "cross",
    "grab",
    "rotate",
    "grabbing",
    "resize-edge",
    "resize-corner",
    "text",
    "move",
    "ew-resize",
    "ns-resize",
    "nesw-resize",
    "nwse-resize",
    "nesw-rotate",
    "nwse-rotate",
    "swne-rotate",
    "senw-rotate",
    "zoom-in",
    "zoom-out"
  ]);
  var cursorTypeValidator = validation_exports.setEnum(TL_CURSOR_TYPES);
  var cursorValidator = validation_exports.object({
    color: uiColorTypeValidator,
    type: cursorTypeValidator,
    rotation: validation_exports.number
  });
  var TL_SCRIBBLE_STATES = /* @__PURE__ */ new Set(["starting", "paused", "active", "stopping"]);
  var scribbleTypeValidator = validation_exports.object({
    points: validation_exports.arrayOf(validation_exports.point),
    size: validation_exports.positiveNumber,
    color: uiColorTypeValidator,
    opacity: validation_exports.number,
    state: validation_exports.setEnum(TL_SCRIBBLE_STATES)
  });
  var TL_HANDLE_TYPES = /* @__PURE__ */ new Set(["vertex", "virtual", "create"]);
  var handleTypeValidator = validation_exports.object({
    id: validation_exports.string,
    type: validation_exports.setEnum(TL_HANDLE_TYPES),
    canBind: validation_exports.boolean.optional(),
    index: validation_exports.string,
    x: validation_exports.number,
    y: validation_exports.number
  });

  // ../../../packages/tlschema/src/records/TLInstance.ts
  var instanceTypeValidator = validation_exports.model(
    "instance",
    validation_exports.object({
      typeName: validation_exports.literal("instance"),
      id: idValidator("instance"),
      userId: userIdValidator,
      currentPageId: pageIdValidator,
      followingUserId: userIdValidator.nullable(),
      brush: validation_exports.boxModel.nullable(),
      propsForNextShape: validation_exports.object({
        color: colorValidator,
        labelColor: colorValidator,
        dash: dashValidator,
        fill: fillValidator,
        size: sizeValidator,
        opacity: opacityValidator,
        font: fontValidator,
        align: alignValidator,
        icon: iconValidator,
        geo: geoValidator,
        arrowheadStart: arrowheadValidator,
        arrowheadEnd: arrowheadValidator,
        spline: splineValidator
      }),
      cursor: cursorValidator,
      scribble: scribbleTypeValidator.nullable(),
      isFocusMode: validation_exports.boolean,
      isDebugMode: validation_exports.boolean,
      isToolLocked: validation_exports.boolean,
      exportBackground: validation_exports.boolean,
      screenBounds: validation_exports.boxModel,
      zoomBrush: validation_exports.boxModel.nullable()
    })
  );
  var Versions3 = {
    Initial: 0,
    AddTransparentExportBgs: 1,
    RemoveDialog: 2,
    AddToolLockMode: 3,
    RemoveExtraPropsForNextShape: 4,
    AddLabelColor: 5,
    AddFollowingUserId: 6,
    RemoveAlignJustify: 7,
    AddZoom: 8
  };
  var instanceTypeMigrations = defineMigrations({
    firstVersion: Versions3.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions3.AddZoom,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {
      [Versions3.AddTransparentExportBgs]: {
        up: (instance) => {
          return __spreadProps(__spreadValues({}, instance), { exportBackground: true });
        },
        down: (_a5) => {
          var _b2 = _a5, { exportBackground: _ } = _b2, instance = __objRest(_b2, ["exportBackground"]);
          return instance;
        }
      },
      [Versions3.RemoveDialog]: {
        up: (_c) => {
          var _d = _c, { dialog: _ } = _d, instance = __objRest(_d, ["dialog"]);
          return instance;
        },
        down: (instance) => {
          return __spreadProps(__spreadValues({}, instance), { dialog: null });
        }
      },
      [Versions3.AddToolLockMode]: {
        up: (instance) => {
          return __spreadProps(__spreadValues({}, instance), { isToolLocked: false });
        },
        down: (_e) => {
          var _f = _e, { isToolLocked: _ } = _f, instance = __objRest(_f, ["isToolLocked"]);
          return instance;
        }
      },
      [Versions3.RemoveExtraPropsForNextShape]: {
        up: (_g) => {
          var _h = _g, { propsForNextShape } = _h, instance = __objRest(_h, ["propsForNextShape"]);
          return __spreadProps(__spreadValues({}, instance), {
            propsForNextShape: Object.fromEntries(
              Object.entries(propsForNextShape).filter(
                ([key]) => TL_STYLE_TYPES.has(key)
              )
            )
          });
        },
        down: (instance) => {
          return instance;
        }
      },
      [Versions3.AddLabelColor]: {
        up: (_i) => {
          var _j = _i, { propsForNextShape } = _j, instance = __objRest(_j, ["propsForNextShape"]);
          return __spreadProps(__spreadValues({}, instance), {
            propsForNextShape: __spreadProps(__spreadValues({}, propsForNextShape), {
              labelColor: "black"
            })
          });
        },
        down: (instance) => {
          const _a5 = instance.propsForNextShape, { labelColor: _ } = _a5, rest = __objRest(_a5, ["labelColor"]);
          return __spreadProps(__spreadValues({}, instance), {
            propsForNextShape: __spreadValues({}, rest)
          });
        }
      },
      [Versions3.AddFollowingUserId]: {
        up: (instance) => {
          return __spreadProps(__spreadValues({}, instance), { followingUserId: null });
        },
        down: (_k) => {
          var _l = _k, { followingUserId: _ } = _l, instance = __objRest(_l, ["followingUserId"]);
          return instance;
        }
      },
      [Versions3.RemoveAlignJustify]: {
        up: (instance) => {
          let newAlign = instance.propsForNextShape.align;
          if (newAlign === "justify") {
            newAlign = "start";
          }
          return __spreadProps(__spreadValues({}, instance), {
            propsForNextShape: __spreadProps(__spreadValues({}, instance.propsForNextShape), {
              align: newAlign
            })
          });
        },
        down: (instance) => {
          return __spreadValues({}, instance);
        }
      },
      [Versions3.AddZoom]: {
        up: (instance) => {
          return __spreadProps(__spreadValues({}, instance), { zoomBrush: null });
        },
        down: (_m) => {
          var _n = _m, { zoomBrush: _ } = _n, instance = __objRest(_n, ["zoomBrush"]);
          return instance;
        }
      }
    }
  });
  var TLInstance = createRecordType("instance", {
    migrations: instanceTypeMigrations,
    validator: instanceTypeValidator,
    scope: "instance"
  }).withDefaultProperties(
    () => ({
      followingUserId: null,
      propsForNextShape: {
        opacity: "1",
        color: "black",
        labelColor: "black",
        dash: "draw",
        fill: "none",
        size: "m",
        icon: "file",
        font: "draw",
        align: "middle",
        geo: "rectangle",
        arrowheadStart: "none",
        arrowheadEnd: "arrow",
        spline: "line"
      },
      brush: null,
      scribble: null,
      cursor: {
        type: "default",
        color: "black",
        rotation: 0
      },
      isFocusMode: false,
      exportBackground: false,
      isDebugMode: false,
      isToolLocked: false,
      screenBounds: { x: 0, y: 0, w: 1080, h: 720 },
      zoomBrush: null
    })
  );

  // ../../../packages/tlschema/src/records/TLInstancePageState.ts
  var instancePageStateTypeValidator = validation_exports.model(
    "instance_page_state",
    validation_exports.object({
      typeName: validation_exports.literal("instance_page_state"),
      id: idValidator("instance_page_state"),
      instanceId: instanceIdValidator,
      pageId: pageIdValidator,
      cameraId: idValidator("camera"),
      selectedIds: validation_exports.arrayOf(shapeIdValidator),
      hintingIds: validation_exports.arrayOf(shapeIdValidator),
      erasingIds: validation_exports.arrayOf(shapeIdValidator),
      hoveredId: shapeIdValidator.nullable(),
      editingId: shapeIdValidator.nullable(),
      croppingId: shapeIdValidator.nullable(),
      focusLayerId: shapeIdValidator.nullable()
    })
  );
  var Versions4 = {
    Initial: 0,
    AddCroppingId: 1
  };
  var instancePageStateMigrations = defineMigrations({
    firstVersion: Versions4.Initial,
    currentVersion: Versions4.AddCroppingId,
    migrators: {
      [Versions4.AddCroppingId]: {
        up(instance) {
          return __spreadProps(__spreadValues({}, instance), { croppingId: null });
        },
        down(_a5) {
          var _b2 = _a5, { croppingId: _croppingId } = _b2, instance = __objRest(_b2, ["croppingId"]);
          return instance;
        }
      }
    }
  });
  var TLInstancePageState = createRecordType("instance_page_state", {
    migrations: instancePageStateMigrations,
    validator: instancePageStateTypeValidator,
    scope: "instance"
  }).withDefaultProperties(
    () => ({
      editingId: null,
      croppingId: null,
      selectedIds: [],
      hoveredId: null,
      erasingIds: [],
      hintingIds: [],
      focusLayerId: null
    })
  );

  // ../../../packages/tlschema/src/records/TLPage.ts
  var pageTypeValidator = validation_exports.model(
    "page",
    validation_exports.object({
      typeName: validation_exports.literal("page"),
      id: pageIdValidator,
      name: validation_exports.string,
      index: validation_exports.string
    })
  );
  var Versions5 = {
    Initial: 0
  };
  var pageTypeMigrations = defineMigrations({
    firstVersion: Versions5.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions5.Initial,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {}
  });
  var TLPage = createRecordType("page", {
    migrations: pageTypeMigrations,
    validator: pageTypeValidator,
    scope: "document"
  });

  // ../../../packages/tlschema/src/languages.ts
  var LANGUAGES = [
    { locale: "ar", label: "\u0639\u0631\u0628\u064A" },
    { locale: "ca", label: "Catal\xE0" },
    { locale: "da", label: "Danish" },
    { locale: "de", label: "Deutsch" },
    { locale: "en", label: "English" },
    { locale: "es", label: "Espa\xF1ol" },
    { locale: "fa", label: "\u0641\u0627\u0631\u0633\u06CC" },
    { locale: "fi", label: "Suomi" },
    { locale: "fr", label: "Fran\xE7ais" },
    { locale: "gl", label: "Galego" },
    { locale: "he", label: "\u05E2\u05D1\u05E8\u05D9\u05EA" },
    { locale: "it", label: "Italiano" },
    { locale: "ja", label: "\u65E5\u672C\u8A9E" },
    { locale: "ko-kr", label: "\uD55C\uAD6D\uC5B4" },
    { locale: "ku", label: "\u06A9\u0648\u0631\u062F\u06CC" },
    { locale: "hi-in", label: "\u0939\u093F\u0928\u094D\u0926\u0940" },
    { locale: "hu", label: "Magyar" },
    { locale: "my", label: "\u1019\u103C\u1014\u103A\u1019\u102C\u1005\u102C" },
    { locale: "ne", label: "\u0928\u0947\u092A\u093E\u0932\u0940" },
    { locale: "no", label: "Norwegian" },
    { locale: "pl", label: "Polski" },
    { locale: "pt-br", label: "Portugu\xEAs - Brasil" },
    { locale: "pt-pt", label: "Portugu\xEAs - Europeu" },
    { locale: "ro", label: "Rom\xE2n\u0103" },
    { locale: "ru", label: "Russian" },
    { locale: "sv", label: "Svenska" },
    { locale: "te", label: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" },
    { locale: "th", label: "\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22" },
    { locale: "tr", label: "T\xFCrk\xE7e" },
    { locale: "uk", label: "Ukrainian" },
    { locale: "vi", label: "Ti\u1EBFng Vi\u1EC7t" },
    { locale: "zh-cn", label: "Chinese - Simplified" },
    { locale: "zh-tw", label: "\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)" }
  ];

  // ../../../packages/tlschema/src/translations.ts
  function getDefaultTranslationLocale(locales) {
    for (const locale of locales) {
      const supportedLocale = getSupportedLocale(locale);
      if (supportedLocale) {
        return supportedLocale;
      }
    }
    return "en";
  }
  var DEFAULT_LOCALE_REGIONS = {
    zh: "zh-cn",
    pt: "pt-br",
    ko: "ko-kr",
    hi: "hi-in"
  };
  function getSupportedLocale(locale) {
    const exactMatch = LANGUAGES.find((t4) => t4.locale === locale.toLowerCase());
    if (exactMatch) {
      return exactMatch.locale;
    }
    const [language, region] = locale.split(/[-_]/).map((s3) => s3.toLowerCase());
    if (region) {
      const languageMatch = LANGUAGES.find((t4) => t4.locale === language);
      if (languageMatch) {
        return languageMatch.locale;
      }
    }
    if (language in DEFAULT_LOCALE_REGIONS) {
      return DEFAULT_LOCALE_REGIONS[language];
    }
    return null;
  }

  // ../../../packages/tlschema/src/records/TLUser.ts
  var userTypeValidator = validation_exports.model(
    "user",
    validation_exports.object({
      typeName: validation_exports.literal("user"),
      id: userIdValidator,
      name: validation_exports.string,
      locale: validation_exports.string
    })
  );
  var Versions6 = {
    Initial: 0
  };
  var userTypeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions6.Initial,
    firstVersion: Versions6.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
    }
  });
  var TLUser = createRecordType("user", {
    migrations: userTypeMigrations,
    validator: userTypeValidator,
    scope: "instance"
  }).withDefaultProperties(() => {
    let locale = "en";
    if (typeof window !== "undefined" && window.navigator) {
      locale = getDefaultTranslationLocale(window.navigator.languages);
    }
    return {
      name: "New User",
      locale
    };
  });

  // ../../../packages/tlschema/src/records/TLUserDocument.ts
  var userDocumentTypeValidator = validation_exports.model(
    "user_document",
    validation_exports.object({
      typeName: validation_exports.literal("user_document"),
      id: idValidator("user_document"),
      userId: userIdValidator,
      isPenMode: validation_exports.boolean,
      isGridMode: validation_exports.boolean,
      isDarkMode: validation_exports.boolean,
      isMobileMode: validation_exports.boolean,
      isSnapMode: validation_exports.boolean,
      lastUpdatedPageId: pageIdValidator.nullable(),
      lastUsedTabId: instanceIdValidator.nullable()
    })
  );
  var userDocumentVersions = {
    Initial: 0,
    AddSnapMode: 1,
    AddMissingIsMobileMode: 2,
    RemoveIsReadOnly: 3
  };
  var userDocumentTypeMigrations = defineMigrations({
    firstVersion: userDocumentVersions.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: userDocumentVersions.RemoveIsReadOnly,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {
      [userDocumentVersions.AddSnapMode]: {
        up: (userDocument) => {
          return __spreadProps(__spreadValues({}, userDocument), { isSnapMode: false });
        },
        down: (_a5) => {
          var _b2 = _a5, { isSnapMode: _ } = _b2, userDocument = __objRest(_b2, ["isSnapMode"]);
          return userDocument;
        }
      },
      [userDocumentVersions.AddMissingIsMobileMode]: {
        up: (userDocument) => {
          var _a5;
          return __spreadProps(__spreadValues({}, userDocument), { isMobileMode: (_a5 = userDocument.isMobileMode) != null ? _a5 : false });
        },
        down: (_c) => {
          var _d = _c, { isMobileMode: _ } = _d, userDocument = __objRest(_d, ["isMobileMode"]);
          return userDocument;
        }
      },
      [userDocumentVersions.RemoveIsReadOnly]: {
        up: (_e) => {
          var _f = _e, { isReadOnly: _ } = _f, userDocument = __objRest(_f, ["isReadOnly"]);
          return userDocument;
        },
        down: (userDocument) => {
          return __spreadProps(__spreadValues({}, userDocument), { isReadOnly: false });
        }
      }
    }
  });
  var TLUserDocument = createRecordType("user_document", {
    migrations: userDocumentTypeMigrations,
    validator: userDocumentTypeValidator,
    scope: "instance"
  }).withDefaultProperties(
    () => ({
      /* STEP 6: Add any new default values for properties here */
      isPenMode: false,
      isGridMode: false,
      isDarkMode: false,
      isMobileMode: false,
      isSnapMode: false,
      lastUpdatedPageId: null,
      lastUsedTabId: null
    })
  );

  // ../../../packages/tlschema/src/records/TLUserPresence.ts
  var userPresenceTypeValidator = validation_exports.model(
    "user_presence",
    validation_exports.object({
      typeName: validation_exports.literal("user_presence"),
      id: idValidator("user_presence"),
      userId: userIdValidator,
      lastUsedInstanceId: instanceIdValidator.nullable(),
      lastActivityTimestamp: validation_exports.number,
      cursor: validation_exports.point,
      viewportPageBounds: validation_exports.boxModel,
      color: validation_exports.string
    })
  );
  var Versions7 = {
    Initial: 0,
    AddViewportPageBounds: 1
  };
  var userPresenceTypeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions7.AddViewportPageBounds,
    firstVersion: Versions7.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions7.AddViewportPageBounds]: {
        up: (record) => {
          return __spreadProps(__spreadValues({}, record), {
            viewportPageBounds: { x: 0, y: 0, w: 1, h: 1 }
          });
        },
        down: (_a5) => {
          var _b2 = _a5, { viewportPageBounds: _viewportPageBounds } = _b2, rest = __objRest(_b2, ["viewportPageBounds"]);
          return rest;
        }
      }
    }
  });
  var TLUserPresence = createRecordType("user_presence", {
    migrations: userPresenceTypeMigrations,
    validator: userPresenceTypeValidator,
    scope: "instance"
  }).withDefaultProperties(
    () => ({
      lastUsedInstanceId: null,
      lastActivityTimestamp: 0,
      cursor: { x: 0, y: 0 },
      viewportPageBounds: { x: 0, y: 0, w: 1, h: 1 },
      color: "#000000"
    })
  );

  // ../../../packages/tlschema/src/TLStore.ts
  function sortByIndex(a3, b3) {
    if (a3.index < b3.index) {
      return -1;
    } else if (a3.index > b3.index) {
      return 1;
    }
    return 0;
  }
  var USER_COLORS = [
    "#FF802B",
    "#EC5E41",
    "#F2555A",
    "#F04F88",
    "#E34BA9",
    "#BD54C6",
    "#9D5BD2",
    "#7B66DC",
    "#02B1CC",
    "#11B3A3",
    "#39B178",
    "#55B467"
  ];
  function redactRecordForErrorReporting(record) {
    if (record.typeName === "asset") {
      if ("src" in record) {
        record.src = "<redacted>";
      }
      if ("src" in record.props) {
        record.props.src = "<redacted>";
      }
    }
  }
  var onValidationFailure = ({ error, phase, record, recordBefore }) => {
    const isExistingValidationIssue = (
      // if we're initializing the store for the first time, we should
      // allow invalid records so people can load old buggy data:
      phase === "initialize"
    );
    annotateError(error, {
      tags: {
        origin: "store.validateRecord",
        storePhase: phase,
        isExistingValidationIssue
      },
      extras: {
        recordBefore: recordBefore ? redactRecordForErrorReporting(structuredClone(recordBefore)) : void 0,
        recordAfter: redactRecordForErrorReporting(structuredClone(record))
      }
    });
    throw error;
  };
  function getRandomColor() {
    return USER_COLORS[Math.floor(Math.random() * USER_COLORS.length)];
  }
  function getDefaultPages() {
    return [TLPage.create({ name: "Page 1", index: "a1" })];
  }
  function createIntegrityChecker(store) {
    const $pages = store.query.records("page");
    const $userDocumentSettings = store.query.record("user_document", () => ({
      userId: { eq: store.props.userId }
    }));
    const $instanceState = store.query.record("instance", () => ({
      id: { eq: store.props.instanceId }
    }));
    const $user = store.query.record("user", () => ({ id: { eq: store.props.userId } }));
    const $userPresences = store.query.records("user_presence");
    const $instancePageStates = store.query.records("instance_page_state");
    const ensureStoreIsUsable = () => {
      var _a5, _b2;
      const { userId, instanceId: tabId } = store.props;
      if (!store.has(TLDOCUMENT_ID)) {
        store.put([TLDocument.create({ id: TLDOCUMENT_ID })]);
        return ensureStoreIsUsable();
      }
      const userDocumentSettings = $userDocumentSettings.value;
      if (!userDocumentSettings) {
        store.put([TLUserDocument.create({ userId })]);
        return ensureStoreIsUsable();
      }
      const pages = $pages.value.sort(sortByIndex);
      if (pages.length === 0) {
        store.put(getDefaultPages());
        return ensureStoreIsUsable();
      }
      const instanceState = $instanceState.value;
      if (!instanceState) {
        const propsForNextShape = userDocumentSettings.lastUsedTabId ? (_a5 = store.get(userDocumentSettings.lastUsedTabId)) == null ? void 0 : _a5.propsForNextShape : void 0;
        const currentPageId2 = (_b2 = userDocumentSettings == null ? void 0 : userDocumentSettings.lastUpdatedPageId) != null ? _b2 : pages[0].id;
        store.put([
          TLInstance.create({
            id: tabId,
            userId,
            currentPageId: currentPageId2,
            propsForNextShape,
            exportBackground: true
          })
        ]);
        return ensureStoreIsUsable();
      }
      let currentPageId = instanceState.currentPageId;
      if (!pages.find((p3) => p3.id === currentPageId)) {
        currentPageId = pages[0].id;
        store.put([__spreadProps(__spreadValues({}, instanceState), { currentPageId })]);
        return ensureStoreIsUsable();
      }
      if (!$user.value) {
        store.put([TLUser.create({ id: userId })]);
        return ensureStoreIsUsable();
      }
      const userPresences = $userPresences.value.filter((r3) => r3.userId === userId);
      if (userPresences.length === 0) {
        store.put([TLUserPresence.create({ userId, color: getRandomColor() })]);
        return ensureStoreIsUsable();
      } else if (userPresences.length > 1) {
        store.remove(userPresences.slice(1).map((r3) => r3.id));
      }
      for (const page of pages) {
        const instancePageStates = $instancePageStates.value.filter(
          (tps) => tps.pageId === page.id && tps.instanceId === tabId
        );
        if (instancePageStates.length > 1) {
          store.remove(instancePageStates.slice(1).map((ips) => ips.id));
        } else if (instancePageStates.length === 0) {
          const camera2 = TLCamera.create({});
          store.put([
            camera2,
            TLInstancePageState.create({ pageId: page.id, instanceId: tabId, cameraId: camera2.id })
          ]);
          return ensureStoreIsUsable();
        }
        const camera = store.get(instancePageStates[0].cameraId);
        if (!camera) {
          store.put([TLCamera.create({ id: instancePageStates[0].cameraId })]);
          return ensureStoreIsUsable();
        }
      }
    };
    return ensureStoreIsUsable;
  }

  // ../../../packages/tlschema/src/assets/asset-validation.ts
  function createAssetValidator(type, props) {
    return validation_exports.object({
      id: assetIdValidator,
      typeName: validation_exports.literal("asset"),
      type: validation_exports.literal(type),
      props
    });
  }

  // ../../../packages/tlschema/src/assets/TLBookmarkAsset.ts
  var bookmarkAssetTypeValidator = createAssetValidator(
    "bookmark",
    validation_exports.object({
      title: validation_exports.string,
      description: validation_exports.string,
      image: validation_exports.string,
      src: validation_exports.string.nullable()
    })
  );
  var Versions8 = {
    Initial: 0
  };
  var bookmarkAssetMigrations = defineMigrations({
    firstVersion: Versions8.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions8.Initial,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {}
  });

  // ../../../packages/tlschema/src/assets/TLImageAsset.ts
  var imageAssetTypeValidator = createAssetValidator(
    "image",
    validation_exports.object({
      w: validation_exports.number,
      h: validation_exports.number,
      name: validation_exports.string,
      isAnimated: validation_exports.boolean,
      mimeType: validation_exports.string.nullable(),
      src: validation_exports.string.nullable()
    })
  );
  var Versions9 = {
    Initial: 0,
    AddIsAnimated: 1,
    RenameWidthHeight: 2
  };
  var imageAssetMigrations = defineMigrations({
    firstVersion: Versions9.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions9.RenameWidthHeight,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {
      [Versions9.AddIsAnimated]: {
        up: (asset) => {
          return __spreadProps(__spreadValues({}, asset), {
            props: __spreadProps(__spreadValues({}, asset.props), {
              isAnimated: false
            })
          });
        },
        down: (asset) => {
          const _a5 = asset.props, { isAnimated: isAnimated2 } = _a5, rest = __objRest(_a5, ["isAnimated"]);
          return __spreadProps(__spreadValues({}, asset), {
            props: rest
          });
        }
      },
      [Versions9.RenameWidthHeight]: {
        up: (asset) => {
          const _a5 = asset.props, { width, height } = _a5, others = __objRest(_a5, ["width", "height"]);
          return __spreadProps(__spreadValues({}, asset), { props: __spreadValues({ w: width, h: height }, others) });
        },
        down: (asset) => {
          const _a5 = asset.props, { w: w3, h: h3 } = _a5, others = __objRest(_a5, ["w", "h"]);
          return __spreadProps(__spreadValues({}, asset), { props: __spreadValues({ width: w3, height: h3 }, others) });
        }
      }
    }
  });

  // ../../../packages/tlschema/src/assets/TLVideoAsset.ts
  var videoAssetTypeValidator = createAssetValidator(
    "video",
    validation_exports.object({
      w: validation_exports.number,
      h: validation_exports.number,
      name: validation_exports.string,
      isAnimated: validation_exports.boolean,
      mimeType: validation_exports.string.nullable(),
      src: validation_exports.string.nullable()
    })
  );
  var Versions10 = {
    Initial: 0,
    AddIsAnimated: 1,
    RenameWidthHeight: 2
  };
  var videoAssetMigrations = defineMigrations({
    firstVersion: Versions10.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions10.RenameWidthHeight,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {
      [Versions10.AddIsAnimated]: {
        up: (asset) => {
          return __spreadProps(__spreadValues({}, asset), {
            props: __spreadProps(__spreadValues({}, asset.props), {
              isAnimated: false
            })
          });
        },
        down: (asset) => {
          const _a5 = asset.props, { isAnimated: isAnimated2 } = _a5, rest = __objRest(_a5, ["isAnimated"]);
          return __spreadProps(__spreadValues({}, asset), {
            props: rest
          });
        }
      },
      [Versions10.RenameWidthHeight]: {
        up: (asset) => {
          const _a5 = asset.props, { width, height } = _a5, others = __objRest(_a5, ["width", "height"]);
          return __spreadProps(__spreadValues({}, asset), { props: __spreadValues({ w: width, h: height }, others) });
        },
        down: (asset) => {
          const _a5 = asset.props, { w: w3, h: h3 } = _a5, others = __objRest(_a5, ["w", "h"]);
          return __spreadProps(__spreadValues({}, asset), { props: __spreadValues({ width: w3, height: h3 }, others) });
        }
      }
    }
  });

  // ../../../packages/tlschema/src/records/TLInstancePresence.ts
  var instancePresenceTypeValidator = validation_exports.model(
    "instance_presence",
    validation_exports.object({
      instanceId: idValidator("instance"),
      typeName: validation_exports.literal("instance_presence"),
      id: idValidator("instance_presence"),
      userId: userIdValidator,
      userName: validation_exports.string,
      lastActivityTimestamp: validation_exports.number,
      followingUserId: userIdValidator.nullable(),
      cursor: validation_exports.object({
        x: validation_exports.number,
        y: validation_exports.number,
        type: cursorTypeValidator,
        rotation: validation_exports.number
      }),
      color: validation_exports.string,
      camera: validation_exports.object({
        x: validation_exports.number,
        y: validation_exports.number,
        z: validation_exports.number
      }),
      screenBounds: validation_exports.boxModel,
      selectedIds: validation_exports.arrayOf(idValidator("shape")),
      currentPageId: idValidator("page"),
      brush: validation_exports.boxModel.nullable(),
      scribble: scribbleTypeValidator.nullable()
    })
  );
  var Versions11 = {
    Initial: 0
  };
  var userPresenceTypeMigrations2 = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions11.Initial,
    firstVersion: Versions11.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
    }
  });
  var TLInstancePresence = createRecordType("instance_presence", {
    migrations: userPresenceTypeMigrations2,
    validator: instancePresenceTypeValidator,
    scope: "presence"
  });

  // ../../../packages/tlschema/src/defaultDerivePresenceState.ts
  var defaultDerivePresenceState = (store) => {
    const $instance = store.query.record("instance", () => ({
      id: { eq: store.props.instanceId }
    }));
    const $user = store.query.record("user", () => ({ id: { eq: store.props.userId } }));
    const $userPresence = store.query.record("user_presence", () => ({
      userId: { eq: store.props.userId }
    }));
    const $pageState = store.query.record("instance_page_state", () => {
      var _a5, _b2;
      return {
        instanceId: { eq: store.props.instanceId },
        pageId: { eq: (_b2 = (_a5 = $instance.value) == null ? void 0 : _a5.currentPageId) != null ? _b2 : "" }
      };
    });
    const $camera = store.query.record("camera", () => {
      var _a5, _b2;
      return {
        id: { eq: (_b2 = (_a5 = $pageState.value) == null ? void 0 : _a5.cameraId) != null ? _b2 : "" }
      };
    });
    return computed("instancePresence", () => {
      const pageState = $pageState.value;
      const instance = $instance.value;
      const user = $user.value;
      const userPresence = $userPresence.value;
      const camera = $camera.value;
      if (!pageState || !instance || !user || !userPresence || !camera) {
        return null;
      }
      return TLInstancePresence.create({
        id: TLInstancePresence.createCustomId(store.props.instanceId),
        instanceId: store.props.instanceId,
        selectedIds: pageState.selectedIds,
        brush: instance.brush,
        scribble: instance.scribble,
        userId: store.props.userId,
        userName: user.name,
        followingUserId: instance.followingUserId,
        camera: {
          x: camera.x,
          y: camera.y,
          z: camera.z
        },
        color: userPresence.color,
        currentPageId: instance.currentPageId,
        cursor: {
          x: userPresence.cursor.x,
          y: userPresence.cursor.y,
          rotation: instance.cursor.rotation,
          type: instance.cursor.type
        },
        lastActivityTimestamp: userPresence.lastActivityTimestamp,
        screenBounds: instance.screenBounds
      });
    });
  };

  // ../../../packages/tlschema/src/records/TLAsset.ts
  var assetTypeValidator = validation_exports.model(
    "asset",
    validation_exports.union("type", {
      image: imageAssetTypeValidator,
      video: videoAssetTypeValidator,
      bookmark: bookmarkAssetTypeValidator
    })
  );
  var Versions12 = {
    Initial: 0
  };
  var assetTypeMigrations = defineMigrations({
    firstVersion: Versions12.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions12.Initial,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {},
    subTypeKey: "type",
    subTypeMigrations: {
      image: imageAssetMigrations,
      video: videoAssetMigrations,
      bookmark: bookmarkAssetMigrations
    }
  });
  var TLAsset = createRecordType("asset", {
    migrations: assetTypeMigrations,
    validator: assetTypeValidator,
    scope: "document"
  });

  // ../../../packages/tlschema/src/records/TLShape.ts
  var Versions13 = {
    Initial: 0,
    AddIsLocked: 1
  };
  var rootShapeTypeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions13.AddIsLocked,
    firstVersion: Versions13.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions13.AddIsLocked]: {
        up: (record) => {
          return __spreadProps(__spreadValues({}, record), {
            isLocked: false
          });
        },
        down: (record) => {
          const _a5 = record, { isLocked: _ } = _a5, rest = __objRest(_a5, ["isLocked"]);
          return __spreadValues({}, rest);
        }
      }
    }
  });
  function isShape(record) {
    if (!record)
      return false;
    return record.typeName === "shape";
  }
  function isShapeId(id) {
    if (!id)
      return false;
    return id.startsWith("shape:");
  }
  function createShapeId() {
    return `shape:${nanoid()}`;
  }
  function createCustomShapeId(id) {
    return `shape:${id}`;
  }

  // ../../../packages/tlschema/src/schema.ts
  var Versions14 = {
    Initial: 0,
    RemoveCodeAndIconShapeTypes: 1,
    AddInstancePresenceType: 2
  };
  var storeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    firstVersion: Versions14.Initial,
    currentVersion: Versions14.AddInstancePresenceType,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions14.RemoveCodeAndIconShapeTypes]: {
        up: (store) => {
          return Object.fromEntries(
            Object.entries(store).filter(
              ([_, v3]) => v3.typeName !== "shape" || v3.type !== "icon" && v3.type !== "code"
            )
          );
        },
        down: (store) => {
          return store;
        }
      },
      [Versions14.AddInstancePresenceType]: {
        up: (store) => {
          return store;
        },
        down: (store) => {
          return Object.fromEntries(
            Object.entries(store).filter(([_, v3]) => v3.typeName !== "instance_presence")
          );
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/shape-validation.ts
  function createShapeValidator(type, props) {
    return validation_exports.object({
      id: shapeIdValidator,
      typeName: validation_exports.literal("shape"),
      x: validation_exports.number,
      y: validation_exports.number,
      rotation: validation_exports.number,
      index: validation_exports.string,
      parentId: parentIdValidator,
      type: validation_exports.literal(type),
      isLocked: validation_exports.boolean,
      props
    });
  }

  // ../../../packages/tlschema/src/shapes/TLArrowShape.ts
  var arrowTerminalTypeValidator = validation_exports.union("type", {
    binding: validation_exports.object({
      type: validation_exports.literal("binding"),
      boundShapeId: shapeIdValidator,
      normalizedAnchor: validation_exports.point,
      isExact: validation_exports.boolean
    }),
    point: validation_exports.object({
      type: validation_exports.literal("point"),
      x: validation_exports.number,
      y: validation_exports.number
    })
  });
  var arrowShapeTypeValidator = createShapeValidator(
    "arrow",
    validation_exports.object({
      labelColor: colorValidator,
      color: colorValidator,
      fill: fillValidator,
      dash: dashValidator,
      size: sizeValidator,
      opacity: opacityValidator,
      arrowheadStart: arrowheadValidator,
      arrowheadEnd: arrowheadValidator,
      font: fontValidator,
      start: arrowTerminalTypeValidator,
      end: arrowTerminalTypeValidator,
      bend: validation_exports.number,
      text: validation_exports.string
    })
  );
  var Versions15 = {
    Initial: 0,
    AddLabelColor: 1
  };
  var arrowShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions15.AddLabelColor,
    firstVersion: Versions15.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions15.AddLabelColor]: {
        up: (record) => {
          return __spreadProps(__spreadValues({}, record), {
            props: __spreadProps(__spreadValues({}, record.props), {
              labelColor: "black"
            })
          });
        },
        down: (record) => {
          const _a5 = record.props, { labelColor: _ } = _a5, props = __objRest(_a5, ["labelColor"]);
          return __spreadProps(__spreadValues({}, record), {
            props
          });
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/TLBookmarkShape.ts
  var bookmarkShapeTypeValidator = createShapeValidator(
    "bookmark",
    validation_exports.object({
      opacity: opacityValidator,
      w: validation_exports.nonZeroNumber,
      h: validation_exports.nonZeroNumber,
      assetId: assetIdValidator.nullable(),
      url: validation_exports.string
    })
  );
  var Versions16 = {
    Initial: 0,
    NullAssetId: 1
  };
  var bookmarkShapeMigrations = defineMigrations({
    firstVersion: Versions16.Initial,
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions16.NullAssetId,
    // STEP 3: Add an up+down migration for the new version here
    migrators: {
      [Versions16.NullAssetId]: {
        up: (shape) => {
          if (shape.props.assetId === void 0) {
            return __spreadProps(__spreadValues({}, shape), { props: __spreadProps(__spreadValues({}, shape.props), { assetId: null }) });
          }
          return shape;
        },
        down: (shape) => {
          if (shape.props.assetId === null) {
            const _a5 = shape.props, { assetId: _ } = _a5, props = __objRest(_a5, ["assetId"]);
            return __spreadProps(__spreadValues({}, shape), { props });
          }
          return shape;
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/TLDrawShape.ts
  var TL_DRAW_SHAPE_SEGMENT_TYPE = /* @__PURE__ */ new Set(["free", "straight"]);
  var drawShapeTypeValidator = createShapeValidator(
    "draw",
    validation_exports.object({
      color: colorValidator,
      fill: fillValidator,
      dash: dashValidator,
      size: sizeValidator,
      opacity: opacityValidator,
      segments: validation_exports.arrayOf(
        validation_exports.object({
          type: validation_exports.setEnum(TL_DRAW_SHAPE_SEGMENT_TYPE),
          points: validation_exports.arrayOf(validation_exports.point)
        })
      ),
      isComplete: validation_exports.boolean,
      isClosed: validation_exports.boolean,
      isPen: validation_exports.boolean
    })
  );
  var Versions17 = {
    Initial: 0,
    AddInPen: 1
  };
  var drawShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    firstVersion: Versions17.Initial,
    currentVersion: Versions17.AddInPen,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions17.AddInPen]: {
        up: (shape) => {
          const { points: points2 } = shape.props.segments[0];
          if (points2.length === 0) {
            return __spreadProps(__spreadValues({}, shape), {
              props: __spreadProps(__spreadValues({}, shape.props), {
                isPen: false
              })
            });
          }
          let isPen = !(points2[0].z === 0 || points2[0].z === 0.5);
          if (points2[1]) {
            isPen = isPen && !(points2[1].z === 0 || points2[1].z === 0.5);
          }
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, shape.props), {
              isPen
            })
          });
        },
        down: (shape) => {
          const _a5 = shape.props, { isPen: _isPen } = _a5, propsWithOutIsPen = __objRest(_a5, ["isPen"]);
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadValues({}, propsWithOutIsPen)
          });
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/TLEmbedShape.ts
  var tlEmbedShapePermissionDefaults = {
    // ========================================================================================
    // Disabled permissions
    // ========================================================================================
    // [MDN] Experimental: Allows for downloads to occur without a gesture from the user.
    // [REASON] Disabled because otherwise the <iframe/> trick the user on behalf of us to performing an action
    "allow-downloads-without-user-activation": false,
    // [MDN] Allows for downloads to occur with a gesture from the user.
    // [REASON] Disabled because otherwise the <iframe/> trick the user on behalf of us to performing an action
    "allow-downloads": false,
    // [MDN] Lets the resource open modal windows.
    // [REASON] The <iframe/> could 'window.prompt("Enter your tldraw password")'
    "allow-modals": false,
    // [MDN] Lets the resource lock the screen orientation.
    // [REASON] Would interfer with tldraw interface
    "allow-orientation-lock": false,
    // [MDN] Lets the resource use the Pointer Lock API.
    // [REASON] Maybe we should allow this for games embeds (scratch/codepen/codesandbox)
    "allow-pointer-lock": false,
    // [MDN] Allows popups (such as window.open(), target="_blank", or showModalDialog()). If this keyword is not used, the popup will silently fail to open.
    // [REASON] We shouldn't allow popups as a embed could pretend to be us by opening a mocked version of tldraw. This is very unobvious when it is performed as an action within out app
    "allow-popups": true,
    // [MDN] Lets the sandboxed document open new windows without those windows inheriting the sandboxing. For example, this can safely sandbox an advertisement without forcing the same restrictions upon the page the ad links to.
    // [REASON] We're alread disabling popups.
    "allow-popups-to-escape-sandbox": false,
    // [MDN] Lets the resource start a presentation session.
    // [REASON] Prevents embed from navigating away from tldraw and pretending to be us
    "allow-presentation": false,
    // [MDN] Experimental: Lets the resource request access to the parent's storage capabilities with the Storage Access API.
    // [REASON] We don't want anyone else to access our storage
    "allow-storage-access-by-user-activation": false,
    // [MDN] Lets the resource navigate the top-level browsing context (the one named _top).
    // [REASON] Prevents embed from navigating away from tldraw and pretending to be us
    "allow-top-navigation": false,
    // [MDN] Lets the resource navigate the top-level browsing context, but only if initiated by a user gesture.
    // [REASON] Prevents embed from navigating away from tldraw and pretending to be us
    "allow-top-navigation-by-user-activation": false,
    // ========================================================================================
    // Enabled permissions
    // ========================================================================================
    // [MDN] Lets the resource run scripts (but not create popup windows).
    "allow-scripts": true,
    // [MDN] If this token is not used, the resource is treated as being from a special origin that always fails the same-origin policy (potentially preventing access to data storage/cookies and some JavaScript APIs).
    "allow-same-origin": true,
    // [MDN] Allows the resource to submit forms. If this keyword is not used, form submission is blocked.
    "allow-forms": true
  };
  var embedShapeTypeValidator = createShapeValidator(
    "embed",
    validation_exports.object({
      opacity: opacityValidator,
      w: validation_exports.nonZeroNumber,
      h: validation_exports.nonZeroNumber,
      url: validation_exports.string,
      tmpOldUrl: validation_exports.string.optional(),
      doesResize: validation_exports.boolean,
      overridePermissions: validation_exports.dict(
        validation_exports.setEnum(
          new Set(Object.keys(tlEmbedShapePermissionDefaults))
        ),
        validation_exports.boolean.optional()
      ).optional()
    })
  );
  var TLDRAW_APP_RE = /(^\/r\/[^/]+\/?$)/;
  var safeParseUrl = (url) => {
    try {
      return new URL(url);
    } catch (err) {
      return;
    }
  };
  var EMBED_DEFINITIONS = [
    {
      type: "tldraw",
      title: "tldraw",
      hostnames: ["beta.tldraw.com", "lite.tldraw.com", "www.tldraw.com"],
      minWidth: 300,
      minHeight: 300,
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE)) {
          return url;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(TLDRAW_APP_RE)) {
          return url;
        }
        return;
      }
    },
    {
      type: "codesandbox",
      title: "CodeSandbox",
      hostnames: ["codesandbox.io"],
      minWidth: 300,
      minHeight: 300,
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const matches = urlObj && urlObj.pathname.match(/\/s\/([^/]+)\/?/);
        if (matches) {
          return `https://codesandbox.io/embed/${matches[1]}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const matches = urlObj && urlObj.pathname.match(/\/embed\/([^/]+)\/?/);
        if (matches) {
          return `https://codesandbox.io/s/${matches[1]}`;
        }
        return;
      }
    },
    {
      type: "codepen",
      title: "Codepen",
      hostnames: ["codepen.io"],
      minWidth: 300,
      minHeight: 300,
      width: 520,
      height: 400,
      doesResize: true,
      toEmbedUrl: (url) => {
        const CODEPEN_URL_REGEXP = /https:\/\/codepen.io\/([^/]+)\/pen\/([^/]+)/;
        const matches = url.match(CODEPEN_URL_REGEXP);
        if (matches) {
          const [_, user, id] = matches;
          return `https://codepen.io/${user}/embed/${id}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const CODEPEN_EMBED_REGEXP = /https:\/\/codepen.io\/([^/]+)\/embed\/([^/]+)/;
        const matches = url.match(CODEPEN_EMBED_REGEXP);
        if (matches) {
          const [_, user, id] = matches;
          return `https://codepen.io/${user}/pen/${id}`;
        }
        return;
      }
    },
    {
      type: "scratch",
      title: "Scratch",
      hostnames: ["scratch.mit.edu"],
      width: 520,
      height: 400,
      doesResize: false,
      toEmbedUrl: (url) => {
        const SCRATCH_URL_REGEXP = /https?:\/\/scratch.mit.edu\/projects\/([^/]+)/;
        const matches = url.match(SCRATCH_URL_REGEXP);
        if (matches) {
          const [_, id] = matches;
          return `https://scratch.mit.edu/projects/embed/${id}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const SCRATCH_EMBED_REGEXP = /https:\/\/scratch.mit.edu\/projects\/embed\/([^/]+)/;
        const matches = url.match(SCRATCH_EMBED_REGEXP);
        if (matches) {
          const [_, id] = matches;
          return `https://scratch.mit.edu/projects/${id}`;
        }
        return;
      }
    },
    {
      type: "youtube",
      title: "YouTube",
      hostnames: ["*.youtube.com", "youtube.com", "youtu.be"],
      width: 800,
      height: 450,
      doesResize: true,
      overridePermissions: {
        "allow-presentation": true
      },
      isAspectRatioLocked: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (!urlObj)
          return;
        const hostname = urlObj.hostname.replace(/^www./, "");
        if (hostname === "youtu.be") {
          const videoId = urlObj.pathname.split("/").filter(Boolean)[0];
          return `https://www.youtube.com/embed/${videoId}`;
        } else if ((hostname === "youtube.com" || hostname === "m.youtube.com") && urlObj.pathname.match(/^\/watch/)) {
          const videoId = urlObj.searchParams.get("v");
          return `https://www.youtube.com/embed/${videoId}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (!urlObj)
          return;
        const hostname = urlObj.hostname.replace(/^www./, "");
        if (hostname === "youtube.com") {
          const matches = urlObj.pathname.match(/^\/embed\/([^/]+)\/?/);
          if (matches) {
            return `https://www.youtube.com/watch?v=${matches[1]}`;
          }
        }
        return;
      }
    },
    {
      type: "figma",
      title: "Figma",
      hostnames: ["figma.com"],
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        if (!!url.match(
          // eslint-disable-next-line no-useless-escape
          /https:\/\/([\w\.-]+\.)?figma.com\/(file|proto)\/([0-9a-zA-Z]{22,128})(?:\/.*)?$/
        ) && !url.includes("figma.com/embed")) {
          return `https://www.figma.com/embed?embed_host=share&url=${url}`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/?$/)) {
          const outUrl = urlObj.searchParams.get("url");
          if (outUrl) {
            return outUrl;
          }
        }
        return;
      }
    },
    {
      type: "google_maps",
      title: "Google Maps",
      hostnames: ["google.*"],
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        if (url.includes("/maps/")) {
          const match = url.match(/@(.*),(.*),(.*)z/);
          let result;
          if (match) {
            const [, lat, lng, z2] = match;
            const host = new URL(url).host.replace("www.", "");
            result = `https://${host}/maps/embed/v1/view?key=${process.env.NEXT_PUBLIC_GC_API_KEY}&center=${lat},${lng}&zoom=${z2}`;
          } else {
            result = "";
          }
          return result;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (!urlObj)
          return;
        const matches = urlObj.pathname.match(/^\/maps\/embed\/v1\/view\/?$/);
        if (matches && urlObj.searchParams.has("center") && urlObj.searchParams.get("zoom")) {
          const zoom = urlObj.searchParams.get("zoom");
          const [lat, lon] = urlObj.searchParams.get("center").split(",");
          return `https://www.google.com/maps/@${lat},${lon},${zoom}z`;
        }
        return;
      }
    },
    {
      type: "google_calendar",
      title: "Google Calendar",
      hostnames: ["calendar.google.*"],
      width: 720,
      height: 500,
      minWidth: 460,
      minHeight: 360,
      doesResize: true,
      instructionLink: "https://support.google.com/calendar/answer/41207?hl=en",
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const cidQs = urlObj == null ? void 0 : urlObj.searchParams.get("cid");
        if ((urlObj == null ? void 0 : urlObj.pathname.match(/\/calendar\/u\/0/)) && cidQs) {
          urlObj.pathname = "/calendar/embed";
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          urlObj.searchParams.set("src", cidQs);
          return urlObj.href;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        const srcQs = urlObj == null ? void 0 : urlObj.searchParams.get("src");
        if ((urlObj == null ? void 0 : urlObj.pathname.match(/\/calendar\/embed/)) && srcQs) {
          urlObj.pathname = "/calendar/u/0";
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          urlObj.searchParams.set("cid", srcQs);
          return urlObj.href;
        }
        return;
      }
    },
    {
      type: "google_slides",
      title: "Google Slides",
      hostnames: ["docs.google.*"],
      width: 720,
      height: 500,
      minWidth: 460,
      minHeight: 360,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if ((urlObj == null ? void 0 : urlObj.pathname.match(/^\/presentation/)) && (urlObj == null ? void 0 : urlObj.pathname.match(/\/pub\/?$/))) {
          urlObj.pathname = urlObj.pathname.replace(/\/pub$/, "/embed");
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          return urlObj.href;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if ((urlObj == null ? void 0 : urlObj.pathname.match(/^\/presentation/)) && (urlObj == null ? void 0 : urlObj.pathname.match(/\/embed\/?$/))) {
          urlObj.pathname = urlObj.pathname.replace(/\/embed$/, "/pub");
          const keys = Array.from(urlObj.searchParams.keys());
          for (const key of keys) {
            urlObj.searchParams.delete(key);
          }
          return urlObj.href;
        }
        return;
      }
    },
    {
      type: "github_gist",
      title: "GitHub Gist",
      hostnames: ["gist.github.com"],
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([^/]+)/)) {
          return url;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/([^/]+)\/([^/]+)/)) {
          return url;
        }
        return;
      }
    },
    {
      type: "replit",
      title: "Replit",
      hostnames: ["replit.com"],
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/)) {
          return `${url}?embed=true`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/\/@([^/]+)\/([^/]+)/) && urlObj.searchParams.has("embed")) {
          urlObj.searchParams.delete("embed");
          return urlObj.href;
        }
        return;
      }
    },
    {
      type: "felt",
      title: "Felt",
      hostnames: ["felt.com"],
      width: 720,
      height: 500,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/map\//)) {
          return urlObj.origin + "/embed" + urlObj.pathname;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/map\//)) {
          urlObj.pathname = urlObj.pathname.replace(/^\/embed/, "");
          return urlObj.href;
        }
        return;
      }
    },
    {
      type: "spotify",
      title: "Spotify",
      hostnames: ["open.spotify.com"],
      width: 720,
      height: 500,
      minHeight: 500,
      overrideOutlineRadius: 12,
      doesResize: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/(artist|album)\//)) {
          return urlObj.origin + "/embed" + urlObj.pathname;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/(artist|album)\//)) {
          return urlObj.origin + urlObj.pathname.replace(/^\/embed/, "");
        }
        return;
      }
    },
    {
      type: "vimeo",
      title: "Vimeo",
      hostnames: ["vimeo.com", "player.vimeo.com"],
      width: 640,
      height: 360,
      doesResize: true,
      isAspectRatioLocked: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hostname === "vimeo.com") {
          if (urlObj.pathname.match(/^\/[0-9]+/)) {
            return "https://player.vimeo.com/video/" + urlObj.pathname.split("/")[1] + "?title=0&byline=0";
          }
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hostname === "player.vimeo.com") {
          const matches = urlObj.pathname.match(/^\/video\/([^/]+)\/?$/);
          if (matches) {
            return "https://vimeo.com/" + matches[1];
          }
        }
        return;
      }
    },
    {
      type: "excalidraw",
      title: "Excalidraw",
      hostnames: ["excalidraw.com"],
      width: 720,
      height: 500,
      doesResize: true,
      isAspectRatioLocked: true,
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hash.match(/#room=/)) {
          return url;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.hash.match(/#room=/)) {
          return url;
        }
        return;
      }
    },
    {
      type: "observable",
      title: "Observable",
      hostnames: ["observablehq.com"],
      width: 720,
      height: 500,
      doesResize: true,
      isAspectRatioLocked: false,
      backgroundColor: "#fff",
      toEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/@([^/]+)\/([^/]+)\/?$/)) {
          return `${urlObj.origin}/embed${urlObj.pathname}?cell=*`;
        }
        if (urlObj && urlObj.pathname.match(/^\/d\/([^/]+)\/?$/)) {
          const pathName = urlObj.pathname.replace(/^\/d/, "");
          return `${urlObj.origin}/embed${pathName}?cell=*`;
        }
        return;
      },
      fromEmbedUrl: (url) => {
        const urlObj = safeParseUrl(url);
        if (urlObj && urlObj.pathname.match(/^\/embed\/@([^/]+)\/([^/]+)\/?$/)) {
          return `${urlObj.origin}${urlObj.pathname.replace("/embed", "")}#cell-*`;
        }
        if (urlObj && urlObj.pathname.match(/^\/embed\/([^/]+)\/?$/)) {
          return `${urlObj.origin}${urlObj.pathname.replace("/embed", "/d")}#cell-*`;
        }
        return;
      }
    }
  ];
  var Versions18 = {
    Initial: 0,
    GenOriginalUrlInEmbed: 1
  };
  var embedShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions18.GenOriginalUrlInEmbed,
    firstVersion: Versions18.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions18.GenOriginalUrlInEmbed]: {
        // add tmpOldUrl property
        up: (shape) => {
          const url = shape.props.url;
          const host = new URL(url).host.replace("www.", "");
          let originalUrl;
          for (const localEmbedDef of EMBED_DEFINITIONS) {
            if (localEmbedDef.hostnames.includes(host)) {
              try {
                originalUrl = localEmbedDef.fromEmbedUrl(url);
              } catch (err) {
                console.warn(err);
              }
            }
          }
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, shape.props), {
              tmpOldUrl: shape.props.url,
              url: originalUrl != null ? originalUrl : ""
            })
          });
        },
        // remove tmpOldUrl property
        down: (shape) => {
          let newUrl = shape.props.tmpOldUrl;
          if (!newUrl || newUrl === "") {
            const url = shape.props.url;
            const host = new URL(url).host.replace("www.", "");
            for (const localEmbedDef of EMBED_DEFINITIONS) {
              if (localEmbedDef.hostnames.includes(host)) {
                try {
                  newUrl = localEmbedDef.toEmbedUrl(url);
                } catch (err) {
                  console.warn(err);
                }
              }
            }
          }
          const _a5 = shape.props, { tmpOldUrl } = _a5, props = __objRest(_a5, ["tmpOldUrl"]);
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, props), {
              url: newUrl != null ? newUrl : ""
            })
          });
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/TLFrameShape.ts
  var frameShapeTypeValidator = createShapeValidator(
    "frame",
    validation_exports.object({
      opacity: opacityValidator,
      w: validation_exports.nonZeroNumber,
      h: validation_exports.nonZeroNumber,
      name: validation_exports.string
    })
  );
  var Versions19 = {
    Initial: 0
  };
  var frameShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions19.Initial,
    firstVersion: Versions19.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
    }
  });

  // ../../../packages/tlschema/src/shapes/TLGeoShape.ts
  var geoShapeTypeValidator = createShapeValidator(
    "geo",
    validation_exports.object({
      geo: geoValidator,
      labelColor: colorValidator,
      color: colorValidator,
      fill: fillValidator,
      dash: dashValidator,
      size: sizeValidator,
      opacity: opacityValidator,
      font: fontValidator,
      align: alignValidator,
      url: validation_exports.string,
      w: validation_exports.nonZeroNumber,
      h: validation_exports.nonZeroNumber,
      growY: validation_exports.positiveNumber,
      text: validation_exports.string
    })
  );
  var Versions20 = {
    Initial: 0,
    AddUrlProp: 1,
    AddLabelColor: 2,
    RemoveJustify: 3,
    AddCheckBox: 4
  };
  var geoShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    firstVersion: Versions20.Initial,
    currentVersion: Versions20.AddCheckBox,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions20.AddUrlProp]: {
        up: (shape) => {
          return __spreadProps(__spreadValues({}, shape), { props: __spreadProps(__spreadValues({}, shape.props), { url: "" }) });
        },
        down: (shape) => {
          const _a5 = shape.props, { url: _ } = _a5, props = __objRest(_a5, ["url"]);
          return __spreadProps(__spreadValues({}, shape), { props });
        }
      },
      [Versions20.AddLabelColor]: {
        up: (record) => {
          return __spreadProps(__spreadValues({}, record), {
            props: __spreadProps(__spreadValues({}, record.props), {
              labelColor: "black"
            })
          });
        },
        down: (record) => {
          const _a5 = record.props, { labelColor: _ } = _a5, props = __objRest(_a5, ["labelColor"]);
          return __spreadProps(__spreadValues({}, record), {
            props
          });
        }
      },
      [Versions20.RemoveJustify]: {
        up: (shape) => {
          let newAlign = shape.props.align;
          if (newAlign === "justify") {
            newAlign = "start";
          }
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, shape.props), {
              align: newAlign
            })
          });
        },
        down: (shape) => {
          return __spreadValues({}, shape);
        }
      },
      [Versions20.AddCheckBox]: {
        up: (shape) => {
          return __spreadValues({}, shape);
        },
        down: (shape) => {
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, shape.props), {
              geo: shape.props.geo === "check-box" ? "rectangle" : shape.props.geo
            })
          });
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/TLGroupShape.ts
  var groupShapeTypeValidator = createShapeValidator(
    "group",
    validation_exports.object({
      opacity: opacityValidator
    })
  );
  var Versions21 = {
    Initial: 0
  };
  var groupShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions21.Initial,
    firstVersion: Versions21.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
    }
  });

  // ../../../packages/tlschema/src/shapes/TLImageShape.ts
  var cropValidator = validation_exports.object({
    topLeft: validation_exports.point,
    bottomRight: validation_exports.point
  });
  var imageShapeTypeValidator = createShapeValidator(
    "image",
    validation_exports.object({
      opacity: opacityValidator,
      w: validation_exports.nonZeroNumber,
      h: validation_exports.nonZeroNumber,
      playing: validation_exports.boolean,
      url: validation_exports.string,
      assetId: assetIdValidator.nullable(),
      crop: cropValidator.nullable()
    })
  );
  var Versions22 = {
    Initial: 0,
    AddUrlProp: 1,
    AddCropProp: 2
  };
  var imageShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    firstVersion: Versions22.Initial,
    currentVersion: Versions22.AddCropProp,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions22.AddUrlProp]: {
        up: (shape) => {
          return __spreadProps(__spreadValues({}, shape), { props: __spreadProps(__spreadValues({}, shape.props), { url: "" }) });
        },
        down: (shape) => {
          const _a5 = shape.props, { url: _ } = _a5, props = __objRest(_a5, ["url"]);
          return __spreadProps(__spreadValues({}, shape), { props });
        }
      },
      [Versions22.AddCropProp]: {
        up: (shape) => {
          return __spreadProps(__spreadValues({}, shape), { props: __spreadProps(__spreadValues({}, shape.props), { crop: null }) });
        },
        down: (shape) => {
          const _a5 = shape.props, { crop: _ } = _a5, props = __objRest(_a5, ["crop"]);
          return __spreadProps(__spreadValues({}, shape), { props });
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/TLLineShape.ts
  var lineShapeTypeValidator = createShapeValidator(
    "line",
    validation_exports.object({
      color: colorValidator,
      dash: dashValidator,
      size: sizeValidator,
      opacity: opacityValidator,
      spline: splineValidator,
      handles: validation_exports.dict(validation_exports.string, handleTypeValidator)
    })
  );
  var Versions23 = {
    Initial: 0
  };
  var lineShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions23.Initial,
    firstVersion: Versions23.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
    }
  });

  // ../../../packages/tlschema/src/shapes/TLNoteShape.ts
  var noteShapeTypeValidator = createShapeValidator(
    "note",
    validation_exports.object({
      color: colorValidator,
      size: sizeValidator,
      font: fontValidator,
      align: alignValidator,
      opacity: opacityValidator,
      growY: validation_exports.positiveNumber,
      url: validation_exports.string,
      text: validation_exports.string
    })
  );
  var Versions24 = {
    Initial: 0,
    AddUrlProp: 1,
    RemoveJustify: 2
  };
  var noteShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    firstVersion: Versions24.Initial,
    currentVersion: Versions24.RemoveJustify,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions24.AddUrlProp]: {
        up: (shape) => {
          return __spreadProps(__spreadValues({}, shape), { props: __spreadProps(__spreadValues({}, shape.props), { url: "" }) });
        },
        down: (shape) => {
          const _a5 = shape.props, { url: _ } = _a5, props = __objRest(_a5, ["url"]);
          return __spreadProps(__spreadValues({}, shape), { props });
        }
      },
      [Versions24.RemoveJustify]: {
        up: (shape) => {
          let newAlign = shape.props.align;
          if (newAlign === "justify") {
            newAlign = "start";
          }
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, shape.props), {
              align: newAlign
            })
          });
        },
        down: (shape) => {
          return __spreadValues({}, shape);
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/TLTextShape.ts
  var textShapeTypeValidator = createShapeValidator(
    "text",
    validation_exports.object({
      color: colorValidator,
      size: sizeValidator,
      font: fontValidator,
      align: alignValidator,
      opacity: opacityValidator,
      w: validation_exports.nonZeroNumber,
      text: validation_exports.string,
      scale: validation_exports.nonZeroNumber,
      autoSize: validation_exports.boolean
    })
  );
  var Versions25 = {
    Initial: 0,
    RemoveJustify: 1
  };
  var textShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    firstVersion: Versions25.Initial,
    currentVersion: Versions25.RemoveJustify,
    migrators: {
      [Versions25.RemoveJustify]: {
        up: (shape) => {
          let newAlign = shape.props.align;
          if (newAlign === "justify") {
            newAlign = "start";
          }
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, shape.props), {
              align: newAlign
            })
          });
        },
        down: (shape) => {
          return __spreadValues({}, shape);
        }
      }
    }
  });

  // ../../../packages/tlschema/src/shapes/TLVideoShape.ts
  var videoShapeTypeValidator = createShapeValidator(
    "video",
    validation_exports.object({
      opacity: opacityValidator,
      w: validation_exports.nonZeroNumber,
      h: validation_exports.nonZeroNumber,
      time: validation_exports.number,
      playing: validation_exports.boolean,
      url: validation_exports.string,
      assetId: assetIdValidator.nullable()
    })
  );
  var Versions26 = {
    Initial: 0,
    AddUrlProp: 1
  };
  var videoShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    firstVersion: Versions26.Initial,
    currentVersion: Versions26.AddUrlProp,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
      [Versions26.AddUrlProp]: {
        up: (shape) => {
          return __spreadProps(__spreadValues({}, shape), { props: __spreadProps(__spreadValues({}, shape.props), { url: "" }) });
        },
        down: (shape) => {
          const _a5 = shape.props, { url: _ } = _a5, props = __objRest(_a5, ["url"]);
          return __spreadProps(__spreadValues({}, shape), { props });
        }
      }
    }
  });

  // ../../../packages/tlschema/src/createTLSchema.ts
  var CORE_SHAPE_DEFS = [
    { type: "draw", migrations: drawShapeMigrations, validator: drawShapeTypeValidator },
    { type: "text", migrations: textShapeMigrations, validator: textShapeTypeValidator },
    { type: "line", migrations: lineShapeMigrations, validator: lineShapeTypeValidator },
    { type: "arrow", migrations: arrowShapeMigrations, validator: arrowShapeTypeValidator },
    { type: "image", migrations: imageShapeMigrations, validator: imageShapeTypeValidator },
    { type: "video", migrations: videoShapeMigrations, validator: videoShapeTypeValidator },
    { type: "geo", migrations: geoShapeMigrations, validator: geoShapeTypeValidator },
    { type: "note", migrations: noteShapeMigrations, validator: noteShapeTypeValidator },
    { type: "group", migrations: groupShapeMigrations, validator: groupShapeTypeValidator },
    {
      type: "bookmark",
      migrations: bookmarkShapeMigrations,
      validator: bookmarkShapeTypeValidator
    },
    { type: "frame", migrations: frameShapeMigrations, validator: frameShapeTypeValidator },
    { type: "embed", migrations: embedShapeMigrations, validator: embedShapeTypeValidator }
  ];
  function createTLSchema({
    customShapeDefs,
    allowUnknownShapes,
    derivePresenceState
  }) {
    const allShapeDefs = [...CORE_SHAPE_DEFS, ...customShapeDefs != null ? customShapeDefs : []];
    const typeSet = /* @__PURE__ */ new Set();
    for (const shapeDef of allShapeDefs) {
      if (typeSet.has(shapeDef.type)) {
        throw new Error(`Shape type ${shapeDef.type} is already defined`);
      }
      typeSet.add(shapeDef.type);
    }
    const shapeTypeMigrations = defineMigrations({
      currentVersion: rootShapeTypeMigrations.currentVersion,
      firstVersion: rootShapeTypeMigrations.firstVersion,
      migrators: rootShapeTypeMigrations.migrators,
      subTypeKey: "type",
      subTypeMigrations: Object.fromEntries(allShapeDefs.map((def) => [def.type, def.migrations]))
    });
    let shapeValidator = validation_exports.union("type", __spreadValues({}, Object.fromEntries(allShapeDefs.map((def) => {
      var _a5;
      return [def.type, (_a5 = def.validator) != null ? _a5 : validation_exports.any];
    }))));
    if (allowUnknownShapes) {
      shapeValidator = shapeValidator.validateUnknownVariants((shape) => shape);
    }
    const shapeRecord = createRecordType("shape", {
      migrations: shapeTypeMigrations,
      validator: validation_exports.model("shape", shapeValidator),
      scope: "document"
    }).withDefaultProperties(() => ({ x: 0, y: 0, rotation: 0, isLocked: false }));
    return StoreSchema.create(
      {
        asset: TLAsset,
        camera: TLCamera,
        document: TLDocument,
        instance: TLInstance,
        instance_page_state: TLInstancePageState,
        page: TLPage,
        shape: shapeRecord,
        user: TLUser,
        user_document: TLUserDocument,
        user_presence: TLUserPresence,
        instance_presence: TLInstancePresence
      },
      {
        snapshotMigrations: storeMigrations,
        onValidationFailure,
        createIntegrityChecker,
        derivePresenceState: derivePresenceState != null ? derivePresenceState : defaultDerivePresenceState
      }
    );
  }

  // ../../../packages/tlschema/src/fixup.ts
  function CLIENT_FIXUP_SCRIPT(persistedStore) {
    const records = Object.values(persistedStore);
    for (let i3 = 0; i3 < records.length; i3++) {
      if (!records[i3])
        continue;
      const { record } = fixupRecord(records[i3]);
      if (record) {
        persistedStore[records[i3].id] = record;
      } else {
        delete persistedStore[records[i3].id];
      }
    }
    return persistedStore;
  }
  function fixupRecord(oldRecord) {
    const issues = [];
    let record = JSON.parse(JSON.stringify(oldRecord));
    switch (record.typeName) {
      case "user_presence": {
        if (!record.cursor) {
          issues.push("no cursor");
          record.cursor = { x: 0, y: 0 };
        }
        if (record.cursor.x === void 0 || record.cursor.x === null) {
          issues.push("no cursor x");
          record.cursor.x = 0;
        }
        if (record.cursor.y === void 0 || record.cursor.y === null) {
          issues.push("no cursor y");
          record.cursor.y = 0;
        }
        break;
      }
      case "asset": {
        switch (record.type) {
          case "image":
          case "video": {
            if (!record.props) {
              issues.push("no props in asset");
              record.props = {
                w: 100,
                h: 100,
                name: "old_asset",
                isAnimated: false,
                mimeType: null,
                src: null
              };
            }
            if (!record.props.mimeType) {
              issues.push("no mimeType in asset props");
              record.props.mimeType = "image/png";
            }
            if (!record.props.src) {
              issues.push("no src in asset props");
              record.props.src = "";
            }
            if (record.props.isAnimated == null) {
              issues.push("no isAnimated in asset props");
              record.props.isAnimated = false;
            }
            if (record.props.name === void 0) {
              record.props.name = "asset";
            }
            if ("width" in record) {
              issues.push("width in asset");
              record.props.w = record.width;
              delete record.width;
            }
            if ("width" in record.props && typeof record.props.width === "number" && record.props.width) {
              issues.push("no w in asset props");
              record.props.w = record.props.width;
              delete record.props.width;
            }
            if ("height" in record) {
              issues.push("height in asset");
              record.props.h = record.height;
              delete record.height;
            }
            if ("height" in record.props && typeof record.props.height === "number" && record.props.height) {
              issues.push("no h in asset props");
              record.props.h = record.props.height;
              delete record.props.height;
            }
            if (!record.props.w) {
              issues.push("no w in asset props");
              record.props.w = 100;
            }
            if (!record.props.h) {
              issues.push("no h in asset props");
              record.props.h = 100;
            }
            if ("src" in record) {
              issues.push("src in asset");
              record.props.src = record.src;
              delete record.src;
            }
            if ("name" in record) {
              issues.push("name in asset");
              delete record.name;
            }
            break;
          }
          case "bookmark":
            if (!record.props) {
              issues.push("no asset props");
              record.props = {
                title: "",
                description: "",
                image: "",
                src: "url" in record && typeof record.url === "string" ? record.url : ""
              };
            }
            if (!record.props.title) {
              issues.push("no title in bookmark asset props");
              record.props.title = "";
            }
            if (!record.props.description) {
              issues.push("no description in bookmark asset props");
              record.props.description = "";
            }
            if (!record.props.image) {
              issues.push("no image in bookmark asset props");
              record.props.image = "";
            }
            if ("src" in record) {
              issues.push("leftover src in bookmark asset");
              delete record.src;
            }
            if ("width" in record) {
              issues.push("leftover width in bookmark asset");
              delete record.width;
            }
            if ("height" in record) {
              issues.push("leftover height in bookmark asset");
              delete record.height;
            }
            if ("name" in record) {
              issues.push("leftover name in bookmark asset");
              delete record.name;
            }
            if ("meta" in record) {
              delete record.meta;
            }
            break;
        }
        break;
      }
      case "camera": {
        if (record.x === void 0 || record.x === null) {
          issues.push("no x in camera");
          record.x = 0;
        }
        if (record.y === void 0 || record.y === null) {
          issues.push("no y in camera");
          record.y = 0;
        }
        break;
      }
      case "instance": {
        if ("props" in record) {
          issues.push("leftover props in instance");
          delete record.props;
        }
        if (record.isToolLocked === void 0) {
          issues.push("no isToolLocked in instance");
          record.isToolLocked = false;
        }
        if (record.propsForNextShape === void 0) {
          issues.push("no props in instance");
          record.propsForNextShape = {
            opacity: "1",
            color: "black",
            dash: "draw",
            fill: "none",
            size: "m",
            icon: "file",
            font: "draw",
            align: "middle",
            geo: "rectangle",
            arrowheadStart: "none",
            arrowheadEnd: "arrow",
            spline: "line"
          };
        }
        if ("url" in record.propsForNextShape) {
          issues.push("leftover url in instance.propsForNextShape");
          delete record.propsForNextShape.url;
        }
        if ("lang" in record.propsForNextShape) {
          issues.push("leftover lang in instance.propsForNextShape");
          delete record.propsForNextShape.lang;
        }
        if (record.exportBackground === void 0) {
          issues.push(`no export background in ${record.typeName}`);
          record.exportBackground = false;
        }
        if (record.brush === void 0) {
          issues.push(`no brush in ${record.typeName}`);
          record.brush = null;
        }
        if (record.scribble === void 0) {
          issues.push(`no scribble in ${record.typeName}`);
          record.scribble = null;
        }
        if (record.dialog !== void 0) {
          issues.push(`no dialog in ${record.typeName}`);
          delete record.dialog;
        }
        if (record.screenBounds === void 0) {
          issues.push(`no screen bounds in ${record.typeName}`);
          record.screenBounds = { x: 0, y: 0, w: 1080, h: 720 };
        }
        break;
      }
      case "user": {
        if (!record.name) {
          issues.push(`no name in user`);
          record.name = "User";
        }
        if (!record.locale) {
          issues.push(`no locale in user`);
          record.locale = "en";
        }
        if ("cursor" in record) {
          issues.push("leftover cursor in user");
          delete record.cursor;
        }
        if ("color" in record) {
          issues.push("leftover color in user");
          delete record.color;
        }
        if ("brush" in record) {
          issues.push("leftover brush in user");
          delete record.brush;
        }
        if ("selectedIds" in record) {
          issues.push("leftover selectedIds in user");
          delete record.selectedIds;
        }
        if ("scribble" in record) {
          issues.push("leftover scribble in user");
          delete record.scribble;
        }
        if ("currentPageId" in record) {
          issues.push("leftover currentPageId in user");
          delete record.currentPageId;
        }
        break;
      }
      case "user_document": {
        if (record.isMobileMode === void 0) {
          issues.push(`no ismobilemode in user document`);
          record.isMobileMode = false;
        }
        if (record.isSnapMode === void 0) {
          issues.push(`no issnapmode in user document`);
          record.isSnapMode = false;
        }
        break;
      }
      case "shape": {
        if ("url" in record) {
          delete record.url;
        }
        if (record.x === void 0 || record.x === null) {
          issues.push(`some bug in ${record.typeName} ${record.type}`);
          record.x = 0;
        }
        if (record.y === void 0 || record.y === null) {
          issues.push(`some bug in ${record.typeName} ${record.type}`);
          record.y = 0;
        }
        if (record.type === "image") {
          if (record.props.playing === void 0) {
            issues.push(`some bug in ${record.typeName} ${record.type}`);
            record.props.playing = false;
          }
          if ("loaded" in record.props) {
            delete record.props.loaded;
          }
        }
        if (record.type === "arrow") {
          if (record.props.start.type === "binding") {
            if (record.props.start.normalizedAnchor.x === void 0 || record.props.start.normalizedAnchor.x === null) {
              issues.push(`some bug in ${record.typeName} ${record.type}`);
              record.props.start.normalizedAnchor.x = 0;
            }
            if (record.props.start.normalizedAnchor.y === void 0 || record.props.start.normalizedAnchor.y === null) {
              issues.push(`some bug in ${record.typeName} ${record.type}`);
              record.props.start.normalizedAnchor.y = 0;
            }
          } else {
            if (record.props.start.x === void 0 || record.props.start.x === null) {
              issues.push(`some bug in ${record.typeName} ${record.type}`);
              record.props.start.x = 0;
            }
            if (record.props.start.y === void 0 || record.props.start.y === null) {
              issues.push(`some bug in ${record.typeName} ${record.type}`);
              record.props.start.y = 0;
            }
            if ("boundShapeId" in record.props.start) {
              issues.push(`leftover bound shape id in arrow`);
              delete record.props.start.boundShapeId;
            }
            if ("normalizedAnchor" in record.props.start) {
              issues.push(`leftover normalize anchor in arrow`);
              delete record.props.start.normalizedAnchor;
            }
            if ("isExact" in record.props.start) {
              issues.push(`leftover isExact in arrow`);
              delete record.props.start.isExact;
            }
          }
          if (record.props.end.type === "binding") {
            if (record.props.end.normalizedAnchor.x === void 0 || record.props.end.normalizedAnchor.x === null) {
              issues.push(`some bug in ${record.typeName}  ${record.type}`);
              record.props.end.normalizedAnchor.x = 0;
            }
            if (record.props.end.normalizedAnchor.y === void 0 || record.props.end.normalizedAnchor.y === null) {
              issues.push(`some bug in ${record.typeName} ${record.type}`);
              record.props.end.normalizedAnchor.y = 0;
            }
          } else {
            if (record.props.end.x === void 0 || record.props.end.x === null) {
              issues.push(`no x in arrow end`);
              record.props.end.x = 0;
            }
            if (record.props.end.y === void 0 || record.props.end.y === null) {
              issues.push(`no y in arrow end`);
              record.props.end.y = 0;
            }
            if ("boundShapeId" in record.props.end) {
              issues.push(`leftover bound shape id in arrow`);
              delete record.props.end.boundShapeId;
            }
            if ("normalizedAnchor" in record.props.end) {
              issues.push(`leftover normalize anchor in arrow`);
              delete record.props.end.normalizedAnchor;
            }
            if ("isExact" in record.props.end) {
              issues.push(`leftover isExact in arrow`);
              delete record.props.end.isExact;
            }
          }
        }
        if (record.type === "note" || record.type === "video" || record.type === "image" || record.type === "geo" || record.type === "bookmark") {
          if (record.props.url === void 0) {
            issues.push(`missing url prop in ${record.type} shape`);
            record.props.url = "";
          }
        }
        if (record.type === "bookmark") {
          if (record.props.assetId === void 0) {
            issues.push(`some bug in ${record.typeName}  ${record.type}`);
            record.props.assetId = null;
          }
          if ("src" in record) {
            issues.push(`leftover src in bookmark`);
            delete record.src;
          }
        }
        if (record.type === "geo") {
          if ("width" in record.props) {
            issues.push(`leftover width in geo`);
            delete record.props.width;
          }
          if ("height" in record.props) {
            issues.push(`leftover height in geo`);
            delete record.props.height;
          }
        }
        if (record.type === "draw") {
          if (record.props.segments === void 0) {
            issues.push(`some bug in ${record.typeName}  ${record.type}`);
            record.props.segments = [
              {
                points: [
                  { x: 0, y: 0, z: 0.5 },
                  { x: 1, y: 1, z: 0.5 }
                ],
                type: "free"
              }
            ];
          }
          for (const segment of record.props.segments) {
            for (const point2 of segment.points) {
              if (point2.x === void 0 || point2.y === null) {
                issues.push(`some bug in ${record.typeName}`);
                point2.x = 0;
              }
              if (point2.y === void 0 || point2.y === null) {
                issues.push(`some bug in ${record.typeName}`);
                point2.y = 0;
              }
            }
          }
          if ("points" in record.props) {
            delete record.props.points;
          }
        }
        if (record.type === "bookmark") {
          if ("loaded" in record.props) {
            issues.push("leftover loaded in bookmark");
            delete record.props.loaded;
          }
        }
        if (record.type === "draw") {
          if ("points" in record.props && record.props.segments === void 0) {
            record.props.segments = [{ type: "free", points: record.props.points }];
          }
        }
        if (record.type === "image") {
          if (record.props.w < 1) {
            record.props.w = 1;
            issues.push(`zero w image in ${record.typeName}`);
          }
          if (record.props.h < 1) {
            record.props.h = 1;
            issues.push(`zero h image in ${record.typeName}`);
          }
        }
        if (record.type === "embed") {
          if ("loaded" in record.props) {
            issues.push("leftover loaded in embed");
            delete record.props.loaded;
          }
        }
        break;
      }
      case void 0: {
        record = null;
      }
    }
    return { record, issues };
  }

  // ../../../packages/tlschema/src/shapes/TLIconShape.ts
  var iconShapeTypeValidator = createShapeValidator(
    "icon",
    validation_exports.object({
      size: sizeValidator,
      icon: iconValidator,
      dash: dashValidator,
      color: colorValidator,
      opacity: opacityValidator,
      scale: validation_exports.number
    })
  );
  var Versions27 = {
    Initial: 0
  };
  var iconShapeMigrations = defineMigrations({
    // STEP 2: Update the current version to point to your latest version
    currentVersion: Versions27.Initial,
    firstVersion: Versions27.Initial,
    migrators: {
      // STEP 3: Add an up+down migration for the new version here
    }
  });

  // ../../../packages/editor/src/lib/TldrawEditor.tsx
  var import_react41 = __toESM(require_react());

  // ../../../packages/primitives/src/lib/easings.ts
  var EASINGS = {
    linear: (t4) => t4,
    easeInQuad: (t4) => t4 * t4,
    easeOutQuad: (t4) => t4 * (2 - t4),
    easeInOutQuad: (t4) => t4 < 0.5 ? 2 * t4 * t4 : -1 + (4 - 2 * t4) * t4,
    easeInCubic: (t4) => t4 * t4 * t4,
    easeOutCubic: (t4) => --t4 * t4 * t4 + 1,
    easeInOutCubic: (t4) => t4 < 0.5 ? 4 * t4 * t4 * t4 : (t4 - 1) * (2 * t4 - 2) * (2 * t4 - 2) + 1,
    easeInQuart: (t4) => t4 * t4 * t4 * t4,
    easeOutQuart: (t4) => 1 - --t4 * t4 * t4 * t4,
    easeInOutQuart: (t4) => t4 < 0.5 ? 8 * t4 * t4 * t4 * t4 : 1 - 8 * --t4 * t4 * t4 * t4,
    easeInQuint: (t4) => t4 * t4 * t4 * t4 * t4,
    easeOutQuint: (t4) => 1 + --t4 * t4 * t4 * t4 * t4,
    easeInOutQuint: (t4) => t4 < 0.5 ? 16 * t4 * t4 * t4 * t4 * t4 : 1 + 16 * --t4 * t4 * t4 * t4 * t4,
    easeInSine: (t4) => 1 - Math.cos(t4 * Math.PI / 2),
    easeOutSine: (t4) => Math.sin(t4 * Math.PI / 2),
    easeInOutSine: (t4) => -(Math.cos(Math.PI * t4) - 1) / 2,
    easeInExpo: (t4) => t4 <= 0 ? 0 : Math.pow(2, 10 * t4 - 10),
    easeOutExpo: (t4) => t4 >= 1 ? 1 : 1 - Math.pow(2, -10 * t4),
    easeInOutExpo: (t4) => t4 <= 0 ? 0 : t4 >= 1 ? 1 : t4 < 0.5 ? Math.pow(2, 20 * t4 - 10) / 2 : (2 - Math.pow(2, -20 * t4 + 10)) / 2
  };

  // ../../../packages/primitives/src/lib/Vec2d.ts
  var Vec2d = class {
    constructor(x3 = 0, y3 = 0, z2 = 1) {
      this.x = x3;
      this.y = y3;
      this.z = z2;
    }
    get pressure() {
      return this.z;
    }
    set(x3 = this.x, y3 = this.y, z2 = this.z) {
      this.x = x3;
      this.y = y3;
      this.z = z2;
      return this;
    }
    setTo({ x: x3 = 0, y: y3 = 0, z: z2 = 1 }) {
      this.x = x3;
      this.y = y3;
      this.z = z2;
      return this;
    }
    rot(r3) {
      if (r3 === 0)
        return this;
      const { x: x3, y: y3 } = this;
      const s3 = Math.sin(r3);
      const c3 = Math.cos(r3);
      this.x = x3 * c3 - y3 * s3;
      this.y = x3 * s3 + y3 * c3;
      return this;
    }
    rotWith(C2, r3) {
      if (r3 === 0)
        return this;
      const x3 = this.x - C2.x;
      const y3 = this.y - C2.y;
      const s3 = Math.sin(r3);
      const c3 = Math.cos(r3);
      this.x = C2.x + (x3 * c3 - y3 * s3);
      this.y = C2.y + (x3 * s3 + y3 * c3);
      return this;
    }
    clone() {
      const { x: x3, y: y3, z: z2 } = this;
      return new Vec2d(x3, y3, z2);
    }
    sub(V2) {
      this.x -= V2.x;
      this.y -= V2.y;
      return this;
    }
    subXY(x3, y3) {
      this.x -= x3;
      this.y -= y3;
      return this;
    }
    subScalar(n3) {
      this.x -= n3;
      this.y -= n3;
      return this;
    }
    add(V2) {
      this.x += V2.x;
      this.y += V2.y;
      return this;
    }
    addXY(x3, y3) {
      this.x += x3;
      this.y += y3;
      return this;
    }
    addScalar(n3) {
      this.x += n3;
      this.y += n3;
      return this;
    }
    clamp(min2, max) {
      this.x = Math.max(this.x, min2);
      this.y = Math.max(this.y, min2);
      if (max !== void 0) {
        this.x = Math.min(this.x, max);
        this.y = Math.min(this.y, max);
      }
      return this;
    }
    div(t4) {
      this.x /= t4;
      this.y /= t4;
      return this;
    }
    divV(V2) {
      this.x /= V2.x;
      this.y /= V2.y;
      return this;
    }
    mul(t4) {
      this.x *= t4;
      this.y *= t4;
      return this;
    }
    mulV(V2) {
      this.x *= V2.x;
      this.y *= V2.y;
      return this;
    }
    abs() {
      this.x = Math.abs(this.x);
      this.y = Math.abs(this.y);
      return this;
    }
    nudge(B, distance) {
      const tan = Vec2d.Tan(B, this);
      return this.add(tan.mul(distance));
    }
    neg() {
      this.x *= -1;
      this.y *= -1;
      return this;
    }
    cross(V2) {
      this.x = this.y * V2.z - this.z * V2.y;
      this.y = this.z * V2.x - this.x * V2.z;
      return this;
    }
    dpr(V2) {
      return Vec2d.Dpr(this, V2);
    }
    cpr(V2) {
      return Vec2d.Cpr(this, V2);
    }
    len2() {
      return Vec2d.Len2(this);
    }
    len() {
      return Vec2d.Len(this);
    }
    pry(V2) {
      return Vec2d.Pry(this, V2);
    }
    per() {
      const { x: x3, y: y3 } = this;
      this.x = y3;
      this.y = -x3;
      return this;
    }
    uni() {
      return Vec2d.Uni(this);
    }
    tan(V2) {
      return Vec2d.Tan(this, V2);
    }
    dist(V2) {
      return Vec2d.Dist(this, V2);
    }
    distanceToLineSegment(A2, B) {
      return Vec2d.DistanceToLineSegment(A2, B, this);
    }
    slope(B) {
      return Vec2d.Slope(this, B);
    }
    snapToGrid(gridSize) {
      this.x = Math.round(this.x / gridSize) * gridSize;
      this.y = Math.round(this.y / gridSize) * gridSize;
      return this;
    }
    angle(B) {
      return Vec2d.Angle(this, B);
    }
    toAngle() {
      return Vec2d.ToAngle(this);
    }
    lrp(B, t4) {
      this.x = this.x + (B.x - this.x) * t4;
      this.y = this.y + (B.y - this.y) * t4;
      return this;
    }
    equals(B) {
      return Vec2d.Equals(this, B);
    }
    equalsXY(x3, y3) {
      return Vec2d.EqualsXY(this, x3, y3);
    }
    norm() {
      const l3 = this.len();
      this.x = l3 === 0 ? 0 : this.x / l3;
      this.y = l3 === 0 ? 0 : this.y / l3;
      return this;
    }
    toFixed() {
      return Vec2d.ToFixed(this);
    }
    toString() {
      return Vec2d.ToString(Vec2d.ToFixed(this));
    }
    toJson() {
      return Vec2d.ToJson(this);
    }
    toArray() {
      return Vec2d.ToArray(this);
    }
    static Add(A2, B) {
      return new Vec2d(A2.x + B.x, A2.y + B.y);
    }
    static AddXY(A2, x3, y3) {
      return new Vec2d(A2.x + x3, A2.y + y3);
    }
    static Sub(A2, B) {
      return new Vec2d(A2.x - B.x, A2.y - B.y);
    }
    static SubXY(A2, x3, y3) {
      return new Vec2d(A2.x - x3, A2.y - y3);
    }
    static AddScalar(A2, n3) {
      return new Vec2d(A2.x + n3, A2.y + n3);
    }
    static SubScalar(A2, n3) {
      return new Vec2d(A2.x - n3, A2.y - n3);
    }
    static Div(A2, t4) {
      return new Vec2d(A2.x / t4, A2.y / t4);
    }
    static Mul(A2, t4) {
      return new Vec2d(A2.x * t4, A2.y * t4);
    }
    static DivV(A2, B) {
      return new Vec2d(A2.x / B.x, A2.y / B.y);
    }
    static MulV(A2, B) {
      return new Vec2d(A2.x * B.x, A2.y * B.y);
    }
    static Neg(A2) {
      return new Vec2d(-A2.x, -A2.y);
    }
    static Per(A2) {
      return new Vec2d(A2.y, -A2.x);
    }
    static Dist2(A2, B) {
      return Vec2d.Sub(A2, B).len2();
    }
    static Abs(A2) {
      return new Vec2d(Math.abs(A2.x), Math.abs(A2.y));
    }
    static Dist(A2, B) {
      return Math.hypot(A2.y - B.y, A2.x - B.x);
    }
    static Dpr(A2, B) {
      return A2.x * B.x + A2.y * B.y;
    }
    static Cross(A2, V2) {
      return new Vec2d(
        A2.y * V2.z - A2.z * V2.y,
        A2.z * V2.x - A2.x * V2.z
        // A.z = A.x * V.y - A.y * V.x
      );
    }
    static Cpr(A2, B) {
      return A2.x * B.y - B.x * A2.y;
    }
    static Len2(A2) {
      return A2.x * A2.x + A2.y * A2.y;
    }
    static Len(A2) {
      return Math.sqrt(Vec2d.Len2(A2));
    }
    static Pry(A2, B) {
      return Vec2d.Dpr(A2, B) / Vec2d.Len(B);
    }
    static Uni(A2) {
      return Vec2d.Div(A2, Vec2d.Len(A2));
    }
    static Tan(A2, B) {
      return Vec2d.Uni(Vec2d.Sub(A2, B));
    }
    static Min(A2, B) {
      return new Vec2d(Math.min(A2.x, B.x), Math.min(A2.y, B.y));
    }
    static Max(A2, B) {
      return new Vec2d(Math.max(A2.x, B.x), Math.max(A2.y, B.y));
    }
    static From({ x: x3, y: y3, z: z2 = 1 }) {
      return new Vec2d(x3, y3, z2);
    }
    static FromArray(v3) {
      return new Vec2d(v3[0], v3[1]);
    }
    static Rot(A2, r3 = 0) {
      const s3 = Math.sin(r3);
      const c3 = Math.cos(r3);
      return new Vec2d(A2.x * c3 - A2.y * s3, A2.x * s3 + A2.y * c3);
    }
    static RotWith(A2, C2, r3) {
      const x3 = A2.x - C2.x;
      const y3 = A2.y - C2.y;
      const s3 = Math.sin(r3);
      const c3 = Math.cos(r3);
      return new Vec2d(C2.x + (x3 * c3 - y3 * s3), C2.y + (x3 * s3 + y3 * c3));
    }
    /**
     * Get the nearest point on a line with a known unit vector that passes through point A
     *
     * ```ts
     * Vec.nearestPointOnLineThroughPoint(A, u, Point)
     * ```
     *
     * @param A - Any point on the line
     * @param u - The unit vector for the line.
     * @param P - A point not on the line to test.
     */
    static NearestPointOnLineThroughPoint(A2, u3, P2) {
      return Vec2d.Mul(u3, Vec2d.Sub(P2, A2).pry(u3)).add(A2);
    }
    static NearestPointOnLineSegment(A2, B, P2, clamp3 = true) {
      const u3 = Vec2d.Tan(B, A2);
      const C2 = Vec2d.Add(A2, Vec2d.Mul(u3, Vec2d.Sub(P2, A2).pry(u3)));
      if (clamp3) {
        if (C2.x < Math.min(A2.x, B.x))
          return Vec2d.Cast(A2.x < B.x ? A2 : B);
        if (C2.x > Math.max(A2.x, B.x))
          return Vec2d.Cast(A2.x > B.x ? A2 : B);
        if (C2.y < Math.min(A2.y, B.y))
          return Vec2d.Cast(A2.y < B.y ? A2 : B);
        if (C2.y > Math.max(A2.y, B.y))
          return Vec2d.Cast(A2.y > B.y ? A2 : B);
      }
      return C2;
    }
    static DistanceToLineThroughPoint(A2, u3, P2) {
      return Vec2d.Dist(P2, Vec2d.NearestPointOnLineThroughPoint(A2, u3, P2));
    }
    static DistanceToLineSegment(A2, B, P2, clamp3 = true) {
      return Vec2d.Dist(P2, Vec2d.NearestPointOnLineSegment(A2, B, P2, clamp3));
    }
    static Snap(A2, step = 1) {
      return new Vec2d(Math.round(A2.x / step) * step, Math.round(A2.y / step) * step);
    }
    static Cast(A2) {
      if (A2 instanceof Vec2d)
        return A2;
      return Vec2d.From(A2);
    }
    static Slope(A2, B) {
      if (A2.x === B.y)
        return NaN;
      return (A2.y - B.y) / (A2.x - B.x);
    }
    static Angle(A2, B) {
      return Math.atan2(B.y - A2.y, B.x - A2.x);
    }
    static Lrp(A2, B, t4) {
      return Vec2d.Sub(B, A2).mul(t4).add(A2);
    }
    static Med(A2, B) {
      return new Vec2d((A2.x + B.x) / 2, (A2.y + B.y) / 2);
    }
    static Equals(A2, B) {
      return Math.abs(A2.x - B.x) < 1e-4 && Math.abs(A2.y - B.y) < 1e-4;
    }
    static EqualsXY(A2, x3, y3) {
      return A2.x === x3 && A2.y === y3;
    }
    static Clockwise(A2, B, C2) {
      return (C2.x - A2.x) * (B.y - A2.y) - (B.x - A2.x) * (C2.y - A2.y) < 0;
    }
    static Rescale(A2, n3) {
      const l3 = Vec2d.Len(A2);
      return new Vec2d(n3 * A2.x / l3, n3 * A2.y / l3);
    }
    static ScaleWithOrigin(A2, scale, origin) {
      return Vec2d.Sub(A2, origin).mul(scale).add(origin);
    }
    static ToFixed(A2, n3 = 2) {
      return new Vec2d(+A2.x.toFixed(n3), +A2.y.toFixed(n3), +A2.z.toFixed(n3));
    }
    static Nudge(A2, B, distance) {
      return Vec2d.Add(A2, Vec2d.Tan(B, A2).mul(distance));
    }
    static ToString(A2) {
      return `${A2.x}, ${A2.y}`;
    }
    static ToAngle(A2) {
      let r3 = Math.atan2(A2.y, A2.x);
      if (r3 < 0)
        r3 += Math.PI * 2;
      return r3;
    }
    static ToArray(A2) {
      return [A2.x, A2.y, A2.z];
    }
    static ToJson(A2) {
      const { x: x3, y: y3, z: z2 } = A2;
      return { x: x3, y: y3, z: z2 };
    }
    static Average(arr) {
      const len = arr.length;
      const avg = new Vec2d(0, 0);
      for (let i3 = 0; i3 < len; i3++) {
        avg.add(arr[i3]);
      }
      return avg.div(len);
    }
    static Clamp(A2, min2, max) {
      if (max === void 0) {
        return new Vec2d(Math.min(Math.max(A2.x, min2)), Math.min(Math.max(A2.y, min2)));
      }
      return new Vec2d(Math.min(Math.max(A2.x, min2), max), Math.min(Math.max(A2.y, min2), max));
    }
    /**
     * Get an array of points (with simulated pressure) between two points.
     *
     * @param A - The first point.
     * @param B - The second point.
     * @param steps - The number of points to return.
     */
    static PointsBetween(A2, B, steps = 6) {
      const results = [];
      for (let i3 = 0; i3 < steps; i3++) {
        const t4 = EASINGS.easeInQuad(i3 / (steps - 1));
        const point2 = Vec2d.Lrp(A2, B, t4);
        point2.z = Math.min(1, 0.5 + Math.abs(0.5 - ease(t4)) * 0.65);
        results.push(point2);
      }
      return results;
    }
    static SnapToGrid(A2, gridSize = 8) {
      return new Vec2d(Math.round(A2.x / gridSize) * gridSize, Math.round(A2.y / gridSize) * gridSize);
    }
  };
  var ease = (t4) => t4 < 0.5 ? 2 * t4 * t4 : -1 + (4 - 2 * t4) * t4;

  // ../../../packages/primitives/src/lib/utils.ts
  var PI = Math.PI;
  var TAU = PI / 2;
  var PI2 = PI * 2;
  var EPSILON = Math.PI / 180;
  var SIN = Math.sin;
  function clamp(n3, min2, max) {
    return Math.max(min2, typeof max !== "undefined" ? Math.min(n3, max) : n3);
  }
  function toPrecision(n3, precision = 1e10) {
    if (!n3)
      return 0;
    return Math.round(n3 * precision) / precision;
  }
  function approximately(a3, b3, precision = 1e-6) {
    return Math.abs(a3 - b3) <= precision;
  }
  function perimeterOfEllipse(rx, ry) {
    const h3 = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2);
    const p3 = PI * (rx + ry) * (1 + 3 * h3 / (10 + Math.sqrt(4 - 3 * h3)));
    return p3;
  }
  function canolicalizeRotation(a3) {
    a3 = a3 % PI2;
    if (a3 < 0) {
      a3 = a3 + PI2;
    } else if (a3 === 0) {
      a3 = 0;
    }
    return a3;
  }
  function shortAngleDist(a0, a1) {
    const da = (a1 - a0) % PI2;
    return 2 * da % PI2 - da;
  }
  function longAngleDist(a0, a1) {
    return PI2 - shortAngleDist(a0, a1);
  }
  function lerpAngles(a0, a1, t4) {
    return a0 + shortAngleDist(a0, a1) * t4;
  }
  function angleDelta(a0, a1) {
    return shortAngleDist(a0, a1);
  }
  function getSweep(C2, A2, B) {
    return angleDelta(Vec2d.Angle(C2, A2), Vec2d.Angle(C2, B));
  }
  function clampRadians(r3) {
    return (PI2 + r3) % PI2;
  }
  function snapAngle(r3, segments) {
    const seg = PI2 / segments;
    let ang = Math.floor((clampRadians(r3) + seg / 2) / seg) * seg % PI2;
    if (ang < PI)
      ang += PI2;
    if (ang > PI)
      ang -= PI2;
    return ang;
  }
  function areAnglesCompatible(a3, b3) {
    return a3 === b3 || approximately(a3 % (Math.PI / 2) - b3 % (Math.PI / 2), 0);
  }
  function degreesToRadians(d3) {
    return d3 * PI / 180;
  }
  function radiansToDegrees(r3) {
    return r3 * 180 / PI;
  }
  function getArcLength(C2, r3, A2, B) {
    const sweep = getSweep(C2, A2, B);
    return r3 * PI2 * (sweep / PI2);
  }
  function getPointOnCircle(cx, cy, r3, a3) {
    return new Vec2d(cx + r3 * Math.cos(a3), cy + r3 * Math.sin(a3));
  }
  function getPolygonVertices(width, height, sides) {
    const cx = width / 2;
    const cy = height / 2;
    const pointsOnPerimeter = [];
    for (let i3 = 0; i3 < sides; i3++) {
      const step = PI2 / sides;
      const t4 = -TAU + i3 * step;
      pointsOnPerimeter.push(new Vec2d(cx + cx * Math.cos(t4), cy + cy * Math.sin(t4)));
    }
    return pointsOnPerimeter;
  }
  function rangesOverlap(a0, a1, b0, b1) {
    return a0 < b1 && b0 < a1;
  }
  function rangeIntersection(a0, a1, b0, b1) {
    const min2 = Math.max(a0, b0);
    const max = Math.min(a1, b1);
    if (min2 <= max) {
      return [min2, max];
    }
    return null;
  }
  var getStarBounds = (sides, w3, h3) => {
    const step = PI2 / sides / 2;
    const rightMostIndex = Math.floor(sides / 4) * 2;
    const leftMostIndex = sides * 2 - rightMostIndex;
    const topMostIndex = 0;
    const bottomMostIndex = Math.floor(sides / 2) * 2;
    const maxX = Math.cos(-TAU + rightMostIndex * step) * w3 / 2;
    const minX = Math.cos(-TAU + leftMostIndex * step) * w3 / 2;
    const minY = Math.sin(-TAU + topMostIndex * step) * h3 / 2;
    const maxY = Math.sin(-TAU + bottomMostIndex * step) * h3 / 2;
    return new Box2d(0, 0, maxX - minX, maxY - minY);
  };
  function cross(x3, y3, z2) {
    return (y3.x - x3.x) * (z2.y - x3.y) - (z2.x - x3.x) * (y3.y - x3.y);
  }
  function pointInPolygon(A2, points2) {
    let windingNumber = 0;
    let a3;
    let b3;
    for (let i3 = 0; i3 < points2.length; i3++) {
      a3 = points2[i3];
      b3 = points2[(i3 + 1) % points2.length];
      if (a3.y <= A2.y) {
        if (b3.y > A2.y && cross(a3, b3, A2) > 0) {
          windingNumber += 1;
        }
      } else if (b3.y <= A2.y && cross(a3, b3, A2) < 0) {
        windingNumber -= 1;
      }
    }
    return windingNumber !== 0;
  }
  function pointNearToPolyline(A2, points2, distance = 8) {
    const len = points2.length;
    for (let i3 = 1; i3 < len; i3++) {
      const p1 = points2[i3 - 1];
      const p22 = points2[i3];
      const d3 = Vec2d.DistanceToLineSegment(p1, p22, A2);
      if (d3 < distance)
        return true;
    }
    return false;
  }
  function toDomPrecision(v3) {
    return +v3.toFixed(4);
  }

  // ../../../packages/primitives/src/lib/Box2d.ts
  var _Box2d = class {
    constructor(x3 = 0, y3 = 0, w3 = 0, h3 = 0) {
      __publicField(this, "x", 0);
      __publicField(this, "y", 0);
      __publicField(this, "w", 0);
      __publicField(this, "h", 0);
      this.x = x3;
      this.y = y3;
      this.w = w3;
      this.h = h3;
    }
    get point() {
      return new Vec2d(this.x, this.y);
    }
    set point(val) {
      this.x = val.x;
      this.y = val.y;
    }
    get minX() {
      return this.x;
    }
    set minX(n3) {
      this.x = n3;
    }
    get midX() {
      return this.x + this.w / 2;
    }
    get maxX() {
      return this.x + this.w;
    }
    get minY() {
      return this.y;
    }
    set minY(n3) {
      this.y = n3;
    }
    get midY() {
      return this.y + this.h / 2;
    }
    get maxY() {
      return this.y + this.h;
    }
    get width() {
      return this.w;
    }
    set width(n3) {
      this.w = n3;
    }
    get height() {
      return this.h;
    }
    set height(n3) {
      this.h = n3;
    }
    get aspectRatio() {
      return this.width / this.height;
    }
    get center() {
      return new Vec2d(this.midX, this.midY);
    }
    set center(v3) {
      this.minX = v3.x - this.width / 2;
      this.minY = v3.y - this.height / 2;
    }
    get corners() {
      return [
        new Vec2d(this.minX, this.minY),
        new Vec2d(this.maxX, this.minY),
        new Vec2d(this.maxX, this.maxY),
        new Vec2d(this.minX, this.maxY)
      ];
    }
    get snapPoints() {
      return [
        new Vec2d(this.minX, this.minY),
        new Vec2d(this.maxX, this.minY),
        new Vec2d(this.maxX, this.maxY),
        new Vec2d(this.minX, this.maxY),
        this.center
      ];
    }
    get sides() {
      const { corners } = this;
      return [
        [corners[0], corners[1]],
        [corners[1], corners[2]],
        [corners[2], corners[3]],
        [corners[3], corners[0]]
      ];
    }
    get size() {
      return new Vec2d(this.w, this.h);
    }
    toFixed() {
      this.x = toPrecision(this.x);
      this.y = toPrecision(this.y);
      this.w = toPrecision(this.w);
      this.h = toPrecision(this.h);
      return this;
    }
    setTo(B) {
      this.x = B.x;
      this.y = B.y;
      this.w = B.w;
      this.h = B.h;
      return this;
    }
    set(x3 = 0, y3 = 0, w3 = 0, h3 = 0) {
      this.x = x3;
      this.y = y3;
      this.w = w3;
      this.h = h3;
      return this;
    }
    expand(A2) {
      const minX = Math.min(this.minX, A2.minX);
      const minY = Math.min(this.minY, A2.minY);
      const maxX = Math.max(this.maxX, A2.maxX);
      const maxY = Math.max(this.maxY, A2.maxY);
      this.x = minX;
      this.y = minY;
      this.w = maxX - minX;
      this.h = maxY - minY;
      return this;
    }
    expandBy(n3) {
      this.x -= n3;
      this.y -= n3;
      this.w += n3 * 2;
      this.h += n3 * 2;
      return this;
    }
    scale(n3) {
      this.x /= n3;
      this.y /= n3;
      this.w /= n3;
      this.h /= n3;
      return this;
    }
    clone() {
      const { x: x3, y: y3, w: w3, h: h3 } = this;
      return new _Box2d(x3, y3, w3, h3);
    }
    translate(delta) {
      this.x += delta.x;
      this.y += delta.y;
      return this;
    }
    snapToGrid(size) {
      const minX = Math.round(this.minX / size) * size;
      const minY = Math.round(this.minY / size) * size;
      const maxX = Math.round(this.maxX / size) * size;
      const maxY = Math.round(this.maxY / size) * size;
      this.minX = minX;
      this.minY = minY;
      this.width = Math.max(1, maxX - minX);
      this.height = Math.max(1, maxY - minY);
    }
    collides(B) {
      return _Box2d.Collides(this, B);
    }
    contains(B) {
      return _Box2d.Contains(this, B);
    }
    includes(B) {
      return _Box2d.Includes(this, B);
    }
    containsPoint(V2, y3) {
      return _Box2d.ContainsPoint(this, V2, y3);
    }
    getHandlePoint(handle) {
      switch (handle) {
        case "top_left":
          return new Vec2d(this.minX, this.minY);
        case "top_right":
          return new Vec2d(this.maxX, this.minY);
        case "bottom_left":
          return new Vec2d(this.minX, this.maxY);
        case "bottom_right":
          return new Vec2d(this.maxX, this.maxY);
        case "top":
          return new Vec2d(this.midX, this.minY);
        case "right":
          return new Vec2d(this.maxX, this.midY);
        case "bottom":
          return new Vec2d(this.midX, this.maxY);
        case "left":
          return new Vec2d(this.minX, this.midY);
      }
    }
    toJson() {
      return { x: this.minX, y: this.minY, w: this.w, h: this.h };
    }
    resize(handle, dx, dy) {
      const { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = this;
      let { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = this;
      switch (handle) {
        case "left":
        case "top_left":
        case "bottom_left": {
          b0x += dx;
          break;
        }
        case "right":
        case "top_right":
        case "bottom_right": {
          b1x += dx;
          break;
        }
      }
      switch (handle) {
        case "top":
        case "top_left":
        case "top_right": {
          b0y += dy;
          break;
        }
        case "bottom":
        case "bottom_left":
        case "bottom_right": {
          b1y += dy;
          break;
        }
      }
      const scaleX = (b1x - b0x) / (a1x - a0x);
      const scaleY = (b1y - b0y) / (a1y - a0y);
      const flipX = scaleX < 0;
      const flipY = scaleY < 0;
      if (flipX) {
        const t4 = b1x;
        b1x = b0x;
        b0x = t4;
      }
      if (flipY) {
        const t4 = b1y;
        b1y = b0y;
        b0y = t4;
      }
      this.minX = b0x;
      this.minY = b0y;
      this.width = Math.abs(b1x - b0x);
      this.height = Math.abs(b1y - b0y);
    }
    static From(box) {
      return new _Box2d(box.x, box.y, box.w, box.h);
    }
    static FromPoints(points2) {
      if (points2.length === 0)
        return new _Box2d();
      let minX = Infinity;
      let minY = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      let point2;
      for (let i3 = 0, n3 = points2.length; i3 < n3; i3++) {
        point2 = points2[i3];
        minX = Math.min(point2.x, minX);
        minY = Math.min(point2.y, minY);
        maxX = Math.max(point2.x, maxX);
        maxY = Math.max(point2.y, maxY);
      }
      return new _Box2d(minX, minY, maxX - minX, maxY - minY);
    }
    static Expand(A2, B) {
      const minX = Math.min(B.minX, A2.minX);
      const minY = Math.min(B.minY, A2.minY);
      const maxX = Math.max(B.maxX, A2.maxX);
      const maxY = Math.max(B.maxY, A2.maxY);
      return new _Box2d(minX, minY, maxX - minX, maxY - minY);
    }
    static ExpandBy(A2, n3) {
      return new _Box2d(A2.minX - n3, A2.minY - n3, A2.width + n3 * 2, A2.height + n3 * 2);
    }
    static Resize(box, handle, dx, dy, isAspectRatioLocked = false) {
      const { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = box;
      let { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = box;
      switch (handle) {
        case "left":
        case "top_left":
        case "bottom_left": {
          b0x += dx;
          break;
        }
        case "right":
        case "top_right":
        case "bottom_right": {
          b1x += dx;
          break;
        }
      }
      switch (handle) {
        case "top":
        case "top_left":
        case "top_right": {
          b0y += dy;
          break;
        }
        case "bottom":
        case "bottom_left":
        case "bottom_right": {
          b1y += dy;
          break;
        }
      }
      const scaleX = (b1x - b0x) / (a1x - a0x);
      const scaleY = (b1y - b0y) / (a1y - a0y);
      const flipX = scaleX < 0;
      const flipY = scaleY < 0;
      if (isAspectRatioLocked) {
        const aspectRatio = (a1x - a0x) / (a1y - a0y);
        const bw = Math.abs(b1x - b0x);
        const bh = Math.abs(b1y - b0y);
        const tw = bw * (scaleY < 0 ? 1 : -1) * (1 / aspectRatio);
        const th = bh * (scaleX < 0 ? 1 : -1) * aspectRatio;
        const isTall = aspectRatio < bw / bh;
        switch (handle) {
          case "top_left": {
            if (isTall)
              b0y = b1y + tw;
            else
              b0x = b1x + th;
            break;
          }
          case "top_right": {
            if (isTall)
              b0y = b1y + tw;
            else
              b1x = b0x - th;
            break;
          }
          case "bottom_right": {
            if (isTall)
              b1y = b0y - tw;
            else
              b1x = b0x - th;
            break;
          }
          case "bottom_left": {
            if (isTall)
              b1y = b0y - tw;
            else
              b0x = b1x + th;
            break;
          }
          case "bottom":
          case "top": {
            const m3 = (b0x + b1x) / 2;
            const w3 = bh * aspectRatio;
            b0x = m3 - w3 / 2;
            b1x = m3 + w3 / 2;
            break;
          }
          case "left":
          case "right": {
            const m3 = (b0y + b1y) / 2;
            const h3 = bw / aspectRatio;
            b0y = m3 - h3 / 2;
            b1y = m3 + h3 / 2;
            break;
          }
        }
      }
      if (flipX) {
        const t4 = b1x;
        b1x = b0x;
        b0x = t4;
      }
      if (flipY) {
        const t4 = b1y;
        b1y = b0y;
        b0y = t4;
      }
      const final = new _Box2d(b0x, b0y, Math.abs(b1x - b0x), Math.abs(b1y - b0y));
      return {
        box: final,
        scaleX: +(final.width / box.width * (scaleX > 0 ? 1 : -1)).toFixed(5),
        scaleY: +(final.height / box.height * (scaleY > 0 ? 1 : -1)).toFixed(5)
      };
    }
    equals(other) {
      return _Box2d.Equals(this, other);
    }
    static Equals(a3, b3) {
      return b3.x === a3.x && b3.y === a3.y && b3.w === a3.w && b3.h === a3.h;
    }
  };
  var Box2d = _Box2d;
  __publicField(Box2d, "Collides", (A2, B) => {
    return !(A2.maxX < B.minX || A2.minX > B.maxX || A2.maxY < B.minY || A2.minY > B.maxY);
  });
  __publicField(Box2d, "Contains", (A2, B) => {
    return A2.minX < B.minX && A2.minY < B.minY && A2.maxY > B.maxY && A2.maxX > B.maxX;
  });
  __publicField(Box2d, "Includes", (A2, B) => {
    return _Box2d.Collides(A2, B) || _Box2d.Contains(A2, B);
  });
  __publicField(Box2d, "ContainsPoint", (A2, B, y3) => {
    if (typeof B === "number") {
      return !(B < A2.minX || y3 < A2.minY || B > A2.maxX || y3 > A2.maxY);
    }
    return !(B.x < A2.minX || B.y < A2.minY || B.x > A2.maxX || B.y > A2.maxY);
  });
  __publicField(Box2d, "Common", (boxes) => {
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i3 = 0; i3 < boxes.length; i3++) {
      const B = boxes[i3];
      minX = Math.min(minX, B.minX);
      minY = Math.min(minY, B.minY);
      maxX = Math.max(maxX, B.maxX);
      maxY = Math.max(maxY, B.maxY);
    }
    return new _Box2d(minX, minY, maxX - minX, maxY - minY);
  });
  __publicField(Box2d, "Sides", (A2, inset = 0) => {
    const { corners } = A2;
    if (inset) {
    }
    return [
      [corners[0], corners[1]],
      [corners[1], corners[2]],
      [corners[2], corners[3]],
      [corners[3], corners[0]]
    ];
  });
  function flipSelectionHandleY(handle) {
    switch (handle) {
      case "top":
        return "bottom";
      case "bottom":
        return "top";
      case "top_left":
        return "bottom_left";
      case "top_right":
        return "bottom_right";
      case "bottom_left":
        return "top_left";
      case "bottom_right":
        return "top_right";
      default:
        return handle;
    }
  }
  function flipSelectionHandleX(handle) {
    switch (handle) {
      case "left":
        return "right";
      case "right":
        return "left";
      case "top_left":
        return "top_right";
      case "top_right":
        return "top_left";
      case "bottom_left":
        return "bottom_right";
      case "bottom_right":
        return "bottom_left";
      default:
        return handle;
    }
  }
  function isSelectionCorner(selection) {
    return selection === "top_left" || selection === "top_right" || selection === "bottom_right" || selection === "bottom_left";
  }

  // ../../../packages/primitives/src/lib/BaseSegment2d.ts
  var BaseSegment2d = class {
    constructor(values) {
      /**
       * The segment's values. Do not modify these directly. Instead, use the `values` setter or
       * `update` method.
       *
       * @internal
       */
      __publicField(this, "_values");
      /**
       * A private set of cached values, used for lookups and computations. Changing any of the
       * segment's values will clear this object.
       *
       * @internal
       */
      __publicField(this, "_computed", {});
      this._values = values;
    }
    /**
     * The values for the curve segment.
     *
     * @public
     */
    get values() {
      return this._values;
    }
    set values(values) {
      this._values = values;
      this._computed = {};
    }
    /**
     * The length of the curve segment.
     *
     * @public
     */
    get length() {
      if (this._computed.length !== void 0) {
        return this._computed.length;
      }
      const { lut } = this;
      let prev = lut[0];
      let result = 0;
      for (let i3 = 1; i3 < lut.length; i3++) {
        const curr = lut[i3];
        result += prev.dist(curr);
        prev = curr;
      }
      this._computed.length = result;
      return result;
    }
    /**
     * The bounding box containing the curve segment.
     *
     * @public
     */
    get bounds() {
      if (this._computed.bounds !== void 0) {
        return this._computed.bounds;
      }
      let minX = Infinity;
      let minY = Infinity;
      let maxX = -Infinity;
      let maxY = -Infinity;
      const { lut } = this;
      for (const pt of lut) {
        minX = Math.min(pt.x, minX);
        minY = Math.min(pt.y, minY);
        maxX = Math.max(pt.x, maxX);
        maxY = Math.max(pt.y, maxY);
      }
      const result = new Box2d(minX, minY, maxX - minX, maxY - minY);
      this._computed.bounds = result;
      return result;
    }
    /**
     * A lookup table consisting of values.p points along the segment. Used to compute lengths,
     * closest points, etc. This should only be _computed once (when first requested) per set of
     * values.
     *
     * @public
     */
    get lut() {
      if (this._computed.lut) {
        return this._computed.lut;
      }
      const { p: p3 } = this.values;
      const result = [];
      for (let i3 = 0; i3 < p3 + 1; i3++) {
        result.push(this.getPoint(i3 / p3));
      }
      this._computed.lut = result;
      return result;
    }
    /**
     * A point half-way along the length of the segment.
     *
     * @public
     */
    get midPoint() {
      if (this._computed.midPoint) {
        return this._computed.midPoint;
      }
      const result = this.getPoint(0.5);
      this._computed.midPoint = result;
      return result;
    }
    /**
     * An SVG path for the segment.
     *
     * @public
     */
    get path() {
      if (this._computed.path) {
        return this._computed.path;
      }
      const result = this.getPath();
      this._computed.path = result;
      return result;
    }
    /**
     * Evaluate a point at a length along the curve segment.
     *
     * @param length - The length to find the point value.
     * @public
     */
    getPointAtLength(length) {
      const t4 = Math.max(0, Math.min(1, length / this.length));
      return this.getPoint(t4);
    }
    /**
     * Get the normal at distance t along the curve segment.
     *
     * @param t - The distance (0-1) to find the normal.
     * @public
     */
    getNormal(t4) {
      return this.getPoint(t4 - 25e-4).tan(this.getPoint(t4 + 25e-4)).per().uni().toFixed();
    }
    /**
     * Get the normal at a length along the curve segment.
     *
     * @param length - The length to find the normal.
     * @public
     */
    getNormalAtLength(length) {
      return this.getNormal(length / this.length);
    }
    /**
     * Get the closest point on the segment to an arbitrary point.
     *
     * @param point - The arbitrary point.
     * @public
     */
    getClosestPointTo(point2) {
      const { lut } = this;
      let closestT = 0;
      let closestPoint = lut[0];
      let closestDistance = lut[0].dist(point2);
      for (let i3 = 1; i3 < lut.length; i3++) {
        const distance = Vec2d.Dist(lut[i3], point2);
        if (distance < closestDistance) {
          closestDistance = distance;
          closestPoint = lut[i3];
          closestT = i3 / lut.length;
        }
      }
      const step = 1 / this.values.p;
      for (let t4 = Math.max(0, closestT - step / 2); t4 < Math.min(1, closestT + step / 2); t4 += step / 10) {
        const pt = this.getPoint(t4);
        const distance = Vec2d.Dist(pt, point2);
        if (distance < closestDistance) {
          closestDistance = distance;
          closestPoint = pt;
        }
      }
      return { point: closestPoint, distance: closestDistance };
    }
    /**
     * Set one or more values. Updating the segment will clear cached values.
     *
     * @param values - A partial of the segment's values object.
     * @public
     */
    update(values) {
      this._computed = {};
      this.values = __spreadValues(__spreadValues({}, this.values), values);
    }
  };

  // ../../../packages/primitives/src/lib/CubicSegment2d.ts
  var _a;
  var CubicSegment2d = class extends BaseSegment2d {
    constructor(a3, b3, c3, d3, p3 = 25) {
      super({ a: a3, b: b3, c: c3, d: d3, p: p3 });
      __publicField(this, _a, function* () {
        const { a: a3, b: b3, c: c3, d: d3 } = this.values;
        yield* [a3, b3, c3, d3];
      });
    }
    getPath(head = true) {
      const { a: a3, b: b3, c: c3, d: d3 } = this.values;
      if (Vec2d.Equals(a3, d3))
        return "";
      return `${head ? `M${a3.x.toFixed(2)},${a3.y.toFixed(2)}C` : ``}${b3.x.toFixed(2)},${b3.y.toFixed(
        2
      )} ${c3.x.toFixed(2)},${c3.y.toFixed(2)} ${d3.x.toFixed(2)},${d3.y.toFixed(2)}`;
    }
    getPoint(t4) {
      const { a: a3, b: b3, c: c3, d: d3 } = this.values;
      return new Vec2d(
        (1 - t4) * (1 - t4) * (1 - t4) * a3.x + 3 * ((1 - t4) * (1 - t4)) * t4 * b3.x + 3 * (1 - t4) * (t4 * t4) * c3.x + t4 * t4 * t4 * d3.x,
        (1 - t4) * (1 - t4) * (1 - t4) * a3.y + 3 * ((1 - t4) * (1 - t4)) * t4 * b3.y + 3 * (1 - t4) * (t4 * t4) * c3.y + t4 * t4 * t4 * d3.y
      );
    }
    getX(t4) {
      const { a: a3, b: b3, c: c3, d: d3 } = this.values;
      return (1 - t4) * (1 - t4) * (1 - t4) * a3.x + 3 * ((1 - t4) * (1 - t4)) * t4 * b3.x + 3 * (1 - t4) * (t4 * t4) * c3.x + t4 * t4 * t4 * d3.x;
    }
    getY(t4) {
      const { a: a3, b: b3, c: c3, d: d3 } = this.values;
      return (1 - t4) * (1 - t4) * (1 - t4) * a3.y + 3 * ((1 - t4) * (1 - t4)) * t4 * b3.y + 3 * (1 - t4) * (t4 * t4) * c3.y + t4 * t4 * t4 * d3.y;
    }
  };
  _a = Symbol.iterator;

  // ../../../packages/primitives/src/lib/BaseSpline2d.ts
  var BaseSpline2d = class {
    constructor(points2, p3 = 50, k2 = 1) {
      this.points = points2;
      this.p = p3;
      this.k = k2;
      __publicField(this, "computed", {});
    }
    get length() {
      if (this.computed.length !== void 0) {
        return this.computed.length;
      }
      const { segments } = this;
      const result = segments.reduce((acc, curr) => acc + curr.length, 0);
      this.computed.length = result;
      return result;
    }
    get bounds() {
      if (this.computed.bounds !== void 0) {
        return this.computed.bounds;
      }
      const { segments } = this;
      const result = Box2d.Common(segments.map((segment) => segment.bounds));
      this.computed.bounds = result;
      return result;
    }
    get head() {
      const { points: points2 } = this;
      return points2[0];
    }
    get tail() {
      const { points: points2 } = this;
      return points2[points2.length - 1];
    }
    get path() {
      if (this.computed.path !== void 0) {
        return this.computed.path;
      }
      const result = this.segments.map((segment) => segment.path).filter((i3) => i3 !== void 0 && i3 !== null && i3 !== "").join(" ");
      this.computed.path = result;
      return result;
    }
    addPoint(point2) {
      const { points: points2, k: k2, p: p3 } = this;
      points2.push(point2);
      this.computed = {};
      this.getSegmentsFromPoints(this.points, p3, k2);
      return this;
    }
    removePoint(point2) {
      const { points: points2, k: k2, p: p3 } = this;
      const index2 = typeof point2 === "number" ? Math.floor(point2) : points2.indexOf(point2);
      if (index2 === -1)
        return this;
      points2.splice(index2, 1);
      this.computed = {};
      this.getSegmentsFromPoints(this.points, p3, k2);
      return this;
    }
    getPointAtLength(length) {
      const { segments } = this;
      let remaining = length;
      if (length <= 0)
        return segments[0].getPoint(0);
      if (length >= this.length)
        return segments[segments.length - 1].getPoint(1);
      for (let i3 = 0; i3 < segments.length; i3++) {
        const segment = segments[i3];
        const { length: segmentLength } = segment;
        if (remaining < segmentLength) {
          return segment.getPoint(remaining / segmentLength);
        }
        remaining -= segment.length;
      }
      return segments[segments.length - 1].getPoint(1);
    }
    getPoint(t4) {
      if (t4 <= 0)
        return this.segments[0].getPoint(0);
      if (t4 >= 1)
        return this.segments[this.segments.length - 1].getPoint(1);
      return this.getPointAtLength(t4 * this.length);
    }
    getNormal(t4) {
      const { length } = this;
      return this.getNormalAtLength(t4 * length);
    }
    getNormalAtLength(t4) {
      const { segments } = this;
      if (t4 < 0)
        return new Vec2d(0, 0);
      let remaining = t4;
      for (const segment of segments) {
        const segmentLength = segment.length;
        if (remaining <= segmentLength) {
          return segment.getNormal(remaining / segmentLength);
        }
        remaining -= segmentLength;
      }
      return new Vec2d(0, 0);
    }
    getClosestPointTo(point2) {
      const { head, segments } = this;
      let closestPoint = head;
      let closestDistance = Vec2d.Dist(point2, head);
      for (const segment of segments) {
        const p3 = segment.getClosestPointTo(point2);
        if (p3.distance < closestDistance) {
          closestDistance = p3.distance;
          closestPoint = p3.point;
        }
      }
      return { point: closestPoint, distance: closestDistance };
    }
  };

  // ../../../packages/primitives/src/lib/CubicSpline2d.ts
  var CubicSpline2d = class extends BaseSpline2d {
    constructor(points2, k2 = 1.2, p3 = 20) {
      super(points2, k2, p3);
      __publicField(this, "segments");
      this.segments = this.getSegmentsFromPoints(points2, k2, p3);
    }
    getSegmentsFromPoints(points2, k2 = 1.25, p3 = 20) {
      const len = points2.length;
      const last2 = len - 2;
      const results = [];
      for (let i3 = 0; i3 < len - 1; i3++) {
        const p0 = i3 === 0 ? points2[0] : points2[i3 - 1];
        const p1 = points2[i3];
        const p22 = points2[i3 + 1];
        const p32 = i3 === last2 ? p22 : points2[i3 + 2];
        results.push(
          new CubicSegment2d(
            p1,
            i3 === 0 ? p0 : new Vec2d(p1.x + (p22.x - p0.x) / 6 * k2, p1.y + (p22.y - p0.y) / 6 * k2),
            i3 === last2 ? p22 : new Vec2d(p22.x - (p32.x - p1.x) / 6 * k2, p22.y - (p32.y - p1.y) / 6 * k2),
            p22,
            p3
          )
        );
      }
      return results;
    }
    static FromPoints(points2) {
      return new CubicSpline2d(points2);
    }
  };

  // ../../../packages/primitives/src/lib/LineSegment2d.ts
  var LineSegment2d = class extends BaseSegment2d {
    constructor(a3, b3, p3 = 2) {
      super({ a: a3, b: b3, p: p3 });
      this.a = a3;
      this.b = b3;
      this.values.p = Math.max(10, Math.ceil(this.length / 20));
    }
    get length() {
      return Vec2d.Dist(this.a, this.b);
    }
    get tangent() {
      return Vec2d.Tan(this.a, this.b);
    }
    get angle() {
      return Vec2d.Angle(this.a, this.b);
    }
    get bounds() {
      return Box2d.FromPoints([this.a, this.b]);
    }
    getX(t4) {
      const { a: a3, b: b3 } = this.values;
      return a3.x + (b3.x - a3.x) * t4;
    }
    getY(t4) {
      const { a: a3, b: b3 } = this.values;
      return a3.y + (b3.y - a3.y) * t4;
    }
    getPoint(t4) {
      const { a: a3, b: b3 } = this.values;
      return Vec2d.Lrp(a3, b3, t4);
    }
    getPath(head = true) {
      const { a: a3, b: b3 } = this.values;
      if (Vec2d.Equals(a3, b3))
        return "";
      return head ? `M${a3.x},${a3.y}L${b3.x},${b3.y}` : `${b3.x},${b3.y}`;
    }
    getNormal() {
      const { a: a3, b: b3 } = this.values;
      return Vec2d.Sub(a3, b3).per().uni().toFixed();
    }
    /**
     * Get the closest point on the segment to an arbitrary point.
     *
     * @param point - The arbitrary point.
     * @public
     */
    getClosestPointTo(point2) {
      const { a: a3, b: b3 } = this.values;
      const closestPoint = Vec2d.NearestPointOnLineSegment(a3, b3, point2);
      const closestDistance = closestPoint.dist(point2);
      return { point: closestPoint, distance: closestDistance };
    }
    static Length(A2) {
      return Vec2d.Dist(A2.a, A2.b);
    }
    static Tangent(A2) {
      return Vec2d.Tan(A2.a, A2.b);
    }
    static Angle(A2) {
      return Vec2d.Angle(A2.a, A2.b);
    }
  };

  // ../../../packages/primitives/src/lib/Matrix2d.ts
  var _Matrix2d = class {
    constructor(a3, b3, c3, d3, e2, f3) {
      __publicField(this, "a", 1);
      __publicField(this, "b", 0);
      __publicField(this, "c", 0);
      __publicField(this, "d", 1);
      __publicField(this, "e", 0);
      __publicField(this, "f", 0);
      this.a = a3;
      this.b = b3;
      this.c = c3;
      this.d = d3;
      this.e = e2;
      this.f = f3;
    }
    equals(m3) {
      return this.a === m3.a && this.b === m3.b && this.c === m3.c && this.d === m3.d && this.e === m3.e && this.f === m3.f;
    }
    identity() {
      this.a = 1;
      this.b = 0;
      this.c = 0;
      this.d = 1;
      this.e = 0;
      this.f = 0;
      return this;
    }
    multiply(m3) {
      const m22 = m3;
      const { a: a3, b: b3, c: c3, d: d3, e: e2, f: f3 } = this;
      this.a = a3 * m22.a + c3 * m22.b;
      this.c = a3 * m22.c + c3 * m22.d;
      this.e = a3 * m22.e + c3 * m22.f + e2;
      this.b = b3 * m22.a + d3 * m22.b;
      this.d = b3 * m22.c + d3 * m22.d;
      this.f = b3 * m22.e + d3 * m22.f + f3;
      return this;
    }
    rotate(r3, cx, cy) {
      if (r3 === 0)
        return this;
      if (cx === void 0)
        return this.multiply(_Matrix2d.Rotate(r3));
      return this.translate(cx, cy).multiply(_Matrix2d.Rotate(r3)).translate(-cx, -cy);
    }
    translate(x3, y3) {
      return this.multiply(_Matrix2d.Translate(x3, y3));
    }
    scale(x3, y3) {
      return this.multiply(_Matrix2d.Scale(x3, y3));
    }
    invert() {
      const { a: a3, b: b3, c: c3, d: d3, e: e2, f: f3 } = this;
      const denom = a3 * d3 - b3 * c3;
      this.a = d3 / denom;
      this.b = b3 / -denom;
      this.c = c3 / -denom;
      this.d = a3 / denom;
      this.e = (d3 * e2 - c3 * f3) / -denom;
      this.f = (b3 * e2 - a3 * f3) / denom;
      return this;
    }
    applyToPoint(point2) {
      return _Matrix2d.applyToPoint(this, point2);
    }
    applyToPoints(points2) {
      return _Matrix2d.applyToPoints(this, points2);
    }
    decomposed() {
      return _Matrix2d.Decompose(this);
    }
    toCssString() {
      return _Matrix2d.toCssString(this);
    }
    setTo(model2) {
      Object.assign(this, model2);
      return this;
    }
    decompose() {
      return _Matrix2d.Decompose(this);
    }
    clone() {
      return new _Matrix2d(this.a, this.b, this.c, this.d, this.e, this.f);
    }
    /* --------------------- Static --------------------- */
    static Identity() {
      return new _Matrix2d(1, 0, 0, 1, 0, 0);
    }
    static Translate(x3, y3) {
      return new _Matrix2d(1, 0, 0, 1, x3, y3);
    }
    static Rotate(r3, cx, cy) {
      if (r3 === 0)
        return _Matrix2d.Identity();
      const cosAngle = Math.cos(r3);
      const sinAngle = Math.sin(r3);
      const rotationMatrix2d = new _Matrix2d(cosAngle, sinAngle, -sinAngle, cosAngle, 0, 0);
      if (cx === void 0)
        return rotationMatrix2d;
      return _Matrix2d.Compose(
        _Matrix2d.Translate(cx, cy),
        rotationMatrix2d,
        _Matrix2d.Translate(-cx, -cy)
      );
    }
    static Multiply(m1, m22) {
      return {
        a: m1.a * m22.a + m1.c * m22.b,
        c: m1.a * m22.c + m1.c * m22.d,
        e: m1.a * m22.e + m1.c * m22.f + m1.e,
        b: m1.b * m22.a + m1.d * m22.b,
        d: m1.b * m22.c + m1.d * m22.d,
        f: m1.b * m22.e + m1.d * m22.f + m1.f
      };
    }
    static Inverse(m3) {
      const denom = m3.a * m3.d - m3.b * m3.c;
      return {
        a: m3.d / denom,
        b: m3.b / -denom,
        c: m3.c / -denom,
        d: m3.a / denom,
        e: (m3.d * m3.e - m3.c * m3.f) / -denom,
        f: (m3.b * m3.e - m3.a * m3.f) / denom
      };
    }
    static Absolute(m3) {
      const denom = m3.a * m3.d - m3.b * m3.c;
      return {
        a: m3.d / denom,
        b: m3.b / -denom,
        c: m3.c / -denom,
        d: m3.a / denom,
        e: (m3.d * m3.e - m3.c * m3.f) / denom,
        f: (m3.b * m3.e - m3.a * m3.f) / -denom
      };
    }
    static Compose(...matrices) {
      const matrix = _Matrix2d.Identity();
      for (let i3 = 0, n3 = matrices.length; i3 < n3; i3++) {
        matrix.multiply(matrices[i3]);
      }
      return matrix;
    }
    static Decompose(m3) {
      let scaleX, scaleY, rotation;
      if (m3.a !== 0 || m3.c !== 0) {
        const hypotAc = Math.hypot(m3.a, m3.c);
        scaleX = hypotAc;
        scaleY = (m3.a * m3.d - m3.b * m3.c) / hypotAc;
        rotation = Math.acos(m3.a / hypotAc) * (m3.c > 0 ? -1 : 1);
      } else if (m3.b !== 0 || m3.d !== 0) {
        const hypotBd = Math.hypot(m3.b, m3.d);
        scaleX = (m3.a * m3.d - m3.b * m3.c) / hypotBd;
        scaleY = hypotBd;
        rotation = TAU + Math.acos(m3.b / hypotBd) * (m3.d > 0 ? -1 : 1);
      } else {
        scaleX = 0;
        scaleY = 0;
        rotation = 0;
      }
      return {
        x: m3.e,
        y: m3.f,
        scaleX,
        scaleY,
        rotation: clampRadians(rotation)
      };
    }
    static Smooth(m3, precision = 1e10) {
      m3.a = Math.round(m3.a * precision) / precision;
      m3.b = Math.round(m3.b * precision) / precision;
      m3.c = Math.round(m3.c * precision) / precision;
      m3.d = Math.round(m3.d * precision) / precision;
      m3.e = Math.round(m3.e * precision) / precision;
      m3.f = Math.round(m3.f * precision) / precision;
      return m3;
    }
    static toCssString(m3) {
      return `matrix(${toDomPrecision(m3.a)}, ${toDomPrecision(m3.b)}, ${toDomPrecision(
        m3.c
      )}, ${toDomPrecision(m3.d)}, ${toDomPrecision(m3.e)}, ${toDomPrecision(m3.f)})`;
    }
    static applyToPoint(m3, point2) {
      return new Vec2d(
        m3.a * point2.x + m3.c * point2.y + m3.e,
        m3.b * point2.x + m3.d * point2.y + m3.f,
        point2.z
      );
    }
    static applyToXY(m3, x3, y3) {
      return [m3.a * x3 + m3.c * y3 + m3.e, m3.b * x3 + m3.d * y3 + m3.f];
    }
    static applyToPoints(m3, points2) {
      return points2.map(
        (point2) => new Vec2d(m3.a * point2.x + m3.c * point2.y + m3.e, m3.b * point2.x + m3.d * point2.y + m3.f, point2.z)
      );
    }
    static applyToBounds(m3, box) {
      return new Box2d(m3.e + box.minX, m3.f + box.minY, box.width, box.height);
    }
    static From(m3) {
      return new _Matrix2d(m3.a, m3.b, m3.c, m3.d, m3.e, m3.f);
    }
  };
  var Matrix2d = _Matrix2d;
  __publicField(Matrix2d, "Scale", (x3, y3, cx, cy) => {
    const scaleMatrix2d = new _Matrix2d(x3, 0, 0, 0, y3, 0);
    if (cx === void 0)
      return scaleMatrix2d;
    return _Matrix2d.Compose(
      _Matrix2d.Translate(cx, cy),
      scaleMatrix2d,
      _Matrix2d.Translate(-cx, -cy)
    );
  });

  // ../../../packages/primitives/src/lib/Polyline2d.ts
  var Polyline2d = class extends BaseSpline2d {
    constructor(points2, k2 = 1.2, p3 = 20) {
      super(points2, k2, p3);
      __publicField(this, "segments");
      this.segments = this.getSegmentsFromPoints(points2, p3);
    }
    getSegmentsFromPoints(points2, p3 = 50) {
      const segments = [];
      for (let i3 = 0; i3 < points2.length - 1; i3++) {
        segments.push(new LineSegment2d(points2[i3], points2[i3 + 1], p3));
      }
      return segments;
    }
    static FromPoints(points2) {
      return new Polyline2d(points2);
    }
  };

  // ../../../packages/primitives/src/lib/freehand/getStrokeOutlinePoints.ts
  var { PI: PI3 } = Math;
  var FIXED_PI = PI3 + 1e-4;
  function getStrokeOutlinePoints(strokePoints, options = {}) {
    const { size = 16, smoothing = 0.5, start = {}, end = {}, last: isComplete = false } = options;
    const { cap: capStart = true } = start;
    const { cap: capEnd = true } = end;
    if (strokePoints.length === 0 || size <= 0) {
      return [];
    }
    const firstStrokePoint = strokePoints[0];
    const lastStrokePoint = strokePoints[strokePoints.length - 1];
    const totalLength = lastStrokePoint.runningLength;
    const taperStart = start.taper === false ? 0 : start.taper === true ? Math.max(size, totalLength) : start.taper;
    const taperEnd = end.taper === false ? 0 : end.taper === true ? Math.max(size, totalLength) : end.taper;
    const minDistance = Math.pow(size * smoothing, 2);
    const leftPts = [];
    const rightPts = [];
    let prevVector = strokePoints[0].vector;
    let pl = strokePoints[0].point;
    let pr = pl;
    let tl = pl;
    let tr = pr;
    let isPrevPointSharpCorner = false;
    let strokePoint;
    for (let i3 = 0; i3 < strokePoints.length; i3++) {
      strokePoint = strokePoints[i3];
      const { point: point2, vector } = strokePoints[i3];
      const prevDpr = strokePoint.vector.dpr(prevVector);
      const nextVector = (i3 < strokePoints.length - 1 ? strokePoints[i3 + 1] : strokePoints[i3]).vector;
      const nextDpr = i3 < strokePoints.length - 1 ? nextVector.dpr(strokePoint.vector) : 1;
      const isPointSharpCorner = prevDpr < 0 && !isPrevPointSharpCorner;
      const isNextPointSharpCorner = nextDpr !== null && nextDpr < 0.2;
      if (isPointSharpCorner || isNextPointSharpCorner) {
        if (nextDpr > -0.62 && totalLength - strokePoint.runningLength > strokePoint.radius) {
          const offset2 = prevVector.clone().mul(strokePoint.radius);
          const cpr = prevVector.clone().cpr(nextVector);
          if (cpr < 0) {
            tl = Vec2d.Add(point2, offset2);
            tr = Vec2d.Sub(point2, offset2);
          } else {
            tl = Vec2d.Sub(point2, offset2);
            tr = Vec2d.Add(point2, offset2);
          }
          leftPts.push(tl);
          rightPts.push(tr);
        } else {
          const offset2 = prevVector.clone().mul(strokePoint.radius).per();
          const start2 = Vec2d.Sub(strokePoint.input, offset2);
          for (let step = 1 / 13, t4 = 0; t4 < 1; t4 += step) {
            tl = Vec2d.RotWith(start2, strokePoint.input, FIXED_PI * t4);
            leftPts.push(tl);
            tr = Vec2d.RotWith(start2, strokePoint.input, FIXED_PI + FIXED_PI * -t4);
            rightPts.push(tr);
          }
        }
        pl = tl;
        pr = tr;
        if (isNextPointSharpCorner) {
          isPrevPointSharpCorner = true;
        }
        continue;
      }
      isPrevPointSharpCorner = false;
      if (strokePoint === firstStrokePoint || strokePoint === lastStrokePoint) {
        const offset2 = Vec2d.Per(vector).mul(strokePoint.radius);
        leftPts.push(Vec2d.Sub(point2, offset2));
        rightPts.push(Vec2d.Add(point2, offset2));
        continue;
      }
      const offset = Vec2d.Lrp(nextVector, vector, nextDpr).per().mul(strokePoint.radius);
      tl = Vec2d.Sub(point2, offset);
      if (i3 <= 1 || Vec2d.Dist2(pl, tl) > minDistance) {
        leftPts.push(tl);
        pl = tl;
      }
      tr = Vec2d.Add(point2, offset);
      if (i3 <= 1 || Vec2d.Dist2(pr, tr) > minDistance) {
        rightPts.push(tr);
        pr = tr;
      }
      prevVector = vector;
      continue;
    }
    const firstPoint = firstStrokePoint.point;
    const lastPoint = strokePoints.length > 1 ? strokePoints[strokePoints.length - 1].point : Vec2d.AddXY(firstStrokePoint.point, 1, 1);
    if (strokePoints.length === 1) {
      if (!(taperStart || taperEnd) || isComplete) {
        const start2 = Vec2d.Add(
          firstPoint,
          Vec2d.Sub(firstPoint, lastPoint).uni().per().mul(-firstStrokePoint.radius)
        );
        const dotPts = [];
        for (let step = 1 / 13, t4 = step; t4 <= 1; t4 += step) {
          dotPts.push(Vec2d.RotWith(start2, firstPoint, FIXED_PI * 2 * t4));
        }
        return dotPts;
      }
    }
    const startCap = [];
    if (taperStart || taperEnd && strokePoints.length === 1) {
    } else if (capStart) {
      for (let step = 1 / 8, t4 = step; t4 <= 1; t4 += step) {
        const pt = Vec2d.RotWith(rightPts[0], firstPoint, FIXED_PI * t4);
        startCap.push(pt);
      }
    } else {
      const cornersVector = Vec2d.Sub(leftPts[0], rightPts[0]);
      const offsetA = Vec2d.Mul(cornersVector, 0.5);
      const offsetB = Vec2d.Mul(cornersVector, 0.51);
      startCap.push(
        Vec2d.Sub(firstPoint, offsetA),
        Vec2d.Sub(firstPoint, offsetB),
        Vec2d.Add(firstPoint, offsetB),
        Vec2d.Add(firstPoint, offsetA)
      );
    }
    const endCap = [];
    const direction = lastStrokePoint.vector.clone().per().neg();
    if (taperEnd || taperStart && strokePoints.length === 1) {
      endCap.push(lastPoint);
    } else if (capEnd) {
      const start2 = Vec2d.Add(lastPoint, Vec2d.Mul(direction, lastStrokePoint.radius));
      for (let step = 1 / 29, t4 = step; t4 < 1; t4 += step) {
        endCap.push(Vec2d.RotWith(start2, lastPoint, FIXED_PI * 3 * t4));
      }
    } else {
      endCap.push(
        Vec2d.Add(lastPoint, Vec2d.Mul(direction, lastStrokePoint.radius)),
        Vec2d.Add(lastPoint, Vec2d.Mul(direction, lastStrokePoint.radius * 0.99)),
        Vec2d.Sub(lastPoint, Vec2d.Mul(direction, lastStrokePoint.radius * 0.99)),
        Vec2d.Sub(lastPoint, Vec2d.Mul(direction, lastStrokePoint.radius))
      );
    }
    return leftPts.concat(endCap, rightPts.reverse(), startCap);
  }

  // ../../../packages/primitives/src/lib/freehand/getStrokePoints.ts
  var MIN_START_PRESSURE = 0.025;
  var MIN_END_PRESSURE = 0.01;
  function getStrokePoints(rawInputPoints, options = {}) {
    var _a5;
    const { streamline = 0.5, size = 16, simulatePressure = false } = options;
    if (rawInputPoints.length === 0)
      return [];
    const t4 = 0.15 + (1 - streamline) * 0.85;
    let pts = rawInputPoints.map(Vec2d.From);
    let pointsRemovedFromNearEnd = 0;
    if (!simulatePressure) {
      let pt2 = pts[0];
      while (pt2) {
        if (pt2.z >= MIN_START_PRESSURE)
          break;
        pts.shift();
        pt2 = pts[0];
      }
    }
    if (!simulatePressure) {
      let pt2 = pts[pts.length - 1];
      while (pt2) {
        if (pt2.z >= MIN_END_PRESSURE)
          break;
        pts.pop();
        pt2 = pts[pts.length - 1];
      }
    }
    if (pts.length === 0)
      return [
        {
          point: Vec2d.From(rawInputPoints[0]),
          input: Vec2d.From(rawInputPoints[0]),
          pressure: simulatePressure ? 0.5 : 0.15,
          vector: new Vec2d(1, 1),
          distance: 0,
          runningLength: 0,
          radius: 1
        }
      ];
    let pt = pts[1];
    while (pt) {
      if (Vec2d.Dist(pt, pts[0]) > size / 3)
        break;
      pts[0].z = Math.max(pts[0].z, pt.z);
      pts.splice(1, 1);
      pt = pts[1];
    }
    const last2 = pts.pop();
    pt = pts[pts.length - 1];
    while (pt) {
      if (Vec2d.Dist(pt, last2) > size / 3)
        break;
      pts.pop();
      pt = pts[pts.length - 1];
      pointsRemovedFromNearEnd++;
    }
    pts.push(last2);
    const isComplete = options.last || !options.simulatePressure || pts.length > 1 && Vec2d.Dist(pts[pts.length - 1], pts[pts.length - 2]) < size || pointsRemovedFromNearEnd > 0;
    if (pts.length === 2 && options.simulatePressure) {
      const last3 = pts[1];
      pts = pts.slice(0, -1);
      for (let i3 = 1; i3 < 5; i3++) {
        const next = Vec2d.Lrp(pts[0], last3, i3 / 4);
        next.z = (pts[0].z + (last3.z - pts[0].z)) * i3 / 4;
        pts.push(next);
      }
    }
    const strokePoints = [
      {
        point: pts[0],
        input: pts[0],
        pressure: simulatePressure ? 0.5 : pts[0].z,
        vector: new Vec2d(1, 1),
        distance: 0,
        runningLength: 0,
        radius: 1
      }
    ];
    let totalLength = 0;
    let prev = strokePoints[0];
    let point2, distance;
    if (isComplete && streamline > 0) {
      pts.push(pts[pts.length - 1].clone());
    }
    for (let i3 = 1, n3 = pts.length; i3 < n3; i3++) {
      point2 = !t4 || options.last && i3 === n3 - 1 ? pts[i3].clone() : pts[i3].clone().lrp(prev.point, 1 - t4);
      if (prev.point.equals(point2))
        continue;
      distance = Vec2d.Dist(point2, prev.point);
      totalLength += distance;
      if (i3 < 4 && totalLength < size) {
        continue;
      }
      prev = {
        input: pts[i3],
        // The adjusted point
        point: point2,
        // The input pressure (or .5 if not specified)
        pressure: simulatePressure ? 0.5 : pts[i3].z,
        // The vector from the current point to the previous point
        vector: Vec2d.Sub(prev.point, point2).uni(),
        // The distance between the current point and the previous point
        distance,
        // The total distance so far
        runningLength: totalLength,
        // The stroke point's radius
        radius: 1
      };
      strokePoints.push(prev);
    }
    if ((_a5 = strokePoints[1]) == null ? void 0 : _a5.vector) {
      strokePoints[0].vector = strokePoints[1].vector.clone();
    }
    if (totalLength < 1) {
      const maxPressureAmongPoints = Math.max(0.5, ...strokePoints.map((s3) => s3.pressure));
      strokePoints.forEach((s3) => s3.pressure = maxPressureAmongPoints);
    }
    return strokePoints;
  }

  // ../../../packages/primitives/src/lib/freehand/setStrokePointRadii.ts
  var { min } = Math;
  var RATE_OF_PRESSURE_CHANGE = 0.275;
  function setStrokePointRadii(strokePoints, options) {
    const {
      size = 16,
      thinning = 0.5,
      simulatePressure = true,
      easing = (t4) => t4,
      start = {},
      end = {}
    } = options;
    const { easing: taperStartEase = EASINGS.easeOutQuad } = start;
    const { easing: taperEndEase = EASINGS.easeOutCubic } = end;
    const totalLength = strokePoints[strokePoints.length - 1].runningLength;
    let firstRadius;
    let prevPressure = strokePoints[0].pressure;
    let strokePoint;
    if (!simulatePressure && totalLength < size) {
      const max = strokePoints.reduce((max2, curr) => Math.max(max2, curr.pressure), 0.5);
      strokePoints.forEach((sp) => {
        sp.pressure = max;
        sp.radius = size * easing(0.5 - thinning * (0.5 - sp.pressure));
      });
      return strokePoints;
    } else {
      let p3;
      for (let i3 = 0, n3 = strokePoints.length; i3 < n3; i3++) {
        strokePoint = strokePoints[i3];
        if (strokePoint.runningLength > size * 5)
          break;
        const sp = min(1, strokePoint.distance / size);
        if (simulatePressure) {
          const rp = min(1, 1 - sp);
          p3 = min(1, prevPressure + (rp - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
        } else {
          p3 = min(1, prevPressure + (strokePoint.pressure - prevPressure) * 0.5);
        }
        prevPressure = prevPressure + (p3 - prevPressure) * 0.5;
      }
      for (let i3 = 0; i3 < strokePoints.length; i3++) {
        strokePoint = strokePoints[i3];
        if (thinning) {
          let { pressure } = strokePoint;
          const sp = min(1, strokePoint.distance / size);
          if (simulatePressure) {
            const rp = min(1, 1 - sp);
            pressure = min(1, prevPressure + (rp - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE));
          } else {
            pressure = min(
              1,
              prevPressure + (pressure - prevPressure) * (sp * RATE_OF_PRESSURE_CHANGE)
            );
          }
          strokePoint.radius = size * easing(0.5 - thinning * (0.5 - pressure));
          prevPressure = pressure;
        } else {
          strokePoint.radius = size / 2;
        }
        if (firstRadius === void 0) {
          firstRadius = strokePoint.radius;
        }
      }
    }
    const taperStart = start.taper === false ? 0 : start.taper === true ? Math.max(size, totalLength) : start.taper;
    const taperEnd = end.taper === false ? 0 : end.taper === true ? Math.max(size, totalLength) : end.taper;
    if (taperStart || taperEnd) {
      for (let i3 = 0; i3 < strokePoints.length; i3++) {
        strokePoint = strokePoints[i3];
        const { runningLength } = strokePoint;
        const ts = runningLength < taperStart ? taperStartEase(runningLength / taperStart) : 1;
        const te = totalLength - runningLength < taperEnd ? taperEndEase((totalLength - runningLength) / taperEnd) : 1;
        strokePoint.radius = Math.max(0.01, strokePoint.radius * Math.min(ts, te));
      }
    }
    return strokePoints;
  }

  // ../../../packages/primitives/src/lib/freehand/getStroke.ts
  function getStroke(points2, options = {}) {
    return getStrokeOutlinePoints(
      setStrokePointRadii(getStrokePoints(points2, options), options),
      options
    );
  }

  // ../../../packages/primitives/src/lib/intersect.ts
  function intersectLineSegmentLineSegment(a1, a22, b1, b22) {
    const ABx = a1.x - b1.x;
    const ABy = a1.y - b1.y;
    const BVx = b22.x - b1.x;
    const BVy = b22.y - b1.y;
    const AVx = a22.x - a1.x;
    const AVy = a22.y - a1.y;
    const ua_t = BVx * ABy - BVy * ABx;
    const ub_t = AVx * ABy - AVy * ABx;
    const u_b = BVy * AVx - BVx * AVy;
    if (ua_t === 0 || ub_t === 0)
      return null;
    if (u_b === 0)
      return null;
    if (u_b !== 0) {
      const ua = ua_t / u_b;
      const ub = ub_t / u_b;
      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
        return Vec2d.AddXY(a1, ua * AVx, ua * AVy);
      }
    }
    return null;
  }
  function intersectLineSegmentCircle(a1, a22, c3, r3) {
    const a3 = (a22.x - a1.x) * (a22.x - a1.x) + (a22.y - a1.y) * (a22.y - a1.y);
    const b3 = 2 * ((a22.x - a1.x) * (a1.x - c3.x) + (a22.y - a1.y) * (a1.y - c3.y));
    const cc = c3.x * c3.x + c3.y * c3.y + a1.x * a1.x + a1.y * a1.y - 2 * (c3.x * a1.x + c3.y * a1.y) - r3 * r3;
    const deter = b3 * b3 - 4 * a3 * cc;
    if (deter < 0)
      return null;
    if (deter === 0)
      return null;
    const e2 = Math.sqrt(deter);
    const u1 = (-b3 + e2) / (2 * a3);
    const u22 = (-b3 - e2) / (2 * a3);
    if ((u1 < 0 || u1 > 1) && (u22 < 0 || u22 > 1)) {
      return null;
    }
    const result = [];
    if (0 <= u1 && u1 <= 1)
      result.push(Vec2d.Lrp(a1, a22, u1));
    if (0 <= u22 && u22 <= 1)
      result.push(Vec2d.Lrp(a1, a22, u22));
    if (result.length === 0)
      return null;
    return result;
  }
  function intersectLineSegmentPolyline(a1, a22, points2) {
    const result = [];
    let segmentIntersection;
    for (let i3 = 0, n3 = points2.length - 1; i3 < n3; i3++) {
      segmentIntersection = intersectLineSegmentLineSegment(a1, a22, points2[i3], points2[i3 + 1]);
      if (segmentIntersection)
        result.push(segmentIntersection);
    }
    if (result.length === 0)
      return null;
    return result;
  }
  function intersectLineSegmentPolygon(a1, a22, points2) {
    const result = [];
    let segmentIntersection;
    for (let i3 = 1, n3 = points2.length; i3 < n3 + 1; i3++) {
      segmentIntersection = intersectLineSegmentLineSegment(
        a1,
        a22,
        points2[i3 - 1],
        points2[i3 % points2.length]
      );
      if (segmentIntersection)
        result.push(segmentIntersection);
    }
    if (result.length === 0)
      return null;
    return result;
  }
  function intersectCircleCircle(c1, r1, c22, r22) {
    let dx = c22.x - c1.x;
    let dy = c22.y - c1.y;
    const d3 = Math.sqrt(dx * dx + dy * dy), x3 = (d3 * d3 - r22 * r22 + r1 * r1) / (2 * d3), y3 = Math.sqrt(r1 * r1 - x3 * x3);
    dx /= d3;
    dy /= d3;
    return [
      new Vec2d(c1.x + dx * x3 - dy * y3, c1.y + dy * x3 + dx * y3),
      new Vec2d(c1.x + dx * x3 + dy * y3, c1.y + dy * x3 - dx * y3)
    ];
  }
  function intersectCirclePolygon(c3, r3, points2) {
    const result = [];
    let a3, b3, int;
    for (let i3 = 0, n3 = points2.length; i3 < n3; i3++) {
      a3 = points2[i3];
      b3 = points2[(i3 + 1) % points2.length];
      int = intersectLineSegmentCircle(a3, b3, c3, r3);
      if (int)
        result.push(...int);
    }
    if (result.length === 0)
      return null;
    return result;
  }
  function intersectCirclePolyline(c3, r3, points2) {
    const result = [];
    let a3, b3, int;
    for (let i3 = 1, n3 = points2.length; i3 < n3; i3++) {
      a3 = points2[i3 - 1];
      b3 = points2[i3];
      int = intersectLineSegmentCircle(a3, b3, c3, r3);
      if (int)
        result.push(...int);
    }
    if (result.length === 0)
      return null;
    return result;
  }
  function ccw(A2, B, C2) {
    return (C2.y - A2.y) * (B.x - A2.x) > (B.y - A2.y) * (C2.x - A2.x);
  }
  function linesIntersect(A2, B, C2, D3) {
    return ccw(A2, C2, D3) !== ccw(B, C2, D3) && ccw(A2, B, C2) !== ccw(A2, B, D3);
  }
  function intersectPolygonPolygon(polygonA, polygonB) {
    const result = [];
    let a3, b3, c3, d3;
    for (let i3 = 0, n3 = polygonA.length; i3 < n3; i3++) {
      a3 = polygonA[i3];
      if (pointInPolygon(a3, polygonB)) {
        result.push(a3);
      }
    }
    for (let i3 = 0, n3 = polygonB.length; i3 < n3; i3++) {
      a3 = polygonB[i3];
      if (pointInPolygon(a3, polygonA)) {
        result.push(a3);
      }
    }
    for (let i3 = 0, n3 = polygonA.length; i3 < n3; i3++) {
      a3 = polygonA[i3];
      b3 = polygonA[(i3 + 1) % polygonA.length];
      for (let j = 0, m3 = polygonB.length; j < m3; j++) {
        c3 = polygonB[j];
        d3 = polygonB[(j + 1) % polygonB.length];
        const intersection = intersectLineSegmentLineSegment(a3, b3, c3, d3);
        if (intersection !== null) {
          result.push(intersection);
        }
      }
    }
    if (result.length === 0)
      return null;
    return orderClockwise(result);
  }
  function orderClockwise(points2) {
    const C2 = Vec2d.Average(points2);
    return points2.sort((A2, B) => Vec2d.Angle(C2, A2) - Vec2d.Angle(C2, B));
  }
  function polygonsIntersect(a3, b3) {
    let a0, a1, b0, b1;
    for (let i3 = 0, n3 = a3.length; i3 < n3; i3++) {
      a0 = a3[i3];
      a1 = a3[(i3 + 1) % n3];
      for (let j = 0, m3 = b3.length; j < m3; j++) {
        b0 = b3[j];
        b1 = b3[(j + 1) % m3];
        if (linesIntersect(a0, a1, b0, b1))
          return true;
      }
    }
    return false;
  }

  // ../../../packages/primitives/src/lib/polygon-helpers.ts
  function precise(A2) {
    return `${toDomPrecision(A2.x)},${toDomPrecision(A2.y)} `;
  }
  function rng2(seed = "") {
    let x3 = 0;
    let y3 = 0;
    let z2 = 0;
    let w3 = 0;
    function next() {
      const t4 = x3 ^ x3 << 11;
      x3 = y3;
      y3 = z2;
      z2 = w3;
      w3 ^= (w3 >>> 19 ^ t4 ^ t4 >>> 8) >>> 0;
      return w3 / 4294967296 * 2;
    }
    for (let k2 = 0; k2 < seed.length + 64; k2++) {
      x3 ^= seed.charCodeAt(k2) | 0;
      next();
    }
    return next;
  }
  function getRoundedInkyPolygonPath(points2) {
    let polylineA = `M`;
    const len = points2.length;
    let p0;
    let p1;
    let p22;
    for (let i3 = 0, n3 = len; i3 < n3; i3 += 3) {
      p0 = points2[i3];
      p1 = points2[i3 + 1];
      p22 = points2[i3 + 2];
      polylineA += `${precise(p0)}L${precise(p1)}Q${precise(p22)}`;
    }
    polylineA += `${precise(points2[0])}`;
    return polylineA;
  }
  function getRoundedPolygonPoints(id, outline, offset, roundness, passes) {
    const results = [];
    const random = rng2(id);
    let p0 = outline[0];
    let p1;
    const len = outline.length;
    for (let i3 = 0, n3 = len * passes; i3 < n3; i3++) {
      p1 = Vec2d.AddXY(outline[(i3 + 1) % len], random() * offset, random() * offset);
      const delta = Vec2d.Sub(p1, p0);
      const distance = Vec2d.Len(delta);
      const vector = Vec2d.Div(delta, distance).mul(Math.min(distance / 4, roundness));
      results.push(Vec2d.Add(p0, vector), Vec2d.Add(p1, vector.neg()), p1);
      p0 = p1;
    }
    return results;
  }
  function getDrawLinePathData(id, outline, strokeWidth) {
    let innerPathData = `M${precise(outline[0])}L`;
    let outerPathData1 = `M${precise(outline[0])}L`;
    let outerPathData2 = `M${precise(outline[0])}L`;
    const offset = strokeWidth / 3;
    const roundness = strokeWidth * 2;
    const random = rng2(id);
    let p0 = outline[0];
    let p1;
    let s0 = outline[0];
    let s1;
    const len = outline.length;
    for (let i3 = 0, n3 = len - 1; i3 < n3; i3++) {
      p1 = Vec2d.AddXY(outline[i3 + 1], random() * offset, random() * offset);
      s1 = Vec2d.AddXY(outline[i3 + 1], random(), random() * offset);
      const delta = Vec2d.Sub(p1, p0);
      const distance = Vec2d.Len(delta);
      const vector = Vec2d.Div(delta, distance).mul(Math.min(distance / 4, roundness));
      const q0 = Vec2d.Add(p0, vector);
      const q1 = Vec2d.Add(p1, vector.neg());
      const sDelta = Vec2d.Sub(s1, s0);
      const sDistance = Vec2d.Len(sDelta);
      const sVector = Vec2d.Div(sDelta, sDistance).mul(Math.min(sDistance / 4, roundness));
      const sq0 = Vec2d.Add(s0, sVector);
      const sq1 = Vec2d.Add(s1, sVector.neg());
      if (i3 === n3 - 1) {
        innerPathData += `${precise(q0)} L ${precise(p1)}`;
        outerPathData1 += `${precise(q0)} L ${precise(p1)}`;
        outerPathData2 += `${precise(sq0)} L ${precise(s1)}`;
      } else {
        innerPathData += `${precise(q0)}L ${precise(q1)}Q ${precise(p1)}`;
        outerPathData1 += `${precise(q0)}L ${precise(q1)}Q ${precise(p1)}`;
        outerPathData2 += `${precise(sq0)}L ${precise(sq1)}Q ${precise(s1)}`;
        p0 = p1;
        s0 = s1;
      }
    }
    return [innerPathData, outerPathData1 + outerPathData2];
  }

  // ../../../packages/editor/src/lib/app/App.ts
  var import_eventemitter3 = __toESM(require_eventemitter3());

  // ../../../packages/editor/src/lib/app/shapeutils/TLArrowUtil/TLArrowUtil.tsx
  var React7 = __toESM(require_react());

  // ../../../packages/editor/src/lib/components/SVGContainer.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  function SVGContainer(_a5) {
    var _b2 = _a5, { children, className = "" } = _b2, rest = __objRest(_b2, ["children", "className"]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", __spreadProps(__spreadValues({}, rest), { className: `tl-svg-container ${className}`, children }));
  }

  // ../../../packages/editor/src/lib/config/TLShapeDefinition.ts
  function defineShape({
    type,
    getShapeUtil,
    validator,
    migrations = { currentVersion: 0, firstVersion: 0, migrators: {} }
  }) {
    if (!validator && false) {
      console.warn(
        `No validator provided for shape type ${type}! Validators are highly recommended for use in production.`
      );
    }
    return {
      type,
      createShapeUtils: (app) => {
        const ShapeUtil = getShapeUtil();
        return new ShapeUtil(app, type);
      },
      is: (shape) => shape.type === type,
      validator,
      migrations
    };
  }

  // ../../../packages/editor/src/lib/constants.ts
  var MAX_SHAPES_PER_PAGE = 2e3;
  var MAX_PAGES = 40;
  var REMOVE_SYMBOL = Symbol("remove");
  var ANIMATION_MEDIUM_MS = 320;
  var ZOOMS = [0.1, 0.25, 0.5, 1, 2, 4, 8];
  var MIN_ZOOM = 0.1;
  var MAX_ZOOM = 8;
  var FOLLOW_CHASE_PROPORTION = 0.5;
  var FOLLOW_CHASE_PAN_SNAP = 0.1;
  var FOLLOW_CHASE_PAN_UNSNAP = 0.2;
  var FOLLOW_CHASE_ZOOM_SNAP = 5e-3;
  var FOLLOW_CHASE_ZOOM_UNSNAP = 0.05;
  var MAJOR_NUDGE_FACTOR = 10;
  var MINOR_NUDGE_FACTOR = 1;
  var MAX_ASSET_WIDTH = 1e3;
  var MAX_ASSET_HEIGHT = 1e3;
  var GRID_INCREMENT = 5;
  var MIN_CROP_SIZE = 8;
  var DOUBLE_CLICK_DURATION = 450;
  var MULTI_CLICK_DURATION = 200;
  var COARSE_DRAG_DISTANCE = 6;
  var DRAG_DISTANCE = 4;
  var SVG_PADDING = 32;
  var HASH_PATERN_ZOOM_NAMES = {};
  for (let zoom = 1; zoom <= Math.ceil(MAX_ZOOM); zoom++) {
    HASH_PATERN_ZOOM_NAMES[zoom + "_dark"] = `hash_pattern_zoom_${zoom}_dark`;
    HASH_PATERN_ZOOM_NAMES[zoom + "_light"] = `hash_pattern_zoom_${zoom}_light`;
  }
  var DEFAULT_ANIMATION_OPTIONS = {
    duration: 0,
    easing: EASINGS.easeInOutCubic
  };
  var HAND_TOOL_FRICTION = 0.09;
  var MIN_ARROW_LENGTH = 48;
  var BOUND_ARROW_OFFSET = 10;
  var WAY_TOO_BIG_ARROW_BEND_FACTOR = 10;
  var DEFAULT_BOOKMARK_WIDTH = 300;
  var DEFAULT_BOOKMARK_HEIGHT = 320;
  var ROTATING_SHADOWS = [
    {
      offsetX: 0,
      offsetY: 2,
      blur: 4,
      spread: 0,
      color: "#00000029"
    },
    {
      offsetX: 0,
      offsetY: 3,
      blur: 6,
      spread: 0,
      color: "#0000001f"
    }
  ];
  var GRID_STEPS = [
    { min: -1, mid: 0.15, step: 100 },
    { min: 0.05, mid: 0.375, step: 25 },
    { min: 0.15, mid: 1, step: 5 },
    { min: 0.7, mid: 2.5, step: 1 }
  ];
  var TEXT_PROPS = {
    lineHeight: 1.35,
    fontWeight: "normal",
    fontVariant: "normal",
    fontStyle: "normal",
    padding: "0px",
    maxWidth: "auto"
  };
  var FONT_SIZES = {
    s: 18,
    m: 24,
    l: 36,
    xl: 44
  };
  var LABEL_FONT_SIZES = {
    s: 18,
    m: 22,
    l: 26,
    xl: 32
  };
  var ARROW_LABEL_FONT_SIZES = {
    s: 18,
    m: 20,
    l: 24,
    xl: 28
  };
  var FONT_FAMILIES = {
    draw: "var(--tl-font-draw)",
    sans: "var(--tl-font-sans)",
    serif: "var(--tl-font-serif)",
    mono: "var(--tl-font-mono)"
  };
  var STYLES = {
    color: [
      { id: "black", type: "color", icon: "color" },
      { id: "grey", type: "color", icon: "color" },
      { id: "light-violet", type: "color", icon: "color" },
      { id: "violet", type: "color", icon: "color" },
      { id: "blue", type: "color", icon: "color" },
      { id: "light-blue", type: "color", icon: "color" },
      { id: "yellow", type: "color", icon: "color" },
      { id: "orange", type: "color", icon: "color" },
      { id: "green", type: "color", icon: "color" },
      { id: "light-green", type: "color", icon: "color" },
      { id: "light-red", type: "color", icon: "color" },
      { id: "red", type: "color", icon: "color" }
    ],
    fill: [
      { id: "none", type: "fill", icon: "fill-none" },
      { id: "semi", type: "fill", icon: "fill-semi" },
      { id: "solid", type: "fill", icon: "fill-solid" },
      { id: "pattern", type: "fill", icon: "fill-pattern" }
    ],
    dash: [
      { id: "draw", type: "dash", icon: "dash-draw" },
      { id: "dashed", type: "dash", icon: "dash-dashed" },
      { id: "dotted", type: "dash", icon: "dash-dotted" },
      { id: "solid", type: "dash", icon: "dash-solid" }
    ],
    size: [
      { id: "s", type: "size", icon: "size-small" },
      { id: "m", type: "size", icon: "size-medium" },
      { id: "l", type: "size", icon: "size-large" },
      { id: "xl", type: "size", icon: "size-extra-large" }
    ],
    opacity: [
      { id: "0.1", type: "opacity", icon: "color" },
      { id: "0.25", type: "opacity", icon: "color" },
      { id: "0.5", type: "opacity", icon: "color" },
      { id: "0.75", type: "opacity", icon: "color" },
      { id: "1", type: "opacity", icon: "color" }
    ],
    font: [
      { id: "draw", type: "font", icon: "font-draw" },
      { id: "sans", type: "font", icon: "font-sans" },
      { id: "serif", type: "font", icon: "font-serif" },
      { id: "mono", type: "font", icon: "font-mono" }
    ],
    align: [
      { id: "start", type: "align", icon: "text-align-left" },
      { id: "middle", type: "align", icon: "text-align-center" },
      { id: "end", type: "align", icon: "text-align-right" }
    ],
    geo: [
      { id: "rectangle", type: "geo", icon: "geo-rectangle" },
      { id: "ellipse", type: "geo", icon: "geo-ellipse" },
      { id: "triangle", type: "geo", icon: "geo-triangle" },
      { id: "diamond", type: "geo", icon: "geo-diamond" },
      { id: "pentagon", type: "geo", icon: "geo-pentagon" },
      { id: "hexagon", type: "geo", icon: "geo-hexagon" },
      { id: "octagon", type: "geo", icon: "geo-octagon" },
      { id: "star", type: "geo", icon: "geo-star" },
      { id: "rhombus", type: "geo", icon: "geo-rhombus" },
      { id: "rhombus-2", type: "geo", icon: "geo-rhombus-2" },
      { id: "oval", type: "geo", icon: "geo-oval" },
      { id: "trapezoid", type: "geo", icon: "geo-trapezoid" },
      { id: "arrow-right", type: "geo", icon: "geo-arrow-right" },
      { id: "arrow-left", type: "geo", icon: "geo-arrow-left" },
      { id: "arrow-up", type: "geo", icon: "geo-arrow-up" },
      { id: "arrow-down", type: "geo", icon: "geo-arrow-down" },
      { id: "x-box", type: "geo", icon: "geo-x-box" },
      { id: "check-box", type: "geo", icon: "geo-check-box" }
    ],
    arrowheadStart: [
      { id: "none", type: "arrowheadStart", icon: "arrowhead-none" },
      { id: "arrow", type: "arrowheadStart", icon: "arrowhead-arrow" },
      { id: "triangle", type: "arrowheadStart", icon: "arrowhead-triangle" },
      { id: "square", type: "arrowheadStart", icon: "arrowhead-square" },
      { id: "dot", type: "arrowheadStart", icon: "arrowhead-dot" },
      { id: "diamond", type: "arrowheadStart", icon: "arrowhead-diamond" },
      { id: "inverted", type: "arrowheadStart", icon: "arrowhead-triangle-inverted" },
      { id: "bar", type: "arrowheadStart", icon: "arrowhead-bar" }
    ],
    arrowheadEnd: [
      { id: "none", type: "arrowheadEnd", icon: "arrowhead-none" },
      { id: "arrow", type: "arrowheadEnd", icon: "arrowhead-arrow" },
      { id: "triangle", type: "arrowheadEnd", icon: "arrowhead-triangle" },
      { id: "square", type: "arrowheadEnd", icon: "arrowhead-square" },
      { id: "dot", type: "arrowheadEnd", icon: "arrowhead-dot" },
      { id: "diamond", type: "arrowheadEnd", icon: "arrowhead-diamond" },
      { id: "inverted", type: "arrowheadEnd", icon: "arrowhead-triangle-inverted" },
      { id: "bar", type: "arrowheadEnd", icon: "arrowhead-bar" }
    ],
    spline: [
      { id: "line", type: "spline", icon: "spline-line" },
      { id: "cubic", type: "spline", icon: "spline-cubic" }
    ]
  };
  var BLACKLISTED_PROPS = /* @__PURE__ */ new Set([
    "bend",
    "w",
    "h",
    "start",
    "end",
    "text",
    "name",
    "url",
    "growY"
  ]);

  // ../../../packages/editor/src/lib/app/shapeutils/shared/getPerfectDashProps.ts
  function getPerfectDashProps(totalLength, strokeWidth, opts = {}) {
    const {
      closed = false,
      snap = 1,
      start = "outset",
      end = "outset",
      lengthRatio = 2,
      style = "dashed"
    } = opts;
    let dashLength = 0;
    let dashCount = 0;
    let ratio = 1;
    let gapLength = 0;
    let strokeDashoffset = 0;
    switch (style) {
      case "dashed": {
        ratio = 1;
        dashLength = Math.min(strokeWidth * lengthRatio, totalLength / 4);
        break;
      }
      case "dotted": {
        ratio = 100;
        dashLength = strokeWidth / ratio;
        break;
      }
      default: {
        return {
          strokeDasharray: "none",
          strokeDashoffset: "none"
        };
      }
    }
    if (!closed) {
      if (start === "outset") {
        totalLength += dashLength / 2;
        strokeDashoffset += dashLength / 2;
      } else if (start === "skip") {
        totalLength -= dashLength;
        strokeDashoffset -= dashLength;
      }
      if (end === "outset") {
        totalLength += dashLength / 2;
      } else if (end === "skip") {
        totalLength -= dashLength;
      }
    }
    dashCount = Math.floor(totalLength / dashLength / (2 * ratio));
    dashCount -= dashCount % snap;
    if (dashCount < 3 && style === "dashed") {
      if (totalLength / strokeWidth < 5) {
        dashLength = totalLength;
        dashCount = 1;
        gapLength = 0;
      } else {
        dashLength = totalLength * 0.333;
        gapLength = totalLength * 0.333;
      }
    } else {
      dashCount = Math.max(dashCount, 3);
      dashLength = totalLength / dashCount / (2 * ratio);
      if (closed) {
        strokeDashoffset = dashLength / 2;
        gapLength = (totalLength - dashCount * dashLength) / dashCount;
      } else {
        gapLength = (totalLength - dashCount * dashLength) / Math.max(1, dashCount - 1);
      }
    }
    return {
      strokeDasharray: [dashLength, gapLength].join(" "),
      strokeDashoffset: strokeDashoffset.toString()
    };
  }

  // ../../../packages/editor/src/lib/utils/string.ts
  function defaultEmptyAs(str, dflt) {
    if (str.match(/^\s*$/)) {
      return dflt;
    }
    return str;
  }
  function correctSpacesToNbsp(input) {
    return input.replace(/\s/g, "\xA0");
  }

  // ../../../packages/editor/src/lib/app/shapeutils/shared/getTextSvgElement.ts
  function getTextSvgElement(app, opts) {
    const { padding = 0 } = opts;
    const textElm = document.createElementNS("http://www.w3.org/2000/svg", "text");
    textElm.setAttribute("font-size", opts.fontSize + "px");
    textElm.setAttribute("font-family", opts.fontFamily);
    textElm.setAttribute("font-style", opts.fontStyle);
    textElm.setAttribute("font-weight", opts.fontWeight);
    textElm.setAttribute("line-height", opts.lineHeight * opts.fontSize + "px");
    textElm.setAttribute("dominant-baseline", "mathematical");
    textElm.setAttribute("alignment-baseline", "mathematical");
    const lines = opts.lines.map((line) => line);
    const tspans = [];
    const innerHeight = lines.length * (opts.lineHeight * opts.fontSize);
    const offsetY = (Math.ceil(opts.height) - innerHeight) / 2;
    const offsetX = padding;
    for (let i3 = 0; i3 < lines.length; i3++) {
      const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
      tspan.setAttribute("alignment-baseline", "mathematical");
      const cleanText = correctSpacesToNbsp(lines[i3]);
      tspan.textContent = cleanText;
      if (lines.length > 1 && i3 < lines.length - 1) {
        tspan.textContent += "\n";
      }
      tspan.setAttribute(
        "y",
        offsetY + opts.fontSize / 2 + opts.lineHeight * opts.fontSize * i3 + "px"
      );
      textElm.appendChild(tspan);
      tspans.push(tspan);
    }
    if (opts.stroke && opts.strokeWidth) {
      textElm.setAttribute("stroke", opts.stroke);
      textElm.setAttribute("stroke-width", opts.strokeWidth + "px");
    }
    if (opts.fill) {
      textElm.setAttribute("fill", opts.fill);
    }
    switch (opts.textAlign) {
      case "middle": {
        textElm.setAttribute("text-align", "center");
        textElm.setAttribute("text-anchor", "start");
        tspans.forEach((tspan, i3) => {
          const w3 = app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
            text: lines[i3],
            fontFamily: opts.fontFamily,
            fontSize: opts.fontSize,
            width: "fit-content",
            padding: `${padding}px`
          })).w;
          tspan.setAttribute("x", offsetX + (opts.width - w3) / 2 + "");
        });
        break;
      }
      case "end": {
        textElm.setAttribute("text-align", "right");
        textElm.setAttribute("text-anchor", "start");
        tspans.forEach((tspan, i3) => {
          const w3 = app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
            text: lines[i3],
            fontFamily: opts.fontFamily,
            fontSize: opts.fontSize,
            width: "fit-content",
            padding: `${padding}px`
          })).w;
          tspan.setAttribute("x", offsetX + opts.width - w3 + "");
        });
        break;
      }
      default: {
        textElm.setAttribute("text-align", "left");
        textElm.setAttribute("text-anchor", "start");
        tspans.forEach((tspan) => tspan.setAttribute("x", offsetX + ""));
      }
    }
    return textElm;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/shared/ShapeFill.tsx
  var React3 = __toESM(require_react());

  // ../../../node_modules/signia-react/dist/esm/track.mjs
  var import_react2 = __toESM(require_react(), 1);

  // ../../../node_modules/signia-react/dist/esm/useStateTracking.mjs
  var import_react = __toESM(require_react(), 1);
  function useStateTracking(name, render) {
    const renderRef = import_react.default.useRef(render);
    renderRef.current = render;
    const [scheduler, subscribe, getSnapshot] = import_react.default.useMemo(() => {
      let scheduleUpdate = null;
      const subscribe2 = (cb) => {
        scheduleUpdate = cb;
        return () => {
          scheduleUpdate = null;
        };
      };
      const scheduler2 = new EffectScheduler(
        `useStateTracking(${name})`,
        // this is what `scheduler.execute()` will call
        () => {
          var _a5;
          return (_a5 = renderRef.current) == null ? void 0 : _a5.call(renderRef);
        },
        // this is what will be invoked when signia detects a change in an upstream reactive value
        {
          scheduleEffect() {
            scheduleUpdate == null ? void 0 : scheduleUpdate();
          }
        }
      );
      const getSnapshot2 = () => scheduler2.scheduleCount;
      return [scheduler2, subscribe2, getSnapshot2];
    }, [name]);
    import_react.default.useSyncExternalStore(subscribe, getSnapshot, getSnapshot);
    import_react.default.useEffect(() => {
      scheduler.attach();
      scheduler.maybeScheduleEffect();
      return () => {
        scheduler.detach();
      };
    }, [scheduler]);
    return scheduler.execute();
  }

  // ../../../node_modules/signia-react/dist/esm/track.mjs
  var ProxyHandlers = {
    /**
     * This is a function call trap for functional components. When this is called, we know it means
     * React did run 'Component()', that means we can use any hooks here to setup our effect and
     * store.
     *
     * With the native Proxy, all other calls such as access/setting to/of properties will be
     * forwarded to the target Component, so we don't need to copy the Component's own or inherited
     * properties.
     *
     * @see https://github.com/facebook/react/blob/2d80a0cd690bb5650b6c8a6c079a87b5dc42bd15/packages/react-reconciler/src/ReactFiberHooks.old.js#L460
     */
    apply(Component3, thisArg, argumentsList) {
      var _a5, _b2;
      return useStateTracking(
        (_b2 = (_a5 = Component3.displayName) != null ? _a5 : Component3.name) != null ? _b2 : "tracked(???)",
        () => Component3.apply(thisArg, argumentsList)
      );
    }
  };
  var ReactMemoSymbol = Symbol.for("react.memo");
  var ReactForwardRefSymbol = Symbol.for("react.forward_ref");
  function track(baseComponent) {
    let compare = null;
    const $$typeof = baseComponent["$$typeof"];
    if ($$typeof === ReactMemoSymbol) {
      baseComponent = baseComponent.type;
      compare = baseComponent.compare;
    }
    if ($$typeof === ReactForwardRefSymbol) {
      return (0, import_react2.memo)((0, import_react2.forwardRef)(new Proxy(baseComponent.render, ProxyHandlers)));
    }
    return (0, import_react2.memo)(new Proxy(baseComponent, ProxyHandlers), compare);
  }

  // ../../../node_modules/signia-react/dist/esm/useAtom.mjs
  var import_react3 = __toESM(require_react(), 1);
  function useAtom(name, valueOrInitialiser, options) {
    return (0, import_react3.useMemo)(() => {
      const initialValue = typeof valueOrInitialiser === "function" ? valueOrInitialiser() : valueOrInitialiser;
      return atom(`useAtom(${name})`, initialValue, options);
    }, []);
  }

  // ../../../node_modules/signia-react/dist/esm/useComputed.mjs
  var import_react4 = __toESM(require_react(), 1);
  function useComputed() {
    const name = arguments[0];
    const compute = arguments[1];
    const opts = arguments.length === 3 ? void 0 : arguments[2];
    const deps = arguments.length === 3 ? arguments[2] : arguments[3];
    return (0, import_react4.useMemo)(() => computed(`useComputed(${name})`, compute, opts), deps);
  }

  // ../../../node_modules/signia-react/dist/esm/useValue.mjs
  var import_react5 = __toESM(require_react(), 1);
  function useValue() {
    const args = arguments;
    const deps = args.length === 3 ? args[2] : [args[0]];
    const name = args.length === 3 ? args[0] : `useValue(${args[0].name})`;
    const isInRender = (0, import_react5.useRef)(true);
    isInRender.current = true;
    const $val = (0, import_react5.useMemo)(() => {
      if (args.length === 1) {
        return args[0];
      }
      return computed(name, () => {
        if (isInRender.current) {
          return args[1]();
        } else {
          try {
            return args[1]();
          } catch (e2) {
            return {};
          }
        }
      });
    }, deps);
    try {
      const { subscribe, getSnapshot } = (0, import_react5.useMemo)(() => {
        return {
          subscribe: (listen) => {
            return react(`useValue(${name})`, () => {
              $val.value;
              listen();
            });
          },
          getSnapshot: () => $val.value
        };
      }, [$val]);
      return (0, import_react5.useSyncExternalStore)(subscribe, getSnapshot, getSnapshot);
    } finally {
      isInRender.current = false;
    }
  }

  // ../../../node_modules/signia-react/dist/esm/wrapJsx.mjs
  var import_react6 = __toESM(require_react(), 1);
  var ReactMemoType = Symbol.for("react.memo");
  var ReactForwardRefType = Symbol.for("react.forward_ref");

  // ../../../packages/editor/src/lib/hooks/useApp.ts
  var import_react7 = __toESM(require_react());
  var AppContext = import_react7.default.createContext({});
  var useApp = () => {
    return import_react7.default.useContext(AppContext);
  };

  // ../../../packages/editor/src/lib/app/shapeutils/shared/ShapeFill.tsx
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var ShapeFill = React3.memo(function ShapeFill2({ d: d3, color, fill }) {
    switch (fill) {
      case "none": {
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { className: "tl-hitarea-stroke", fill: "none", d: d3 });
      }
      case "solid": {
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-${color}-semi)`, d: d3 });
      }
      case "semi": {
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-solid)`, d: d3 });
      }
      case "pattern": {
        return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(PatternFill, { color, fill, d: d3 });
      }
    }
  });
  var PatternFill = function PatternFill2({ d: d3, color }) {
    const app = useApp();
    const zoomLevel = useValue("zoomLevel", () => app.zoomLevel, [app]);
    const isDarkMode = useValue("isDarkMode", () => app.userDocumentSettings.isDarkMode, [app]);
    const intZoom = Math.ceil(zoomLevel);
    const teenyTiny = app.zoomLevel <= 0.18;
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("path", { className: "tl-hitarea-fill-solid", fill: `var(--palette-${color}-pattern)`, d: d3 }),
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
        "path",
        {
          fill: teenyTiny ? `var(--palette-${color}-semi)` : `url(#${HASH_PATERN_ZOOM_NAMES[intZoom + (isDarkMode ? "_dark" : "_light")]})`,
          d: d3
        }
      )
    ] });
  };
  function getShapeFillSvg({
    d: d3,
    color,
    fill,
    colors
  }) {
    if (fill === "none") {
      return;
    }
    if (fill === "pattern") {
      const gEl = document.createElementNS("http://www.w3.org/2000/svg", "g");
      const path1El = document.createElementNS("http://www.w3.org/2000/svg", "path");
      path1El.setAttribute("d", d3);
      path1El.setAttribute("fill", colors.pattern[color]);
      const path2El = document.createElementNS("http://www.w3.org/2000/svg", "path");
      path2El.setAttribute("d", d3);
      path2El.setAttribute("fill", `url(#hash_pattern)`);
      gEl.appendChild(path1El);
      gEl.appendChild(path2El);
      return gEl;
    }
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", d3);
    switch (fill) {
      case "semi": {
        path.setAttribute("fill", colors.solid);
        break;
      }
      case "solid": {
        {
          path.setAttribute("fill", colors.semi[color]);
        }
        break;
      }
    }
    return path;
  }
  function getSvgWithShapeFill(foregroundPath, backgroundPath) {
    if (backgroundPath) {
      const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
      g3.appendChild(backgroundPath);
      g3.appendChild(foregroundPath);
      return g3;
    } else {
      return foregroundPath;
    }
  }

  // ../../../packages/editor/src/lib/utils/WeakMapCache.ts
  var WeakMapCache = class {
    constructor() {
      __publicField(this, "items", /* @__PURE__ */ new WeakMap());
    }
    get(item, cb) {
      if (!this.items.has(item)) {
        this.items.set(item, cb(item));
      }
      return this.items.get(item);
    }
    access(item) {
      return this.items.get(item);
    }
    set(item, value) {
      this.items.set(item, value);
    }
    has(item) {
      return this.items.has(item);
    }
    invalidate(item) {
      this.items.delete(item);
    }
    bust() {
      this.items = /* @__PURE__ */ new WeakMap();
    }
  };

  // ../../../packages/editor/src/lib/app/shapeutils/TLShapeUtil.ts
  var points = new WeakMapCache();
  var transforms = new WeakMapCache();
  var TLShapeUtil = class {
    constructor(app, type) {
      this.app = app;
      this.type = type;
      /**
       * Whether the shape can be scrolled while editing.
       *
       * @public
       */
      __publicField(this, "canScroll", () => false);
      /**
       * Whether the shape can be bound to by an arrow.
       *
       * @public
       */
      __publicField(this, "canUnmount", () => true);
      /**
       * Whether the shape can be bound to by an arrow.
       *
       * @param _otherShape - The other shape attempting to bind to this shape.
       * @public
       */
      __publicField(this, "canBind", (_shape, _otherShape) => true);
      /**
       * Whether the shape can be double clicked to edit.
       *
       * @public
       */
      __publicField(this, "canEdit", () => false);
      /**
       * Whether the shape can be resized.
       *
       * @public
       */
      __publicField(this, "canResize", () => true);
      /**
       * Whether the shape can be cropped.
       *
       * @public
       */
      __publicField(this, "canCrop", () => false);
      /**
       * Bounds of the shape to edit.
       *
       * Note: this could be a text area within a shape for example arrow labels.
       *
       * @public
       */
      __publicField(this, "getEditingBounds", (shape) => {
        return this.bounds(shape);
      });
      /**
       * Whether the shape's outline is closed.
       *
       * @public
       */
      __publicField(this, "isClosed", () => true);
      /**
       * Whether the shape should hide its resize handles when selected.
       *
       * @public
       */
      __publicField(this, "hideResizeHandles", () => false);
      /**
       * Whether the shape should hide its resize handles when selected.
       *
       * @public
       */
      __publicField(this, "hideRotateHandle", () => false);
      /**
       * Whether the shape should hide its selection bounds background when selected.
       *
       * @public
       */
      __publicField(this, "hideSelectionBoundsBg", () => false);
      /**
       * Whether the shape should hide its selection bounds foreground when selected.
       *
       * @public
       */
      __publicField(this, "hideSelectionBoundsFg", () => false);
      /**
       * Whether the shape's aspect ratio is locked.
       *
       * @public
       */
      __publicField(this, "isAspectRatioLocked", () => false);
      //  Events
      /**
       * A callback called just before a shape is created. This method provides a last chance to modify
       * the created shape.
       *
       * @example
       *
       * ```ts
       * onBeforeCreate = (next) => {
       * 	return { ...next, x: next.x + 1 }
       * }
       * ```
       *
       * @param next - The next shape.
       * @returns The next shape or void.
       * @public
       */
      __publicField(this, "onBeforeCreate");
      /**
       * A callback called just before a shape is updated. This method provides a last chance to modify
       * the updated shape.
       *
       * @example
       *
       * ```ts
       * onBeforeUpdate = (prev, next) => {
       * 	if (prev.x === next.x) {
       * 		return { ...next, x: next.x + 1 }
       * 	}
       * }
       * ```
       *
       * @param prev - The previous shape.
       * @param next - The next shape.
       * @returns The next shape or void.
       * @public
       */
      __publicField(this, "onBeforeUpdate");
      /**
       * A callback called when some other shapes are dragged over this one.
       *
       * @example
       *
       * ```ts
       * onDragShapesOver = (shape, shapes) => {
       * 	return { shouldHint: true }
       * }
       * ```
       *
       * @param shape - The shape.
       * @param shapes - The shapes that are being dragged over this one.
       * @returns An object specifying whether the shape should hint that it can receive the dragged shapes.
       * @public
       */
      __publicField(this, "onDragShapesOver");
      /**
       * A callback called when some other shapes are dragged out of this one.
       *
       * @param shape - The shape.
       * @param shapes - The shapes that are being dragged out.
       * @public
       */
      __publicField(this, "onDragShapesOut");
      /**
       * A callback called when some other shapes are dropped over this one.
       *
       * @param shape - The shape.
       * @param shapes - The shapes that are being dropped over this one.
       * @public
       */
      __publicField(this, "onDropShapesOver");
      /**
       * A callback called when a shape starts being resized.
       *
       * @param shape - The shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onResizeStart");
      /**
       * A callback called when a shape changes from a resize.
       *
       * @param shape - The shape at the start of the resize.
       * @param info - Info about the resize.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onResize");
      /**
       * A callback called when a shape finishes resizing.
       *
       * @param initial - The shape at the start of the resize.
       * @param current - The current shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onResizeEnd");
      /**
       * A callback called when a shape starts being translated.
       *
       * @param shape - The shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onTranslateStart");
      /**
       * A callback called when a shape changes from a translation.
       *
       * @param initial - The shape at the start of the translation.
       * @param current - The current shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onTranslate");
      /**
       * A callback called when a shape finishes translating.
       *
       * @param initial - The shape at the start of the translation.
       * @param current - The current shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onTranslateEnd");
      /**
       * A callback called when a shape starts being rotated.
       *
       * @param shape - The shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onRotateStart");
      /**
       * A callback called when a shape changes from a rotation.
       *
       * @param initial - The shape at the start of the rotation.
       * @param current - The current shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onRotate");
      /**
       * A callback called when a shape finishes rotating.
       *
       * @param initial - The shape at the start of the rotation.
       * @param current - The current shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onRotateEnd");
      /**
       * A callback called when a shape's handle changes.
       *
       * @param shape - The shape.
       * @param info - An object containing the handle and whether the handle is 'precise' or not.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onHandleChange");
      /**
       * Not currently used.
       *
       * @internal
       */
      __publicField(this, "onBindingChange");
      /**
       * A callback called when a shape's children change.
       *
       * @param shape - The shape.
       * @returns An array of shape updates, or void.
       * @public
       */
      __publicField(this, "onChildrenChange");
      /**
       * A callback called when a shape's handle is double clicked.
       *
       * @param shape - The shape.
       * @param handle - The handle that is double-clicked.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onDoubleClickHandle");
      /**
       * A callback called when a shape's edge is double clicked.
       *
       * @param shape - The shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onDoubleClickEdge");
      /**
       * A callback called when a shape is double clicked.
       *
       * @param shape - The shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onDoubleClick");
      /**
       * A callback called when a shape is clicked.
       *
       * @param shape - The shape.
       * @returns A change to apply to the shape, or void.
       * @public
       */
      __publicField(this, "onClick");
      /**
       * A callback called when a shape finishes being editing.
       *
       * @param shape - The shape.
       * @public
       */
      __publicField(this, "onEditEnd");
    }
    /**
     * Check if a shape is of this type.
     *
     * @param shape - The shape to check.
     * @returns Whether the shape is of this type.
     * @public
     */
    is(shape) {
      return shape.type === this.type;
    }
    get handlesCache() {
      return this.app.store.createComputedCache("handles:" + this.type, (shape) => {
        return this.getHandles(shape);
      });
    }
    /**
     * Get the cached handles (this should not be overridden!)
     *
     * @param shape - The shape.
     * @public
     */
    handles(shape) {
      var _a5;
      if (!this.getHandles)
        return EMPTY_ARRAY;
      return (_a5 = this.handlesCache.get(shape.id)) != null ? _a5 : EMPTY_ARRAY;
    }
    get boundsCache() {
      return this.app.store.createComputedCache("bounds:" + this.type, (shape) => {
        return this.getBounds(shape);
      });
    }
    /**
     * Get the cached bounds for the shape.
     *
     * @param shape - The shape.
     * @public
     */
    bounds(shape) {
      var _a5;
      const result = (_a5 = this.boundsCache.get(shape.id)) != null ? _a5 : new Box2d();
      if (result.width === 0 || result.height === 0) {
        return new Box2d(result.x, result.y, Math.max(result.width, 1), Math.max(result.height, 1));
      }
      return result;
    }
    /**
     * Get the cached transform. Do not override this method!
     *
     * @param shape - The shape.
     * @public
     */
    transform(shape) {
      return transforms.get(
        shape,
        (shape2) => Matrix2d.Compose(Matrix2d.Translate(shape2.x, shape2.y), Matrix2d.Rotate(shape2.rotation))
      );
    }
    /**
     * Get the cached point. Do not override this method!
     *
     * @param shape - The shape.
     * @public
     */
    point(shape) {
      return points.get(shape, (shape2) => ({ x: shape2.x, y: shape2.y }));
    }
    get outlineCache() {
      return this.app.store.createComputedCache("outline:" + this.type, (shape) => {
        return this.getOutline(shape);
      });
    }
    /**
     * Get the shape's outline. Do not override this method!
     *
     * @param shape - The shape.
     * @public
     */
    outline(shape) {
      var _a5;
      return (_a5 = this.outlineCache.get(shape.id)) != null ? _a5 : EMPTY_ARRAY;
    }
    /**
     * Get the shape's snap points.
     *
     * @param shape - The shape.
     * @public
     */
    snapPoints(shape) {
      return this.bounds(shape).snapPoints;
    }
    /**
     * Get the shape's cached center.
     *
     * @param shape - The shape.
     * @public
     */
    center(shape) {
      return this.getCenter(shape);
    }
    /**
     * Get whether the shape can receive children of a given type.
     *
     * @param type - The shape type.
     * @public
     */
    canReceiveNewChildrenOfType(type) {
      return false;
    }
    /**
     * Get whether the shape can receive children of a given type.
     *
     * @param shape - The shape type.
     * @param shapes - The shapes that are being dropped.
     * @public
     */
    canDropShapes(shape, shapes) {
      return false;
    }
    /**
     * Get whether a point intersects the shape.
     *
     * @param shape - The shape.
     * @param point - The point to test.
     * @returns Whether the point intersects the shape.
     * @public
     */
    hitTestPoint(shape, point2) {
      return this.bounds(shape).containsPoint(point2);
    }
    /**
     * Get whether a point intersects the shape.
     *
     * @param shape - The shape.
     * @param A - The line segment's first point.
     * @param B - The line segment's second point.
     * @returns Whether the line segment intersects the shape.
     * @public
     */
    hitTestLineSegment(shape, A2, B) {
      const outline = this.outline(shape);
      for (let i3 = 0; i3 < outline.length; i3++) {
        const C2 = outline[i3];
        const D3 = outline[(i3 + 1) % outline.length];
        if (linesIntersect(A2, B, C2, D3))
          return true;
      }
      return false;
    }
    /** @internal */
    expandSelectionOutlinePx(shape) {
      return 0;
    }
  };
  __decorateClass([
    computed
  ], TLShapeUtil.prototype, "handlesCache", 1);
  __decorateClass([
    computed
  ], TLShapeUtil.prototype, "boundsCache", 1);
  __decorateClass([
    computed
  ], TLShapeUtil.prototype, "outlineCache", 1);

  // ../../../packages/editor/src/lib/app/shapeutils/TLArrowUtil/arrow/arrowheads.ts
  function getArrowPoints(info, side, strokeWidth) {
    const PT = side === "end" ? info.end.point : info.start.point;
    const PB = side === "end" ? info.start.point : info.end.point;
    const compareLength = info.isStraight ? Vec2d.Dist(PB, PT) : Math.abs(info.bodyArc.length);
    const length = Math.max(Math.min(compareLength / 5, strokeWidth * 3), strokeWidth);
    let P0;
    if (info.isStraight) {
      P0 = Vec2d.Nudge(PT, PB, length);
    } else {
      const ints = intersectCircleCircle(PT, length, info.handleArc.center, info.handleArc.radius);
      P0 = side === "end" ? info.handleArc.sweepFlag ? ints[0] : ints[1] : info.handleArc.sweepFlag ? ints[1] : ints[0];
    }
    return {
      point: PT,
      int: P0
    };
  }
  function getArrowhead({ point: point2, int }) {
    const PL = Vec2d.RotWith(int, point2, PI / 6);
    const PR = Vec2d.RotWith(int, point2, -PI / 6);
    return `M ${PL.x} ${PL.y} L ${point2.x} ${point2.y} L ${PR.x} ${PR.y}`;
  }
  function getTriangleHead({ point: point2, int }) {
    const PL = Vec2d.RotWith(int, point2, PI / 6);
    const PR = Vec2d.RotWith(int, point2, -PI / 6);
    return `M ${PL.x} ${PL.y} L ${point2.x} ${point2.y} L ${PR.x} ${PR.y} Z`;
  }
  function getInvertedTriangleHead({ point: point2, int }) {
    const d3 = Vec2d.Sub(int, point2).div(2);
    const PL = Vec2d.Add(point2, Vec2d.Rot(d3, TAU));
    const PR = Vec2d.Sub(point2, Vec2d.Rot(d3, TAU));
    return `M ${PL.x} ${PL.y} L ${int.x} ${int.y} L ${PR.x} ${PR.y} Z`;
  }
  function getDotHead({ point: point2, int }) {
    const A2 = Vec2d.Lrp(point2, int, 0.45);
    const r3 = Vec2d.Dist(A2, point2);
    return `M ${A2.x - r3},${A2.y}
  a ${r3},${r3} 0 1,0 ${r3 * 2},0
  a ${r3},${r3} 0 1,0 -${r3 * 2},0 `;
  }
  function getDiamondHead({ point: point2, int }) {
    const PB = Vec2d.Lrp(point2, int, 0.75);
    const PL = Vec2d.RotWith(PB, point2, PI / 4);
    const PR = Vec2d.RotWith(PB, point2, -PI / 4);
    const PQ = Vec2d.Lrp(PL, PR, 0.5);
    PQ.add(Vec2d.Sub(PQ, point2));
    return `M ${PQ.x} ${PQ.y} L ${PL.x} ${PL.y} ${point2.x} ${point2.y} L ${PR.x} ${PR.y} Z`;
  }
  function getSquareHead({ int, point: point2 }) {
    const PB = Vec2d.Lrp(point2, int, 0.85);
    const d3 = Vec2d.Sub(PB, point2).div(2);
    const PL1 = Vec2d.Add(point2, Vec2d.Rot(d3, TAU));
    const PR1 = Vec2d.Sub(point2, Vec2d.Rot(d3, TAU));
    const PL2 = Vec2d.Add(PB, Vec2d.Rot(d3, TAU));
    const PR2 = Vec2d.Sub(PB, Vec2d.Rot(d3, TAU));
    return `M ${PL1.x} ${PL1.y} L ${PL2.x} ${PL2.y} L ${PR2.x} ${PR2.y} L ${PR1.x} ${PR1.y} Z`;
  }
  function getBarHead({ int, point: point2 }) {
    const d3 = Vec2d.Sub(int, point2).div(2);
    const PL = Vec2d.Add(point2, Vec2d.Rot(d3, TAU));
    const PR = Vec2d.Sub(point2, Vec2d.Rot(d3, TAU));
    return `M ${PL.x} ${PL.y} L ${PR.x} ${PR.y}`;
  }
  function getArrowheadPathForType(info, side, strokeWidth) {
    const type = side === "end" ? info.end.arrowhead : info.start.arrowhead;
    if (type === "none")
      return;
    const points2 = getArrowPoints(info, side, strokeWidth);
    if (!points2)
      return;
    switch (type) {
      case "bar":
        return getBarHead(points2);
      case "square":
        return getSquareHead(points2);
      case "diamond":
        return getDiamondHead(points2);
      case "dot":
        return getDotHead(points2);
      case "inverted":
        return getInvertedTriangleHead(points2);
      case "arrow":
        return getArrowhead(points2);
      case "triangle":
        return getTriangleHead(points2);
    }
    return "";
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLArrowUtil/arrow/shared.ts
  function getIsArrowStraight(shape) {
    return Math.abs(shape.props.bend) < 8;
  }
  function getBoundShapeInfoForTerminal(app, terminal) {
    if (terminal.type === "point") {
      return;
    }
    const shape = app.getShapeById(terminal.boundShapeId);
    const util = app.getShapeUtil(shape);
    const transform = app.getPageTransform(shape);
    return {
      shape,
      util,
      transform,
      isExact: terminal.isExact,
      didIntersect: false
    };
  }
  function getArrowTerminalInArrowSpace(app, arrowPageTransform, terminal) {
    if (terminal.type === "point") {
      return Vec2d.From(terminal);
    }
    const boundShape = app.getShapeById(terminal.boundShapeId);
    if (!boundShape) {
      console.error("Expected a bound shape!");
      return new Vec2d(0, 0);
    } else {
      const { point: point2, size } = app.getBounds(boundShape);
      const shapePoint = Vec2d.Add(point2, Vec2d.MulV(terminal.normalizedAnchor, size));
      const pagePoint = Matrix2d.applyToPoint(app.getPageTransform(boundShape), shapePoint);
      const arrowPoint = Matrix2d.applyToPoint(Matrix2d.Inverse(arrowPageTransform), pagePoint);
      return arrowPoint;
    }
  }
  function getArrowTerminalsInArrowSpace(app, shape) {
    const arrowPageTransform = app.getPageTransform(shape);
    const start = getArrowTerminalInArrowSpace(app, arrowPageTransform, shape.props.start);
    const end = getArrowTerminalInArrowSpace(app, arrowPageTransform, shape.props.end);
    return { start, end };
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLArrowUtil/arrow/straight-arrow.ts
  function getStraightArrowInfo(app, shape) {
    const { start, end, arrowheadStart, arrowheadEnd } = shape.props;
    const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(app, shape);
    const a3 = terminalsInArrowSpace.start.clone();
    const b3 = terminalsInArrowSpace.end.clone();
    const c3 = Vec2d.Med(a3, b3);
    const uAB = Vec2d.Sub(b3, a3).uni();
    const startShapeInfo = getBoundShapeInfoForTerminal(app, start);
    const endShapeInfo = getBoundShapeInfoForTerminal(app, end);
    const arrowPageTransform = app.getPageTransform(shape);
    updateArrowheadPointWithBoundShape(
      b3,
      // <-- will be mutated
      terminalsInArrowSpace.start,
      arrowPageTransform,
      endShapeInfo
    );
    updateArrowheadPointWithBoundShape(
      a3,
      // <-- will be mutated
      terminalsInArrowSpace.end,
      arrowPageTransform,
      startShapeInfo
    );
    let minDist = MIN_ARROW_LENGTH;
    const isSelfIntersection = startShapeInfo && endShapeInfo && startShapeInfo.shape === endShapeInfo.shape;
    if (startShapeInfo && endShapeInfo && !isSelfIntersection && !startShapeInfo.isExact && !endShapeInfo.isExact) {
      if (endShapeInfo.didIntersect && !startShapeInfo.didIntersect) {
        if (startShapeInfo.util.isClosed(startShapeInfo.shape)) {
          a3.setTo(Vec2d.Nudge(b3, a3, minDist));
        }
      } else if (!endShapeInfo.didIntersect) {
        if (endShapeInfo.util.isClosed(endShapeInfo.shape)) {
          b3.setTo(Vec2d.Nudge(a3, b3, minDist));
        }
      }
    }
    const u3 = Vec2d.Sub(b3, a3).uni();
    const didFlip = !Vec2d.Equals(u3, uAB);
    if (!isSelfIntersection) {
      if (startShapeInfo && arrowheadStart !== "none" && !startShapeInfo.isExact) {
        const offset = BOUND_ARROW_OFFSET + app.getStrokeWidth(shape.props.size) / 2 + ("size" in startShapeInfo.shape.props ? app.getStrokeWidth(startShapeInfo.shape.props.size) / 2 : 0);
        minDist -= offset;
        a3.nudge(b3, offset * (didFlip ? -1 : 1));
      }
      if (endShapeInfo && arrowheadEnd !== "none" && !endShapeInfo.isExact) {
        const offset = BOUND_ARROW_OFFSET + app.getStrokeWidth(shape.props.size) / 2 + ("size" in endShapeInfo.shape.props ? app.getStrokeWidth(endShapeInfo.shape.props.size) / 2 : 0);
        minDist -= offset;
        b3.nudge(a3, offset * (didFlip ? -1 : 1));
      }
    }
    if (startShapeInfo && endShapeInfo) {
      if (didFlip) {
        b3.setTo(Vec2d.Add(a3, u3.mul(-minDist)));
      } else if (Vec2d.Dist(a3, b3) < MIN_ARROW_LENGTH / 2) {
        b3.setTo(Vec2d.Add(a3, u3.mul(MIN_ARROW_LENGTH / 2)));
      }
    }
    if (didFlip) {
      c3.setTo(Vec2d.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end));
    } else {
      c3.setTo(Vec2d.Med(a3, b3));
    }
    const length = Vec2d.Dist(a3, b3);
    return {
      isStraight: true,
      start: {
        handle: terminalsInArrowSpace.start,
        point: a3,
        arrowhead: shape.props.arrowheadStart
      },
      end: {
        handle: terminalsInArrowSpace.end,
        point: b3,
        arrowhead: shape.props.arrowheadEnd
      },
      middle: c3,
      isValid: length > 0,
      length
    };
  }
  function updateArrowheadPointWithBoundShape(point2, opposite, arrowPageTransform, targetShapeInfo) {
    var _a5;
    if (targetShapeInfo === void 0) {
      return;
    }
    if (targetShapeInfo.isExact) {
      return;
    }
    const pageFrom = Matrix2d.applyToPoint(arrowPageTransform, opposite);
    const pageTo = Matrix2d.applyToPoint(arrowPageTransform, point2);
    const targetFrom = Matrix2d.applyToPoint(Matrix2d.Inverse(targetShapeInfo.transform), pageFrom);
    const targetTo = Matrix2d.applyToPoint(Matrix2d.Inverse(targetShapeInfo.transform), pageTo);
    const isClosed = targetShapeInfo.util.isClosed(targetShapeInfo.shape);
    const fn = isClosed ? intersectLineSegmentPolygon : intersectLineSegmentPolyline;
    const intersection = fn(targetFrom, targetTo, targetShapeInfo.util.outline(targetShapeInfo.shape));
    let targetInt;
    if (intersection !== null) {
      targetInt = (_a5 = intersection.sort((p1, p22) => Vec2d.Dist(p1, targetFrom) - Vec2d.Dist(p22, targetFrom))[0]) != null ? _a5 : isClosed ? void 0 : targetTo;
    }
    if (targetInt === void 0) {
      return;
    }
    const pageInt = Matrix2d.applyToPoint(targetShapeInfo.transform, targetInt);
    const arrowInt = Matrix2d.applyToPoint(Matrix2d.Inverse(arrowPageTransform), pageInt);
    point2.setTo(arrowInt);
    targetShapeInfo.didIntersect = true;
  }
  function getStraightArrowHandlePath(info) {
    return getArrowPath(info.start.handle, info.end.handle);
  }
  function getSolidStraightArrowPath(info) {
    return getArrowPath(info.start.point, info.end.point);
  }
  function getArrowPath(start, end) {
    return `M${start.x},${start.y}L${end.x},${end.y}`;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLArrowUtil/arrow/curved-arrow.ts
  function getCurvedArrowInfo(app, shape, extraBend = 0) {
    var _a5, _b2;
    const { arrowheadEnd, arrowheadStart } = shape.props;
    const bend = shape.props.bend + extraBend;
    if (Math.abs(bend) > Math.abs(shape.props.bend * WAY_TOO_BIG_ARROW_BEND_FACTOR)) {
      return getStraightArrowInfo(app, shape);
    }
    const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(app, shape);
    const med = Vec2d.Med(terminalsInArrowSpace.start, terminalsInArrowSpace.end);
    const u3 = Vec2d.Sub(terminalsInArrowSpace.end, terminalsInArrowSpace.start).uni();
    const middle = Vec2d.Add(med, u3.per().mul(-bend));
    const startShapeInfo = getBoundShapeInfoForTerminal(app, shape.props.start);
    const endShapeInfo = getBoundShapeInfoForTerminal(app, shape.props.end);
    const a3 = terminalsInArrowSpace.start.clone();
    const b3 = terminalsInArrowSpace.end.clone();
    const c3 = middle.clone();
    const handleArc = getArcInfo(a3, b3, c3);
    const arrowPageTransform = app.getPageTransform(shape);
    if (startShapeInfo && !startShapeInfo.isExact) {
      const startInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, a3);
      const endInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, b3);
      const centerInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, handleArc.center);
      const inverseTransform = Matrix2d.Inverse(startShapeInfo.transform);
      const startInStartShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, startInPageSpace);
      const endInStartShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, endInPageSpace);
      const centerInStartShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, centerInPageSpace);
      const isClosed = startShapeInfo.util.isClosed(startShapeInfo.shape);
      const fn = isClosed ? intersectCirclePolygon : intersectCirclePolyline;
      let point2;
      let intersections = fn(
        centerInStartShapeLocalSpace,
        handleArc.radius,
        startShapeInfo.util.outline(startShapeInfo.shape)
      );
      if (intersections) {
        intersections = intersections.filter(
          (pt) => +Vec2d.Clockwise(startInStartShapeLocalSpace, pt, endInStartShapeLocalSpace) === handleArc.sweepFlag
        );
        const angleToMiddle = Vec2d.Angle(handleArc.center, middle);
        const angleToStart = Vec2d.Angle(handleArc.center, terminalsInArrowSpace.start);
        const comparisonAngle = lerpAngles(angleToMiddle, angleToStart, 0.5);
        intersections.sort(
          (p0, p1) => Math.abs(shortAngleDist(comparisonAngle, centerInStartShapeLocalSpace.angle(p0))) - Math.abs(shortAngleDist(comparisonAngle, centerInStartShapeLocalSpace.angle(p1)))
        );
        point2 = (_a5 = intersections[0]) != null ? _a5 : isClosed ? void 0 : startInStartShapeLocalSpace;
      } else {
        point2 = isClosed ? void 0 : startInStartShapeLocalSpace;
      }
      if (point2) {
        a3.setTo(
          app.getPointInShapeSpace(shape, Matrix2d.applyToPoint(startShapeInfo.transform, point2))
        );
        startShapeInfo.didIntersect = true;
        if (arrowheadStart !== "none") {
          const offset = BOUND_ARROW_OFFSET + app.getStrokeWidth(shape.props.size) / 2 + ("size" in startShapeInfo.shape.props ? app.getStrokeWidth(startShapeInfo.shape.props.size) / 2 : 0);
          a3.setTo(
            getPointOnCircle(
              handleArc.center.x,
              handleArc.center.y,
              handleArc.radius,
              lerpAngles(
                Vec2d.Angle(handleArc.center, a3),
                Vec2d.Angle(handleArc.center, middle),
                offset / Math.abs(getArcLength(handleArc.center, handleArc.radius, a3, middle))
              )
            )
          );
        }
      }
    }
    if (endShapeInfo && !endShapeInfo.isExact) {
      const startInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, a3);
      const endInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, b3);
      const centerInPageSpace = Matrix2d.applyToPoint(arrowPageTransform, handleArc.center);
      const inverseTransform = Matrix2d.Inverse(endShapeInfo.transform);
      const startInEndShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, startInPageSpace);
      const endInEndShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, endInPageSpace);
      const centerInEndShapeLocalSpace = Matrix2d.applyToPoint(inverseTransform, centerInPageSpace);
      const isClosed = endShapeInfo.util.isClosed(endShapeInfo.shape);
      const fn = isClosed ? intersectCirclePolygon : intersectCirclePolyline;
      const angleToMiddle = Vec2d.Angle(handleArc.center, middle);
      const angleToEnd = Vec2d.Angle(handleArc.center, terminalsInArrowSpace.end);
      const comparisonAngle = lerpAngles(angleToMiddle, angleToEnd, 0.5);
      let point2;
      let intersections = fn(
        centerInEndShapeLocalSpace,
        handleArc.radius,
        endShapeInfo.util.outline(endShapeInfo.shape)
      );
      if (intersections) {
        intersections = intersections.filter(
          (pt) => +Vec2d.Clockwise(startInEndShapeLocalSpace, pt, endInEndShapeLocalSpace) === handleArc.sweepFlag
        );
        intersections.sort(
          (p0, p1) => Math.abs(shortAngleDist(comparisonAngle, centerInEndShapeLocalSpace.angle(p0))) - Math.abs(shortAngleDist(comparisonAngle, centerInEndShapeLocalSpace.angle(p1)))
        );
        point2 = (_b2 = intersections[0]) != null ? _b2 : isClosed ? void 0 : endInEndShapeLocalSpace;
      } else {
        point2 = isClosed ? void 0 : endInEndShapeLocalSpace;
      }
      if (point2) {
        b3.setTo(app.getPointInShapeSpace(shape, Matrix2d.applyToPoint(endShapeInfo.transform, point2)));
        endShapeInfo.didIntersect = true;
        if (arrowheadEnd !== "none") {
          let offset = BOUND_ARROW_OFFSET + app.getStrokeWidth(shape.props.size) / 2 + ("size" in endShapeInfo.shape.props ? app.getStrokeWidth(endShapeInfo.shape.props.size) / 2 : 0);
          if (Vec2d.Dist(a3, b3) < MIN_ARROW_LENGTH) {
            offset *= -2;
          }
          b3.setTo(
            getPointOnCircle(
              handleArc.center.x,
              handleArc.center.y,
              handleArc.radius,
              lerpAngles(
                Vec2d.Angle(handleArc.center, b3),
                Vec2d.Angle(handleArc.center, middle),
                offset / Math.abs(getArcLength(handleArc.center, handleArc.radius, b3, middle))
              )
            )
          );
        }
      }
    }
    const length = Math.abs(getArcLength(handleArc.center, handleArc.radius, a3, b3));
    if (length < MIN_ARROW_LENGTH / 2) {
      a3.setTo(terminalsInArrowSpace.start);
      b3.setTo(terminalsInArrowSpace.end);
    }
    if (startShapeInfo && endShapeInfo && startShapeInfo.shape !== endShapeInfo.shape && !startShapeInfo.isExact && !endShapeInfo.isExact) {
      const startAngle = Vec2d.Angle(handleArc.center, a3);
      const endAngle = Vec2d.Angle(handleArc.center, b3);
      const offset = handleArc.sweepFlag ? MIN_ARROW_LENGTH : -MIN_ARROW_LENGTH;
      const arcLength = getArcLength(handleArc.center, handleArc.radius, b3, a3);
      const {
        center: { x: x3, y: y3 },
        radius
      } = handleArc;
      if (startShapeInfo && !startShapeInfo.didIntersect) {
        a3.setTo(getPointOnCircle(x3, y3, radius, lerpAngles(startAngle, endAngle, offset / arcLength)));
      }
      if (endShapeInfo && !endShapeInfo.didIntersect) {
        b3.setTo(getPointOnCircle(x3, y3, radius, lerpAngles(startAngle, endAngle, -offset / arcLength)));
      }
    }
    let midAngle = lerpAngles(Vec2d.Angle(handleArc.center, a3), Vec2d.Angle(handleArc.center, b3), 0.5);
    let midPoint = getPointOnCircle(
      handleArc.center.x,
      handleArc.center.y,
      handleArc.radius,
      midAngle
    );
    if (+Vec2d.Clockwise(a3, midPoint, b3) !== handleArc.sweepFlag) {
      midAngle += PI;
      midPoint = getPointOnCircle(handleArc.center.x, handleArc.center.y, handleArc.radius, midAngle);
    }
    c3.setTo(midPoint);
    const bodyArc = getArcInfo(a3, b3, c3);
    return {
      isStraight: false,
      start: {
        point: a3,
        handle: terminalsInArrowSpace.start,
        arrowhead: shape.props.arrowheadStart
      },
      end: {
        point: b3,
        handle: terminalsInArrowSpace.end,
        arrowhead: shape.props.arrowheadEnd
      },
      middle: c3,
      handleArc,
      bodyArc,
      isValid: bodyArc.length !== 0 && isFinite(bodyArc.center.x) && isFinite(bodyArc.center.y)
    };
  }
  function getCurvedArrowHandlePath(info) {
    const {
      start,
      end,
      handleArc: { radius, largeArcFlag, sweepFlag }
    } = info;
    return `M${start.handle.x},${start.handle.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.handle.x},${end.handle.y}`;
  }
  function getSolidCurvedArrowPath(info) {
    const {
      start,
      end,
      bodyArc: { radius, largeArcFlag, sweepFlag }
    } = info;
    return `M${start.point.x},${start.point.y} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.point.x},${end.point.y}`;
  }
  function getArcInfo(a3, b3, c3) {
    const u3 = -2 * (a3.x * (b3.y - c3.y) - a3.y * (b3.x - c3.x) + b3.x * c3.y - c3.x * b3.y);
    const center = {
      x: ((a3.x * a3.x + a3.y * a3.y) * (c3.y - b3.y) + (b3.x * b3.x + b3.y * b3.y) * (a3.y - c3.y) + (c3.x * c3.x + c3.y * c3.y) * (b3.y - a3.y)) / u3,
      y: ((a3.x * a3.x + a3.y * a3.y) * (b3.x - c3.x) + (b3.x * b3.x + b3.y * b3.y) * (c3.x - a3.x) + (c3.x * c3.x + c3.y * c3.y) * (a3.x - b3.x)) / u3
    };
    const radius = Vec2d.Dist(center, a3);
    const sweepFlag = +Vec2d.Clockwise(a3, c3, b3);
    const ab = Math.hypot(a3.y - b3.y, a3.x - b3.x);
    const bc = Math.hypot(b3.y - c3.y, b3.x - c3.x);
    const ca = Math.hypot(c3.y - a3.y, c3.x - a3.x);
    const theta = Math.acos((bc * bc + ca * ca - ab * ab) / (2 * bc * ca)) * 2;
    const largeArcFlag = +(PI > theta);
    const size = (PI2 - theta) * (sweepFlag ? 1 : -1);
    const length = size * radius;
    return {
      center,
      radius,
      size,
      length,
      largeArcFlag,
      sweepFlag
    };
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLArrowUtil/components/ArrowTextLabel.tsx
  var React6 = __toESM(require_react());

  // ../../../packages/editor/src/lib/utils/dom.ts
  var import_react8 = __toESM(require_react());

  // ../../../packages/editor/src/lib/utils/debug-flags.ts
  var debugFlags = {
    preventDefaultLogging: createDebugValue("tldrawPreventDefaultLogging", false),
    pointerCaptureLogging: createDebugValue("tldrawPointerCaptureLogging", false),
    pointerCaptureTracking: createDebugValue("tldrawPointerCaptureTracking", false),
    pointerCaptureTrackingObject: createDebugValue(
      "tldrawPointerCaptureTrackingObject",
      // ideally we wouldn't store this mutable value in an atom but it's not
      // a big deal for debug values
      /* @__PURE__ */ new Map(),
      false
    ),
    elementRemovalLogging: createDebugValue("tldrawElementRemovalLogging", false),
    debugSvg: createDebugValue("tldrawDebugSvg", false),
    throwToBlob: createDebugValue("tldrawThrowToBlob", false),
    peopleMenu: createDebugValue("tldrawPeopleMenu", false),
    logMessages: createDebugValue("tldrawUiLog", []),
    resetConnectionEveryPing: createDebugValue("tldrawResetConnectionEveryPing", false),
    newLiveCollaborators: createDebugValue("tldrawNewLiveCollaborators", false)
  };
  debugFlags.logMessages.set([]);
  if (typeof window !== "undefined") {
    window.tldrawLog = (message) => {
      debugFlags.logMessages.set(debugFlags.logMessages.value.concat(message));
    };
  }
  if (typeof Element !== "undefined") {
    const nativeElementRemoveChild = Element.prototype.removeChild;
    react("element removal logging", () => {
      if (debugFlags.elementRemovalLogging.value) {
        Element.prototype.removeChild = function(child) {
          console.warn("[tldraw] removing child:", child);
          return nativeElementRemoveChild.call(this, child);
        };
      } else {
        Element.prototype.removeChild = nativeElementRemoveChild;
      }
    });
  }
  function createDebugValue(name, initialValue, shouldStore = true) {
    if (typeof window === "undefined") {
      return atom(`debug:${name}`, initialValue);
    }
    const storedValue = shouldStore ? getStoredInitialValue(name) : null;
    const value = atom(`debug:${name}`, storedValue != null ? storedValue : initialValue);
    if (shouldStore) {
      react(`debug:${name}`, () => {
        const currentValue = value.value;
        try {
          if (currentValue === initialValue) {
            window.sessionStorage.removeItem(`debug:${name}`);
          } else {
            window.sessionStorage.setItem(`debug:${name}`, JSON.stringify(currentValue));
          }
        } catch (e2) {
        }
      });
    }
    Object.defineProperty(window, name, {
      get() {
        return value.value;
      },
      set(newValue) {
        value.set(newValue);
      },
      configurable: true
    });
    return value;
  }
  function getStoredInitialValue(name) {
    var _a5;
    try {
      return JSON.parse((_a5 = window.sessionStorage.getItem(`debug:${name}`)) != null ? _a5 : "null");
    } catch (err) {
      return null;
    }
  }

  // ../../../packages/editor/src/lib/utils/dom.ts
  function loopToHtmlElement(elm) {
    if (elm instanceof HTMLElement)
      return elm;
    if (elm.parentElement)
      return loopToHtmlElement(elm.parentElement);
    else
      throw Error("Could not find a parent element of an HTML type!");
  }
  function preventDefault(event) {
    event.preventDefault();
    if (debugFlags.preventDefaultLogging.value) {
      console.warn("preventDefault called on event:", event);
    }
  }
  function setPointerCapture(element, event) {
    var _a5;
    element.setPointerCapture(event.pointerId);
    if (debugFlags.pointerCaptureTracking.value) {
      const trackingObj = debugFlags.pointerCaptureTrackingObject.value;
      trackingObj.set(element, ((_a5 = trackingObj.get(element)) != null ? _a5 : 0) + 1);
    }
    if (debugFlags.pointerCaptureLogging.value) {
      console.warn("setPointerCapture called on element:", element, event);
    }
  }
  function releasePointerCapture(element, event) {
    if (!element.hasPointerCapture(event.pointerId)) {
      return;
    }
    element.releasePointerCapture(event.pointerId);
    if (debugFlags.pointerCaptureTracking.value) {
      const trackingObj = debugFlags.pointerCaptureTrackingObject.value;
      if (trackingObj.get(element) === 1) {
        trackingObj.delete(element);
      } else if (trackingObj.has(element)) {
        trackingObj.set(element, trackingObj.get(element) - 1);
      } else {
        console.warn("Release without capture");
      }
    }
    if (debugFlags.pointerCaptureLogging.value) {
      console.warn("releasePointerCapture called on element:", element, event);
    }
  }
  function rotateBoxShadow(rotation, shadows) {
    const cssStrings = shadows.map((shadow) => {
      const { offsetX, offsetY, blur, spread, color } = shadow;
      const vec = new Vec2d(offsetX, offsetY);
      const { x: x3, y: y3 } = vec.rot(-rotation);
      return `${x3}px ${y3}px ${blur}px ${spread}px ${color}`;
    });
    return cssStrings.join(", ");
  }
  function usePrefersReducedMotion() {
    const [prefersReducedMotion, setPrefersReducedMotion] = (0, import_react8.useState)(false);
    (0, import_react8.useEffect)(() => {
      const mql = window.matchMedia("(prefers-reduced-motion: reduce)");
      const handler = () => {
        setPrefersReducedMotion(mql.matches);
      };
      handler();
      mql.addEventListener("change", handler);
      return () => mql.removeEventListener("change", handler);
    }, []);
    return prefersReducedMotion;
  }
  var truncateStringWithEllipsis = (str, maxLength) => {
    return str.length <= maxLength ? str : str.substring(0, maxLength - 3) + "...";
  };
  var stopEventPropagation = (e2) => e2.stopPropagation();

  // ../../../packages/editor/src/lib/app/shapeutils/TLTextUtil/TextHelpers.ts
  var INDENT = "  ";
  var _TextHelpers = class {
    static insertTextFirefox(field, text) {
      field.setRangeText(
        text,
        field.selectionStart || 0,
        field.selectionEnd || 0,
        "end"
        // Without this, the cursor is either at the beginning or text remains selected
      );
      field.dispatchEvent(
        new InputEvent("input", {
          data: text,
          inputType: "insertText",
          isComposing: false
          // TODO: fix @types/jsdom, this shouldn't be required
        })
      );
    }
    /**
     * Inserts text at the cursor’s position, replacing any selection, with **undo** support and by
     * firing the input event.
     */
    static insert(field, text) {
      const document2 = field.ownerDocument;
      const initialFocus = document2.activeElement;
      if (initialFocus !== field) {
        field.focus();
      }
      if (!document2.execCommand("insertText", false, text)) {
        _TextHelpers.insertTextFirefox(field, text);
      }
      if (initialFocus === document2.body) {
        field.blur();
      } else if (initialFocus instanceof HTMLElement && initialFocus !== field) {
        initialFocus.focus();
      }
    }
    /**
     * Replaces the entire content, equivalent to field.value = text but with **undo** support and by
     * firing the input event.
     */
    static set(field, text) {
      field.select();
      _TextHelpers.insert(field, text);
    }
    /** Get the selected text in a field or an empty string if nothing is selected. */
    static getSelection(field) {
      const { selectionStart, selectionEnd } = field;
      return field.value.slice(
        selectionStart ? selectionStart : void 0,
        selectionEnd ? selectionEnd : void 0
      );
    }
    /**
     * Adds the wrappingText before and after field’s selection (or cursor). If endWrappingText is
     * provided, it will be used instead of wrappingText at on the right.
     */
    static wrapSelection(field, wrap2, wrapEnd) {
      const { selectionStart, selectionEnd } = field;
      const selection = _TextHelpers.getSelection(field);
      _TextHelpers.insert(field, wrap2 + selection + (wrapEnd != null ? wrapEnd : wrap2));
      field.selectionStart = (selectionStart || 0) + wrap2.length;
      field.selectionEnd = (selectionEnd || 0) + wrap2.length;
    }
    /** Finds and replaces strings and regex in the field’s value. */
    static replace(field, searchValue, replacer) {
      let drift = 0;
      field.value.replace(searchValue, (...args) => {
        const matchStart = drift + args[args.length - 2];
        const matchLength = args[0].length;
        field.selectionStart = matchStart;
        field.selectionEnd = matchStart + matchLength;
        const replacement = typeof replacer === "string" ? replacer : replacer(...args);
        _TextHelpers.insert(field, replacement);
        field.selectionStart = matchStart;
        drift += replacement.length - matchLength;
        return replacement;
      });
    }
    static findLineEnd(value, currentEnd) {
      const lastLineStart = value.lastIndexOf("\n", currentEnd - 1) + 1;
      if (value.charAt(lastLineStart) !== "	") {
        return currentEnd;
      }
      return lastLineStart + 1;
    }
    static indent(element) {
      var _a5;
      const { selectionStart, selectionEnd, value } = element;
      const selectedContrast = value.slice(selectionStart, selectionEnd);
      const lineBreakCount = (_a5 = /\n/g.exec(selectedContrast)) == null ? void 0 : _a5.length;
      if (lineBreakCount && lineBreakCount > 0) {
        const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
        const newSelection = element.value.slice(firstLineStart, selectionEnd - 1);
        const indentedText = newSelection.replace(
          /^|\n/g,
          // Match all line starts
          `$&${INDENT}`
        );
        const replacementsCount = indentedText.length - newSelection.length;
        element.setSelectionRange(firstLineStart, selectionEnd - 1);
        _TextHelpers.insert(element, indentedText);
        element.setSelectionRange(selectionStart + 1, selectionEnd + replacementsCount);
      } else {
        _TextHelpers.insert(element, INDENT);
      }
    }
    // The first line should always be unindented
    // The last line should only be unindented if the selection includes any characters after \n
    static unindent(element) {
      const { selectionStart, selectionEnd, value } = element;
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const minimumSelectionEnd = _TextHelpers.findLineEnd(value, selectionEnd);
      const newSelection = element.value.slice(firstLineStart, minimumSelectionEnd);
      const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
      const replacementsCount = newSelection.length - indentedText.length;
      element.setSelectionRange(firstLineStart, minimumSelectionEnd);
      _TextHelpers.insert(element, indentedText);
      const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
      const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
      const newSelectionStart = selectionStart - difference;
      element.setSelectionRange(
        selectionStart - difference,
        Math.max(newSelectionStart, selectionEnd - replacementsCount)
      );
    }
    static indentCE(element) {
      var _a5, _b2, _c;
      const selection = window.getSelection();
      const value = element.innerText;
      const selectionStart = (_a5 = getCaretIndex(element)) != null ? _a5 : 0;
      const selectionEnd = (_b2 = getCaretIndex(element)) != null ? _b2 : 0;
      const selectedContrast = value.slice(selectionStart, selectionEnd);
      const lineBreakCount = (_c = /\n/g.exec(selectedContrast)) == null ? void 0 : _c.length;
      if (lineBreakCount && lineBreakCount > 0) {
        const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
        const newSelection = value.slice(firstLineStart, selectionEnd - 1);
        const indentedText = newSelection.replace(
          /^|\n/g,
          // Match all line starts
          `$&${INDENT}`
        );
        const replacementsCount = indentedText.length - newSelection.length;
        if (selection) {
          selection.setBaseAndExtent(
            element,
            selectionStart + 1,
            element,
            selectionEnd + replacementsCount
          );
        }
      } else {
        const selection2 = window.getSelection();
        element.innerText = value.slice(0, selectionStart) + INDENT + value.slice(selectionStart);
        selection2 == null ? void 0 : selection2.setBaseAndExtent(element, selectionStart + 1, element, selectionStart + 2);
      }
    }
    static unindentCE(element) {
      var _a5, _b2;
      const selection = window.getSelection();
      const value = element.innerText;
      const selectionStart = (_a5 = getCaretIndex(element)) != null ? _a5 : 0;
      const selectionEnd = (_b2 = getCaretIndex(element)) != null ? _b2 : 0;
      const firstLineStart = value.lastIndexOf("\n", selectionStart - 1) + 1;
      const minimumSelectionEnd = _TextHelpers.findLineEnd(value, selectionEnd);
      const newSelection = value.slice(firstLineStart, minimumSelectionEnd);
      const indentedText = newSelection.replace(/(^|\n)(\t| {1,2})/g, "$1");
      const replacementsCount = newSelection.length - indentedText.length;
      if (selection) {
        selection.setBaseAndExtent(element, firstLineStart, element, minimumSelectionEnd);
        const firstLineIndentation = /\t| {1,2}/.exec(value.slice(firstLineStart, selectionStart));
        const difference = firstLineIndentation ? firstLineIndentation[0].length : 0;
        const newSelectionStart = selectionStart - difference;
        selection.setBaseAndExtent(
          element,
          selectionStart - difference,
          element,
          Math.max(newSelectionStart, selectionEnd - replacementsCount)
        );
      }
    }
    static normalizeText(text) {
      return text.replace(_TextHelpers.fixNewLines, "\n");
    }
    static normalizeTextForDom(text) {
      return text.replace(_TextHelpers.fixNewLines, "\n").split("\n").map((x3) => x3 || " ").join("\n");
    }
  };
  var TextHelpers = _TextHelpers;
  __publicField(TextHelpers, "fixNewLines", /\r?\n|\r/g);
  function getCaretIndex(element) {
    if (typeof window.getSelection === "undefined")
      return;
    const selection = window.getSelection();
    if (!selection)
      return;
    let position = 0;
    if (selection.rangeCount !== 0) {
      const range = selection.getRangeAt(0);
      const preCaretRange = range.cloneRange();
      preCaretRange.selectNodeContents(element);
      preCaretRange.setEnd(range.endContainer, range.endOffset);
      position = preCaretRange.toString().length;
    }
    return position;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/shared/useEditableText.ts
  var import_react9 = __toESM(require_react());
  function useEditableText(id, type, text) {
    const app = useApp();
    const rInput = (0, import_react9.useRef)(null);
    const isEditing = useValue("isEditing", () => app.pageState.editingId === id, [app, id]);
    const rSkipSelectOnFocus = (0, import_react9.useRef)(false);
    const rSelectionRanges = (0, import_react9.useRef)();
    const isEditableFromHover = useValue(
      "is editable hovering",
      () => {
        if (type === "text" && app.isIn("text") && app.hoveredId === id) {
          return true;
        }
        if (app.isIn("select.editing_shape")) {
          const { editingShape } = app;
          if (!editingShape)
            return false;
          return (
            // The shape must be hovered
            app.hoveredId === id && // the editing shape must be the same type as this shape
            editingShape.type === type && // and this shape must be capable of being editing in its current form
            app.getShapeUtil(editingShape).canEdit(editingShape)
          );
        }
        return false;
      },
      [type, id]
    );
    const handleFocus = (0, import_react9.useCallback)(() => {
      if (isEditableFromHover)
        return;
      requestAnimationFrame(() => {
        const elm = rInput.current;
        if (!elm)
          return;
        const shape = app.getShapeById(id);
        if (shape) {
          elm.value = shape.props.text;
          if (elm.value.length && !rSkipSelectOnFocus.current) {
            elm.select();
          }
          rSkipSelectOnFocus.current = false;
        }
      });
    }, [app, id, isEditableFromHover]);
    const handleBlur = (0, import_react9.useCallback)(() => {
      const ranges = rSelectionRanges.current;
      requestAnimationFrame(() => {
        var _a5;
        const elm = rInput.current;
        if (app.isIn("select.editing_shape") && elm) {
          if (ranges) {
            if (!ranges.length) {
              elm.focus();
            } else {
              rSkipSelectOnFocus.current = true;
              elm.focus();
              const selection = window.getSelection();
              if (selection) {
                ranges.forEach((range) => selection.addRange(range));
              }
            }
          } else {
            elm.focus();
          }
        } else {
          (_a5 = window.getSelection()) == null ? void 0 : _a5.removeAllRanges();
          app.complete();
        }
      });
    }, [app]);
    const handleKeyDown = (0, import_react9.useCallback)(
      (e2) => {
        if (e2.ctrlKey || e2.metaKey)
          stopEventPropagation(e2);
        switch (e2.key) {
          case "Enter": {
            if (e2.ctrlKey || e2.metaKey) {
              app.complete();
            }
            break;
          }
          case "Tab": {
            preventDefault(e2);
            if (e2.shiftKey) {
              TextHelpers.unindent(e2.currentTarget);
            } else {
              TextHelpers.indent(e2.currentTarget);
            }
            break;
          }
        }
      },
      [app]
    );
    const handleChange = (0, import_react9.useCallback)(
      (e2) => {
        let text2 = TextHelpers.normalizeText(e2.currentTarget.value);
        const untabbedText = text2.replace(/\t/g, INDENT);
        if (untabbedText !== text2) {
          const selectionStart = e2.currentTarget.selectionStart;
          e2.currentTarget.value = untabbedText;
          e2.currentTarget.selectionStart = selectionStart + (untabbedText.length - text2.length);
          e2.currentTarget.selectionEnd = selectionStart + (untabbedText.length - text2.length);
          text2 = untabbedText;
        }
        app.updateShapes([{ id, type, props: { text: text2 } }]);
      },
      [app, id, type]
    );
    const isEmpty = text.trim().length === 0;
    (0, import_react9.useEffect)(() => {
      const elm = rInput.current;
      if (elm) {
        let updateSelection2 = function() {
          var _a5, _b2;
          const selection = (_a5 = window.getSelection) == null ? void 0 : _a5.call(window);
          if (selection && selection.type !== "None") {
            const ranges = [];
            if (selection) {
              for (let i3 = 0; i3 < selection.rangeCount; i3++) {
                ranges.push((_b2 = selection.getRangeAt) == null ? void 0 : _b2.call(selection, i3));
              }
            }
            rSelectionRanges.current = ranges;
          }
        };
        var updateSelection = updateSelection2;
        document.addEventListener("selectionchange", updateSelection2);
        return () => {
          document.removeEventListener("selectionchange", updateSelection2);
        };
      }
    });
    return {
      rInput,
      isEditing,
      isEditableFromHover,
      handleFocus,
      handleBlur,
      handleKeyDown,
      handleChange,
      isEmpty
    };
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLArrowUtil/components/ArrowTextLabel.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var ArrowTextLabel = React6.memo(function ArrowTextLabel2({
    id,
    text,
    size,
    font,
    position,
    width,
    labelColor
  }) {
    const { rInput, isEditing, handleFocus, handleBlur, handleKeyDown, handleChange, isEmpty } = useEditableText(id, "arrow", text);
    if (!isEditing && isEmpty) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
      "div",
      {
        className: "tl-arrow-label",
        "data-font": font,
        "data-align": "center",
        "data-hastext": !isEmpty,
        "data-isediting": isEditing,
        style: {
          textAlign: "center",
          fontSize: ARROW_LABEL_FONT_SIZES[size],
          lineHeight: ARROW_LABEL_FONT_SIZES[size] * TEXT_PROPS.lineHeight + "px",
          transform: `translate(${position.x}px, ${position.y}px)`,
          color: labelColor
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "tl-arrow-label__inner", children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { style: { width: width ? width : "9px" }, children: text ? TextHelpers.normalizeTextForDom(text) : " " }),
          isEditing && // Consider replacing with content-editable
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            "textarea",
            {
              ref: rInput,
              className: "tl-text tl-text-input",
              name: "text",
              tabIndex: -1,
              autoComplete: "false",
              autoCapitalize: "false",
              autoCorrect: "false",
              autoSave: "false",
              autoFocus: true,
              placeholder: "",
              spellCheck: "true",
              wrap: "off",
              dir: "auto",
              datatype: "wysiwyg",
              defaultValue: text,
              onFocus: handleFocus,
              onChange: handleChange,
              onKeyDown: handleKeyDown,
              onBlur: handleBlur,
              onContextMenu: stopEventPropagation
            }
          )
        ] })
      }
    );
  });

  // ../../../packages/editor/src/lib/app/shapeutils/TLArrowUtil/TLArrowUtil.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var globalRenderIndex = 0;
  var TLArrowUtil = class extends TLShapeUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "canEdit", () => true);
      __publicField(this, "canBind", () => false);
      __publicField(this, "isClosed", () => false);
      __publicField(this, "hideResizeHandles", () => true);
      __publicField(this, "hideRotateHandle", () => true);
      __publicField(this, "hideSelectionBoundsFg", () => true);
      __publicField(this, "hideSelectionBoundsBg", () => true);
      __publicField(this, "onHandleChange", (shape, { handle, isPrecise: isPrecise2 }) => {
        const next = deepCopy(shape);
        switch (handle.id) {
          case "start":
          case "end": {
            const pageTransform = this.app.getPageTransformById(next.id);
            const pointInPageSpace = Matrix2d.applyToPoint(pageTransform, handle);
            if (this.app.inputs.ctrlKey) {
              next.props[handle.id] = {
                type: "point",
                x: handle.x,
                y: handle.y
              };
            } else {
              const target = last(
                this.app.sortedShapesArray.filter((hitShape) => {
                  if (hitShape.id === shape.id) {
                    return;
                  }
                  const util = this.app.getShapeUtil(hitShape);
                  if (!util.canBind(hitShape)) {
                    return;
                  }
                  const pageMask = this.app.getPageMaskById(hitShape.id);
                  if (pageMask) {
                    if (!pointInPolygon(pointInPageSpace, pageMask))
                      return;
                  }
                  const pointInTargetSpace = this.app.getPointInShapeSpace(hitShape, pointInPageSpace);
                  if (util.isClosed(hitShape)) {
                    return pointInPolygon(pointInTargetSpace, util.outline(hitShape));
                  }
                  return util.hitTestPoint(hitShape, pointInTargetSpace);
                })
              );
              if (target) {
                const targetBounds = this.app.getBounds(target);
                const pointInTargetSpace = this.app.getPointInShapeSpace(target, pointInPageSpace);
                const prevHandle = next.props[handle.id];
                const startBindingId = shape.props.start.type === "binding" && shape.props.start.boundShapeId;
                const endBindingId = shape.props.end.type === "binding" && shape.props.end.boundShapeId;
                let precise3 = (
                  // If externally precise, then always precise
                  isPrecise2 || // If the other handle is bound to the same shape, then precise
                  (startBindingId || endBindingId) && startBindingId === endBindingId || // If the other shape is not closed, then precise
                  !this.app.getShapeUtil(target).isClosed(next)
                );
                if (
                  // If we're switching to a new bound shape, then precise only if moving slowly
                  prevHandle.type === "point" || prevHandle.type === "binding" && target.id !== prevHandle.boundShapeId
                ) {
                  precise3 = this.app.inputs.pointerVelocity.len() < 0.5;
                }
                if (precise3) {
                  precise3 = Vec2d.Dist(pointInTargetSpace, targetBounds.center) > Math.max(
                    4,
                    Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)
                  ) / this.app.zoomLevel;
                }
                next.props[handle.id] = {
                  type: "binding",
                  boundShapeId: target.id,
                  normalizedAnchor: precise3 ? {
                    x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
                    y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height
                  } : { x: 0.5, y: 0.5 },
                  isExact: this.app.inputs.altKey
                };
              } else {
                next.props[handle.id] = {
                  type: "point",
                  x: handle.x,
                  y: handle.y
                };
              }
            }
            break;
          }
          case "middle": {
            const { start, end } = getArrowTerminalsInArrowSpace(this.app, next);
            const delta = Vec2d.Sub(end, start);
            const v3 = Vec2d.Per(delta);
            const med = Vec2d.Med(end, start);
            const A2 = Vec2d.Sub(med, v3);
            const B = Vec2d.Add(med, v3);
            const point2 = Vec2d.NearestPointOnLineSegment(A2, B, handle, false);
            let bend = Vec2d.Dist(point2, med);
            if (Vec2d.Clockwise(point2, end, med))
              bend *= -1;
            next.props.bend = bend;
            break;
          }
        }
        return next;
      });
      __publicField(this, "onTranslateStart", (shape) => {
        let startBinding = shape.props.start.type === "binding" ? shape.props.start.boundShapeId : null;
        let endBinding = shape.props.end.type === "binding" ? shape.props.end.boundShapeId : null;
        if (startBinding && this.app.isWithinSelection(startBinding) || endBinding && this.app.isWithinSelection(endBinding)) {
          return;
        }
        startBinding = null;
        endBinding = null;
        const { start, end } = getArrowTerminalsInArrowSpace(this.app, shape);
        return {
          id: shape.id,
          type: shape.type,
          props: __spreadProps(__spreadValues({}, shape.props), {
            start: {
              type: "point",
              x: start.x,
              y: start.y
            },
            end: {
              type: "point",
              x: end.x,
              y: end.y
            }
          })
        };
      });
      __publicField(this, "onResize", (shape, info) => {
        const { scaleX, scaleY } = info;
        const terminals = getArrowTerminalsInArrowSpace(this.app, shape);
        const { start, end } = deepCopy(shape.props);
        let { bend } = shape.props;
        if (start.type === "point") {
          start.x = terminals.start.x * scaleX;
          start.y = terminals.start.y * scaleY;
        }
        if (end.type === "point") {
          end.x = terminals.end.x * scaleX;
          end.y = terminals.end.y * scaleY;
        }
        const mx = Math.abs(scaleX);
        const my = Math.abs(scaleY);
        if (scaleX < 0 && scaleY >= 0) {
          if (bend !== 0) {
            bend *= -1;
            bend *= Math.max(mx, my);
          }
          if (start.type === "binding") {
            start.normalizedAnchor.x = 1 - start.normalizedAnchor.x;
          }
          if (end.type === "binding") {
            end.normalizedAnchor.x = 1 - end.normalizedAnchor.x;
          }
        } else if (scaleX >= 0 && scaleY < 0) {
          if (bend !== 0) {
            bend *= -1;
            bend *= Math.max(mx, my);
          }
          if (start.type === "binding") {
            start.normalizedAnchor.y = 1 - start.normalizedAnchor.y;
          }
          if (end.type === "binding") {
            end.normalizedAnchor.y = 1 - end.normalizedAnchor.y;
          }
        } else if (scaleX >= 0 && scaleY >= 0) {
          if (bend !== 0) {
            bend *= Math.max(mx, my);
          }
        } else if (scaleX < 0 && scaleY < 0) {
          if (bend !== 0) {
            bend *= Math.max(mx, my);
          }
          if (start.type === "binding") {
            start.normalizedAnchor.x = 1 - start.normalizedAnchor.x;
            start.normalizedAnchor.y = 1 - start.normalizedAnchor.y;
          }
          if (end.type === "binding") {
            end.normalizedAnchor.x = 1 - end.normalizedAnchor.x;
            end.normalizedAnchor.y = 1 - end.normalizedAnchor.y;
          }
        }
        const next = {
          props: {
            start,
            end,
            bend
          }
        };
        return next;
      });
      __publicField(this, "onDoubleClickHandle", (shape, handle) => {
        switch (handle.id) {
          case "start": {
            return {
              id: shape.id,
              type: shape.type,
              props: __spreadProps(__spreadValues({}, shape.props), {
                arrowheadStart: shape.props.arrowheadStart === "none" ? "arrow" : "none"
              })
            };
          }
          case "end": {
            return {
              id: shape.id,
              type: shape.type,
              props: __spreadProps(__spreadValues({}, shape.props), {
                arrowheadEnd: shape.props.arrowheadEnd === "none" ? "arrow" : "none"
              })
            };
          }
        }
      });
      __publicField(this, "getEditingBounds", (shape) => {
        var _a5;
        return (_a5 = this.getLabelBounds(shape)) != null ? _a5 : new Box2d();
      });
      __publicField(this, "onEditEnd", (shape) => {
        const {
          id,
          type,
          props: { text }
        } = shape;
        if (text.trimEnd() !== shape.props.text) {
          this.app.updateShapes([
            {
              id,
              type,
              props: {
                text: text.trimEnd()
              }
            }
          ]);
        }
      });
    }
    defaultProps() {
      return {
        opacity: "1",
        dash: "draw",
        size: "m",
        fill: "none",
        color: "black",
        labelColor: "black",
        bend: 0,
        start: { type: "point", x: 0, y: 0 },
        end: { type: "point", x: 0, y: 0 },
        arrowheadStart: "none",
        arrowheadEnd: "arrow",
        text: "",
        font: "draw"
      };
    }
    getCenter(shape) {
      return this.bounds(shape).center;
    }
    getBounds(shape) {
      return Box2d.FromPoints(this.getOutlineWithoutLabel(shape));
    }
    getOutlineWithoutLabel(shape) {
      const info = this.getArrowInfo(shape);
      if (!info) {
        return [];
      }
      if (info.isStraight) {
        if (info.isValid) {
          return [info.start.point, info.end.point];
        } else {
          return [new Vec2d(0, 0), new Vec2d(1, 1)];
        }
      }
      if (!info.isValid) {
        return [new Vec2d(0, 0), new Vec2d(1, 1)];
      }
      const pointsToPush = Math.max(5, Math.ceil(Math.abs(info.bodyArc.length) / 16));
      if (pointsToPush <= 0 && !isFinite(pointsToPush)) {
        return [new Vec2d(0, 0), new Vec2d(1, 1)];
      }
      const results = Array(pointsToPush);
      const startAngle = Vec2d.Angle(info.bodyArc.center, info.start.point);
      const endAngle = Vec2d.Angle(info.bodyArc.center, info.end.point);
      const a3 = info.bodyArc.sweepFlag ? endAngle : startAngle;
      const b3 = info.bodyArc.sweepFlag ? startAngle : endAngle;
      const l3 = info.bodyArc.largeArcFlag ? -longAngleDist(a3, b3) : shortAngleDist(a3, b3);
      const r3 = Math.max(1, info.bodyArc.radius);
      for (let i3 = 0; i3 < pointsToPush; i3++) {
        const t4 = i3 / (pointsToPush - 1);
        const angle = a3 + l3 * t4;
        const point2 = getPointOnCircle(info.bodyArc.center.x, info.bodyArc.center.y, r3, angle);
        results[i3] = point2;
      }
      return results;
    }
    getOutline(shape) {
      const outlineWithoutLabel = this.getOutlineWithoutLabel(shape);
      const labelBounds = this.getLabelBounds(shape);
      if (!labelBounds) {
        return outlineWithoutLabel;
      }
      const sides = labelBounds.sides;
      const sideIndexes = [0, 1, 2, 3];
      let prevPoint = outlineWithoutLabel[0];
      let didAddLabel = false;
      const result = [prevPoint];
      for (let i3 = 1; i3 < outlineWithoutLabel.length; i3++) {
        const nextPoint = outlineWithoutLabel[i3];
        if (!didAddLabel) {
          const nearestIntersectingSideIndex = minBy(
            sideIndexes.filter(
              (sideIndex) => linesIntersect(sides[sideIndex][0], sides[sideIndex][1], prevPoint, nextPoint)
            ),
            (sideIndex) => Vec2d.DistanceToLineSegment(sides[sideIndex][0], sides[sideIndex][1], prevPoint)
          );
          if (nearestIntersectingSideIndex !== void 0) {
            const intersectingPoint = Vec2d.NearestPointOnLineSegment(
              sides[nearestIntersectingSideIndex][0],
              sides[nearestIntersectingSideIndex][1],
              prevPoint
            );
            result.push(intersectingPoint);
            for (let j = 0; j < 4; j++) {
              const sideIndex = (nearestIntersectingSideIndex + j) % 4;
              result.push(sides[sideIndex][1]);
            }
            result.push(intersectingPoint);
            didAddLabel = true;
          }
        }
        result.push(nextPoint);
        prevPoint = nextPoint;
      }
      return result;
    }
    snapPoints(_shape) {
      return EMPTY_ARRAY;
    }
    get infoCache() {
      return this.app.store.createComputedCache(
        "arrow infoCache",
        (shape) => {
          return getIsArrowStraight(shape) ? getStraightArrowInfo(this.app, shape) : getCurvedArrowInfo(this.app, shape);
        }
      );
    }
    getArrowInfo(shape) {
      return this.infoCache.get(shape.id);
    }
    getHandles(shape) {
      const info = this.infoCache.get(shape.id);
      return [
        {
          id: "start",
          type: "vertex",
          index: "a0",
          x: info.start.handle.x,
          y: info.start.handle.y,
          canBind: true
        },
        {
          id: "middle",
          type: "vertex",
          index: "a2",
          x: info.middle.x,
          y: info.middle.y,
          canBind: false
        },
        {
          id: "end",
          type: "vertex",
          index: "a3",
          x: info.end.handle.x,
          y: info.end.handle.y,
          canBind: true
        }
      ];
    }
    hitTestPoint(shape, point2) {
      const outline = this.outline(shape);
      const zoomLevel = this.app.zoomLevel;
      const offsetDist = this.app.getStrokeWidth(shape.props.size) / zoomLevel;
      for (let i3 = 0; i3 < outline.length - 1; i3++) {
        const C2 = outline[i3];
        const D3 = outline[i3 + 1];
        if (Vec2d.DistanceToLineSegment(C2, D3, point2) < offsetDist)
          return true;
      }
      return false;
    }
    hitTestLineSegment(shape, A2, B) {
      const outline = this.outline(shape);
      for (let i3 = 0; i3 < outline.length - 1; i3++) {
        const C2 = outline[i3];
        const D3 = outline[i3 + 1];
        if (linesIntersect(A2, B, C2, D3))
          return true;
      }
      return false;
    }
    render(shape) {
      var _a5;
      const onlySelectedShape = this.app.onlySelectedShape;
      const shouldDisplayHandles = this.app.isInAny(
        "select.idle",
        "select.pointing_handle",
        "select.dragging_handle",
        "arrow.dragging"
      ) && !this.app.isReadOnly;
      const info = this.getArrowInfo(shape);
      const bounds = this.bounds(shape);
      const labelSize = this.getLabelBounds(shape);
      const changeIndex = React7.useMemo(() => {
        return this.app.isSafari ? globalRenderIndex += 1 : 0;
      }, [shape]);
      if (!(info == null ? void 0 : info.isValid))
        return null;
      const strokeWidth = this.app.getStrokeWidth(shape.props.size);
      const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
      const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
      const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info);
      let handlePath = null;
      if (onlySelectedShape === shape && shouldDisplayHandles) {
        const sw = 2;
        const { strokeDasharray: strokeDasharray2, strokeDashoffset: strokeDashoffset2 } = getPerfectDashProps(
          info.isStraight ? Vec2d.Dist(info.start.handle, info.end.handle) : Math.abs(info.handleArc.length),
          sw,
          {
            end: "skip",
            start: "skip",
            lengthRatio: 2.5
          }
        );
        handlePath = shape.props.start.type === "binding" || shape.props.end.type === "binding" ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "path",
          {
            className: "tl-arrow-hint",
            d: info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info),
            strokeDasharray: strokeDasharray2,
            strokeDashoffset: strokeDashoffset2,
            strokeWidth: sw,
            markerStart: shape.props.start.type === "binding" ? shape.props.start.isExact ? "" : isPrecise(shape.props.start.normalizedAnchor) ? "url(#arrowhead-cross)" : "url(#arrowhead-dot)" : "",
            markerEnd: shape.props.end.type === "binding" ? shape.props.end.isExact ? "" : isPrecise(shape.props.end.normalizedAnchor) ? "url(#arrowhead-cross)" : "url(#arrowhead-dot)" : "",
            opacity: 0.16
          }
        ) : null;
      }
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
        info.isStraight ? info.length : Math.abs(info.bodyArc.length),
        strokeWidth,
        {
          style: shape.props.dash
        }
      );
      const maskStartArrowhead = !(info.start.arrowhead === "none" || info.start.arrowhead === "arrow");
      const maskEndArrowhead = !(info.end.arrowhead === "none" || info.end.arrowhead === "arrow");
      const includeMask = maskStartArrowhead || maskEndArrowhead || labelSize;
      const maskId = (shape.id + "_clip_" + changeIndex).replace(":", "_");
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(SVGContainer, { id: shape.id, style: { minWidth: 50, minHeight: 50 }, children: [
          includeMask && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("mask", { id: maskId, children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              "rect",
              {
                x: toDomPrecision(-100 + bounds.minX),
                y: toDomPrecision(-100 + bounds.minY),
                width: toDomPrecision(bounds.width + 200),
                height: toDomPrecision(bounds.height + 200),
                fill: "white"
              }
            ),
            labelSize && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              "rect",
              {
                x: toDomPrecision(labelSize.x),
                y: toDomPrecision(labelSize.y),
                width: toDomPrecision(labelSize.w),
                height: toDomPrecision(labelSize.h),
                fill: "black",
                rx: 4,
                ry: 4
              }
            ),
            as && maskStartArrowhead && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              "path",
              {
                d: as,
                fill: info.start.arrowhead === "arrow" ? "none" : "black",
                stroke: "none"
              }
            ),
            ae && maskEndArrowhead && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
              "path",
              {
                d: ae,
                fill: info.end.arrowhead === "arrow" ? "none" : "black",
                stroke: "none"
              }
            )
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(
            "g",
            {
              fill: "none",
              stroke: "currentColor",
              strokeWidth,
              strokeLinejoin: "round",
              strokeLinecap: "round",
              pointerEvents: "none",
              children: [
                handlePath,
                /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("g", __spreadProps(__spreadValues({}, includeMask ? { mask: `url(#${maskId})` } : void 0), { children: [
                  includeMask && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                    "rect",
                    {
                      x: toDomPrecision(bounds.minX - 100),
                      y: toDomPrecision(bounds.minY - 100),
                      width: toDomPrecision(bounds.width + 200),
                      height: toDomPrecision(bounds.height + 200),
                      opacity: 0
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
                    "path",
                    {
                      d: path,
                      strokeDasharray,
                      strokeDashoffset
                    }
                  )
                ] })),
                as && maskStartArrowhead && shape.props.fill !== "none" && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ShapeFill, { d: as, color: shape.props.color, fill: shape.props.fill }),
                ae && maskEndArrowhead && shape.props.fill !== "none" && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(ShapeFill, { d: ae, color: shape.props.color, fill: shape.props.fill }),
                as && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: as }),
                ae && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: ae })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: path, className: "tl-hitarea-stroke" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          ArrowTextLabel,
          {
            id: shape.id,
            text: shape.props.text,
            font: shape.props.font,
            size: shape.props.size,
            position: info.middle,
            width: (_a5 = labelSize == null ? void 0 : labelSize.w) != null ? _a5 : 0,
            labelColor: this.app.getCssColor(shape.props.labelColor)
          }
        )
      ] });
    }
    indicator(shape) {
      const { start, end } = getArrowTerminalsInArrowSpace(this.app, shape);
      const info = this.getArrowInfo(shape);
      const bounds = this.bounds(shape);
      const labelSize = this.getLabelBounds(shape);
      if (!info)
        return null;
      if (Vec2d.Equals(start, end))
        return null;
      const strokeWidth = this.app.getStrokeWidth(shape.props.size);
      const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
      const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
      const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info);
      const includeMask = as && info.start.arrowhead !== "arrow" || ae && info.end.arrowhead !== "arrow" || labelSize !== null;
      const maskId = (shape.id + "_clip").replace(":", "_");
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("g", { children: [
        includeMask && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("defs", { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("mask", { id: maskId, children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            "rect",
            {
              x: bounds.minX - 100,
              y: bounds.minY - 100,
              width: bounds.w + 200,
              height: bounds.h + 200,
              fill: "white"
            }
          ),
          labelSize && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            "rect",
            {
              x: labelSize.x,
              y: labelSize.y,
              width: labelSize.w,
              height: labelSize.h,
              fill: "black",
              rx: 4,
              ry: 4
            }
          ),
          as && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            "path",
            {
              d: as,
              fill: info.start.arrowhead === "arrow" ? "none" : "black",
              stroke: "none"
            }
          ),
          ae && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            "path",
            {
              d: ae,
              fill: info.end.arrowhead === "arrow" ? "none" : "black",
              stroke: "none"
            }
          )
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("g", __spreadProps(__spreadValues({}, includeMask ? { mask: `url(#${maskId})` } : void 0), { children: [
          includeMask && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
            "rect",
            {
              x: bounds.minX - 100,
              y: bounds.minY - 100,
              width: bounds.width + 200,
              height: bounds.height + 200,
              opacity: 0
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: path })
        ] })),
        as && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: as }),
        ae && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("path", { d: ae }),
        labelSize && /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
          "rect",
          {
            x: labelSize.x,
            y: labelSize.y,
            width: labelSize.w,
            height: labelSize.h,
            rx: 4,
            ry: 4
          }
        )
      ] });
    }
    get labelBoundsCache() {
      return this.app.store.createComputedCache("labelBoundsCache", (shape) => {
        const info = this.getArrowInfo(shape);
        const bounds = this.bounds(shape);
        const { text, font, size } = shape.props;
        if (!info)
          return null;
        if (!text.trim())
          return null;
        const { w: w3, h: h3 } = this.app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
          text,
          fontFamily: FONT_FAMILIES[font],
          fontSize: ARROW_LABEL_FONT_SIZES[size],
          width: "fit-content"
        }));
        let width = w3;
        let height = h3;
        if (bounds.width > bounds.height) {
          width = Math.max(Math.min(w3, 64), Math.min(bounds.width - 64, w3));
          const { w: squishedWidth, h: squishedHeight } = this.app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
            text,
            fontFamily: FONT_FAMILIES[font],
            fontSize: ARROW_LABEL_FONT_SIZES[size],
            width: width + "px"
          }));
          width = squishedWidth;
          height = squishedHeight;
        }
        if (width > 16 * ARROW_LABEL_FONT_SIZES[size]) {
          width = 16 * ARROW_LABEL_FONT_SIZES[size];
          const { w: squishedWidth, h: squishedHeight } = this.app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
            text,
            fontFamily: FONT_FAMILIES[font],
            fontSize: ARROW_LABEL_FONT_SIZES[size],
            width: width + "px"
          }));
          width = squishedWidth;
          height = squishedHeight;
        }
        return new Box2d(
          info.middle.x - (width + 8) / 2,
          info.middle.y - (height + 8) / 2,
          width + 8,
          height + 8
        );
      });
    }
    getLabelBounds(shape) {
      return this.labelBoundsCache.get(shape.id) || null;
    }
    toSvg(shape, font, colors) {
      const color = colors.fill[shape.props.color];
      const info = this.getArrowInfo(shape);
      const strokeWidth = this.app.getStrokeWidth(shape.props.size);
      const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
      if (!info)
        return g3;
      const as = info.start.arrowhead && getArrowheadPathForType(info, "start", strokeWidth);
      const ae = info.end.arrowhead && getArrowheadPathForType(info, "end", strokeWidth);
      const bounds = this.bounds(shape);
      const labelSize = this.getLabelBounds(shape);
      const maskId = (shape.id + "_clip").replace(":", "_");
      if (as || ae || labelSize) {
        const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
        const mask = document.createElementNS("http://www.w3.org/2000/svg", "mask");
        mask.id = maskId;
        const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        rect.setAttribute("x", bounds.minX - 100 + "");
        rect.setAttribute("y", bounds.minY - 100 + "");
        rect.setAttribute("width", bounds.width + 200 + "");
        rect.setAttribute("height", bounds.height + 200 + "");
        rect.setAttribute("fill", "white");
        mask.appendChild(rect);
        if (as)
          mask.appendChild(getArrowheadSvgMask(as, info.start.arrowhead));
        if (ae)
          mask.appendChild(getArrowheadSvgMask(ae, info.end.arrowhead));
        if (labelSize) {
          const labelMask = document.createElementNS("http://www.w3.org/2000/svg", "rect");
          labelMask.setAttribute("x", labelSize.x + "");
          labelMask.setAttribute("y", labelSize.y + "");
          labelMask.setAttribute("width", labelSize.w + "");
          labelMask.setAttribute("height", labelSize.h + "");
          labelMask.setAttribute("fill", "black");
          mask.appendChild(labelMask);
        }
        defs.appendChild(mask);
        g3.appendChild(defs);
      }
      const g22 = document.createElementNS("http://www.w3.org/2000/svg", "g");
      g22.setAttribute("mask", `url(#${maskId})`);
      g3.appendChild(g22);
      const rect2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect2.setAttribute("x", "-100");
      rect2.setAttribute("y", "-100");
      rect2.setAttribute("width", bounds.width + 200 + "");
      rect2.setAttribute("height", bounds.height + 200 + "");
      rect2.setAttribute("fill", "transparent");
      rect2.setAttribute("stroke", "none");
      g22.appendChild(rect2);
      const path = getArrowSvgPath(
        info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info),
        color,
        strokeWidth
      );
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
        info.isStraight ? info.length : Math.abs(info.bodyArc.length),
        strokeWidth,
        {
          style: shape.props.dash
        }
      );
      path.setAttribute("stroke-dasharray", strokeDasharray);
      path.setAttribute("stroke-dashoffset", strokeDashoffset);
      g22.appendChild(path);
      if (as) {
        g3.appendChild(
          getArrowheadSvgPath(
            as,
            shape.props.color,
            strokeWidth,
            shape.props.arrowheadStart === "arrow" ? "none" : shape.props.fill,
            colors
          )
        );
      }
      if (ae) {
        g3.appendChild(
          getArrowheadSvgPath(
            ae,
            shape.props.color,
            strokeWidth,
            shape.props.arrowheadEnd === "arrow" ? "none" : shape.props.fill,
            colors
          )
        );
      }
      if (labelSize) {
        const opts = {
          fontSize: ARROW_LABEL_FONT_SIZES[shape.props.size],
          lineHeight: TEXT_PROPS.lineHeight,
          fontFamily: font,
          padding: 0,
          textAlign: "middle",
          width: labelSize.w,
          height: labelSize.h,
          fontStyle: "normal",
          fontWeight: "normal"
        };
        const lines = this.app.textMeasure.getTextLines(__spreadProps(__spreadValues({
          text: shape.props.text,
          wrap: true
        }, opts), {
          width: labelSize.w - 8
        }));
        const textElm = getTextSvgElement(this.app, __spreadProps(__spreadValues({
          lines
        }, opts), {
          width: labelSize.w - 8
        }));
        textElm.setAttribute("fill", colors.fill[shape.props.labelColor]);
        const children = Array.from(textElm.children);
        children.forEach((child) => {
          const x3 = parseFloat(child.getAttribute("x") || "0");
          const y3 = parseFloat(child.getAttribute("y") || "0");
          child.setAttribute("x", x3 + 4 + labelSize.x + "px");
          child.setAttribute("y", y3 + labelSize.y + "px");
        });
        g3.appendChild(textElm);
      }
      return g3;
    }
  };
  __publicField(TLArrowUtil, "type", "arrow");
  __decorateClass([
    computed
  ], TLArrowUtil.prototype, "infoCache", 1);
  __decorateClass([
    computed
  ], TLArrowUtil.prototype, "labelBoundsCache", 1);
  function getArrowheadSvgMask(d3, arrowhead) {
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", d3);
    path.setAttribute("fill", arrowhead === "arrow" ? "none" : "black");
    path.setAttribute("stroke", "none");
    return path;
  }
  function getArrowSvgPath(d3, color, strokeWidth) {
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", d3);
    path.setAttribute("fill", "none");
    path.setAttribute("stroke", color);
    path.setAttribute("stroke-width", strokeWidth + "");
    return path;
  }
  function getArrowheadSvgPath(d3, color, strokeWidth, fill, colors) {
    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
    path.setAttribute("d", d3);
    path.setAttribute("fill", "none");
    path.setAttribute("stroke", colors.fill[color]);
    path.setAttribute("stroke-width", strokeWidth + "");
    const shapeFill = getShapeFillSvg({
      d: d3,
      fill,
      color,
      colors
    });
    if (shapeFill) {
      const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
      g3.appendChild(shapeFill);
      g3.appendChild(path);
      return g3;
    } else {
      return path;
    }
  }
  function isPrecise(normalizedAnchor) {
    return normalizedAnchor.x !== 0.5 || normalizedAnchor.y !== 0.5;
  }
  var TLArrowShapeDef = defineShape({
    type: "arrow",
    getShapeUtil: () => TLArrowUtil,
    validator: arrowShapeTypeValidator,
    migrations: arrowShapeMigrations
  });

  // ../../../packages/editor/src/lib/components/HTMLContainer.tsx
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  function HTMLContainer(_a5) {
    var _b2 = _a5, { children, className = "" } = _b2, rest = __objRest(_b2, ["children", "className"]);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", __spreadProps(__spreadValues({}, rest), { className: `tl-html-container ${className}`, children }));
  }

  // ../../../packages/editor/src/lib/app/shapeutils/shared/HyperlinkButton.tsx
  var import_classnames = __toESM(require_classnames());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var LINK_ICON = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='30' height='30' fill='none'%3E%3Cpath stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M13 5H7a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6M19 5h6m0 0v6m0-6L13 17'/%3E%3C/svg%3E";
  function HyperlinkButton({ url, zoomLevel }) {
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
      "a",
      {
        className: (0, import_classnames.default)("tl-hyperlink-button", {
          "tl-hyperlink-button__hidden": zoomLevel < 0.5
        }),
        href: url,
        target: "_blank",
        rel: "noopener noreferrer",
        onPointerDown: stopEventPropagation,
        onPointerUp: stopEventPropagation,
        title: url,
        draggable: false,
        children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
          "div",
          {
            className: "tl-hyperlink-button__icon",
            style: {
              mask: `url("${LINK_ICON}") center 100% / 100% no-repeat`,
              WebkitMask: `url("${LINK_ICON}") center 100% / 100% no-repeat`
            }
          }
        )
      }
    );
  }

  // ../../../packages/editor/src/lib/app/shapeutils/shared/resizeBox.ts
  var resizeBox = (shape, info, opts = {}) => {
    const { newPoint, handle, scaleX, scaleY } = info;
    const { minWidth = 1, maxWidth = Infinity, minHeight = 1, maxHeight = Infinity } = opts;
    let w3 = shape.props.w * scaleX;
    let h3 = shape.props.h * scaleY;
    const offset = new Vec2d(0, 0);
    if (w3 > 0) {
      if (w3 < minWidth) {
        switch (handle) {
          case "top_left":
          case "left":
          case "bottom_left": {
            offset.x = w3 - minWidth;
            break;
          }
          case "top":
          case "bottom": {
            offset.x = (w3 - minWidth) / 2;
            break;
          }
          default: {
            offset.x = 0;
          }
        }
        w3 = minWidth;
      }
    } else {
      offset.x = w3;
      w3 = -w3;
      if (w3 < minWidth) {
        switch (handle) {
          case "top_left":
          case "left":
          case "bottom_left": {
            offset.x = -w3;
            break;
          }
          default: {
            offset.x = -minWidth;
          }
        }
        w3 = minWidth;
      }
    }
    if (h3 > 0) {
      if (h3 < minHeight) {
        switch (handle) {
          case "top_left":
          case "top":
          case "top_right": {
            offset.y = h3 - minHeight;
            break;
          }
          case "right":
          case "left": {
            offset.y = (h3 - minHeight) / 2;
            break;
          }
          default: {
            offset.y = 0;
          }
        }
        h3 = minHeight;
      }
    } else {
      offset.y = h3;
      h3 = -h3;
      if (h3 < minHeight) {
        switch (handle) {
          case "top_left":
          case "top":
          case "top_right": {
            offset.y = -h3;
            break;
          }
          default: {
            offset.y = -minHeight;
          }
        }
        h3 = minHeight;
      }
    }
    const { x: x3, y: y3 } = offset.rot(shape.rotation).add(newPoint);
    return {
      x: x3,
      y: y3,
      props: {
        w: Math.min(maxWidth, w3),
        h: Math.min(maxHeight, h3)
      }
    };
  };

  // ../../../packages/editor/src/lib/app/shapeutils/TLBoxUtil.tsx
  var TLBoxUtil = class extends TLShapeUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "onResize", (shape, info) => {
        return resizeBox(shape, info);
      });
    }
    getBounds(shape) {
      return new Box2d(0, 0, shape.props.w, shape.props.h);
    }
    getCenter(shape) {
      return new Vec2d(shape.props.w / 2, shape.props.h / 2);
    }
    getOutline(shape) {
      return this.bounds(shape).corners;
    }
    hitTestPoint(shape, point2) {
      return pointInPolygon(point2, this.outline(shape));
    }
    hitTestLineSegment(shape, A2, B) {
      const outline = this.outline(shape);
      for (let i3 = 0; i3 < outline.length; i3++) {
        const C2 = outline[i3];
        const D3 = outline[(i3 + 1) % outline.length];
        if (linesIntersect(A2, B, C2, D3))
          return true;
      }
      return false;
    }
  };

  // ../../../packages/editor/src/lib/app/shapeutils/TLBookmarkUtil/TLBookmarkUtil.tsx
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var TLBookmarkUtil = class extends TLBoxUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "canResize", () => false);
      __publicField(this, "hideSelectionBoundsBg", () => true);
      __publicField(this, "hideSelectionBoundsFg", () => true);
      __publicField(this, "onBeforeCreate", (shape) => {
        this.updateBookmarkAsset(shape);
      });
      __publicField(this, "onBeforeUpdate", (prev, shape) => {
        if (prev.props.url !== shape.props.url) {
          this.updateBookmarkAsset(shape);
        }
      });
      __publicField(this, "updateBookmarkAsset", debounce((shape) => {
        const { url } = shape.props;
        const assetId = TLAsset.createCustomId(getHashForString(url));
        const existing = this.app.getAssetById(assetId);
        if (existing) {
          if (shape.props.assetId !== existing.id) {
            this.app.updateShapes([
              {
                id: shape.id,
                type: shape.type,
                props: { assetId }
              }
            ]);
          }
        } else if (this.app.onCreateBookmarkFromUrl) {
          this.app.onCreateBookmarkFromUrl(url).then((meta) => {
            if (!meta) {
              this.app.updateShapes([
                {
                  id: shape.id,
                  type: shape.type,
                  props: { assetId: void 0 }
                }
              ]);
              return;
            }
            this.app.batch(() => {
              this.app.createAssets([
                {
                  id: assetId,
                  typeName: "asset",
                  type: "bookmark",
                  props: {
                    src: url,
                    description: meta.description,
                    image: meta.image,
                    title: meta.title
                  }
                }
              ]).updateShapes([
                {
                  id: shape.id,
                  type: shape.type,
                  props: { assetId }
                }
              ]);
            });
          });
        }
      }, 500));
    }
    defaultProps() {
      return {
        opacity: "1",
        url: "",
        w: DEFAULT_BOOKMARK_WIDTH,
        h: DEFAULT_BOOKMARK_HEIGHT,
        assetId: null
      };
    }
    render(shape) {
      const asset = shape.props.assetId ? this.app.getAssetById(shape.props.assetId) : null;
      const pageRotation = this.app.getPageRotation(shape);
      const address = this.getHumanReadableAddress(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(HTMLContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
        "div",
        {
          className: "tl-bookmark__container tl-hitarea-stroke",
          style: {
            boxShadow: rotateBoxShadow(pageRotation, ROTATING_SHADOWS)
          },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "tl-bookmark__image_container", children: [
              (asset == null ? void 0 : asset.props.image) ? /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                "img",
                {
                  className: "tl-bookmark__image",
                  draggable: false,
                  src: asset == null ? void 0 : asset.props.image,
                  alt: (asset == null ? void 0 : asset.props.title) || ""
                }
              ) : /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "tl-bookmark__placeholder" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.app.zoomLevel })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "tl-bookmark__copy_container", children: [
              (asset == null ? void 0 : asset.props.title) && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h2", { className: "tl-bookmark__heading", children: truncateStringWithEllipsis((asset == null ? void 0 : asset.props.title) || "", 54) }),
              (asset == null ? void 0 : asset.props.description) && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "tl-bookmark__description", children: truncateStringWithEllipsis((asset == null ? void 0 : asset.props.description) || "", 128) }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                "a",
                {
                  className: "tl-bookmark__link",
                  href: shape.props.url || "",
                  target: "_blank",
                  rel: "noopener noreferrer",
                  onPointerDown: stopEventPropagation,
                  onPointerUp: stopEventPropagation,
                  onClick: stopEventPropagation,
                  children: truncateStringWithEllipsis(address, 45)
                }
              )
            ] })
          ]
        }
      ) });
    }
    indicator(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
        "rect",
        {
          width: toDomPrecision(shape.props.w),
          height: toDomPrecision(shape.props.h),
          rx: "8",
          ry: "8"
        }
      );
    }
    getHumanReadableAddress(shape) {
      try {
        const url = new URL(shape.props.url);
        const path = url.pathname.replace(/\/*$/, "");
        return `${url.hostname}${path}`;
      } catch (e2) {
        return shape.props.url;
      }
    }
  };
  __publicField(TLBookmarkUtil, "type", "bookmark");
  var TLBookmarkShapeDef = defineShape({
    type: "bookmark",
    getShapeUtil: () => TLBookmarkUtil,
    validator: bookmarkShapeTypeValidator,
    migrations: bookmarkShapeMigrations
  });

  // ../../../packages/editor/src/lib/utils/svg.ts
  function getPointerInfo(e2, container) {
    ;
    e2.isKilled = true;
    const { top, left } = container.getBoundingClientRect();
    return {
      point: {
        x: e2.clientX - left,
        y: e2.clientY - top,
        z: e2.pressure
      },
      shiftKey: e2.shiftKey,
      altKey: e2.altKey,
      ctrlKey: e2.metaKey || e2.ctrlKey,
      pointerId: e2.pointerId,
      button: e2.button,
      isPen: e2.pointerType === "pen"
    };
  }
  function precise2(A2) {
    return `${toDomPrecision(A2.x)},${toDomPrecision(A2.y)} `;
  }
  function average(A2, B) {
    return `${toDomPrecision((A2.x + B.x) / 2)},${toDomPrecision((A2.y + B.y) / 2)} `;
  }
  function getSvgPathFromStroke(points2, closed = true) {
    const len = points2.length;
    if (len < 2) {
      return "";
    }
    let a3 = points2[0];
    let b3 = points2[1];
    if (len === 2) {
      return `M${precise2(a3)}L${precise2(b3)}`;
    }
    let result = "";
    for (let i3 = 2, max = len - 1; i3 < max; i3++) {
      a3 = points2[i3];
      b3 = points2[i3 + 1];
      result += average(a3, b3);
    }
    if (closed) {
      return `M${average(points2[0], points2[1])}Q${precise2(points2[1])}${average(
        points2[1],
        points2[2]
      )}T${result}${average(points2[len - 1], points2[0])}${average(points2[0], points2[1])}Z`;
    } else {
      return `M${precise2(points2[0])}Q${precise2(points2[1])}${average(points2[1], points2[2])}${points2.length > 3 ? "T" : ""}${result}L${precise2(points2[len - 1])}`;
    }
  }
  function getSvgPathFromStrokePoints(points2, closed = false) {
    const len = points2.length;
    if (len < 2) {
      return "";
    }
    let a3 = points2[0].point;
    let b3 = points2[1].point;
    if (len === 2) {
      return `M${precise2(a3)}L${precise2(b3)}`;
    }
    let result = "";
    for (let i3 = 2, max = len - 1; i3 < max; i3++) {
      a3 = points2[i3].point;
      b3 = points2[i3 + 1].point;
      result += average(a3, b3);
    }
    if (closed) {
      return `M${average(points2[0].point, points2[1].point)}Q${precise2(points2[1].point)}${average(
        points2[1].point,
        points2[2].point
      )}T${result}${average(points2[len - 1].point, points2[0].point)}${average(
        points2[0].point,
        points2[1].point
      )}Z`;
    } else {
      return `M${precise2(points2[0].point)}Q${precise2(points2[1].point)}${average(
        points2[1].point,
        points2[2].point
      )}${points2.length > 3 ? "T" : ""}${result}L${precise2(points2[len - 1].point)}`;
    }
  }

  // ../../../packages/editor/src/lib/app/shapeutils/shared/useForceSolid.ts
  function useForceSolid() {
    const app = useApp();
    return useValue("zoom", () => app.zoomLevel < 0.35, [app]);
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLDrawUtil/getPath.ts
  var PEN_EASING = (t4) => t4 * 0.65 + SIN(t4 * PI / 2) * 0.35;
  var simulatePressureSettings = (strokeWidth) => {
    return {
      size: 1 + strokeWidth,
      thinning: 0.5,
      streamline: 0.62 + (1 + strokeWidth) / 8 * 0.06,
      smoothing: 0.62,
      easing: EASINGS.easeOutSine,
      simulatePressure: true
    };
  };
  var realPressureSettings = (strokeWidth) => {
    return {
      size: 1 + strokeWidth * 1.2,
      thinning: 0.62,
      streamline: 0.62,
      smoothing: 0.62,
      simulatePressure: false,
      easing: PEN_EASING
    };
  };
  var solidSettings = (strokeWidth) => {
    return {
      size: 1 + strokeWidth,
      thinning: 0,
      streamline: 0.62 + (1 + strokeWidth) / 8 * 0.06,
      smoothing: 0.62,
      simulatePressure: false,
      easing: EASINGS.linear
    };
  };
  function getFreehandOptions(shape, strokeWidth, forceComplete, forceSolid) {
    return __spreadProps(__spreadValues({}, forceSolid ? solidSettings(strokeWidth) : shape.props.dash === "draw" ? shape.props.isPen ? realPressureSettings(strokeWidth) : simulatePressureSettings(strokeWidth) : solidSettings(strokeWidth)), {
      last: shape.props.isComplete || forceComplete
    });
  }
  function getPointsFromSegments(segments) {
    const points2 = [];
    for (const segment of segments) {
      if (segment.type === "free" || segment.points.length < 2) {
        points2.push(...segment.points.map(Vec2d.Cast));
      } else {
        const pointsToInterpolate = Math.max(
          4,
          Math.floor(Vec2d.Dist(segment.points[0], segment.points[1]) / 16)
        );
        points2.push(...Vec2d.PointsBetween(segment.points[0], segment.points[1], pointsToInterpolate));
      }
    }
    return points2;
  }
  function getDrawShapeStrokeDashArray(shape, strokeWidth) {
    return {
      draw: "none",
      solid: `none`,
      dotted: `0.1 ${strokeWidth * 2}`,
      dashed: `${strokeWidth * 2} ${strokeWidth * 2}`
    }[shape.props.dash];
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLDrawUtil/TLDrawUtil.tsx
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var TLDrawUtil = class extends TLShapeUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "hideResizeHandles", (shape) => this.getIsDot(shape));
      __publicField(this, "hideRotateHandle", (shape) => this.getIsDot(shape));
      __publicField(this, "hideSelectionBoundsBg", (shape) => this.getIsDot(shape));
      __publicField(this, "hideSelectionBoundsFg", (shape) => this.getIsDot(shape));
      __publicField(this, "isClosed", (shape) => shape.props.isClosed);
      __publicField(this, "onResize", (shape, info) => {
        const { scaleX, scaleY } = info;
        const newSegments = [];
        for (const segment of shape.props.segments) {
          newSegments.push(__spreadProps(__spreadValues({}, segment), {
            points: segment.points.map(({ x: x3, y: y3, z: z2 }) => {
              return {
                x: scaleX * x3,
                y: scaleY * y3,
                z: z2
              };
            })
          }));
        }
        return {
          props: {
            segments: newSegments
          }
        };
      });
    }
    defaultProps() {
      return {
        segments: [],
        color: "black",
        fill: "none",
        dash: "draw",
        size: "m",
        opacity: "1",
        isComplete: false,
        isClosed: false,
        isPen: false
      };
    }
    getIsDot(shape) {
      return shape.props.segments.length === 1 && shape.props.segments[0].points.length < 2;
    }
    getBounds(shape) {
      return Box2d.FromPoints(this.outline(shape));
    }
    getOutline(shape) {
      return getPointsFromSegments(shape.props.segments);
    }
    getCenter(shape) {
      return this.bounds(shape).center;
    }
    hitTestPoint(shape, point2) {
      const outline = this.outline(shape);
      const zoomLevel = this.app.zoomLevel;
      const offsetDist = this.app.getStrokeWidth(shape.props.size) / zoomLevel;
      if (shape.props.segments.length === 1 && shape.props.segments[0].points.length < 4) {
        if (shape.props.segments[0].points.some((pt) => Vec2d.Dist(point2, pt) < offsetDist * 1.5)) {
          return true;
        }
      }
      if (this.isClosed(shape)) {
        return pointInPolygon(point2, outline);
      }
      if (this.bounds(shape).containsPoint(point2)) {
        for (let i3 = 0; i3 < outline.length; i3++) {
          const C2 = outline[i3];
          const D3 = outline[(i3 + 1) % outline.length];
          if (Vec2d.DistanceToLineSegment(C2, D3, point2) < offsetDist)
            return true;
        }
      }
      return false;
    }
    hitTestLineSegment(shape, A2, B) {
      const outline = this.outline(shape);
      if (shape.props.segments.length === 1 && shape.props.segments[0].points.length < 4) {
        const zoomLevel = this.app.zoomLevel;
        const offsetDist = this.app.getStrokeWidth(shape.props.size) / zoomLevel;
        if (shape.props.segments[0].points.some(
          (pt) => Vec2d.DistanceToLineSegment(A2, B, pt) < offsetDist * 1.5
        )) {
          return true;
        }
      }
      if (this.isClosed(shape)) {
        for (let i3 = 0; i3 < outline.length; i3++) {
          const C2 = outline[i3];
          const D3 = outline[(i3 + 1) % outline.length];
          if (linesIntersect(A2, B, C2, D3))
            return true;
        }
      } else {
        for (let i3 = 0; i3 < outline.length - 1; i3++) {
          const C2 = outline[i3];
          const D3 = outline[i3 + 1];
          if (linesIntersect(A2, B, C2, D3))
            return true;
        }
      }
      return false;
    }
    render(shape) {
      var _a5;
      const forceSolid = useForceSolid();
      const strokeWidth = this.app.getStrokeWidth(shape.props.size);
      const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
      const showAsComplete = shape.props.isComplete || ((_a5 = last(shape.props.segments)) == null ? void 0 : _a5.type) === "straight";
      let sw = strokeWidth;
      if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
        sw += rng(shape.id)() * (strokeWidth / 6);
      }
      const options = getFreehandOptions(shape, sw, showAsComplete, forceSolid);
      const strokePoints = getStrokePoints(allPointsFromSegments, options);
      const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
      if (!forceSolid && shape.props.dash === "draw" || strokePoints.length < 2) {
        setStrokePointRadii(strokePoints, options);
        const strokeOutlinePoints = getStrokeOutlinePoints(strokePoints, options);
        return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(SVGContainer, { id: shape.id, children: [
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
            ShapeFill,
            {
              fill: shape.props.isClosed ? shape.props.fill : "none",
              color: shape.props.color,
              d: solidStrokePath
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
            "path",
            {
              d: getSvgPathFromStroke(strokeOutlinePoints, true),
              strokeLinecap: "round",
              fill: "currentColor"
            }
          )
        ] });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(SVGContainer, { id: shape.id, children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          ShapeFill,
          {
            color: shape.props.color,
            fill: shape.props.isClosed ? shape.props.fill : "none",
            d: solidStrokePath
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
          "path",
          {
            d: solidStrokePath,
            strokeLinecap: "round",
            fill: "none",
            stroke: "currentColor",
            strokeWidth,
            strokeDasharray: getDrawShapeStrokeDashArray(shape, strokeWidth),
            strokeDashoffset: "0"
          }
        )
      ] });
    }
    indicator(shape) {
      var _a5;
      const forceSolid = useForceSolid();
      const strokeWidth = this.app.getStrokeWidth(shape.props.size);
      const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
      let sw = strokeWidth;
      if (!forceSolid && !shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
        sw += rng(shape.id)() * (strokeWidth / 6);
      }
      const showAsComplete = shape.props.isComplete || ((_a5 = last(shape.props.segments)) == null ? void 0 : _a5.type) === "straight";
      const options = getFreehandOptions(shape, sw, showAsComplete, true);
      const strokePoints = getStrokePoints(allPointsFromSegments, options);
      const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
      return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("path", { d: solidStrokePath });
    }
    toSvg(shape, _font, colors) {
      var _a5;
      const { color } = shape.props;
      const strokeWidth = this.app.getStrokeWidth(shape.props.size);
      const allPointsFromSegments = getPointsFromSegments(shape.props.segments);
      const showAsComplete = shape.props.isComplete || ((_a5 = last(shape.props.segments)) == null ? void 0 : _a5.type) === "straight";
      let sw = strokeWidth;
      if (!shape.props.isPen && shape.props.dash === "draw" && allPointsFromSegments.length === 1) {
        sw += rng(shape.id)() * (strokeWidth / 6);
      }
      const options = getFreehandOptions(shape, sw, showAsComplete, false);
      const strokePoints = getStrokePoints(allPointsFromSegments, options);
      const solidStrokePath = strokePoints.length > 1 ? getSvgPathFromStrokePoints(strokePoints, shape.props.isClosed) : getDot(allPointsFromSegments[0], sw);
      let foregroundPath;
      if (shape.props.dash === "draw" || strokePoints.length < 2) {
        setStrokePointRadii(strokePoints, options);
        const strokeOutlinePoints = getStrokeOutlinePoints(strokePoints, options);
        const p3 = document.createElementNS("http://www.w3.org/2000/svg", "path");
        p3.setAttribute("d", getSvgPathFromStroke(strokeOutlinePoints, true));
        p3.setAttribute("fill", colors.fill[color]);
        p3.setAttribute("stroke-linecap", "round");
        foregroundPath = p3;
      } else {
        const p3 = document.createElementNS("http://www.w3.org/2000/svg", "path");
        p3.setAttribute("d", solidStrokePath);
        p3.setAttribute("stroke", colors.fill[color]);
        p3.setAttribute("fill", "none");
        p3.setAttribute("stroke-linecap", "round");
        p3.setAttribute("stroke-width", strokeWidth.toString());
        p3.setAttribute("stroke-dasharray", getDrawShapeStrokeDashArray(shape, strokeWidth));
        p3.setAttribute("stroke-dashoffset", "0");
        foregroundPath = p3;
      }
      const fillPath = getShapeFillSvg({
        fill: shape.props.isClosed ? shape.props.fill : "none",
        d: solidStrokePath,
        color: shape.props.color,
        colors
      });
      if (fillPath) {
        const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
        g3.appendChild(fillPath);
        g3.appendChild(foregroundPath);
        return g3;
      }
      return foregroundPath;
    }
    expandSelectionOutlinePx(shape) {
      const multiplier = shape.props.dash === "draw" ? 1.6 : 1;
      return this.app.getStrokeWidth(shape.props.size) * multiplier / 2;
    }
  };
  __publicField(TLDrawUtil, "type", "draw");
  var TLDrawShapeDef = defineShape({
    type: "draw",
    getShapeUtil: () => TLDrawUtil,
    migrations: drawShapeMigrations,
    validator: drawShapeTypeValidator
  });
  function getDot(point2, sw) {
    const r3 = (sw + 1) * 0.5;
    return `M ${point2.x} ${point2.y} m -${r3}, 0 a ${r3},${r3} 0 1,0 ${r3 * 2},0 a ${r3},${r3} 0 1,0 -${r3 * 2},0`;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLEmbedUtil/TLEmbedUtil.tsx
  var React20 = __toESM(require_react());
  var import_react32 = __toESM(require_react());

  // ../../../packages/editor/src/lib/hooks/useEditorComponents.tsx
  var import_react31 = __toESM(require_react());

  // ../../../packages/editor/src/lib/components/DefaultBackground.tsx
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  function DefaultBackground() {
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "tl-background" });
  }

  // ../../../packages/editor/src/lib/components/DefaultBrush.tsx
  var import_react11 = __toESM(require_react());

  // ../../../packages/editor/src/lib/hooks/useTransform.ts
  var import_react10 = __toESM(require_react());
  function useTransform(ref, x3, y3, scale, rotate, additionalOffset) {
    (0, import_react10.useLayoutEffect)(() => {
      const elm = ref.current;
      if (!elm)
        return;
      if (x3 === void 0)
        return;
      let trans = `translate(${x3}px, ${y3}px)`;
      if (scale !== void 0) {
        trans += ` scale(${scale})`;
      }
      if (rotate !== void 0) {
        trans += ` rotate(${rotate}rad)`;
      }
      if (additionalOffset) {
        trans += ` translate(${additionalOffset.x}px, ${additionalOffset.y}px)`;
      }
      elm.style.transform = trans;
    });
  }

  // ../../../packages/editor/src/lib/components/DefaultBrush.tsx
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var DefaultBrush = ({ brush, color, opacity }) => {
    const rSvg = (0, import_react11.useRef)(null);
    useTransform(rSvg, brush.x, brush.y);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("svg", { className: "tl-overlays__item", ref: rSvg, children: color ? /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("g", { className: "tl-brush", opacity, children: [
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "rect",
        {
          width: toDomPrecision(Math.max(1, brush.w)),
          height: toDomPrecision(Math.max(1, brush.h)),
          fill: color,
          opacity: 0.75
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        "rect",
        {
          width: toDomPrecision(Math.max(1, brush.w)),
          height: toDomPrecision(Math.max(1, brush.h)),
          fill: "none",
          stroke: color,
          opacity: 0.1
        }
      )
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "rect",
      {
        className: "tl-brush tl-brush__default",
        width: toDomPrecision(Math.max(1, brush.w)),
        height: toDomPrecision(Math.max(1, brush.h))
      }
    ) });
  };

  // ../../../packages/editor/src/lib/components/DefaultCollaboratorHint.tsx
  var import_classnames2 = __toESM(require_classnames());
  var import_react12 = __toESM(require_react());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var DefaultCollaboratorHint = ({
    className,
    zoom,
    point: point2,
    color,
    viewport,
    opacity = 1
  }) => {
    const rSvg = (0, import_react12.useRef)(null);
    useTransform(
      rSvg,
      clamp(point2.x, viewport.minX + 5 / zoom, viewport.maxX - 5 / zoom),
      clamp(point2.y, viewport.minY + 5 / zoom, viewport.maxY - 5 / zoom),
      1 / zoom,
      Vec2d.Angle(viewport.center, point2)
    );
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)("svg", { ref: rSvg, className: (0, import_classnames2.default)("tl-overlays__item", className), children: [
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("use", { href: "#cursor_hint", color, strokeWidth: 3, stroke: "var(--color-background)" }),
      /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("use", { href: "#cursor_hint", color, opacity })
    ] });
  };

  // ../../../packages/editor/src/lib/components/DefaultCursor.tsx
  var import_classnames3 = __toESM(require_classnames());
  var import_react13 = __toESM(require_react());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var _Cursor = ({ className, zoom, point: point2, color, name }) => {
    const rDiv = (0, import_react13.useRef)(null);
    useTransform(rDiv, point2 == null ? void 0 : point2.x, point2 == null ? void 0 : point2.y, 1 / zoom);
    if (!point2)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { ref: rDiv, className: (0, import_classnames3.default)("tl-overlays__item", className), children: [
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("svg", { className: "tl-cursor", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("use", { href: "#cursor", color }) }),
      name !== null && name !== "" && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "tl-nametag", style: { backgroundColor: color }, children: name })
    ] });
  };
  var DefaultCursor = (0, import_react13.memo)(_Cursor);

  // ../../../packages/editor/src/lib/components/DefaultErrorFallback.tsx
  var import_classnames7 = __toESM(require_classnames());
  var import_react30 = __toESM(require_react());

  // ../../../packages/editor/src/lib/utils/runtime.ts
  var runtime = {
    openWindow: (url, target) => window.open(url, target, "noopener noreferrer"),
    refreshPage: () => window.location.reload(),
    hardReset: () => __async(void 0, null, function* () {
      var _a5;
      return yield (_a5 = window.__tldraw__hardReset) == null ? void 0 : _a5.call(window);
    })
  };
  function setRuntimeOverrides(input) {
    Object.assign(runtime, input);
  }

  // ../../../packages/editor/src/lib/utils/hard-reset.ts
  function hardResetApp() {
    runtime.hardReset();
  }

  // ../../../packages/editor/src/lib/utils/refresh-page.ts
  function refreshPage() {
    runtime.refreshPage();
  }

  // ../../../packages/editor/src/lib/components/Canvas.tsx
  var React18 = __toESM(require_react());

  // ../../../packages/editor/src/lib/hooks/useCanvasEvents.ts
  var import_react14 = __toESM(require_react());

  // ../../../packages/editor/src/lib/utils/assets.ts
  var import_lodash2 = __toESM(require_lodash2());

  // ../../../packages/editor/src/lib/utils/is-gif-animated.ts
  function getDataBlocksLength(buffer, offset) {
    let length = 0;
    while (buffer[offset + length]) {
      length += buffer[offset + length] + 1;
    }
    return length + 1;
  }
  function isGIF(buffer) {
    const enc = new TextDecoder("ascii");
    const header = enc.decode(buffer.slice(0, 3));
    return header === "GIF";
  }
  function isAnimated(buffer) {
    const view = new Uint8Array(buffer);
    let hasColorTable, colorTableSize;
    let offset = 0;
    let imagesCount = 0;
    if (!isGIF(buffer)) {
      return false;
    }
    hasColorTable = view[10] & 128;
    colorTableSize = view[10] & 7;
    offset += 6;
    offset += 7;
    offset += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0;
    while (imagesCount < 2 && offset < view.length) {
      switch (view[offset]) {
        case 44:
          imagesCount += 1;
          hasColorTable = view[offset + 9] & 128;
          colorTableSize = view[offset + 9] & 7;
          offset += 10;
          offset += hasColorTable ? 3 * Math.pow(2, colorTableSize + 1) : 0;
          offset += getDataBlocksLength(view, offset + 1) + 1;
          break;
        case 33:
          offset += 2;
          offset += getDataBlocksLength(view, offset);
          break;
        case 59:
          offset = view.length;
          break;
        default:
          offset = view.length;
          break;
      }
    }
    return imagesCount > 1;
  }

  // ../../../node_modules/crc/mjs/calculators/crc32.js
  var TABLE = [
    0,
    1996959894,
    3993919788,
    2567524794,
    124634137,
    1886057615,
    3915621685,
    2657392035,
    249268274,
    2044508324,
    3772115230,
    2547177864,
    162941995,
    2125561021,
    3887607047,
    2428444049,
    498536548,
    1789927666,
    4089016648,
    2227061214,
    450548861,
    1843258603,
    4107580753,
    2211677639,
    325883990,
    1684777152,
    4251122042,
    2321926636,
    335633487,
    1661365465,
    4195302755,
    2366115317,
    997073096,
    1281953886,
    3579855332,
    2724688242,
    1006888145,
    1258607687,
    3524101629,
    2768942443,
    901097722,
    1119000684,
    3686517206,
    2898065728,
    853044451,
    1172266101,
    3705015759,
    2882616665,
    651767980,
    1373503546,
    3369554304,
    3218104598,
    565507253,
    1454621731,
    3485111705,
    3099436303,
    671266974,
    1594198024,
    3322730930,
    2970347812,
    795835527,
    1483230225,
    3244367275,
    3060149565,
    1994146192,
    31158534,
    2563907772,
    4023717930,
    1907459465,
    112637215,
    2680153253,
    3904427059,
    2013776290,
    251722036,
    2517215374,
    3775830040,
    2137656763,
    141376813,
    2439277719,
    3865271297,
    1802195444,
    476864866,
    2238001368,
    4066508878,
    1812370925,
    453092731,
    2181625025,
    4111451223,
    1706088902,
    314042704,
    2344532202,
    4240017532,
    1658658271,
    366619977,
    2362670323,
    4224994405,
    1303535960,
    984961486,
    2747007092,
    3569037538,
    1256170817,
    1037604311,
    2765210733,
    3554079995,
    1131014506,
    879679996,
    2909243462,
    3663771856,
    1141124467,
    855842277,
    2852801631,
    3708648649,
    1342533948,
    654459306,
    3188396048,
    3373015174,
    1466479909,
    544179635,
    3110523913,
    3462522015,
    1591671054,
    702138776,
    2966460450,
    3352799412,
    1504918807,
    783551873,
    3082640443,
    3233442989,
    3988292384,
    2596254646,
    62317068,
    1957810842,
    3939845945,
    2647816111,
    81470997,
    1943803523,
    3814918930,
    2489596804,
    225274430,
    2053790376,
    3826175755,
    2466906013,
    167816743,
    2097651377,
    4027552580,
    2265490386,
    503444072,
    1762050814,
    4150417245,
    2154129355,
    426522225,
    1852507879,
    4275313526,
    2312317920,
    282753626,
    1742555852,
    4189708143,
    2394877945,
    397917763,
    1622183637,
    3604390888,
    2714866558,
    953729732,
    1340076626,
    3518719985,
    2797360999,
    1068828381,
    1219638859,
    3624741850,
    2936675148,
    906185462,
    1090812512,
    3747672003,
    2825379669,
    829329135,
    1181335161,
    3412177804,
    3160834842,
    628085408,
    1382605366,
    3423369109,
    3138078467,
    570562233,
    1426400815,
    3317316542,
    2998733608,
    733239954,
    1555261956,
    3268935591,
    3050360625,
    752459403,
    1541320221,
    2607071920,
    3965973030,
    1969922972,
    40735498,
    2617837225,
    3943577151,
    1913087877,
    83908371,
    2512341634,
    3803740692,
    2075208622,
    213261112,
    2463272603,
    3855990285,
    2094854071,
    198958881,
    2262029012,
    4057260610,
    1759359992,
    534414190,
    2176718541,
    4139329115,
    1873836001,
    414664567,
    2282248934,
    4279200368,
    1711684554,
    285281116,
    2405801727,
    4167216745,
    1634467795,
    376229701,
    2685067896,
    3608007406,
    1308918612,
    956543938,
    2808555105,
    3495958263,
    1231636301,
    1047427035,
    2932959818,
    3654703836,
    1088359270,
    936918e3,
    2847714899,
    3736837829,
    1202900863,
    817233897,
    3183342108,
    3401237130,
    1404277552,
    615818150,
    3134207493,
    3453421203,
    1423857449,
    601450431,
    3009837614,
    3294710456,
    1567103746,
    711928724,
    3020668471,
    3272380065,
    1510334235,
    755167117
  ];
  if (typeof Int32Array !== "undefined") {
    TABLE = new Int32Array(TABLE);
  }
  var crc32 = (current, previous) => {
    let crc2 = previous === 0 ? 0 : ~~previous ^ -1;
    for (let index2 = 0; index2 < current.length; index2++) {
      crc2 = TABLE[(crc2 ^ current[index2]) & 255] ^ crc2 >>> 8;
    }
    return crc2 ^ -1;
  };
  var crc32_default = crc32;

  // ../../../node_modules/crc/mjs/create_buffer.js
  var import_buffer = __toESM(require_buffer(), 1);
  var createBuffer = (value, encoding) => import_buffer.Buffer.from(value, encoding);
  var create_buffer_default = createBuffer;

  // ../../../node_modules/crc/mjs/define_crc.js
  function defineCrc(model2, calculator) {
    const result = (value, previous) => calculator(create_buffer_default(value), previous) >>> 0;
    result.signed = (value, previous) => calculator(create_buffer_default(value), previous);
    result.unsigned = result;
    result.model = model2;
    return result;
  }

  // ../../../node_modules/crc/mjs/crc32.js
  var crc32_default2 = defineCrc("crc-32", crc32_default);

  // ../../../packages/editor/src/lib/utils/png.ts
  function isPng(view, offset) {
    if (view.getUint8(offset + 0) === 137 && view.getUint8(offset + 1) === 80 && view.getUint8(offset + 2) === 78 && view.getUint8(offset + 3) === 71 && view.getUint8(offset + 4) === 13 && view.getUint8(offset + 5) === 10 && view.getUint8(offset + 6) === 26 && view.getUint8(offset + 7) === 10) {
      return true;
    }
    return false;
  }
  function getChunkType(view, offset) {
    return [
      String.fromCharCode(view.getUint8(offset)),
      String.fromCharCode(view.getUint8(offset + 1)),
      String.fromCharCode(view.getUint8(offset + 2)),
      String.fromCharCode(view.getUint8(offset + 3))
    ].join("");
  }
  function crc(arrayBuffer) {
    return crc32_default2(arrayBuffer);
  }
  var LEN_SIZE = 4;
  var CRC_SIZE = 4;
  function readChunks(view, offset = 0) {
    const chunks = {};
    if (!isPng(view, offset)) {
      throw new Error("Not a PNG");
    }
    offset += 8;
    while (offset <= view.buffer.byteLength) {
      const start = offset;
      const len = view.getInt32(offset);
      offset += 4;
      const chunkType = getChunkType(view, offset);
      if (chunkType === "IDAT" && chunks[chunkType]) {
        offset += len + LEN_SIZE + CRC_SIZE;
        continue;
      }
      if (chunkType === "IEND") {
        break;
      }
      chunks[chunkType] = {
        start,
        dataOffset: offset + 4,
        size: len
      };
      offset += len + LEN_SIZE + CRC_SIZE;
    }
    return chunks;
  }
  function parsePhys(view, offset) {
    return {
      ppux: view.getUint32(offset),
      ppuy: view.getUint32(offset + 4),
      unit: view.getUint8(offset + 4)
    };
  }
  function findChunk(view, type) {
    const chunks = readChunks(view);
    return chunks[type];
  }
  function setPhysChunk(view, dpr = 1, options) {
    let offset = 46;
    let size = 0;
    const res1 = findChunk(view, "pHYs");
    if (res1) {
      offset = res1.start;
      size = res1.size;
    }
    const res2 = findChunk(view, "IDAT");
    if (res2) {
      offset = res2.start;
      size = 0;
    }
    const pHYsData = new ArrayBuffer(21);
    const pHYsDataView = new DataView(pHYsData);
    pHYsDataView.setUint32(0, 9);
    pHYsDataView.setUint8(4, "p".charCodeAt(0));
    pHYsDataView.setUint8(5, "H".charCodeAt(0));
    pHYsDataView.setUint8(6, "Y".charCodeAt(0));
    pHYsDataView.setUint8(7, "s".charCodeAt(0));
    const DPI_96 = 2835.5;
    pHYsDataView.setInt32(8, DPI_96 * dpr);
    pHYsDataView.setInt32(12, DPI_96 * dpr);
    pHYsDataView.setInt8(16, 1);
    const crcBit = new Uint8Array(pHYsData.slice(4, 17));
    pHYsDataView.setInt32(17, crc(crcBit));
    const startBuf = view.buffer.slice(0, offset);
    const endBuf = view.buffer.slice(offset + size);
    return new Blob([startBuf, pHYsData, endBuf], options);
  }

  // ../../../packages/editor/src/lib/utils/assets.ts
  var ACCEPTED_IMG_TYPE = ["image/jpeg", "image/png", "image/gif", "image/svg+xml"];
  var ACCEPTED_VID_TYPE = ["video/mp4", "video/quicktime"];
  var ACCEPTED_ASSET_TYPE = ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).join(", ");
  var isImage = (ext) => ACCEPTED_IMG_TYPE.includes(ext);
  function getVideoSizeFromSrc(src) {
    return __async(this, null, function* () {
      return yield new Promise((resolve, reject) => {
        const video = document.createElement("video");
        video.onloadeddata = () => resolve({ w: video.videoWidth, h: video.videoHeight });
        video.onerror = (e2) => {
          console.error(e2);
          reject(new Error("Could not get video size"));
        };
        video.crossOrigin = "anonymous";
        video.src = src;
      });
    });
  }
  function base64ToFile(dataURL) {
    return __async(this, null, function* () {
      return fetch(dataURL).then(function(result) {
        return result.arrayBuffer();
      });
    });
  }
  function getImageSizeFromSrc(dataURL) {
    return __async(this, null, function* () {
      return yield new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => __async(this, null, function* () {
          try {
            const blob = yield base64ToFile(dataURL);
            const view = new DataView(blob);
            if (isPng(view, 0)) {
              const physChunk = findChunk(view, "pHYs");
              if (physChunk) {
                const physData = parsePhys(view, physChunk.dataOffset);
                if (physData.unit === 0 && physData.ppux === physData.ppuy) {
                  const pixelRatio = Math.round(physData.ppux / 2834.5);
                  resolve({ w: img.width / pixelRatio, h: img.height / pixelRatio });
                  return;
                }
              }
            }
            resolve({ w: img.width, h: img.height });
          } catch (err) {
            console.error(err);
            resolve({ w: img.width, h: img.height });
          }
        });
        img.onerror = (err) => {
          console.error(err);
          reject(new Error("Could not get image size"));
        };
        img.crossOrigin = "anonymous";
        img.src = dataURL;
      });
    });
  }
  function getResizedImageDataUrl(dataURLForImage, width, height) {
    return __async(this, null, function* () {
      return yield new Promise((resolve) => {
        const img = new Image();
        img.onload = () => {
          const canvas = document.createElement("canvas");
          const ctx = canvas.getContext("2d");
          if (!ctx)
            return;
          canvas.width = width * 2;
          canvas.height = height * 2;
          ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
          const newDataURL = canvas.toDataURL();
          resolve(newDataURL);
        };
        img.crossOrigin = "anonymous";
        img.src = dataURLForImage;
      });
    });
  }
  function getMediaAssetFromFile(file) {
    return __async(this, null, function* () {
      return yield new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onerror = () => reject(reader.error);
        reader.onload = () => __async(this, null, function* () {
          let dataUrl = reader.result;
          const isImageType = isImage(file.type);
          const sizeFn = isImageType ? getImageSizeFromSrc : getVideoSizeFromSrc;
          if (file.type === "video/quicktime" && dataUrl.includes("video/quicktime")) {
            dataUrl = dataUrl.replace("video/quicktime", "video/mp4");
          }
          const originalSize = yield sizeFn(dataUrl);
          const size = containBoxSize(originalSize, { w: MAX_ASSET_WIDTH, h: MAX_ASSET_HEIGHT });
          if (size !== originalSize && (file.type === "image/jpeg" || file.type === "image/png")) {
            dataUrl = yield getResizedImageDataUrl(dataUrl, size.w, size.h);
          }
          const assetId = TLAsset.createCustomId(getHashForString(dataUrl));
          const metadata = yield getFileMetaData(file);
          const asset = {
            id: assetId,
            type: isImageType ? "image" : "video",
            typeName: "asset",
            props: {
              name: file.name,
              src: dataUrl,
              w: size.w,
              h: size.h,
              mimeType: file.type,
              isAnimated: metadata.isAnimated
            }
          };
          resolve(asset);
        });
        reader.readAsDataURL(file);
      });
    });
  }
  function getFileMetaData(file) {
    return __async(this, null, function* () {
      if (file.type === "image/gif") {
        return yield new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onerror = () => reject(reader.error);
          reader.onload = () => {
            resolve({
              isAnimated: reader.result ? isAnimated(reader.result) : false
            });
          };
          reader.readAsArrayBuffer(file);
        });
      }
      return {
        isAnimated: isImage(file.type) ? false : true
      };
    });
  }
  function containBoxSize(originalSize, containBoxSize2) {
    const overByXScale = originalSize.w / containBoxSize2.w;
    const overByYScale = originalSize.h / containBoxSize2.h;
    if (overByXScale <= 1 && overByYScale <= 1) {
      return originalSize;
    } else if (overByXScale > overByYScale) {
      return {
        w: originalSize.w / overByXScale,
        h: originalSize.h / overByXScale
      };
    } else {
      return {
        w: originalSize.w / overByYScale,
        h: originalSize.h / overByYScale
      };
    }
  }
  function createShapesFromFiles(app, files, position, _ignoreParent = false) {
    return __async(this, null, function* () {
      const pagePoint = new Vec2d(position.x, position.y);
      const newAssetsForFiles = /* @__PURE__ */ new Map();
      const shapePartials = yield Promise.all(
        files.map((file, i3) => __async(this, null, function* () {
          if (!file.type)
            throw new Error("No mime type");
          if (!ACCEPTED_IMG_TYPE.concat(ACCEPTED_VID_TYPE).includes(file.type)) {
            console.warn(`${file.name} not loaded - Extension not allowed.`);
            return null;
          }
          try {
            const asset = yield app.onCreateAssetFromFile(file);
            if (asset.type === "bookmark")
              return;
            if (!asset)
              throw Error("Could not create an asset");
            newAssetsForFiles.set(file, asset);
            const shapePartial = {
              id: createShapeId(),
              type: asset.type,
              x: pagePoint.x + i3,
              y: pagePoint.y,
              props: {
                w: asset.props.w,
                h: asset.props.h,
                opacity: "1"
              }
            };
            return shapePartial;
          } catch (error) {
            console.error(error);
            return null;
          }
        }))
      );
      const results = compact(shapePartials).sort((a3, b3) => a3.x - b3.x);
      if (results.length === 0)
        return;
      for (let i3 = 0; i3 < results.length; i3++) {
        const model2 = results[i3];
        if (i3 === 0) {
          model2.x -= model2.props.w / 2;
          model2.y -= model2.props.h / 2;
        } else {
          const prevModel = results[i3 - 1];
          model2.x = prevModel.x + prevModel.props.w;
          model2.y = prevModel.y;
        }
      }
      const shapeUpdates = yield Promise.all(
        files.map((file, i3) => __async(this, null, function* () {
          const shape = results[i3];
          if (!shape)
            return;
          const asset = newAssetsForFiles.get(file);
          if (!asset)
            return;
          let existing = app.getAssetById(asset.id);
          if (existing) {
            newAssetsForFiles.delete(file);
            if (shape.props) {
              shape.props.assetId = existing.id;
            }
            return shape;
          }
          existing = app.getAssetBySrc(asset.props.src);
          if (existing) {
            if (shape.props) {
              shape.props.assetId = existing.id;
            }
            return shape;
          }
          if (shape.props) {
            shape.props.assetId = asset.id;
          }
          return shape;
        }))
      );
      const filteredUpdates = shapeUpdates.filter(isNonNullish);
      app.createAssets(compact([...newAssetsForFiles.values()]));
      app.createShapes(filteredUpdates);
      app.setSelectedIds(filteredUpdates.map((s3) => s3.id));
      const { selectedIds, viewportPageBounds } = app;
      const pageBounds = Box2d.Common(compact(selectedIds.map((id) => app.getPageBoundsById(id))));
      if (pageBounds && !viewportPageBounds.contains(pageBounds)) {
        app.zoomToSelection();
      }
    });
  }
  function createEmbedShapeAtPoint(app, url, point2, props) {
    app.createShapes(
      [
        {
          id: createShapeId(),
          type: "embed",
          x: point2.x - (props.width || 450) / 2,
          y: point2.y - (props.height || 450) / 2,
          props: {
            w: props.width,
            h: props.height,
            doesResize: props.doesResize,
            url,
            opacity: "1"
          }
        }
      ],
      true
    );
  }
  function createBookmarkShapeAtPoint(app, url, point2) {
    return __async(this, null, function* () {
      const assetId = TLAsset.createCustomId(getHashForString(url));
      const existing = app.getAssetById(assetId);
      if (existing) {
        app.createShapes([
          {
            id: app.createShapeId(),
            type: "bookmark",
            x: point2.x - 150,
            y: point2.y - 160,
            props: {
              assetId: existing.id,
              url: existing.props.src,
              opacity: "1"
            }
          }
        ]);
        return;
      }
      app.batch(() => __async(this, null, function* () {
        const shapeId = createShapeId();
        app.createShapes(
          [
            {
              id: shapeId,
              type: "bookmark",
              x: point2.x,
              y: point2.y,
              props: {
                url,
                opacity: "1"
              }
            }
          ],
          true
        );
        const meta = yield app.onCreateBookmarkFromUrl(url);
        if (meta) {
          app.createAssets([
            {
              id: assetId,
              typeName: "asset",
              type: "bookmark",
              props: {
                src: url,
                description: meta.description,
                image: meta.image,
                title: meta.title
              }
            }
          ]);
          app.updateShapes([
            {
              id: shapeId,
              type: "bookmark",
              props: {
                assetId,
                opacity: "1"
              }
            }
          ]);
        }
      }));
    });
  }
  function createAssetShapeAtPoint(app, svgString, point2) {
    return __async(this, null, function* () {
      const svg = new DOMParser().parseFromString(svgString, "image/svg+xml").querySelector("svg");
      if (!svg) {
        throw new Error("No <svg/> element present");
      }
      let width = parseFloat(svg.getAttribute("width") || "0");
      let height = parseFloat(svg.getAttribute("height") || "0");
      if (!(width && height)) {
        document.body.appendChild(svg);
        const box = svg.getBoundingClientRect();
        document.body.removeChild(svg);
        width = box.width;
        height = box.height;
      }
      const asset = yield app.onCreateAssetFromFile(
        new File([svgString], "asset.svg", { type: "image/svg+xml" })
      );
      if (asset.type !== "bookmark") {
        asset.props.w = width;
        asset.props.h = height;
      }
      app.batch(() => {
        app.createAssets([asset]);
        app.createShapes(
          [
            {
              id: createShapeId(),
              type: "image",
              x: point2.x - width / 2,
              y: point2.y - height / 2,
              props: {
                assetId: asset.id,
                w: width,
                h: height,
                opacity: "1"
              }
            }
          ],
          true
        );
      });
    });
  }
  var isValidHttpURL = (url) => {
    try {
      const u3 = new URL(url);
      return u3.protocol === "http:" || u3.protocol === "https:";
    } catch (e2) {
      return false;
    }
  };
  var getValidHttpURLList = (url) => {
    const urls = url.split(/[\n\s]/);
    for (const url2 of urls) {
      try {
        const u3 = new URL(url2);
        if (!(u3.protocol === "http:" || u3.protocol === "https:")) {
          return;
        }
      } catch (e2) {
        return;
      }
    }
    return (0, import_lodash2.default)(urls);
  };
  var isSvgText = (text) => {
    return /^<svg/.test(text);
  };
  function dataUrlToFile(url, filename, mimeType) {
    return fetch(url).then(function(res) {
      return res.arrayBuffer();
    }).then(function(buf) {
      return new File([buf], filename, { type: mimeType });
    });
  }

  // ../../../packages/editor/src/lib/hooks/useCanvasEvents.ts
  function useCanvasEvents() {
    const app = useApp();
    const events = (0, import_react14.useMemo)(
      function canvasEvents() {
        let lastX, lastY;
        function onPointerDown(e2) {
          if (e2.isKilled)
            return;
          if (e2.button !== 0 && e2.button !== 1 && e2.button !== 5)
            return;
          setPointerCapture(e2.currentTarget, e2);
          app.dispatch(__spreadValues({
            type: "pointer",
            target: "canvas",
            name: "pointer_down"
          }, getPointerInfo(e2, app.getContainer())));
        }
        function onPointerMove(e2) {
          if (e2.isKilled)
            return;
          if (e2.clientX === lastX && e2.clientY === lastY)
            return;
          lastX = e2.clientX;
          lastY = e2.clientY;
          app.dispatch(__spreadValues({
            type: "pointer",
            target: "canvas",
            name: "pointer_move"
          }, getPointerInfo(e2, app.getContainer())));
        }
        function onPointerUp(e2) {
          if (e2.isKilled)
            return;
          if (e2.button !== 0 && e2.button !== 1 && e2.button !== 5)
            return;
          lastX = e2.clientX;
          lastY = e2.clientY;
          releasePointerCapture(e2.currentTarget, e2);
          app.dispatch(__spreadValues({
            type: "pointer",
            target: "canvas",
            name: "pointer_up"
          }, getPointerInfo(e2, app.getContainer())));
        }
        function onPointerEnter(e2) {
          if (e2.isKilled)
            return;
          app.dispatch(__spreadValues({
            type: "pointer",
            target: "canvas",
            name: "pointer_enter"
          }, getPointerInfo(e2, app.getContainer())));
        }
        function onPointerLeave(e2) {
          if (e2.isKilled)
            return;
          app.dispatch(__spreadValues({
            type: "pointer",
            target: "canvas",
            name: "pointer_leave"
          }, getPointerInfo(e2, app.getContainer())));
        }
        function onTouchStart(e2) {
          ;
          e2.isKilled = true;
          document.body.click();
          preventDefault(e2);
        }
        function onTouchEnd(e2) {
          ;
          e2.isKilled = true;
          if (e2.target.tagName !== "A" && e2.target.tagName !== "TEXTAREA") {
            preventDefault(e2);
          }
        }
        function onDragOver(e2) {
          preventDefault(e2);
        }
        function onDrop(e2) {
          return __async(this, null, function* () {
            var _a5, _b2;
            preventDefault(e2);
            if (!((_b2 = (_a5 = e2.dataTransfer) == null ? void 0 : _a5.files) == null ? void 0 : _b2.length))
              return;
            const files = Array.from(e2.dataTransfer.files).filter(
              (file) => !file.name.endsWith(".tldr")
            );
            yield createShapesFromFiles(app, files, app.screenToPage(e2.clientX, e2.clientY), false);
          });
        }
        return {
          onPointerDown,
          onPointerMove,
          onPointerUp,
          onPointerEnter,
          onPointerLeave,
          onDragOver,
          onDrop,
          onTouchStart,
          onTouchEnd
        };
      },
      [app]
    );
    return events;
  }

  // ../../../packages/editor/src/lib/hooks/useCoarsePointer.ts
  var import_react15 = __toESM(require_react());
  function useCoarsePointer() {
    const app = useApp();
    (0, import_react15.useEffect)(() => {
      const mql = window.matchMedia("(pointer: coarse)");
      const handler = () => {
        app.isCoarsePointer = mql.matches;
      };
      handler();
      mql.addEventListener("change", handler);
      return () => mql.removeEventListener("change", handler);
    }, [app]);
  }

  // ../../../packages/editor/src/lib/hooks/useDocumentEvents.ts
  var import_react17 = __toESM(require_react());

  // ../../../packages/editor/src/lib/hooks/useContainer.tsx
  var import_react16 = __toESM(require_react());
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var ContainerContext = (0, import_react16.createContext)(null);
  function ContainerProvider({
    container,
    children
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ContainerContext.Provider, { value: container, children });
  }
  function useContainer() {
    return assertExists((0, import_react16.useContext)(ContainerContext), "useContainer used outside of <Tldraw />");
  }

  // ../../../packages/editor/src/lib/hooks/useDocumentEvents.ts
  function useDocumentEvents() {
    const app = useApp();
    const container = useContainer();
    const isAppFocused = useValue("isFocused", () => app.isFocused, [app]);
    (0, import_react17.useEffect)(() => {
      if (!isAppFocused)
        return;
      const handleKeyDown = (e2) => {
        if (e2.altKey && (app.isIn("zoom") || !app.root.path.value.endsWith(".idle")) && !isFocusingInput()) {
          preventDefault(e2);
        }
        if (e2.isKilled)
          return;
        e2.isKilled = true;
        switch (e2.key) {
          case "=": {
            if (e2.metaKey || e2.ctrlKey) {
              preventDefault(e2);
              return;
            }
            break;
          }
          case "-": {
            if (e2.metaKey || e2.ctrlKey) {
              preventDefault(e2);
              return;
            }
            break;
          }
          case "0": {
            if (e2.metaKey || e2.ctrlKey) {
              preventDefault(e2);
              return;
            }
            break;
          }
          case "Tab": {
            if (isFocusingInput() || app.isMenuOpen) {
              return;
            }
            break;
          }
          case ",": {
            if (!isFocusingInput()) {
              preventDefault(e2);
              if (!app.inputs.keys.has("Comma")) {
                const { x: x3, y: y3, z: z2 } = app.inputs.currentScreenPoint;
                const {
                  pageState: { hoveredId }
                } = app;
                app.inputs.keys.add("Comma");
                const info2 = __spreadValues({
                  type: "pointer",
                  name: "pointer_down",
                  point: { x: x3, y: y3, z: z2 },
                  shiftKey: e2.shiftKey,
                  altKey: e2.altKey,
                  ctrlKey: e2.metaKey || e2.ctrlKey,
                  pointerId: 0,
                  button: 0,
                  isPen: app.isPenMode
                }, hoveredId ? {
                  target: "shape",
                  shape: app.getShapeById(hoveredId)
                } : {
                  target: "canvas"
                });
                app.dispatch(info2);
                return;
              }
            }
            break;
          }
          case "Escape": {
            if (!app.inputs.keys.has("Escape")) {
              app.inputs.keys.add("Escape");
              app.cancel();
              container.focus();
            }
            return;
          }
          default: {
            if (isFocusingInput() || app.isMenuOpen) {
              return;
            }
          }
        }
        const info = {
          type: "keyboard",
          name: app.inputs.keys.has(e2.code) ? "key_repeat" : "key_down",
          key: e2.key,
          code: e2.code,
          shiftKey: e2.shiftKey,
          altKey: e2.altKey,
          ctrlKey: e2.metaKey || e2.ctrlKey
        };
        app.dispatch(info);
      };
      const handleKeyUp = (e2) => {
        var _a5;
        if (e2.isKilled)
          return;
        e2.isKilled = true;
        if (isFocusingInput() || app.isMenuOpen) {
          return;
        }
        if (e2.key === ",") {
          if ((_a5 = document.activeElement) == null ? void 0 : _a5.ELEMENT_NODE)
            preventDefault(e2);
          if (app.inputs.keys.has(e2.code)) {
            const { x: x3, y: y3, z: z2 } = app.inputs.currentScreenPoint;
            const {
              pageState: { hoveredId }
            } = app;
            app.inputs.keys.delete(e2.code);
            const info2 = __spreadValues({
              type: "pointer",
              name: "pointer_up",
              point: { x: x3, y: y3, z: z2 },
              shiftKey: e2.shiftKey,
              altKey: e2.altKey,
              ctrlKey: e2.metaKey || e2.ctrlKey,
              pointerId: 0,
              button: 0,
              isPen: app.isPenMode
            }, hoveredId ? {
              target: "shape",
              shape: app.getShapeById(hoveredId)
            } : {
              target: "canvas"
            });
            app.dispatch(info2);
            return;
          }
        }
        const info = {
          type: "keyboard",
          name: "key_up",
          key: e2.key,
          code: e2.code,
          shiftKey: e2.shiftKey,
          altKey: e2.altKey,
          ctrlKey: e2.metaKey || e2.ctrlKey
        };
        app.dispatch(info);
      };
      function handleTouchStart(e2) {
        var _a5, _b2;
        if (container.contains(e2.target)) {
          const touchXPosition = e2.touches[0].pageX;
          const touchXRadius = e2.touches[0].radiusX || 0;
          if (touchXPosition - touchXRadius < 10 || touchXPosition + touchXRadius > app.viewportScreenBounds.width - 10) {
            if (((_a5 = e2.target) == null ? void 0 : _a5.tagName) === "BUTTON") {
              ;
              (_b2 = e2.target) == null ? void 0 : _b2.click();
            }
            preventDefault(e2);
          }
        }
      }
      const handleWheel = (e2) => {
        if (container.contains(e2.target) && (e2.ctrlKey || e2.metaKey)) {
          preventDefault(e2);
        }
      };
      function handleBlur() {
        app.complete();
      }
      function handleFocus() {
        app.updateViewportScreenBounds();
      }
      container.addEventListener("touchstart", handleTouchStart, { passive: false });
      document.addEventListener("wheel", handleWheel, { passive: false });
      document.addEventListener("gesturestart", preventDefault);
      document.addEventListener("gesturechange", preventDefault);
      document.addEventListener("gestureend", preventDefault);
      document.addEventListener("keydown", handleKeyDown);
      document.addEventListener("keyup", handleKeyUp);
      window.addEventListener("blur", handleBlur);
      window.addEventListener("focus", handleFocus);
      return () => {
        container.removeEventListener("touchstart", handleTouchStart);
        document.removeEventListener("wheel", handleWheel);
        document.removeEventListener("gesturestart", preventDefault);
        document.removeEventListener("gesturechange", preventDefault);
        document.removeEventListener("gestureend", preventDefault);
        document.removeEventListener("keydown", handleKeyDown);
        document.removeEventListener("keyup", handleKeyUp);
        window.removeEventListener("blur", handleBlur);
        window.removeEventListener("focus", handleFocus);
      };
    }, [app, container, isAppFocused]);
  }
  var INPUTS = ["input", "select", "button", "textarea"];
  function isFocusingInput() {
    const { activeElement } = document;
    if (activeElement && (activeElement.getAttribute("contenteditable") || INPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1)) {
      return true;
    }
    return false;
  }

  // ../../../packages/editor/src/lib/hooks/useFixSafariDoubleTapZoomPencilEvents.ts
  var import_react18 = __toESM(require_react());
  var IGNORED_TAGS = ["textarea", "input"];
  function useFixSafariDoubleTapZoomPencilEvents(ref) {
    const app = useApp();
    (0, import_react18.useEffect)(() => {
      const elm = ref.current;
      if (!elm)
        return;
      const handleEvent = (e2) => {
        var _a5;
        if (e2 instanceof PointerEvent && e2.pointerType === "pen") {
          ;
          e2.isKilled = true;
          const { target } = e2;
          if (IGNORED_TAGS.includes((_a5 = target.tagName) == null ? void 0 : _a5.toLocaleLowerCase()) || app.isIn("select.editing_shape")) {
            return;
          }
          preventDefault(e2);
        }
      };
      elm.addEventListener("touchstart", handleEvent);
      elm.addEventListener("touchend", handleEvent);
      return () => {
        elm.removeEventListener("touchstart", handleEvent);
        elm.addEventListener("touchend", handleEvent);
      };
    }, [app, ref]);
  }

  // ../../../node_modules/@use-gesture/core/dist/maths-0ab39ae9.esm.js
  function clamp2(v3, min2, max) {
    return Math.max(min2, Math.min(v3, max));
  }
  var V = {
    toVector(v3, fallback) {
      if (v3 === void 0)
        v3 = fallback;
      return Array.isArray(v3) ? v3 : [v3, v3];
    },
    add(v1, v22) {
      return [v1[0] + v22[0], v1[1] + v22[1]];
    },
    sub(v1, v22) {
      return [v1[0] - v22[0], v1[1] - v22[1]];
    },
    addTo(v1, v22) {
      v1[0] += v22[0];
      v1[1] += v22[1];
    },
    subTo(v1, v22) {
      v1[0] -= v22[0];
      v1[1] -= v22[1];
    }
  };
  function rubberband(distance, dimension, constant) {
    if (dimension === 0 || Math.abs(dimension) === Infinity)
      return Math.pow(distance, constant * 5);
    return distance * dimension * constant / (dimension + constant * distance);
  }
  function rubberbandIfOutOfBounds(position, min2, max, constant = 0.15) {
    if (constant === 0)
      return clamp2(position, min2, max);
    if (position < min2)
      return -rubberband(min2 - position, max - min2, constant) + min2;
    if (position > max)
      return +rubberband(position - max, max - min2, constant) + max;
    return position;
  }
  function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
    const [[X0, X1], [Y0, Y1]] = bounds;
    return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
  }

  // ../../../node_modules/@use-gesture/core/dist/actions-94b581a0.esm.js
  function _toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
  function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function ownKeys(object2, enumerableOnly) {
    var keys = Object.keys(object2);
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object2);
      enumerableOnly && (symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object2, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }
    return keys;
  }
  function _objectSpread2(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = null != arguments[i3] ? arguments[i3] : {};
      i3 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
    return target;
  }
  var EVENT_TYPE_MAP = {
    pointer: {
      start: "down",
      change: "move",
      end: "up"
    },
    mouse: {
      start: "down",
      change: "move",
      end: "up"
    },
    touch: {
      start: "start",
      change: "move",
      end: "end"
    },
    gesture: {
      start: "start",
      change: "change",
      end: "end"
    }
  };
  function capitalize(string2) {
    if (!string2)
      return "";
    return string2[0].toUpperCase() + string2.slice(1);
  }
  var actionsWithoutCaptureSupported = ["enter", "leave"];
  function hasCapture(capture = false, actionKey) {
    return capture && !actionsWithoutCaptureSupported.includes(actionKey);
  }
  function toHandlerProp(device, action = "", capture = false) {
    const deviceProps = EVENT_TYPE_MAP[device];
    const actionKey = deviceProps ? deviceProps[action] || action : action;
    return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
  }
  var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
  function parseProp(prop) {
    let eventKey = prop.substring(2).toLowerCase();
    const passive = !!~eventKey.indexOf("passive");
    if (passive)
      eventKey = eventKey.replace("passive", "");
    const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
    const capture = !!~eventKey.indexOf(captureKey);
    if (capture)
      eventKey = eventKey.replace("capture", "");
    return {
      device: eventKey,
      capture,
      passive
    };
  }
  function toDomEventType(device, action = "") {
    const deviceProps = EVENT_TYPE_MAP[device];
    const actionKey = deviceProps ? deviceProps[action] || action : action;
    return device + actionKey;
  }
  function isTouch(event) {
    return "touches" in event;
  }
  function getPointerType(event) {
    if (isTouch(event))
      return "touch";
    if ("pointerType" in event)
      return event.pointerType;
    return "mouse";
  }
  function getCurrentTargetTouchList(event) {
    return Array.from(event.touches).filter((e2) => {
      var _event$currentTarget, _event$currentTarget$;
      return e2.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e2.target));
    });
  }
  function distanceAngle(P1, P2) {
    try {
      const dx = P2.clientX - P1.clientX;
      const dy = P2.clientY - P1.clientY;
      const cx = (P2.clientX + P1.clientX) / 2;
      const cy = (P2.clientY + P1.clientY) / 2;
      const distance = Math.hypot(dx, dy);
      const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
      const origin = [cx, cy];
      return {
        angle,
        distance,
        origin
      };
    } catch (_unused) {
    }
    return null;
  }
  function touchIds(event) {
    return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
  }
  function touchDistanceAngle(event, ids) {
    const [P1, P2] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
    return distanceAngle(P1, P2);
  }
  var LINE_HEIGHT = 40;
  var PAGE_HEIGHT = 800;
  function wheelValues(event) {
    let {
      deltaX,
      deltaY,
      deltaMode
    } = event;
    if (deltaMode === 1) {
      deltaX *= LINE_HEIGHT;
      deltaY *= LINE_HEIGHT;
    } else if (deltaMode === 2) {
      deltaX *= PAGE_HEIGHT;
      deltaY *= PAGE_HEIGHT;
    }
    return [deltaX, deltaY];
  }
  function getEventDetails(event) {
    const payload = {};
    if ("buttons" in event)
      payload.buttons = event.buttons;
    if ("shiftKey" in event) {
      const {
        shiftKey,
        altKey: altKey2,
        metaKey,
        ctrlKey
      } = event;
      Object.assign(payload, {
        shiftKey,
        altKey: altKey2,
        metaKey,
        ctrlKey
      });
    }
    return payload;
  }
  function call(v3, ...args) {
    if (typeof v3 === "function") {
      return v3(...args);
    } else {
      return v3;
    }
  }
  function noop() {
  }
  function chain(...fns) {
    if (fns.length === 0)
      return noop;
    if (fns.length === 1)
      return fns[0];
    return function() {
      let result;
      for (const fn of fns) {
        result = fn.apply(this, arguments) || result;
      }
      return result;
    };
  }
  function assignDefault(value, fallback) {
    return Object.assign({}, fallback, value || {});
  }
  var BEFORE_LAST_KINEMATICS_DELAY = 32;
  var Engine = class {
    constructor(ctrl, args, key) {
      this.ctrl = ctrl;
      this.args = args;
      this.key = key;
      if (!this.state) {
        this.state = {};
        this.computeValues([0, 0]);
        this.computeInitial();
        if (this.init)
          this.init();
        this.reset();
      }
    }
    get state() {
      return this.ctrl.state[this.key];
    }
    set state(state) {
      this.ctrl.state[this.key] = state;
    }
    get shared() {
      return this.ctrl.state.shared;
    }
    get eventStore() {
      return this.ctrl.gestureEventStores[this.key];
    }
    get timeoutStore() {
      return this.ctrl.gestureTimeoutStores[this.key];
    }
    get config() {
      return this.ctrl.config[this.key];
    }
    get sharedConfig() {
      return this.ctrl.config.shared;
    }
    get handler() {
      return this.ctrl.handlers[this.key];
    }
    reset() {
      const {
        state,
        shared,
        ingKey,
        args
      } = this;
      shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
      state._step = [false, false];
      state.intentional = false;
      state._movement = [0, 0];
      state._distance = [0, 0];
      state._direction = [0, 0];
      state._delta = [0, 0];
      state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
      state.args = args;
      state.axis = void 0;
      state.memo = void 0;
      state.elapsedTime = state.timeDelta = 0;
      state.direction = [0, 0];
      state.distance = [0, 0];
      state.overflow = [0, 0];
      state._movementBound = [false, false];
      state.velocity = [0, 0];
      state.movement = [0, 0];
      state.delta = [0, 0];
      state.timeStamp = 0;
    }
    start(event) {
      const state = this.state;
      const config = this.config;
      if (!state._active) {
        this.reset();
        this.computeInitial();
        state._active = true;
        state.target = event.target;
        state.currentTarget = event.currentTarget;
        state.lastOffset = config.from ? call(config.from, state) : state.offset;
        state.offset = state.lastOffset;
        state.startTime = state.timeStamp = event.timeStamp;
      }
    }
    computeValues(values) {
      const state = this.state;
      state._values = values;
      state.values = this.config.transform(values);
    }
    computeInitial() {
      const state = this.state;
      state._initial = state._values;
      state.initial = state.values;
    }
    compute(event) {
      const {
        state,
        config,
        shared
      } = this;
      state.args = this.args;
      let dt = 0;
      if (event) {
        state.event = event;
        if (config.preventDefault && event.cancelable)
          state.event.preventDefault();
        state.type = event.type;
        shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
        shared.locked = !!document.pointerLockElement;
        Object.assign(shared, getEventDetails(event));
        shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
        dt = event.timeStamp - state.timeStamp;
        state.timeStamp = event.timeStamp;
        state.elapsedTime = state.timeStamp - state.startTime;
      }
      if (state._active) {
        const _absoluteDelta = state._delta.map(Math.abs);
        V.addTo(state._distance, _absoluteDelta);
      }
      if (this.axisIntent)
        this.axisIntent(event);
      const [_m0, _m1] = state._movement;
      const [t0, t1] = config.threshold;
      const {
        _step,
        values
      } = state;
      if (config.hasCustomTransform) {
        if (_step[0] === false)
          _step[0] = Math.abs(_m0) >= t0 && values[0];
        if (_step[1] === false)
          _step[1] = Math.abs(_m1) >= t1 && values[1];
      } else {
        if (_step[0] === false)
          _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;
        if (_step[1] === false)
          _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;
      }
      state.intentional = _step[0] !== false || _step[1] !== false;
      if (!state.intentional)
        return;
      const movement = [0, 0];
      if (config.hasCustomTransform) {
        const [v0, v1] = values;
        movement[0] = _step[0] !== false ? v0 - _step[0] : 0;
        movement[1] = _step[1] !== false ? v1 - _step[1] : 0;
      } else {
        movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
        movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
      }
      if (this.restrictToAxis && !state._blocked)
        this.restrictToAxis(movement);
      const previousOffset = state.offset;
      const gestureIsActive = state._active && !state._blocked || state.active;
      if (gestureIsActive) {
        state.first = state._active && !state.active;
        state.last = !state._active && state.active;
        state.active = shared[this.ingKey] = state._active;
        if (event) {
          if (state.first) {
            if ("bounds" in config)
              state._bounds = call(config.bounds, state);
            if (this.setup)
              this.setup();
          }
          state.movement = movement;
          this.computeOffset();
        }
      }
      const [ox, oy] = state.offset;
      const [[x0, x1], [y0, y1]] = state._bounds;
      state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];
      state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
      state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
      const rubberband2 = state._active ? config.rubberband || [0, 0] : [0, 0];
      state.offset = computeRubberband(state._bounds, state.offset, rubberband2);
      state.delta = V.sub(state.offset, previousOffset);
      this.computeMovement();
      if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {
        state.delta = V.sub(state.offset, previousOffset);
        const absoluteDelta = state.delta.map(Math.abs);
        V.addTo(state.distance, absoluteDelta);
        state.direction = state.delta.map(Math.sign);
        state._direction = state._delta.map(Math.sign);
        if (!state.first && dt > 0) {
          state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
          state.timeDelta = dt;
        }
      }
    }
    emit() {
      const state = this.state;
      const shared = this.shared;
      const config = this.config;
      if (!state._active)
        this.clean();
      if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents)
        return;
      const memo27 = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
        [this.aliasKey]: state.values
      }));
      if (memo27 !== void 0)
        state.memo = memo27;
    }
    clean() {
      this.eventStore.clean();
      this.timeoutStore.clean();
    }
  };
  function selectAxis([dx, dy], threshold) {
    const absDx = Math.abs(dx);
    const absDy = Math.abs(dy);
    if (absDx > absDy && absDx > threshold) {
      return "x";
    }
    if (absDy > absDx && absDy > threshold) {
      return "y";
    }
    return void 0;
  }
  var CoordinatesEngine = class extends Engine {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "aliasKey", "xy");
    }
    reset() {
      super.reset();
      this.state.axis = void 0;
    }
    init() {
      this.state.offset = [0, 0];
      this.state.lastOffset = [0, 0];
    }
    computeOffset() {
      this.state.offset = V.add(this.state.lastOffset, this.state.movement);
    }
    computeMovement() {
      this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
    }
    axisIntent(event) {
      const state = this.state;
      const config = this.config;
      if (!state.axis && event) {
        const threshold = typeof config.axisThreshold === "object" ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;
        state.axis = selectAxis(state._movement, threshold);
      }
      state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;
    }
    restrictToAxis(v3) {
      if (this.config.axis || this.config.lockDirection) {
        switch (this.state.axis) {
          case "x":
            v3[1] = 0;
            break;
          case "y":
            v3[0] = 0;
            break;
        }
      }
    }
  };
  var identity = (v3) => v3;
  var DEFAULT_RUBBERBAND = 0.15;
  var commonConfigResolver = {
    enabled(value = true) {
      return value;
    },
    eventOptions(value, _k, config) {
      return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);
    },
    preventDefault(value = false) {
      return value;
    },
    triggerAllEvents(value = false) {
      return value;
    },
    rubberband(value = 0) {
      switch (value) {
        case true:
          return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
        case false:
          return [0, 0];
        default:
          return V.toVector(value);
      }
    },
    from(value) {
      if (typeof value === "function")
        return value;
      if (value != null)
        return V.toVector(value);
    },
    transform(value, _k, config) {
      const transform = value || config.shared.transform;
      this.hasCustomTransform = !!transform;
      if (false) {
        const originalTransform = transform || identity;
        return (v3) => {
          const r3 = originalTransform(v3);
          if (!isFinite(r3[0]) || !isFinite(r3[1])) {
            console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r3[0]},${[1]}]`);
          }
          return r3;
        };
      }
      return transform || identity;
    },
    threshold(value) {
      return V.toVector(value, 0);
    }
  };
  if (false) {
    Object.assign(commonConfigResolver, {
      domTarget(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
        }
        return NaN;
      },
      lockDirection(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
        }
        return NaN;
      },
      initial(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
        }
        return NaN;
      }
    });
  }
  var DEFAULT_AXIS_THRESHOLD = 0;
  var coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
    axis(_v, _k, {
      axis
    }) {
      this.lockDirection = axis === "lock";
      if (!this.lockDirection)
        return axis;
    },
    axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
      return value;
    },
    bounds(value = {}) {
      if (typeof value === "function") {
        return (state) => coordinatesConfigResolver.bounds(value(state));
      }
      if ("current" in value) {
        return () => value.current;
      }
      if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
        return value;
      }
      const {
        left = -Infinity,
        right = Infinity,
        top = -Infinity,
        bottom = Infinity
      } = value;
      return [[left, right], [top, bottom]];
    }
  });
  var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
  function supportsTouchEvents() {
    return isBrowser && "ontouchstart" in window;
  }
  function isTouchScreen() {
    return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
  }
  function supportsPointerEvents() {
    return isBrowser && "onpointerdown" in window;
  }
  function supportsPointerLock() {
    return isBrowser && "exitPointerLock" in window.document;
  }
  function supportsGestureEvents() {
    try {
      return "constructor" in GestureEvent;
    } catch (e2) {
      return false;
    }
  }
  var SUPPORT = {
    isBrowser,
    gesture: supportsGestureEvents(),
    touch: isTouchScreen(),
    touchscreen: isTouchScreen(),
    pointer: supportsPointerEvents(),
    pointerLock: supportsPointerLock()
  };
  var DEFAULT_PREVENT_SCROLL_DELAY = 250;
  var DEFAULT_DRAG_DELAY = 180;
  var DEFAULT_SWIPE_VELOCITY = 0.5;
  var DEFAULT_SWIPE_DISTANCE = 50;
  var DEFAULT_SWIPE_DURATION = 250;
  var DEFAULT_KEYBOARD_DISPLACEMENT = 10;
  var DEFAULT_DRAG_AXIS_THRESHOLD = {
    mouse: 0,
    touch: 0,
    pen: 8
  };
  var dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
    device(_v, _k, {
      pointer: {
        touch = false,
        lock = false,
        mouse = false
      } = {}
    }) {
      this.pointerLock = lock && SUPPORT.pointerLock;
      if (SUPPORT.touch && touch)
        return "touch";
      if (this.pointerLock)
        return "mouse";
      if (SUPPORT.pointer && !mouse)
        return "pointer";
      if (SUPPORT.touch)
        return "touch";
      return "mouse";
    },
    preventScrollAxis(value, _k, {
      preventScroll
    }) {
      this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
      if (!SUPPORT.touchscreen || preventScroll === false)
        return void 0;
      return value ? value : preventScroll !== void 0 ? "y" : void 0;
    },
    pointerCapture(_v, _k, {
      pointer: {
        capture = true,
        buttons = 1,
        keys = true
      } = {}
    }) {
      this.pointerButtons = buttons;
      this.keys = keys;
      return !this.pointerLock && this.device === "pointer" && capture;
    },
    threshold(value, _k, {
      filterTaps = false,
      tapsThreshold = 3,
      axis = void 0
    }) {
      const threshold = V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
      this.filterTaps = filterTaps;
      this.tapsThreshold = tapsThreshold;
      return threshold;
    },
    swipe({
      velocity = DEFAULT_SWIPE_VELOCITY,
      distance = DEFAULT_SWIPE_DISTANCE,
      duration = DEFAULT_SWIPE_DURATION
    } = {}) {
      return {
        velocity: this.transform(V.toVector(velocity)),
        distance: this.transform(V.toVector(distance)),
        duration
      };
    },
    delay(value = 0) {
      switch (value) {
        case true:
          return DEFAULT_DRAG_DELAY;
        case false:
          return 0;
        default:
          return value;
      }
    },
    axisThreshold(value) {
      if (!value)
        return DEFAULT_DRAG_AXIS_THRESHOLD;
      return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
    },
    keyboardDisplacement(value = DEFAULT_KEYBOARD_DISPLACEMENT) {
      return value;
    }
  });
  if (false) {
    Object.assign(dragConfigResolver, {
      useTouch(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
        }
        return NaN;
      },
      experimental_preventWindowScrollY(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
        }
        return NaN;
      },
      swipeVelocity(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
        }
        return NaN;
      },
      swipeDistance(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
        }
        return NaN;
      },
      swipeDuration(value) {
        if (value !== void 0) {
          throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
        }
        return NaN;
      }
    });
  }
  function clampStateInternalMovementToBounds(state) {
    const [ox, oy] = state.overflow;
    const [dx, dy] = state._delta;
    const [dirx, diry] = state._direction;
    if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {
      state._movement[0] = state._movementBound[0];
    }
    if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {
      state._movement[1] = state._movementBound[1];
    }
  }
  var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
  var PINCH_WHEEL_RATIO = 100;
  var PinchEngine = class extends Engine {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "ingKey", "pinching");
      _defineProperty(this, "aliasKey", "da");
    }
    init() {
      this.state.offset = [1, 0];
      this.state.lastOffset = [1, 0];
      this.state._pointerEvents = /* @__PURE__ */ new Map();
    }
    reset() {
      super.reset();
      const state = this.state;
      state._touchIds = [];
      state.canceled = false;
      state.cancel = this.cancel.bind(this);
      state.turns = 0;
    }
    computeOffset() {
      const {
        type,
        movement,
        lastOffset
      } = this.state;
      if (type === "wheel") {
        this.state.offset = V.add(movement, lastOffset);
      } else {
        this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
      }
    }
    computeMovement() {
      const {
        offset,
        lastOffset
      } = this.state;
      this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];
    }
    axisIntent() {
      const state = this.state;
      const [_m0, _m1] = state._movement;
      if (!state.axis) {
        const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
        if (axisMovementDifference < 0)
          state.axis = "angle";
        else if (axisMovementDifference > 0)
          state.axis = "scale";
      }
    }
    restrictToAxis(v3) {
      if (this.config.lockDirection) {
        if (this.state.axis === "scale")
          v3[1] = 0;
        else if (this.state.axis === "angle")
          v3[0] = 0;
      }
    }
    cancel() {
      const state = this.state;
      if (state.canceled)
        return;
      setTimeout(() => {
        state.canceled = true;
        state._active = false;
        this.compute();
        this.emit();
      }, 0);
    }
    touchStart(event) {
      this.ctrl.setEventIds(event);
      const state = this.state;
      const ctrlTouchIds = this.ctrl.touchIds;
      if (state._active) {
        if (state._touchIds.every((id) => ctrlTouchIds.has(id)))
          return;
      }
      if (ctrlTouchIds.size < 2)
        return;
      this.start(event);
      state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
      const payload = touchDistanceAngle(event, state._touchIds);
      if (!payload)
        return;
      this.pinchStart(event, payload);
    }
    pointerStart(event) {
      if (event.buttons != null && event.buttons % 2 !== 1)
        return;
      this.ctrl.setEventIds(event);
      event.target.setPointerCapture(event.pointerId);
      const state = this.state;
      const _pointerEvents = state._pointerEvents;
      const ctrlPointerIds = this.ctrl.pointerIds;
      if (state._active) {
        if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id)))
          return;
      }
      if (_pointerEvents.size < 2) {
        _pointerEvents.set(event.pointerId, event);
      }
      if (state._pointerEvents.size < 2)
        return;
      this.start(event);
      const payload = distanceAngle(...Array.from(_pointerEvents.values()));
      if (!payload)
        return;
      this.pinchStart(event, payload);
    }
    pinchStart(event, payload) {
      const state = this.state;
      state.origin = payload.origin;
      this.computeValues([payload.distance, payload.angle]);
      this.computeInitial();
      this.compute(event);
      this.emit();
    }
    touchMove(event) {
      if (!this.state._active)
        return;
      const payload = touchDistanceAngle(event, this.state._touchIds);
      if (!payload)
        return;
      this.pinchMove(event, payload);
    }
    pointerMove(event) {
      const _pointerEvents = this.state._pointerEvents;
      if (_pointerEvents.has(event.pointerId)) {
        _pointerEvents.set(event.pointerId, event);
      }
      if (!this.state._active)
        return;
      const payload = distanceAngle(...Array.from(_pointerEvents.values()));
      if (!payload)
        return;
      this.pinchMove(event, payload);
    }
    pinchMove(event, payload) {
      const state = this.state;
      const prev_a = state._values[1];
      const delta_a = payload.angle - prev_a;
      let delta_turns = 0;
      if (Math.abs(delta_a) > 270)
        delta_turns += Math.sign(delta_a);
      this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
      state.origin = payload.origin;
      state.turns = delta_turns;
      state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
      this.compute(event);
      this.emit();
    }
    touchEnd(event) {
      this.ctrl.setEventIds(event);
      if (!this.state._active)
        return;
      if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
        this.state._active = false;
        this.compute(event);
        this.emit();
      }
    }
    pointerEnd(event) {
      const state = this.state;
      this.ctrl.setEventIds(event);
      try {
        event.target.releasePointerCapture(event.pointerId);
      } catch (_unused) {
      }
      if (state._pointerEvents.has(event.pointerId)) {
        state._pointerEvents.delete(event.pointerId);
      }
      if (!state._active)
        return;
      if (state._pointerEvents.size < 2) {
        state._active = false;
        this.compute(event);
        this.emit();
      }
    }
    gestureStart(event) {
      if (event.cancelable)
        event.preventDefault();
      const state = this.state;
      if (state._active)
        return;
      this.start(event);
      this.computeValues([event.scale, event.rotation]);
      state.origin = [event.clientX, event.clientY];
      this.compute(event);
      this.emit();
    }
    gestureMove(event) {
      if (event.cancelable)
        event.preventDefault();
      if (!this.state._active)
        return;
      const state = this.state;
      this.computeValues([event.scale, event.rotation]);
      state.origin = [event.clientX, event.clientY];
      const _previousMovement = state._movement;
      state._movement = [event.scale - 1, event.rotation];
      state._delta = V.sub(state._movement, _previousMovement);
      this.compute(event);
      this.emit();
    }
    gestureEnd(event) {
      if (!this.state._active)
        return;
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
    wheel(event) {
      const modifierKey = this.config.modifierKey;
      if (modifierKey && !event[modifierKey])
        return;
      if (!this.state._active)
        this.wheelStart(event);
      else
        this.wheelChange(event);
      this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
    }
    wheelStart(event) {
      this.start(event);
      this.wheelChange(event);
    }
    wheelChange(event) {
      const isR3f = "uv" in event;
      if (!isR3f) {
        if (event.cancelable) {
          event.preventDefault();
        }
        if (false) {
          console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
        }
      }
      const state = this.state;
      state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
      V.addTo(state._movement, state._delta);
      clampStateInternalMovementToBounds(state);
      this.state.origin = [event.clientX, event.clientY];
      this.compute(event);
      this.emit();
    }
    wheelEnd() {
      if (!this.state._active)
        return;
      this.state._active = false;
      this.compute();
      this.emit();
    }
    bind(bindFunction) {
      const device = this.config.device;
      if (!!device) {
        bindFunction(device, "start", this[device + "Start"].bind(this));
        bindFunction(device, "change", this[device + "Move"].bind(this));
        bindFunction(device, "end", this[device + "End"].bind(this));
        bindFunction(device, "cancel", this[device + "End"].bind(this));
      }
      if (this.config.pinchOnWheel) {
        bindFunction("wheel", "", this.wheel.bind(this), {
          passive: false
        });
      }
    }
  };
  var pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
    device(_v, _k, {
      shared,
      pointer: {
        touch = false
      } = {}
    }) {
      const sharedConfig = shared;
      if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
        return "gesture";
      if (SUPPORT.touch && touch)
        return "touch";
      if (SUPPORT.touchscreen) {
        if (SUPPORT.pointer)
          return "pointer";
        if (SUPPORT.touch)
          return "touch";
      }
    },
    bounds(_v, _k, {
      scaleBounds = {},
      angleBounds = {}
    }) {
      const _scaleBounds = (state) => {
        const D3 = assignDefault(call(scaleBounds, state), {
          min: -Infinity,
          max: Infinity
        });
        return [D3.min, D3.max];
      };
      const _angleBounds = (state) => {
        const A2 = assignDefault(call(angleBounds, state), {
          min: -Infinity,
          max: Infinity
        });
        return [A2.min, A2.max];
      };
      if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
        return [_scaleBounds(), _angleBounds()];
      return (state) => [_scaleBounds(state), _angleBounds(state)];
    },
    threshold(value, _k, config) {
      this.lockDirection = config.axis === "lock";
      const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
      return threshold;
    },
    modifierKey(value) {
      if (value === void 0)
        return "ctrlKey";
      return value;
    },
    pinchOnWheel(value = true) {
      return value;
    }
  });
  var moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
    mouseOnly: (value = true) => value
  });
  var WheelEngine = class extends CoordinatesEngine {
    constructor(...args) {
      super(...args);
      _defineProperty(this, "ingKey", "wheeling");
    }
    wheel(event) {
      if (!this.state._active)
        this.start(event);
      this.wheelChange(event);
      this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
    }
    wheelChange(event) {
      const state = this.state;
      state._delta = wheelValues(event);
      V.addTo(state._movement, state._delta);
      clampStateInternalMovementToBounds(state);
      this.compute(event);
      this.emit();
    }
    wheelEnd() {
      if (!this.state._active)
        return;
      this.state._active = false;
      this.compute();
      this.emit();
    }
    bind(bindFunction) {
      bindFunction("wheel", "", this.wheel.bind(this));
    }
  };
  var wheelConfigResolver = coordinatesConfigResolver;
  var hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
    mouseOnly: (value = true) => value
  });
  var EngineMap = /* @__PURE__ */ new Map();
  var ConfigResolverMap = /* @__PURE__ */ new Map();
  function registerAction(action) {
    EngineMap.set(action.key, action.engine);
    ConfigResolverMap.set(action.key, action.resolver);
  }
  var pinchAction = {
    key: "pinch",
    engine: PinchEngine,
    resolver: pinchConfigResolver
  };
  var wheelAction = {
    key: "wheel",
    engine: WheelEngine,
    resolver: wheelConfigResolver
  };

  // ../../../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
  var import_react19 = __toESM(require_react());

  // ../../../node_modules/@use-gesture/core/dist/use-gesture-core.esm.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i3;
    for (i3 = 0; i3 < sourceKeys.length; i3++) {
      key = sourceKeys[i3];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _objectWithoutProperties(source, excluded) {
    if (source == null)
      return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i3;
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i3 = 0; i3 < sourceSymbolKeys.length; i3++) {
        key = sourceSymbolKeys[i3];
        if (excluded.indexOf(key) >= 0)
          continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key))
          continue;
        target[key] = source[key];
      }
    }
    return target;
  }
  var sharedConfigResolver = {
    target(value) {
      if (value) {
        return () => "current" in value ? value.current : value;
      }
      return void 0;
    },
    enabled(value = true) {
      return value;
    },
    window(value = SUPPORT.isBrowser ? window : void 0) {
      return value;
    },
    eventOptions({
      passive = true,
      capture = false
    } = {}) {
      return {
        passive,
        capture
      };
    },
    transform(value) {
      return value;
    }
  };
  var _excluded = ["target", "eventOptions", "window", "enabled", "transform"];
  function resolveWith(config = {}, resolvers) {
    const result = {};
    for (const [key, resolver] of Object.entries(resolvers)) {
      switch (typeof resolver) {
        case "function":
          if (false) {
            const r3 = resolver.call(result, config[key], key, config);
            if (!Number.isNaN(r3))
              result[key] = r3;
          } else {
            result[key] = resolver.call(result, config[key], key, config);
          }
          break;
        case "object":
          result[key] = resolveWith(config[key], resolver);
          break;
        case "boolean":
          if (resolver)
            result[key] = config[key];
          break;
      }
    }
    return result;
  }
  function parse(newConfig, gestureKey, _config = {}) {
    const _ref = newConfig, {
      target,
      eventOptions,
      window: window3,
      enabled,
      transform
    } = _ref, rest = _objectWithoutProperties(_ref, _excluded);
    _config.shared = resolveWith({
      target,
      eventOptions,
      window: window3,
      enabled,
      transform
    }, sharedConfigResolver);
    if (gestureKey) {
      const resolver = ConfigResolverMap.get(gestureKey);
      _config[gestureKey] = resolveWith(_objectSpread2({
        shared: _config.shared
      }, rest), resolver);
    } else {
      for (const key in rest) {
        const resolver = ConfigResolverMap.get(key);
        if (resolver) {
          _config[key] = resolveWith(_objectSpread2({
            shared: _config.shared
          }, rest[key]), resolver);
        } else if (false) {
          if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
            if (key === "domTarget") {
              throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
            }
            console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
          }
        }
      }
    }
    return _config;
  }
  var EventStore = class {
    constructor(ctrl, gestureKey) {
      _defineProperty(this, "_listeners", /* @__PURE__ */ new Set());
      this._ctrl = ctrl;
      this._gestureKey = gestureKey;
    }
    add(element, device, action, handler, options) {
      const listeners = this._listeners;
      const type = toDomEventType(device, action);
      const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
      const eventOptions = _objectSpread2(_objectSpread2({}, _options), options);
      element.addEventListener(type, handler, eventOptions);
      const remove = () => {
        element.removeEventListener(type, handler, eventOptions);
        listeners.delete(remove);
      };
      listeners.add(remove);
      return remove;
    }
    clean() {
      this._listeners.forEach((remove) => remove());
      this._listeners.clear();
    }
  };
  var TimeoutStore = class {
    constructor() {
      _defineProperty(this, "_timeouts", /* @__PURE__ */ new Map());
    }
    add(key, callback, ms = 140, ...args) {
      this.remove(key);
      this._timeouts.set(key, window.setTimeout(callback, ms, ...args));
    }
    remove(key) {
      const timeout = this._timeouts.get(key);
      if (timeout)
        window.clearTimeout(timeout);
    }
    clean() {
      this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
      this._timeouts.clear();
    }
  };
  var Controller = class {
    constructor(handlers) {
      _defineProperty(this, "gestures", /* @__PURE__ */ new Set());
      _defineProperty(this, "_targetEventStore", new EventStore(this));
      _defineProperty(this, "gestureEventStores", {});
      _defineProperty(this, "gestureTimeoutStores", {});
      _defineProperty(this, "handlers", {});
      _defineProperty(this, "config", {});
      _defineProperty(this, "pointerIds", /* @__PURE__ */ new Set());
      _defineProperty(this, "touchIds", /* @__PURE__ */ new Set());
      _defineProperty(this, "state", {
        shared: {
          shiftKey: false,
          metaKey: false,
          ctrlKey: false,
          altKey: false
        }
      });
      resolveGestures(this, handlers);
    }
    setEventIds(event) {
      if (isTouch(event)) {
        this.touchIds = new Set(touchIds(event));
        return this.touchIds;
      } else if ("pointerId" in event) {
        if (event.type === "pointerup" || event.type === "pointercancel")
          this.pointerIds.delete(event.pointerId);
        else if (event.type === "pointerdown")
          this.pointerIds.add(event.pointerId);
        return this.pointerIds;
      }
    }
    applyHandlers(handlers, nativeHandlers) {
      this.handlers = handlers;
      this.nativeHandlers = nativeHandlers;
    }
    applyConfig(config, gestureKey) {
      this.config = parse(config, gestureKey, this.config);
    }
    clean() {
      this._targetEventStore.clean();
      for (const key of this.gestures) {
        this.gestureEventStores[key].clean();
        this.gestureTimeoutStores[key].clean();
      }
    }
    effect() {
      if (this.config.shared.target)
        this.bind();
      return () => this._targetEventStore.clean();
    }
    bind(...args) {
      const sharedConfig = this.config.shared;
      const props = {};
      let target;
      if (sharedConfig.target) {
        target = sharedConfig.target();
        if (!target)
          return;
      }
      if (sharedConfig.enabled) {
        for (const gestureKey of this.gestures) {
          const gestureConfig = this.config[gestureKey];
          const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
          if (gestureConfig.enabled) {
            const Engine2 = EngineMap.get(gestureKey);
            new Engine2(this, args, gestureKey).bind(bindFunction);
          }
        }
        const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
        for (const eventKey in this.nativeHandlers) {
          nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {
            event,
            args
          })), void 0, true);
        }
      }
      for (const handlerProp in props) {
        props[handlerProp] = chain(...props[handlerProp]);
      }
      if (!target)
        return props;
      for (const handlerProp in props) {
        const {
          device,
          capture,
          passive
        } = parseProp(handlerProp);
        this._targetEventStore.add(target, device, "", props[handlerProp], {
          capture,
          passive
        });
      }
    }
  };
  function setupGesture(ctrl, gestureKey) {
    ctrl.gestures.add(gestureKey);
    ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
    ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
  }
  function resolveGestures(ctrl, internalHandlers) {
    if (internalHandlers.drag)
      setupGesture(ctrl, "drag");
    if (internalHandlers.wheel)
      setupGesture(ctrl, "wheel");
    if (internalHandlers.scroll)
      setupGesture(ctrl, "scroll");
    if (internalHandlers.move)
      setupGesture(ctrl, "move");
    if (internalHandlers.pinch)
      setupGesture(ctrl, "pinch");
    if (internalHandlers.hover)
      setupGesture(ctrl, "hover");
  }
  var bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {
    var _options$capture, _options$passive;
    const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
    const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
    let handlerProp = isNative ? device : toHandlerProp(device, action, capture);
    if (withPassiveOption && passive)
      handlerProp += "Passive";
    props[handlerProp] = props[handlerProp] || [];
    props[handlerProp].push(handler);
  };
  var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
  function sortHandlers(_handlers2) {
    const native = {};
    const handlers = {};
    const actions = /* @__PURE__ */ new Set();
    for (let key in _handlers2) {
      if (RE_NOT_NATIVE.test(key)) {
        actions.add(RegExp.lastMatch);
        handlers[key] = _handlers2[key];
      } else {
        native[key] = _handlers2[key];
      }
    }
    return [handlers, native, actions];
  }
  function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {
    if (!actions.has(handlerKey))
      return;
    if (!EngineMap.has(key)) {
      if (false) {
        console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
      }
      return;
    }
    const startKey = handlerKey + "Start";
    const endKey = handlerKey + "End";
    const fn = (state) => {
      let memo27 = void 0;
      if (state.first && startKey in handlers)
        handlers[startKey](state);
      if (handlerKey in handlers)
        memo27 = handlers[handlerKey](state);
      if (state.last && endKey in handlers)
        handlers[endKey](state);
      return memo27;
    };
    internalHandlers[key] = fn;
    config[key] = config[key] || {};
  }
  function parseMergedHandlers(mergedHandlers, mergedConfig) {
    const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
    const internalHandlers = {};
    registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
    registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
    return {
      handlers: internalHandlers,
      config: mergedConfig,
      nativeHandlers
    };
  }

  // ../../../node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
  function useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {
    const ctrl = import_react19.default.useMemo(() => new Controller(handlers), []);
    ctrl.applyHandlers(handlers, nativeHandlers);
    ctrl.applyConfig(config, gestureKey);
    import_react19.default.useEffect(ctrl.effect.bind(ctrl));
    import_react19.default.useEffect(() => {
      return ctrl.clean.bind(ctrl);
    }, []);
    if (config.target === void 0) {
      return ctrl.bind.bind(ctrl);
    }
    return void 0;
  }
  function createUseGesture(actions) {
    actions.forEach(registerAction);
    return function useGesture2(_handlers2, _config) {
      const {
        handlers,
        nativeHandlers,
        config
      } = parseMergedHandlers(_handlers2, _config || {});
      return useRecognizers(handlers, config, void 0, nativeHandlers);
    };
  }

  // ../../../packages/editor/src/lib/hooks/useGestureEvents.ts
  var import_lodash3 = __toESM(require_lodash3());
  var React10 = __toESM(require_react());

  // ../../../packages/editor/src/lib/hooks/shared.ts
  var MAX_ZOOM_STEP = 10;
  var IS_DARWIN = /Mac|iPod|iPhone|iPad/.test(
    typeof window === "undefined" ? "node" : window.navigator.platform
  );
  function normalizeWheel(event) {
    let { deltaY, deltaX } = event;
    let deltaZ = 0;
    if (event.ctrlKey || event.altKey || event.metaKey) {
      const signY = Math.sign(event.deltaY);
      const absDeltaY = Math.abs(event.deltaY);
      let dy = deltaY;
      if (absDeltaY > MAX_ZOOM_STEP) {
        dy = MAX_ZOOM_STEP * signY;
      }
      deltaZ = dy / 100;
    } else {
      if (event.shiftKey && !IS_DARWIN) {
        deltaX = deltaY;
        deltaY = 0;
      }
    }
    return { x: -deltaX, y: -deltaY, z: -deltaZ };
  }

  // ../../../packages/editor/src/lib/hooks/useGestureEvents.ts
  var useGesture = createUseGesture([wheelAction, pinchAction]);
  var lastWheelTime = void 0;
  var isWheelEndEvent = (time) => {
    if (lastWheelTime === void 0) {
      lastWheelTime = time;
      return false;
    }
    if (time - lastWheelTime > 120 && time - lastWheelTime < 160) {
      lastWheelTime = time;
      return true;
    }
    lastWheelTime = time;
    return false;
  };
  function useGestureEvents(ref) {
    const app = useApp();
    const events = React10.useMemo(() => {
      let pinchState = null;
      const onWheel = ({ event }) => {
        if (!app.isFocused) {
          return;
        }
        pinchState = null;
        if (isWheelEndEvent(Date.now())) {
          return;
        }
        if (app.editingId) {
          const shape = app.getShapeById(app.editingId);
          if (shape) {
            const util = app.getShapeUtil(shape);
            if (util.canScroll(shape)) {
              const bounds = app.getPageBoundsById(app.editingId);
              if (bounds == null ? void 0 : bounds.containsPoint(app.inputs.currentPagePoint)) {
                return;
              }
            }
          }
        }
        preventDefault(event);
        const delta = normalizeWheel(event);
        if (delta.x === 0 && delta.y === 0)
          return;
        const info = {
          type: "wheel",
          name: "wheel",
          delta,
          shiftKey: event.shiftKey,
          altKey: event.altKey,
          ctrlKey: event.metaKey || event.ctrlKey
        };
        app.dispatch(info);
      };
      let initTouchDistance = 1;
      let initZoom = 1;
      let currentZoom = 1;
      let currentTouchDistance = 0;
      const initOrigin = new Vec2d();
      const prevOrigin = new Vec2d();
      const onPinchStart = (gesture) => {
        const elm = ref.current;
        pinchState = null;
        const { event, origin, da } = gesture;
        if (event instanceof WheelEvent)
          return;
        if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
          return;
        prevOrigin.x = origin[0];
        prevOrigin.y = origin[1];
        initOrigin.x = origin[0];
        initOrigin.y = origin[1];
        initTouchDistance = da[0];
        initZoom = app.zoomLevel;
        app.dispatch({
          type: "pinch",
          name: "pinch_start",
          point: { x: origin[0], y: origin[1], z: app.zoomLevel },
          delta: { x: 0, y: 0 },
          shiftKey: event.shiftKey,
          altKey: event.altKey,
          ctrlKey: event.metaKey || event.ctrlKey
        });
      };
      const updatePinchState = (0, import_lodash3.default)((type) => {
        if (pinchState === null) {
          const touchDistance = Math.abs(currentTouchDistance - initTouchDistance);
          const originDistance = Vec2d.Dist(initOrigin, prevOrigin);
          if (type === "gesture" && touchDistance) {
            pinchState = "zooming";
          } else if (type === "touch" && touchDistance > 16) {
            pinchState = "zooming";
          } else if (originDistance > 16) {
            pinchState = "panning";
          }
        }
      }, 32);
      const onPinch = (gesture) => {
        const elm = ref.current;
        const { event, origin, offset, da } = gesture;
        if (event instanceof WheelEvent)
          return;
        if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
          return;
        const isGesture = "touches" in event ? false : true;
        currentTouchDistance = da[0];
        if (isGesture || currentTouchDistance > 64) {
          currentZoom = offset[0];
        }
        const dx = origin[0] - prevOrigin.x;
        const dy = origin[1] - prevOrigin.y;
        prevOrigin.x = origin[0];
        prevOrigin.y = origin[1];
        updatePinchState(isGesture ? "gesture" : "touch");
        switch (pinchState) {
          case "zooming": {
            app.dispatch({
              type: "pinch",
              name: "pinch",
              point: { x: origin[0], y: origin[1], z: currentZoom },
              delta: { x: dx, y: dy },
              shiftKey: event.shiftKey,
              altKey: event.altKey,
              ctrlKey: event.metaKey || event.ctrlKey
            });
            break;
          }
          case "panning": {
            app.dispatch({
              type: "pinch",
              name: "pinch",
              point: { x: origin[0], y: origin[1], z: initZoom },
              delta: { x: dx, y: dy },
              shiftKey: event.shiftKey,
              altKey: event.altKey,
              ctrlKey: event.metaKey || event.ctrlKey
            });
            break;
          }
        }
      };
      const onPinchEnd = (gesture) => {
        const elm = ref.current;
        const { event, origin, offset } = gesture;
        if (event instanceof WheelEvent)
          return;
        if (!(event.target === elm || (elm == null ? void 0 : elm.contains(event.target))))
          return;
        const scale = offset[0];
        pinchState = null;
        requestAnimationFrame(() => {
          app.dispatch({
            type: "pinch",
            name: "pinch_end",
            point: { x: origin[0], y: origin[1], z: scale },
            delta: { x: origin[0], y: origin[1] },
            shiftKey: event.shiftKey,
            altKey: event.altKey,
            ctrlKey: event.metaKey || event.ctrlKey
          });
        });
      };
      return {
        onWheel,
        onPinchStart,
        onPinchEnd,
        onPinch
      };
    }, [app, ref]);
    useGesture(events, {
      target: ref,
      eventOptions: { passive: false },
      pinch: {
        from: () => [app.zoomLevel, 0],
        // Return the camera z to use when pinch starts
        scaleBounds: () => {
          return { from: app.zoomLevel, max: 8, min: 0.05 };
        }
      }
    });
  }

  // ../../../packages/editor/src/lib/hooks/useHandleEvents.ts
  var React11 = __toESM(require_react());
  function getHandle(app, id, handleId) {
    const shape = app.getShapeById(id);
    const util = app.getShapeUtil(shape);
    const handles = util.handles(shape);
    return { shape, handle: handles.find((h3) => h3.id === handleId) };
  }
  function useHandleEvents(id, handleId) {
    const app = useApp();
    return React11.useMemo(() => {
      const onPointerDown = (e2) => {
        if (e2.isKilled)
          return;
        const target = loopToHtmlElement(e2.currentTarget);
        setPointerCapture(target, e2);
        const { shape, handle } = getHandle(app, id, handleId);
        if (!handle)
          return;
        app.dispatch(__spreadValues({
          type: "pointer",
          target: "handle",
          handle,
          shape,
          name: "pointer_down"
        }, getPointerInfo(e2, app.getContainer())));
      };
      let lastX, lastY;
      const onPointerMove = (e2) => {
        if (e2.isKilled)
          return;
        if (e2.clientX === lastX && e2.clientY === lastY)
          return;
        lastX = e2.clientX;
        lastY = e2.clientY;
        const { shape, handle } = getHandle(app, id, handleId);
        if (!handle)
          return;
        app.dispatch(__spreadValues({
          type: "pointer",
          target: "handle",
          handle,
          shape,
          name: "pointer_move"
        }, getPointerInfo(e2, app.getContainer())));
      };
      const onPointerUp = (e2) => {
        if (e2.isKilled)
          return;
        const target = loopToHtmlElement(e2.currentTarget);
        releasePointerCapture(target, e2);
        const { shape, handle } = getHandle(app, id, handleId);
        if (!handle)
          return;
        app.dispatch(__spreadValues({
          type: "pointer",
          target: "handle",
          handle,
          shape,
          name: "pointer_up"
        }, getPointerInfo(e2, app.getContainer())));
      };
      const onPointerEnter = (e2) => {
        if (e2.isKilled)
          return;
        const { shape, handle } = getHandle(app, id, handleId);
        if (!handle)
          return;
        app.dispatch(__spreadValues({
          type: "pointer",
          target: "handle",
          handle,
          shape,
          name: "pointer_enter"
        }, getPointerInfo(e2, app.getContainer())));
      };
      const onPointerLeave = (e2) => {
        if (e2.isKilled)
          return;
        const { shape, handle } = getHandle(app, id, handleId);
        if (!handle)
          return;
        app.dispatch(__spreadValues({
          type: "pointer",
          target: "handle",
          handle,
          shape,
          name: "pointer_leave"
        }, getPointerInfo(e2, app.getContainer())));
      };
      return {
        onPointerDown,
        onPointerMove,
        onPointerUp,
        onPointerEnter,
        onPointerLeave
      };
    }, [app, id, handleId]);
  }

  // ../../../packages/editor/src/lib/hooks/usePattern.tsx
  var import_react21 = __toESM(require_react());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var TILE_PATTERN_SIZE = 8;
  var generateImage = (dpr, currentZoom, darkMode) => {
    return new Promise((resolve, reject) => {
      const size = TILE_PATTERN_SIZE * currentZoom * dpr;
      const canvasEl = document.createElement("canvas");
      canvasEl.width = size;
      canvasEl.height = size;
      const ctx = canvasEl.getContext("2d");
      if (!ctx)
        throw new Error("No canvas");
      ctx.fillStyle = darkMode ? "#212529" : "#f8f9fa";
      ctx.fillRect(0, 0, size, size);
      ctx.globalCompositeOperation = "destination-out";
      ctx.lineCap = "round";
      ctx.lineWidth = 1.25 * currentZoom * dpr;
      const t4 = 8 / 12;
      const s3 = (v3) => v3 * currentZoom * dpr;
      ctx.beginPath();
      ctx.moveTo(s3(t4 * 1), s3(t4 * 3));
      ctx.lineTo(s3(t4 * 3), s3(t4 * 1));
      ctx.moveTo(s3(t4 * 5), s3(t4 * 7));
      ctx.lineTo(s3(t4 * 7), s3(t4 * 5));
      ctx.moveTo(s3(t4 * 9), s3(t4 * 11));
      ctx.lineTo(s3(t4 * 11), s3(t4 * 9));
      ctx.stroke();
      canvasEl.toBlob((blob) => {
        if (!blob || debugFlags.throwToBlob.value) {
          reject();
        } else {
          resolve(blob);
        }
      });
    });
  };
  var canvasBlob = (size, fn) => {
    const canvas = document.createElement("canvas");
    canvas.width = size[0];
    canvas.height = size[1];
    fn(canvas.getContext("2d"));
    return canvas.toDataURL();
  };
  var getDefaultPatterns = () => {
    const defaultPatterns = [];
    for (let i3 = 1; i3 <= Math.ceil(MAX_ZOOM); i3++) {
      const whitePixelBlob = canvasBlob([1, 1], (ctx) => {
        ctx.fillStyle = "#e8e8e8";
        ctx.fillRect(0, 0, 1, 1);
      });
      const blackPixelBlob = canvasBlob([1, 1], (ctx) => {
        ctx.fillStyle = "#2c3036";
        ctx.fillRect(0, 0, 1, 1);
      });
      defaultPatterns.push({
        zoom: i3,
        url: whitePixelBlob,
        darkMode: false
      });
      defaultPatterns.push({
        zoom: i3,
        url: blackPixelBlob,
        darkMode: true
      });
    }
    return defaultPatterns;
  };
  var usePattern = () => {
    const app = useApp();
    const dpr = app.devicePixelRatio;
    const [isReady, setIsReady] = (0, import_react21.useState)(false);
    const defaultPatterns = (0, import_react21.useMemo)(() => getDefaultPatterns(), []);
    const [backgroundUrls, setBackgroundUrls] = (0, import_react21.useState)(defaultPatterns);
    (0, import_react21.useEffect)(() => {
      const promises = [];
      for (let i3 = 1; i3 <= Math.ceil(MAX_ZOOM); i3++) {
        promises.push(
          generateImage(dpr, i3, false).then((blob) => ({
            zoom: i3,
            url: URL.createObjectURL(blob),
            darkMode: false
          }))
        );
        promises.push(
          generateImage(dpr, i3, true).then((blob) => ({
            zoom: i3,
            url: URL.createObjectURL(blob),
            darkMode: true
          }))
        );
      }
      let isCancelled = false;
      Promise.all(promises).then((urls) => {
        if (isCancelled)
          return;
        setBackgroundUrls(urls);
        setIsReady(true);
      });
      return () => {
        isCancelled = true;
        setIsReady(false);
      };
    }, [dpr]);
    const context = /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_jsx_runtime14.Fragment, { children: backgroundUrls.map((item) => {
      const key = item.zoom + (item.darkMode ? "_dark" : "_light");
      return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
        "pattern",
        {
          id: HASH_PATERN_ZOOM_NAMES[key],
          width: TILE_PATTERN_SIZE,
          height: TILE_PATTERN_SIZE,
          patternUnits: "userSpaceOnUse",
          children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("image", { href: item.url, width: TILE_PATTERN_SIZE, height: TILE_PATTERN_SIZE })
        },
        key
      );
    }) });
    return { context, isReady };
  };
  var t = 8 / 12;
  function exportPatternSvgDefs(backgroundColor) {
    const divEl = document.createElement("div");
    divEl.innerHTML = `
		<svg>
			<defs>
				<mask id="hash_pattern_mask">
					<rect x="0" y="0" width="8" height="8" fill="white" />
					<g
						strokeLinecap="round"
						stroke="black"
					>
						<line x1="${t * 1}" y1="${t * 3}" x2="${t * 3}" y2="${t * 1}" />
						<line x1="${t * 5}" y1="${t * 7}" x2="${t * 7}" y2="${t * 5}" />
						<line x1="${t * 9}" y1="${t * 11}" x2="${t * 11}" y2="${t * 9}" />
					</g>
				</mask>
				<pattern
					id="hash_pattern"
					width="8"
					height="8"
					patternUnits="userSpaceOnUse"
				>
					<rect x="0" y="0" width="8" height="8" fill="${backgroundColor}" mask="url(#hash_pattern_mask)" />
				</pattern>
			</defs>
		</svg>
	`;
    return divEl.querySelectorAll("defs > *");
  }

  // ../../../packages/editor/src/lib/hooks/useQuickReactor.ts
  var import_react22 = __toESM(require_react());
  function useQuickReactor(name, reactFn, deps = EMPTY_ARRAY) {
    (0, import_react22.useEffect)(() => {
      const scheduler = new EffectScheduler(name, reactFn);
      scheduler.attach();
      scheduler.execute();
      return () => {
        scheduler.detach();
      };
    }, deps);
  }

  // ../../../packages/editor/src/lib/hooks/useScreenBounds.ts
  var import_lodash4 = __toESM(require_lodash3());
  var import_react23 = __toESM(require_react());
  function useScreenBounds() {
    const app = useApp();
    const container = useContainer();
    (0, import_react23.useLayoutEffect)(() => {
      const updateBounds = (0, import_lodash4.default)(
        () => {
          app.updateViewportScreenBounds();
        },
        200,
        { trailing: true }
      );
      const resizeObserver = new ResizeObserver((entries) => {
        if (entries[0].contentRect) {
          updateBounds();
        }
      });
      if (container) {
        resizeObserver.observe(container);
      }
      updateBounds();
      return () => {
        resizeObserver.disconnect();
      };
    }, [app, container]);
  }

  // ../../../packages/editor/src/lib/components/LiveCollaborators.tsx
  var import_react24 = __toESM(require_react());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var useActivePresences = () => {
    const app = useApp();
    const time = useAtom("time", Date.now());
    import_react24.default.useEffect(() => {
      const interval = setInterval(() => time.set(Date.now()), 1e3 * 5);
      return () => clearInterval(interval);
    }, [time]);
    return (0, import_react24.useMemo)(
      () => app.store.query.records("user_presence", () => ({
        lastActivityTimestamp: { gt: time.value - COLLABORATOR_INACTIVITY_TIMEOUT },
        userId: { neq: app.userId }
      })),
      [app, time]
    );
  };
  var LiveCollaborators = track(function Collaborators() {
    const app = useApp();
    const { viewportPageBounds, zoomLevel } = app;
    const presences = useActivePresences();
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_jsx_runtime15.Fragment, { children: presences.value.map((userPresence) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
      Collaborator,
      {
        presence: userPresence,
        viewport: viewportPageBounds,
        zoom: zoomLevel
      },
      userPresence.id
    )) });
  });
  var COLLABORATOR_INACTIVITY_TIMEOUT = 1e3 * 10;
  var Collaborator = track(function Collaborator2({
    presence,
    viewport,
    zoom
  }) {
    const app = useApp();
    const {
      CollaboratorBrush,
      CollaboratorScribble,
      CollaboratorCursor,
      CollaboratorHint: CollaboratorHint2,
      CollaboratorShapeIndicator
    } = useEditorComponents();
    const { userId, color, cursor, lastUsedInstanceId } = presence;
    const pageState = (0, import_react24.useMemo)(
      () => lastUsedInstanceId ? app.store.query.record("instance_page_state", () => ({
        instanceId: { eq: lastUsedInstanceId },
        pageId: { eq: app.currentPageId }
      })) : null,
      [app, lastUsedInstanceId]
    );
    const user = (0, import_react24.useMemo)(
      () => app.store.query.record("user", () => ({
        id: { eq: userId }
      })),
      [app, userId]
    );
    if (!lastUsedInstanceId || !pageState || !user)
      return null;
    const instance = app.store.get(lastUsedInstanceId);
    if (!instance)
      return null;
    if (instance.currentPageId !== app.currentPageId)
      return null;
    if (!pageState.value)
      return null;
    if (!user.value)
      return null;
    const { brush, scribble } = instance;
    const { selectedIds } = pageState.value;
    const { name } = user.value;
    const isCursorInViewport = !(cursor.x < viewport.minX - 12 / zoom || cursor.y < viewport.minY - 16 / zoom || cursor.x > viewport.maxX - 12 / zoom || cursor.y > viewport.maxY - 16 / zoom);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(import_jsx_runtime15.Fragment, { children: [
      brush && CollaboratorBrush ? /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        CollaboratorBrush,
        {
          className: "tl-collaborator__brush",
          brush,
          color,
          opacity: 0.1
        },
        userId + "_brush"
      ) : null,
      isCursorInViewport && CollaboratorCursor ? /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        CollaboratorCursor,
        {
          className: "tl-collaborator__cursor",
          point: cursor,
          color,
          zoom,
          name: name !== "New User" ? name : null
        },
        userId + "_cursor"
      ) : CollaboratorHint2 ? /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        CollaboratorHint2,
        {
          className: "tl-collaborator__cursor-hint",
          point: cursor,
          color,
          zoom,
          viewport
        },
        userId + "_cursor_hint"
      ) : null,
      scribble && CollaboratorScribble ? /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        CollaboratorScribble,
        {
          className: "tl-collaborator__scribble",
          scribble,
          color,
          zoom,
          opacity: 0.1
        },
        userId + "_scribble"
      ) : null,
      CollaboratorShapeIndicator && selectedIds.map((shapeId) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
        CollaboratorShapeIndicator,
        {
          className: "tl-collaborator__shape-indicator",
          id: shapeId,
          color,
          opacity: 0.5
        },
        userId + "_" + shapeId
      ))
    ] });
  });

  // ../../../packages/editor/src/lib/hooks/usePeerIds.ts
  var import_lodash5 = __toESM(require_lodash2());
  var import_react25 = __toESM(require_react());
  function usePeerIds() {
    const app = useApp();
    const $presences = (0, import_react25.useMemo)(() => {
      return app.store.query.records("instance_presence");
    }, [app]);
    const $userIds = useComputed(
      "userIds",
      () => (0, import_lodash5.default)($presences.value.map((p3) => p3.userId)).sort(),
      { isEqual: (a3, b3) => {
        var _a5;
        return a3.join(",") === ((_a5 = b3.join) == null ? void 0 : _a5.call(b3, ","));
      } },
      [$presences]
    );
    return useValue($userIds);
  }

  // ../../../packages/editor/src/lib/hooks/usePresence.ts
  var import_react26 = __toESM(require_react());
  function usePresence(userId) {
    const app = useApp();
    const $presences = (0, import_react26.useMemo)(() => {
      return app.store.query.records("instance_presence", () => ({
        userId: { eq: userId }
      }));
    }, [app, userId]);
    const latestPresence = useValue(
      `latestPresence:${userId}`,
      () => {
        return $presences.value.slice().sort((a3, b3) => b3.lastActivityTimestamp - a3.lastActivityTimestamp)[0];
      },
      []
    );
    return latestPresence != null ? latestPresence : null;
  }

  // ../../../packages/editor/src/lib/components/LiveCollaboratorsNext.tsx
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var LiveCollaboratorsNext = track(function Collaborators2() {
    const peerIds = usePeerIds();
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_jsx_runtime16.Fragment, { children: peerIds.map((id) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Collaborator3, { userId: id }, id)) });
  });
  var Collaborator3 = track(function Collaborator4({ userId }) {
    const app = useApp();
    const { viewportPageBounds, zoomLevel } = app;
    const {
      CollaboratorBrush,
      CollaboratorScribble,
      CollaboratorCursor,
      CollaboratorHint: CollaboratorHint2,
      CollaboratorShapeIndicator
    } = useEditorComponents();
    const latestPresence = usePresence(userId);
    if (!latestPresence)
      return null;
    if (latestPresence.currentPageId !== app.currentPageId)
      return null;
    const { brush, scribble, selectedIds, userName, cursor, color } = latestPresence;
    const isCursorInViewport = !(cursor.x < viewportPageBounds.minX - 12 / zoomLevel || cursor.y < viewportPageBounds.minY - 16 / zoomLevel || cursor.x > viewportPageBounds.maxX - 12 / zoomLevel || cursor.y > viewportPageBounds.maxY - 16 / zoomLevel);
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)(import_jsx_runtime16.Fragment, { children: [
      brush && CollaboratorBrush ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CollaboratorBrush, { brush, color }, userId + "_brush") : null,
      isCursorInViewport && CollaboratorCursor ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
        CollaboratorCursor,
        {
          point: cursor,
          color,
          zoom: zoomLevel,
          name: userName !== "New User" ? userName : null
        },
        userId + "_cursor"
      ) : CollaboratorHint2 ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
        CollaboratorHint2,
        {
          point: cursor,
          color,
          zoom: zoomLevel,
          viewport: viewportPageBounds
        },
        userId + "_cursor_hint"
      ) : null,
      scribble && CollaboratorScribble ? /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
        CollaboratorScribble,
        {
          scribble,
          color,
          zoom: zoomLevel
        },
        userId + "_scribble"
      ) : null,
      CollaboratorShapeIndicator && selectedIds.map((shapeId) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CollaboratorShapeIndicator, { id: shapeId, color }, userId + "_" + shapeId))
    ] });
  });

  // ../../../packages/editor/src/lib/components/SelectionBg.tsx
  var React13 = __toESM(require_react());
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var SelectionBg = track(function SelectionBg2() {
    const app = useApp();
    const events = React13.useMemo(() => {
      const onPointerDown = (e2) => {
        if (e2.isKilled)
          return;
        setPointerCapture(e2.currentTarget, e2);
        const info = __spreadValues({
          type: "pointer",
          target: "selection",
          name: "pointer_down"
        }, getPointerInfo(e2, app.getContainer()));
        app.dispatch(info);
      };
      const onPointerMove = (e2) => {
        if (e2.isKilled)
          return;
        const info = __spreadValues({
          type: "pointer",
          target: "selection",
          name: "pointer_move"
        }, getPointerInfo(e2, app.getContainer()));
        app.dispatch(info);
      };
      const onPointerUp = (e2) => {
        if (e2.isKilled)
          return;
        releasePointerCapture(e2.currentTarget, e2);
        const info = __spreadValues({
          type: "pointer",
          target: "selection",
          name: "pointer_up"
        }, getPointerInfo(e2, app.getContainer()));
        app.dispatch(info);
      };
      const onPointerEnter = (e2) => {
        if (e2.isKilled)
          return;
        const info = __spreadValues({
          type: "pointer",
          target: "selection",
          name: "pointer_enter"
        }, getPointerInfo(e2, app.getContainer()));
        app.dispatch(info);
      };
      const onPointerLeave = (e2) => {
        if (e2.isKilled)
          return;
        const info = __spreadValues({
          type: "pointer",
          target: "selection",
          name: "pointer_leave"
        }, getPointerInfo(e2, app.getContainer()));
        app.dispatch(info);
      };
      return {
        onPointerDown,
        onPointerMove,
        onPointerUp,
        onPointerEnter,
        onPointerLeave
      };
    }, [app]);
    const { selectionBounds: bounds, selectedIds } = app;
    if (!bounds)
      return null;
    const shouldDisplay = app.isInAny(
      "select.idle",
      "select.brushing",
      "select.scribble_brushing",
      "select.pointing_shape",
      "select.pointing_selection",
      "text.resizing"
    );
    if (selectedIds.length === 1) {
      const shape = app.getShapeById(selectedIds[0]);
      if (!shape) {
        return null;
      }
      const util = app.getShapeUtil(shape);
      if (util.hideSelectionBoundsBg(shape)) {
        return null;
      }
    }
    const transform = Matrix2d.toCssString(
      Matrix2d.Compose(
        Matrix2d.Translate(bounds.minX, bounds.minY),
        Matrix2d.Rotate(app.selectionRotation)
      )
    );
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      "div",
      __spreadValues({
        className: "tl-selection__bg",
        draggable: false,
        style: {
          transform,
          width: toDomPrecision(Math.max(1, bounds.width)),
          height: toDomPrecision(Math.max(1, bounds.height)),
          pointerEvents: shouldDisplay ? "all" : "none",
          opacity: shouldDisplay ? 1 : 0
        }
      }, events)
    );
  });

  // ../../../packages/editor/src/lib/components/SelectionFg.tsx
  var import_classnames5 = __toESM(require_classnames());
  var import_react28 = __toESM(require_react());

  // ../../../packages/editor/src/lib/hooks/useCursor.ts
  var CORNER_SVG = `<path d='m19.7432 17.0869-4.072 4.068 2.829 2.828-8.473-.013-.013-8.47 2.841 2.842 4.075-4.068 1.414-1.415-2.844-2.842h8.486v8.484l-2.83-2.827z' fill='%23fff'/><path d='m18.6826 16.7334-4.427 4.424 1.828 1.828-5.056-.016-.014-5.054 1.842 1.841 4.428-4.422 2.474-2.475-1.844-1.843h5.073v5.071l-1.83-1.828z' fill='%23000'/>`;
  var EDGE_SVG = `<path d='m9 17.9907v.005l5.997 5.996.001-3.999h1.999 2.02v4l5.98-6.001-5.98-5.999.001 4.019-2.021.002h-2l.001-4.022zm1.411.003 3.587-3.588-.001 2.587h3.5 2.521v-2.585l3.565 3.586-3.564 3.585-.001-2.585h-2.521l-3.499-.001-.001 2.586z' fill='%23fff'/><path d='m17.4971 18.9932h2.521v2.586l3.565-3.586-3.565-3.585v2.605h-2.521-3.5v-2.607l-3.586 3.587 3.586 3.586v-2.587z' fill='%23000'/>`;
  var ROTATE_CORNER_SVG = `<g><path d="M22.4789 9.45728L25.9935 12.9942L22.4789 16.5283V14.1032C18.126 14.1502 14.6071 17.6737 14.5675 22.0283H17.05L13.513 25.543L9.97889 22.0283H12.5674C12.6071 16.5691 17.0214 12.1503 22.4789 12.1031L22.4789 9.45728Z" fill="black"/><path fill-rule="evenodd" clip-rule="evenodd" d="M21.4789 7.03223L27.4035 12.9945L21.4789 18.9521V15.1868C18.4798 15.6549 16.1113 18.0273 15.649 21.0284H19.475L13.5128 26.953L7.55519 21.0284H11.6189C12.1243 15.8155 16.2679 11.6677 21.4789 11.1559L21.4789 7.03223ZM22.4789 12.1031C17.0214 12.1503 12.6071 16.5691 12.5674 22.0284H9.97889L13.513 25.543L17.05 22.0284H14.5675C14.5705 21.6896 14.5947 21.3558 14.6386 21.0284C15.1157 17.4741 17.9266 14.6592 21.4789 14.1761C21.8063 14.1316 22.1401 14.1069 22.4789 14.1032V16.5284L25.9935 12.9942L22.4789 9.45729L22.4789 12.1031Z" fill="white"/></g>`;
  var TEXT_SVG = `<path fill="currentcolor" d='m6.94 2v-1c-1.35866267-.08246172-2.66601117.53165299-3.47 1.63-.80398883-1.09834701-2.11133733-1.71246172-3.47-1.63v1c1.30781678-.16635468 2.55544738.59885876 3 1.84v5.1h-1v1h1v4.16c-.4476345 1.2386337-1.69302129 2.002471-3 1.84v1c1.35687108.0731933 2.6600216-.5389494 3.47-1.63.8099784 1.0910506 2.11312892 1.7031933 3.47 1.63v-1c-1.28590589.133063-2.49760499-.6252793-2.94-1.84v-4.18h1v-1h-1v-5.08c.43943906-1.21710975 1.65323743-1.97676587 2.94-1.84z' transform='translate(14 9)'/>`;
  var GRABBING_SVG = `<path d='m13.5732 12.0361c.48-.178 1.427-.069 1.677.473.213.462.396 1.241.406 1.075.024-.369-.024-1.167.137-1.584.117-.304.347-.59.686-.691.285-.086.62-.116.916-.055.313.064.642.287.765.499.362.623.368 1.899.385 1.831.064-.272.07-1.229.283-1.584.141-.235.497-.445.687-.479.294-.052.656-.068.964-.008.249.049.586.344.677.487.219.344.342 1.316.379 1.658.016.141.074-.393.293-.736.406-.639 1.844-.763 1.898.639.026.654.02.624.02 1.064 0 .516-.012.828-.04 1.202-.03.399-.116 1.304-.241 1.742-.086.301-.371.978-.653 1.384 0 0-1.074 1.25-1.191 1.812-.117.563-.078.567-.102.965-.023.399.121.923.121.923s-.801.104-1.234.034c-.391-.062-.875-.84-1-1.078-.172-.328-.539-.265-.682-.023-.224.383-.709 1.07-1.05 1.113-.669.084-2.055.03-3.14.02 0 0 .185-1.011-.227-1.358-.305-.26-.83-.784-1.144-1.06l-.832-.921c-.283-.36-1.002-.929-1.243-1.985-.213-.936-.192-1.395.037-1.77.232-.381.67-.589.854-.625.208-.042.692-.039.875.062.223.123.313.159.488.391.23.307.312.456.213.121-.076-.262-.322-.595-.434-.97-.109-.361-.401-.943-.38-1.526.008-.221.103-.771.832-1.042' fill='%23fff'/><g stroke='%23000' stroke-width='.75'><path d='m13.5732 12.0361c.48-.178 1.427-.069 1.677.473.213.462.396 1.241.406 1.075.024-.369-.024-1.167.137-1.584.117-.304.347-.59.686-.691.285-.086.62-.116.916-.055.313.064.642.287.765.499.362.623.368 1.899.385 1.831.064-.272.07-1.229.283-1.584.141-.235.497-.445.687-.479.294-.052.656-.068.964-.008.249.049.586.344.677.487.219.344.342 1.316.379 1.658.016.141.074-.393.293-.736.406-.639 1.844-.763 1.898.639.026.654.02.624.02 1.064 0 .516-.012.828-.04 1.202-.03.399-.116 1.304-.241 1.742-.086.301-.371.978-.653 1.384 0 0-1.074 1.25-1.191 1.812-.117.563-.078.567-.102.965-.023.399.121.923.121.923s-.801.104-1.234.034c-.391-.062-.875-.84-1-1.078-.172-.328-.539-.265-.682-.023-.224.383-.709 1.07-1.05 1.113-.669.084-2.055.03-3.14.02 0 0 .185-1.011-.227-1.358-.305-.26-.83-.784-1.144-1.06l-.832-.921c-.283-.36-1.002-.929-1.243-1.985-.213-.936-.192-1.395.037-1.77.232-.381.67-.589.854-.625.208-.042.692-.039.875.062.223.123.313.159.488.391.23.307.312.456.213.121-.076-.262-.322-.595-.434-.97-.109-.361-.401-.943-.38-1.526.008-.221.103-.771.832-1.042z' stroke-linejoin='round'/><path d='m20.5664 19.7344v-3.459' stroke-linecap='round'/><path d='m18.5508 19.7461-.016-3.473' stroke-linecap='round'/><path d='m16.5547 16.3047.021 3.426' stroke-linecap='round'/></g>`;
  var GRAB_SVG = `<path d="m13.5557 17.5742c-.098-.375-.196-.847-.406-1.552-.167-.557-.342-.859-.47-1.233-.155-.455-.303-.721-.496-1.181-.139-.329-.364-1.048-.457-1.44-.119-.509.033-.924.244-1.206.253-.339.962-.49 1.357-.351.371.13.744.512.916.788.288.46.357.632.717 1.542.393.992.564 1.918.611 2.231l.085.452c-.001-.04-.043-1.122-.044-1.162-.035-1.029-.06-1.823-.038-2.939.002-.126.064-.587.084-.715.078-.5.305-.8.673-.979.412-.201.926-.215 1.401-.017.423.173.626.55.687 1.022.014.109.094.987.093 1.107-.013 1.025.006 1.641.015 2.174.004.231.003 1.625.017 1.469.061-.656.094-3.189.344-3.942.144-.433.405-.746.794-.929.431-.203 1.113-.07 1.404.243.285.305.446.692.482 1.153.032.405-.019.897-.02 1.245 0 .867-.021 1.324-.037 2.121-.001.038-.015.298.023.182.094-.28.188-.542.266-.745.049-.125.241-.614.359-.859.114-.234.211-.369.415-.688.2-.313.415-.448.668-.561.54-.235 1.109.112 1.301.591.086.215.009.713-.028 1.105-.061.647-.254 1.306-.352 1.648-.128.447-.274 1.235-.34 1.601-.072.394-.234 1.382-.359 1.82-.086.301-.371.978-.652 1.384 0 0-1.074 1.25-1.192 1.812-.117.563-.078.567-.101.965-.024.399.121.923.121.923s-.802.104-1.234.034c-.391-.062-.875-.841-1-1.078-.172-.328-.539-.265-.682-.023-.225.383-.709 1.07-1.051 1.113-.668.084-2.054.03-3.139.02 0 0 .185-1.011-.227-1.358-.305-.26-.83-.784-1.144-1.06l-.832-.921c-.284-.36-.629-1.093-1.243-1.985-.348-.504-1.027-1.085-1.284-1.579-.223-.425-.331-.954-.19-1.325.225-.594.675-.897 1.362-.832.519.05.848.206 1.238.537.225.19.573.534.75.748.163.195.203.276.377.509.23.307.302.459.214.121" fill="%23fff"/><g stroke="%23000" stroke-linecap="round" stroke-width=".75"><path d="m13.5557 17.5742c-.098-.375-.196-.847-.406-1.552-.167-.557-.342-.859-.47-1.233-.155-.455-.303-.721-.496-1.181-.139-.329-.364-1.048-.457-1.44-.119-.509.033-.924.244-1.206.253-.339.962-.49 1.357-.351.371.13.744.512.916.788.288.46.357.632.717 1.542.393.992.564 1.918.611 2.231l.085.452c-.001-.04-.043-1.122-.044-1.162-.035-1.029-.06-1.823-.038-2.939.002-.126.064-.587.084-.715.078-.5.305-.8.673-.979.412-.201.926-.215 1.401-.017.423.173.626.55.687 1.022.014.109.094.987.093 1.107-.013 1.025.006 1.641.015 2.174.004.231.003 1.625.017 1.469.061-.656.094-3.189.344-3.942.144-.433.405-.746.794-.929.431-.203 1.113-.07 1.404.243.285.305.446.692.482 1.153.032.405-.019.897-.02 1.245 0 .867-.021 1.324-.037 2.121-.001.038-.015.298.023.182.094-.28.188-.542.266-.745.049-.125.241-.614.359-.859.114-.234.211-.369.415-.688.2-.313.415-.448.668-.561.54-.235 1.109.112 1.301.591.086.215.009.713-.028 1.105-.061.647-.254 1.306-.352 1.648-.128.447-.274 1.235-.34 1.601-.072.394-.234 1.382-.359 1.82-.086.301-.371.978-.652 1.384 0 0-1.074 1.25-1.192 1.812-.117.563-.078.567-.101.965-.024.399.121.923.121.923s-.802.104-1.234.034c-.391-.062-.875-.841-1-1.078-.172-.328-.539-.265-.682-.023-.225.383-.709 1.07-1.051 1.113-.668.084-2.054.03-3.139.02 0 0 .185-1.011-.227-1.358-.305-.26-.83-.784-1.144-1.06l-.832-.921c-.284-.36-.629-1.093-1.243-1.985-.348-.504-1.027-1.085-1.284-1.579-.223-.425-.331-.954-.19-1.325.225-.594.675-.897 1.362-.832.519.05.848.206 1.238.537.225.19.573.534.75.748.163.195.203.276.377.509.23.307.302.459.214.121" stroke-linejoin="round"/><path d="m20.5664 21.7344v-3.459"/><path d="m18.5508 21.7461-.016-3.473"/><path d="m16.5547 18.3047.021 3.426"/></g>`;
  function getCursorCss(svg, r3, tr, f3, color) {
    const a3 = (-tr - r3) * (PI / 180);
    const s3 = Math.sin(a3);
    const c3 = Math.cos(a3);
    const dx = 1 * c3 - 1 * s3;
    const dy = 1 * s3 + 1 * c3;
    return `url("data:image/svg+xml,<svg height='32' width='32' viewBox='0 0 32 32' xmlns='http://www.w3.org/2000/svg' style='color: ${color};'><defs><filter id='shadow' color-interpolation-filters='sRGB'><feDropShadow dx='${dx}' dy='${dy}' stdDeviation='1.2' flood-opacity='.5'/></filter></defs><g fill='none' transform='rotate(${r3 + tr} 16 16)${f3 ? ` scale(-1,-1) translate(0, -32)` : ""}' filter='url(%23shadow)'>` + svg.replaceAll(`"`, `'`) + '</g></svg>") 16 16, pointer';
  }
  var CURSORS = {
    none: () => "none",
    default: () => "default",
    pointer: () => "pointer",
    cross: () => "crosshair",
    move: () => "move",
    grab: (r3, f3, c3) => getCursorCss(GRAB_SVG, r3, 0, f3, c3),
    grabbing: (r3, f3, c3) => getCursorCss(GRABBING_SVG, r3, 0, f3, c3),
    text: (r3, f3, c3) => getCursorCss(TEXT_SVG, r3, 0, f3, c3),
    "resize-edge": (r3, f3, c3) => getCursorCss(EDGE_SVG, r3, 0, f3, c3),
    "resize-corner": (r3, f3, c3) => getCursorCss(CORNER_SVG, r3, 0, f3, c3),
    "ew-resize": (r3, f3, c3) => getCursorCss(EDGE_SVG, r3, 0, f3, c3),
    "ns-resize": (r3, f3, c3) => getCursorCss(EDGE_SVG, r3, 90, f3, c3),
    "nesw-resize": (r3, f3, c3) => getCursorCss(CORNER_SVG, r3, 0, f3, c3),
    "nwse-resize": (r3, f3, c3) => getCursorCss(CORNER_SVG, r3, 90, f3, c3),
    rotate: (r3, f3, c3) => getCursorCss(ROTATE_CORNER_SVG, r3, 45, f3, c3),
    "nwse-rotate": (r3, f3, c3) => getCursorCss(ROTATE_CORNER_SVG, r3, 0, f3, c3),
    "nesw-rotate": (r3, f3, c3) => getCursorCss(ROTATE_CORNER_SVG, r3, 90, f3, c3),
    "senw-rotate": (r3, f3, c3) => getCursorCss(ROTATE_CORNER_SVG, r3, 180, f3, c3),
    "swne-rotate": (r3, f3, c3) => getCursorCss(ROTATE_CORNER_SVG, r3, 270, f3, c3),
    "zoom-in": () => "zoom-in",
    "zoom-out": () => "zoom-out"
  };
  function getCursor(cursor, rotation = 0, color = "black") {
    return CURSORS[cursor](radiansToDegrees(rotation), false, color);
  }
  function useCursor() {
    const app = useApp();
    const container = useContainer();
    useQuickReactor(
      "useCursor",
      () => {
        const { type, rotation, color } = app.cursor;
        container.style.setProperty("--tl-cursor", getCursor(type, rotation, color));
      },
      [app, container]
    );
  }

  // ../../../packages/editor/src/lib/hooks/useSelectionEvents.ts
  var import_react27 = __toESM(require_react());
  function useSelectionEvents(handle) {
    const app = useApp();
    const events = (0, import_react27.useMemo)(
      function selectionEvents() {
        const onPointerDown = (e2) => {
          if (e2.isKilled)
            return;
          if (e2.button !== 0)
            return;
          const elm = loopToHtmlElement(e2.currentTarget);
          function releaseCapture() {
            elm.removeEventListener("pointerup", releaseCapture);
            releasePointerCapture(elm, e2);
          }
          setPointerCapture(elm, e2);
          elm.addEventListener("pointerup", releaseCapture);
          app.dispatch(__spreadValues({
            name: "pointer_down",
            type: "pointer",
            target: "selection",
            handle
          }, getPointerInfo(e2, app.getContainer())));
          e2.stopPropagation();
        };
        let lastX, lastY;
        function onPointerMove(e2) {
          if (e2.isKilled)
            return;
          if (e2.button !== 0)
            return;
          if (e2.clientX === lastX && e2.clientY === lastY)
            return;
          lastX = e2.clientX;
          lastY = e2.clientY;
          app.dispatch(__spreadValues({
            name: "pointer_move",
            type: "pointer",
            target: "selection",
            handle
          }, getPointerInfo(e2, app.getContainer())));
        }
        const onPointerUp = (e2) => {
          if (e2.isKilled)
            return;
          if (e2.button !== 0)
            return;
          app.dispatch(__spreadValues({
            name: "pointer_up",
            type: "pointer",
            target: "selection",
            handle
          }, getPointerInfo(e2, app.getContainer())));
        };
        return {
          onPointerDown,
          onPointerMove,
          onPointerUp
        };
      },
      [app, handle]
    );
    return events;
  }

  // ../../../packages/editor/src/lib/components/CropHandles.tsx
  var import_classnames4 = __toESM(require_classnames());
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  function CropHandles({ size, width, height, hideAlternateHandles }) {
    const cropStrokeWidth = toDomPrecision(size / 3);
    const offset = cropStrokeWidth / 2;
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("svg", { className: "tl-overlays__item", children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "polyline",
        {
          className: "tl-corner-crop-handle",
          points: `
						${toDomPrecision(0 - offset)},${toDomPrecision(size)} 
						${toDomPrecision(0 - offset)},${toDomPrecision(0 - offset)} 
						${toDomPrecision(size)},${toDomPrecision(0 - offset)}`,
          strokeWidth: cropStrokeWidth,
          "data-wd": "selection.crop.top_left",
          "aria-label": "top_left handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "line",
        {
          className: (0, import_classnames4.default)("tl-corner-crop-edge-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          x1: toDomPrecision(width / 2 - size),
          y1: toDomPrecision(0 - offset),
          x2: toDomPrecision(width / 2 + size),
          y2: toDomPrecision(0 - offset),
          strokeWidth: cropStrokeWidth,
          "data-wd": "selection.crop.top",
          "aria-label": "top handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "polyline",
        {
          className: (0, import_classnames4.default)("tl-corner-crop-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          points: `
						${toDomPrecision(width - size)},${toDomPrecision(0 - offset)} 
						${toDomPrecision(width + offset)},${toDomPrecision(0 - offset)} 
						${toDomPrecision(width + offset)},${toDomPrecision(size)}`,
          strokeWidth: cropStrokeWidth,
          "data-wd": "selection.crop.top_right",
          "aria-label": "top_right handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "line",
        {
          className: (0, import_classnames4.default)("tl-corner-crop-edge-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          x1: toDomPrecision(width + offset),
          y1: toDomPrecision(height / 2 - size),
          x2: toDomPrecision(width + offset),
          y2: toDomPrecision(height / 2 + size),
          strokeWidth: cropStrokeWidth,
          "data-wd": "selection.crop.right",
          "aria-label": "right handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "polyline",
        {
          className: "tl-corner-crop-handle",
          points: `
						${toDomPrecision(width + offset)},${toDomPrecision(height - size)} 
						${toDomPrecision(width + offset)},${toDomPrecision(height + offset)}
						${toDomPrecision(width - size)},${toDomPrecision(height + offset)}`,
          strokeWidth: cropStrokeWidth,
          "data-wd": "selection.crop.bottom_right",
          "aria-label": "bottom_right handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "line",
        {
          className: (0, import_classnames4.default)("tl-corner-crop-edge-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          x1: toDomPrecision(width / 2 - size),
          y1: toDomPrecision(height + offset),
          x2: toDomPrecision(width / 2 + size),
          y2: toDomPrecision(height + offset),
          strokeWidth: cropStrokeWidth,
          "data-wd": "selection.crop.bottom",
          "aria-label": "bottom handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "polyline",
        {
          className: (0, import_classnames4.default)("tl-corner-crop-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          points: `
						${toDomPrecision(0 + size)},${toDomPrecision(height + offset)} 
						${toDomPrecision(0 - offset)},${toDomPrecision(height + offset)}
						${toDomPrecision(0 - offset)},${toDomPrecision(height - size)}`,
          strokeWidth: cropStrokeWidth,
          "data-wd": "selection.crop.bottom_left",
          "aria-label": "bottom_left handle"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        "line",
        {
          className: (0, import_classnames4.default)("tl-corner-crop-edge-handle", {
            "tl-hidden": hideAlternateHandles
          }),
          x1: toDomPrecision(0 - offset),
          y1: toDomPrecision(height / 2 - size),
          x2: toDomPrecision(0 - offset),
          y2: toDomPrecision(height / 2 + size),
          strokeWidth: cropStrokeWidth,
          "data-wd": "selection.crop.left",
          "aria-label": "left handle"
        }
      )
    ] });
  }

  // ../../../packages/editor/src/lib/components/SelectionFg.tsx
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var IS_FIREFOX = typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
  var SelectionFg = track(function SelectionFg2() {
    var _a5;
    const app = useApp();
    const rSvg = (0, import_react28.useRef)(null);
    const isReadonlyMode = app.isReadOnly;
    const topEvents = useSelectionEvents("top");
    const rightEvents = useSelectionEvents("right");
    const bottomEvents = useSelectionEvents("bottom");
    const leftEvents = useSelectionEvents("left");
    const topLeftEvents = useSelectionEvents("top_left");
    const topRightEvents = useSelectionEvents("top_right");
    const bottomRightEvents = useSelectionEvents("bottom_right");
    const bottomLeftEvents = useSelectionEvents("bottom_left");
    const isDefaultCursor = !app.isMenuOpen && app.cursor.type === "default";
    const isCoarsePointer = app.isCoarsePointer;
    let bounds = app.selectionBounds;
    const shapes = app.selectedShapes;
    const onlyShape = shapes.length === 1 ? shapes[0] : null;
    const expandOutlineBy = onlyShape ? app.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape) : 0;
    useTransform(rSvg, bounds == null ? void 0 : bounds.x, bounds == null ? void 0 : bounds.y, 1, app.selectionRotation, {
      x: -expandOutlineBy,
      y: -expandOutlineBy
    });
    if (!bounds)
      return null;
    bounds = bounds.clone().expandBy(expandOutlineBy);
    const zoom = app.zoomLevel;
    const rotation = app.selectionRotation;
    const isChangingStyles = app.isChangingStyle;
    const width = Math.max(1, bounds.width);
    const height = Math.max(1, bounds.height);
    const size = 8 / zoom;
    const isTinyX = width < size * 2;
    const isTinyY = height < size * 2;
    const isSmallX = width < size * 4;
    const isSmallY = height < size * 4;
    const isSmallCropX = width < size * 5;
    const isSmallCropY = height < size * 5;
    const mobileHandleMultiplier = isCoarsePointer ? 1.75 : 1;
    const targetSize = 6 / zoom * mobileHandleMultiplier;
    const targetSizeX = (isSmallX ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75);
    const targetSizeY = (isSmallY ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75);
    const showSelectionBounds = (onlyShape ? !app.getShapeUtil(onlyShape).hideSelectionBoundsFg(onlyShape) : true) && !isChangingStyles;
    let shouldDisplayBox = showSelectionBounds && app.isInAny(
      "select.idle",
      "select.brushing",
      "select.scribble_brushing",
      "select.pointing_canvas",
      "select.pointing_selection",
      "select.pointing_shape",
      "select.crop.idle",
      "select.crop.pointing_crop",
      "select.pointing_resize_handle",
      "select.pointing_crop_handle",
      "select.editing_shape"
    ) || showSelectionBounds && app.isIn("select.resizing") && onlyShape && shapes[0].type === "text";
    if (IS_FIREFOX && shouldDisplayBox) {
      if (((_a5 = app.onlySelectedShape) == null ? void 0 : _a5.type) === "embed") {
        shouldDisplayBox = false;
      }
    }
    const showCropHandles = app.isInAny("select.pointing_crop_handle", "select.crop.idle", "select.crop.pointing_crop") && !isChangingStyles && !isReadonlyMode;
    const shouldDisplayControls = app.isInAny(
      "select.idle",
      "select.pointing_selection",
      "select.pointing_shape",
      "select.crop.idle"
    ) && !isChangingStyles && !isReadonlyMode;
    const showCornerRotateHandles = !isCoarsePointer && !(isTinyX || isTinyY) && (shouldDisplayControls || showCropHandles) && (onlyShape ? !app.getShapeUtil(onlyShape).hideRotateHandle(onlyShape) : true);
    const showMobileRotateHandle = isCoarsePointer && (!isSmallX || !isSmallY) && (shouldDisplayControls || showCropHandles) && (onlyShape ? !app.getShapeUtil(onlyShape).hideRotateHandle(onlyShape) : true);
    const showResizeHandles = shouldDisplayControls && (onlyShape ? app.getShapeUtil(onlyShape).canResize(onlyShape) && !app.getShapeUtil(onlyShape).hideResizeHandles(onlyShape) : true) && !showCropHandles;
    const hideAlternateCornerHandles = isTinyX || isTinyY;
    const showOnlyOneHandle = isTinyX && isTinyY;
    const hideAlternateCropHandles = isSmallCropX || isSmallCropY;
    const showHandles = showResizeHandles || showCropHandles;
    const hideRotateCornerHandles = !showCornerRotateHandles;
    const hideMobileRotateHandle = !shouldDisplayControls || !showMobileRotateHandle;
    const hideTopLeftCorner = !shouldDisplayControls || !showHandles;
    const hideTopRightCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles;
    const hideBottomLeftCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles;
    const hideBottomRightCorner = !shouldDisplayControls || !showHandles || showOnlyOneHandle && !showCropHandles;
    let hideEdgeTargetsDueToCoarsePointer = isCoarsePointer;
    if (hideEdgeTargetsDueToCoarsePointer && shapes.every((shape) => app.getShapeUtil(shape).isAspectRatioLocked(shape))) {
      hideEdgeTargetsDueToCoarsePointer = false;
    }
    let hideEdgeTargets = true;
    if (showCropHandles) {
      hideEdgeTargets = hideAlternateCropHandles;
    } else if (showResizeHandles) {
      hideEdgeTargets = hideAlternateCornerHandles || showOnlyOneHandle || hideEdgeTargetsDueToCoarsePointer;
    }
    const textHandleHeight = Math.min(24 / zoom, height - targetSizeY * 3);
    const showTextResizeHandles = shouldDisplayControls && isCoarsePointer && (onlyShape == null ? void 0 : onlyShape.type) === "text" && textHandleHeight * zoom >= 4;
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("svg", { ref: rSvg, className: "tl-overlays__item tl-selection__fg", "data-wd": "selection-foreground", children: [
      shouldDisplayBox && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        {
          className: (0, import_classnames5.default)("tl-selection__fg__outline"),
          width: toDomPrecision(width),
          height: toDomPrecision(height)
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        RotateCornerHandle,
        {
          "data-wd": "selection.rotate.top-left",
          cx: 0,
          cy: 0,
          targetSize,
          corner: "top_left_rotate",
          cursor: isDefaultCursor ? getCursor("nwse-rotate", rotation) : void 0,
          isHidden: hideRotateCornerHandles
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        RotateCornerHandle,
        {
          "data-wd": "selection.rotate.top-right",
          cx: width + targetSize * 3,
          cy: 0,
          targetSize,
          corner: "top_right_rotate",
          cursor: isDefaultCursor ? getCursor("nesw-rotate", rotation) : void 0,
          isHidden: hideRotateCornerHandles
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        RotateCornerHandle,
        {
          "data-wd": "selection.rotate.bottom-left",
          cx: 0,
          cy: height + targetSize * 3,
          targetSize,
          corner: "bottom_left_rotate",
          cursor: isDefaultCursor ? getCursor("swne-rotate", rotation) : void 0,
          isHidden: hideRotateCornerHandles
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        RotateCornerHandle,
        {
          "data-wd": "selection.rotate.bottom-right",
          cx: width + targetSize * 3,
          cy: height + targetSize * 3,
          targetSize,
          corner: "bottom_right_rotate",
          cursor: isDefaultCursor ? getCursor("senw-rotate", rotation) : void 0,
          isHidden: hideRotateCornerHandles
        }
      ),
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        MobileRotateHandle,
        {
          "data-wd": "selection.rotate.mobile",
          cx: isSmallX ? -targetSize * 1.5 : width / 2,
          cy: isSmallX ? height / 2 : -targetSize * 1.5,
          size,
          isHidden: hideMobileRotateHandle
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        __spreadValues({
          className: (0, import_classnames5.default)("tl-transparent", {
            "tl-hidden": hideEdgeTargets
          }),
          "data-wd": "selection.resize.top",
          "aria-label": "top target",
          pointerEvents: "all",
          x: 0,
          y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY)),
          width: toDomPrecision(Math.max(1, width)),
          height: toDomPrecision(Math.max(1, targetSizeY * 2)),
          style: isDefaultCursor ? { cursor: getCursor("ns-resize", rotation) } : void 0
        }, topEvents)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        __spreadValues({
          className: (0, import_classnames5.default)("tl-transparent", {
            "tl-hidden": hideEdgeTargets
          }),
          "data-wd": "selection.resize.right",
          "aria-label": "right target",
          pointerEvents: "all",
          x: toDomPrecision(width - (isSmallX ? 0 : targetSizeX)),
          y: 0,
          height: toDomPrecision(Math.max(1, height)),
          width: toDomPrecision(Math.max(1, targetSizeX * 2)),
          style: isDefaultCursor ? { cursor: getCursor("ew-resize", rotation) } : void 0
        }, rightEvents)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        __spreadValues({
          className: (0, import_classnames5.default)("tl-transparent", {
            "tl-hidden": hideEdgeTargets
          }),
          "data-wd": "selection.resize.bottom",
          "aria-label": "bottom target",
          pointerEvents: "all",
          x: 0,
          y: toDomPrecision(height - (isSmallY ? 0 : targetSizeY)),
          width: toDomPrecision(Math.max(1, width)),
          height: toDomPrecision(Math.max(1, targetSizeY * 2)),
          style: isDefaultCursor ? { cursor: getCursor("ns-resize", rotation) } : void 0
        }, bottomEvents)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        __spreadValues({
          className: (0, import_classnames5.default)("tl-transparent", {
            "tl-hidden": hideEdgeTargets
          }),
          "data-wd": "selection.resize.left",
          "aria-label": "left target",
          pointerEvents: "all",
          x: toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX)),
          y: 0,
          height: toDomPrecision(Math.max(1, height)),
          width: toDomPrecision(Math.max(1, targetSizeX * 2)),
          style: isDefaultCursor ? { cursor: getCursor("ew-resize", rotation) } : void 0
        }, leftEvents)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        __spreadValues({
          className: (0, import_classnames5.default)("tl-transparent", {
            "tl-hidden": hideTopLeftCorner
          }),
          "data-wd": "selection.target.top-left",
          "aria-label": "top-left target",
          pointerEvents: "all",
          x: toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX * 1.5)),
          y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5)),
          width: toDomPrecision(targetSizeX * 3),
          height: toDomPrecision(targetSizeY * 3),
          style: isDefaultCursor ? { cursor: getCursor("nwse-resize", rotation) } : void 0
        }, topLeftEvents)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        __spreadValues({
          className: (0, import_classnames5.default)("tl-transparent", {
            "tl-hidden": hideTopRightCorner
          }),
          "data-wd": "selection.target.top-right",
          "aria-label": "top-right target",
          pointerEvents: "all",
          x: toDomPrecision(width - (isSmallX ? 0 : targetSizeX * 1.5)),
          y: toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5)),
          width: toDomPrecision(targetSizeX * 3),
          height: toDomPrecision(targetSizeY * 3),
          style: isDefaultCursor ? { cursor: getCursor("nesw-resize", rotation) } : void 0
        }, topRightEvents)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        __spreadValues({
          className: (0, import_classnames5.default)("tl-transparent", {
            "tl-hidden": hideBottomRightCorner
          }),
          "data-wd": "selection.target.bottom-right",
          "aria-label": "bottom-right target",
          pointerEvents: "all",
          x: toDomPrecision(width - (isSmallX ? targetSizeX : targetSizeX * 1.5)),
          y: toDomPrecision(height - (isSmallY ? targetSizeY : targetSizeY * 1.5)),
          width: toDomPrecision(targetSizeX * 3),
          height: toDomPrecision(targetSizeY * 3),
          style: isDefaultCursor ? { cursor: getCursor("nwse-resize", rotation) } : void 0
        }, bottomRightEvents)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "rect",
        __spreadValues({
          className: (0, import_classnames5.default)("tl-transparent", {
            "tl-hidden": hideBottomLeftCorner
          }),
          "data-wd": "selection.target.bottom-left",
          "aria-label": "bottom-left target",
          pointerEvents: "all",
          x: toDomPrecision(0 - (isSmallX ? targetSizeX * 3 : targetSizeX * 1.5)),
          y: toDomPrecision(height - (isSmallY ? 0 : targetSizeY * 1.5)),
          width: toDomPrecision(targetSizeX * 3),
          height: toDomPrecision(targetSizeY * 3),
          style: isDefaultCursor ? { cursor: getCursor("nesw-resize", rotation) } : void 0
        }, bottomLeftEvents)
      ),
      showResizeHandles && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "rect",
          {
            "data-wd": "selection.resize.top-left",
            className: (0, import_classnames5.default)("tl-corner-handle", {
              "tl-hidden": hideTopLeftCorner
            }),
            "aria-label": "top_left handle",
            x: toDomPrecision(0 - size / 2),
            y: toDomPrecision(0 - size / 2),
            width: toDomPrecision(size),
            height: toDomPrecision(size)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "rect",
          {
            "data-wd": "selection.resize.top-right",
            className: (0, import_classnames5.default)("tl-corner-handle", {
              "tl-hidden": hideTopRightCorner
            }),
            "aria-label": "top_right handle",
            x: toDomPrecision(width - size / 2),
            y: toDomPrecision(0 - size / 2),
            width: toDomPrecision(size),
            height: toDomPrecision(size)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "rect",
          {
            "data-wd": "selection.resize.bottom-right",
            className: (0, import_classnames5.default)("tl-corner-handle", {
              "tl-hidden": hideBottomRightCorner
            }),
            "aria-label": "bottom_right handle",
            x: toDomPrecision(width - size / 2),
            y: toDomPrecision(height - size / 2),
            width: toDomPrecision(size),
            height: toDomPrecision(size)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "rect",
          {
            "data-wd": "selection.resize.bottom-left",
            className: (0, import_classnames5.default)("tl-corner-handle", {
              "tl-hidden": hideBottomLeftCorner
            }),
            "aria-label": "bottom_left handle",
            x: toDomPrecision(0 - size / 2),
            y: toDomPrecision(height - size / 2),
            width: toDomPrecision(size),
            height: toDomPrecision(size)
          }
        )
      ] }),
      showTextResizeHandles && /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "rect",
          {
            "data-wd": "selection.text-resize.left.handle",
            className: "tl-text-handle",
            "aria-label": "bottom_left handle",
            x: toDomPrecision(0 - size / 4),
            y: toDomPrecision(height / 2 - textHandleHeight / 2),
            rx: size / 4,
            width: toDomPrecision(size / 2),
            height: toDomPrecision(textHandleHeight)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          "rect",
          {
            "data-wd": "selection.text-resize.right.handle",
            className: "tl-text-handle",
            "aria-label": "bottom_left handle",
            rx: size / 4,
            x: toDomPrecision(width - size / 4),
            y: toDomPrecision(height / 2 - textHandleHeight / 2),
            width: toDomPrecision(size / 2),
            height: toDomPrecision(textHandleHeight)
          }
        )
      ] }),
      showCropHandles && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        CropHandles,
        __spreadValues({}, {
          size,
          width,
          height,
          hideAlternateHandles: hideAlternateCropHandles
        })
      )
    ] });
  });
  var RotateCornerHandle = function RotateCornerHandle2({
    cx,
    cy,
    targetSize,
    corner,
    cursor,
    isHidden,
    "data-wd": dataWd
  }) {
    const events = useSelectionEvents(corner);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      "rect",
      __spreadValues({
        className: (0, import_classnames5.default)("tl-transparent", "tl-rotate-corner", { "tl-hidden": isHidden }),
        "data-wd": dataWd,
        "aria-label": `${corner} target`,
        pointerEvents: "all",
        x: toDomPrecision(cx - targetSize * 3),
        y: toDomPrecision(cy - targetSize * 3),
        width: toDomPrecision(Math.max(1, targetSize * 3)),
        height: toDomPrecision(Math.max(1, targetSize * 3)),
        cursor
      }, events)
    );
  };
  var SQUARE_ROOT_PI = Math.sqrt(Math.PI);
  var MobileRotateHandle = function RotateHandle({
    cx,
    cy,
    size,
    isHidden,
    "data-wd": dataWd
  }) {
    const events = useSelectionEvents("mobile_rotate");
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("g", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "circle",
        __spreadValues({
          "data-wd": dataWd,
          pointerEvents: "all",
          className: (0, import_classnames5.default)("tl-transparent", "tl-mobile-rotate__bg", { "tl-hidden": isHidden }),
          cx,
          cy
        }, events)
      ),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        "circle",
        {
          className: (0, import_classnames5.default)("tl-mobile-rotate__fg", { "tl-hidden": isHidden }),
          cx,
          cy,
          r: size / SQUARE_ROOT_PI
        }
      )
    ] });
  };

  // ../../../packages/editor/src/lib/components/Shape.tsx
  var React16 = __toESM(require_react());

  // ../../../packages/editor/src/lib/hooks/useShapeEvents.ts
  var import_react29 = __toESM(require_react());
  var pointerEventHandler = (app, shapeId, name, capturedPointerIdLookup) => {
    return (e2) => {
      if (name !== "pointer_move" && app.pageState.editingId === shapeId)
        e2.isKilled = true;
      if (e2.isKilled)
        return;
      let pointerInfo = getPointerInfo(e2, app.getContainer());
      switch (name) {
        case "pointer_down": {
          if (e2.button !== 0 && e2.button !== 1 && e2.button !== 2)
            return;
          setPointerCapture(e2.currentTarget, e2);
          if (e2.button === 0) {
            capturedPointerIdLookup.add(`pointer_down:${e2.pointerId}:0`);
          }
          break;
        }
        case "pointer_up": {
          const key = `pointer_down:${e2.pointerId}:0`;
          if (capturedPointerIdLookup.has(key)) {
            pointerInfo = __spreadProps(__spreadValues({}, pointerInfo), {
              button: 0
            });
            capturedPointerIdLookup.delete(key);
          }
          releasePointerCapture(e2.currentTarget, e2);
          break;
        }
      }
      const shape = app.getShapeById(shapeId);
      if (!shape) {
        console.error("Shape not found", shapeId);
        return;
      }
      app.dispatch(__spreadValues({
        type: "pointer",
        target: "shape",
        shape,
        name
      }, pointerInfo));
    };
  };
  function useShapeEvents(id) {
    const app = useApp();
    return import_react29.default.useMemo(() => {
      const capturedPointerIdLookup = /* @__PURE__ */ new Set();
      function onTouchStart(e2) {
        ;
        e2.isKilled = true;
        preventDefault(e2);
      }
      function onTouchEnd(e2) {
        ;
        e2.isKilled = true;
        preventDefault(e2);
      }
      const handlePointerMove = pointerEventHandler(app, id, "pointer_move", capturedPointerIdLookup);
      let lastX, lastY;
      function onPointerMove(e2) {
        if (e2.isKilled)
          return;
        if (e2.clientX === lastX && e2.clientY === lastY)
          return;
        lastX = e2.clientX;
        lastY = e2.clientY;
        return handlePointerMove(e2);
      }
      return {
        onPointerDown: pointerEventHandler(app, id, "pointer_down", capturedPointerIdLookup),
        onPointerUp: pointerEventHandler(app, id, "pointer_up", capturedPointerIdLookup),
        onPointerEnter: pointerEventHandler(app, id, "pointer_enter", capturedPointerIdLookup),
        onPointerLeave: pointerEventHandler(app, id, "pointer_leave", capturedPointerIdLookup),
        onPointerMove,
        onTouchStart,
        onTouchEnd
      };
    }, [app, id]);
  }

  // ../../../packages/editor/src/lib/components/ErrorBoundary.tsx
  var React15 = __toESM(require_react());
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var initialState = { error: null };
  var ErrorBoundary = class extends React15.Component {
    constructor() {
      super(...arguments);
      __publicField(this, "state", initialState);
    }
    static getDerivedStateFromError(error) {
      return { error };
    }
    componentDidCatch(error) {
      var _a5, _b2;
      (_b2 = (_a5 = this.props).onError) == null ? void 0 : _b2.call(_a5, error);
    }
    render() {
      const { error } = this.state;
      if (error !== null) {
        return this.props.fallback(error);
      }
      return this.props.children;
    }
  };
  function OptionalErrorBoundary(_a5) {
    var _b2 = _a5, {
      children,
      fallback
    } = _b2, props = __objRest(_b2, [
      "children",
      "fallback"
    ]);
    if (fallback === null) {
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(import_jsx_runtime20.Fragment, { children });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(ErrorBoundary, __spreadProps(__spreadValues({ fallback }, props), { children }));
  }

  // ../../../packages/editor/src/lib/components/Shape.tsx
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var Shape = track(function Shape2({
    id,
    index: index2,
    opacity,
    isCulled
  }) {
    const app = useApp();
    const { ShapeErrorFallback } = useEditorComponents();
    const events = useShapeEvents(id);
    const rContainer = React16.useRef(null);
    useQuickReactor(
      "set shape container transform position",
      () => {
        const elm = rContainer.current;
        if (!elm)
          return;
        const shape2 = app.getShapeById(id);
        const pageTransform = app.getPageTransformById(id);
        if (!shape2 || !pageTransform)
          return null;
        const transform = Matrix2d.toCssString(pageTransform);
        elm.style.setProperty("transform", transform);
      },
      [app]
    );
    useQuickReactor(
      "set shape container clip path / color",
      () => {
        const elm = rContainer.current;
        const shape2 = app.getShapeById(id);
        if (!elm)
          return;
        if (!shape2)
          return null;
        const clipPath = app.getClipPathById(id);
        elm.style.setProperty("clip-path", clipPath != null ? clipPath : "none");
        if ("color" in shape2.props) {
          elm.style.setProperty("color", app.getCssColor(shape2.props.color));
        }
      },
      [app]
    );
    useQuickReactor(
      "set shape height and width",
      () => {
        const elm = rContainer.current;
        const shape2 = app.getShapeById(id);
        if (!elm)
          return;
        if (!shape2)
          return null;
        const util2 = app.getShapeUtil(shape2);
        const bounds = util2.bounds(shape2);
        elm.style.setProperty("width", Math.ceil(bounds.width) + "px");
        elm.style.setProperty("height", Math.ceil(bounds.height) + "px");
      },
      [app]
    );
    React16.useLayoutEffect(() => {
      const elm = rContainer.current;
      if (!elm)
        return;
      elm.style.setProperty("opacity", opacity + "");
      elm.style.setProperty("z-index", index2 + "");
    }, [opacity, index2]);
    const shape = app.getShapeById(id);
    if (!shape)
      return null;
    const util = app.getShapeUtil(shape);
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
      "div",
      {
        ref: rContainer,
        className: "tl-shape",
        "data-shape-type": shape.type,
        draggable: false,
        onPointerDown: events.onPointerDown,
        onPointerMove: events.onPointerMove,
        onPointerUp: events.onPointerUp,
        onPointerEnter: events.onPointerEnter,
        onPointerLeave: events.onPointerLeave,
        children: isCulled && util.canUnmount(shape) ? /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(CulledShape, { shape, util }) : /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          OptionalErrorBoundary,
          {
            fallback: ShapeErrorFallback ? (error) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ShapeErrorFallback, { error }) : null,
            onError: (error) => app.annotateError(error, { origin: "react.shape", willCrashApp: false }),
            children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(InnerShape, { shape, util })
          }
        )
      },
      id
    );
  });
  var InnerShape = React16.memo(
    function InnerShape2({ shape, util }) {
      return useStateTracking("InnerShape:" + util.type, () => util.render(shape));
    },
    (prev, next) => prev.shape.props === next.shape.props
  );
  var CulledShape = React16.memo(
    function CulledShap({ shape, util }) {
      const bounds = util.bounds(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
        "div",
        {
          className: "tl-shape__culled",
          style: {
            transform: `translate(${bounds.minX}px, ${bounds.minY}px)`,
            width: bounds.width,
            height: bounds.height
          }
        }
      );
    },
    () => true
  );

  // ../../../packages/editor/src/lib/components/ShapeIndicator.tsx
  var import_classnames6 = __toESM(require_classnames());
  var React17 = __toESM(require_react());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var ShapeWithPropsEquality = class {
    constructor(shape) {
      this.shape = shape;
    }
    equals(other) {
      var _a5, _b2;
      return ((_a5 = this.shape) == null ? void 0 : _a5.props) === ((_b2 = other == null ? void 0 : other.shape) == null ? void 0 : _b2.props);
    }
  };
  var EvenInnererIndicator = ({ shape, util }) => {
    return useStateTracking("Indicator:" + shape.type, () => util.indicator(shape));
  };
  var InnerIndicator = ({ app, id }) => {
    const shape = useValue("shape", () => new ShapeWithPropsEquality(app.store.get(id)), [app, id]);
    const { ShapeIndicatorErrorFallback } = useEditorComponents();
    if (!shape.shape)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
      OptionalErrorBoundary,
      {
        fallback: ShapeIndicatorErrorFallback ? (error) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ShapeIndicatorErrorFallback, { error }) : null,
        onError: (error) => app.annotateError(error, { origin: "react.shapeIndicator", willCrashApp: false }),
        children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
          EvenInnererIndicator,
          {
            shape: shape.shape,
            util: app.getShapeUtil(shape.shape)
          },
          shape.shape.id
        )
      }
    );
  };
  var _ShapeIndicator = ({ id, className, color, opacity }) => {
    const app = useApp();
    const transform = useValue(
      "transform",
      () => {
        const pageTransform = app.getPageTransformById(id);
        if (!pageTransform)
          return "";
        return pageTransform.toCssString();
      },
      [app, id]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("svg", { className: (0, import_classnames6.default)("tl-overlays__item", className), children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
      "g",
      {
        className: "tl-shape-indicator",
        transform,
        stroke: color != null ? color : "var(--color-selected)",
        opacity,
        children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(InnerIndicator, { app, id })
      }
    ) });
  };
  var ShapeIndicator = React17.memo(_ShapeIndicator);

  // ../../../packages/editor/src/lib/components/Canvas.tsx
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var Canvas = track(function Canvas2({
    onDropOverride
  }) {
    const app = useApp();
    const { Background, SvgDefs } = useEditorComponents();
    const rCanvas = React18.useRef(null);
    const rHtmlLayer = React18.useRef(null);
    useScreenBounds();
    useDocumentEvents();
    useCoarsePointer();
    useGestureEvents(rCanvas);
    useFixSafariDoubleTapZoomPencilEvents(rCanvas);
    useQuickReactor(
      "position layers",
      () => {
        const htmlElm = rHtmlLayer.current;
        if (!htmlElm)
          return;
        const { x: x3, y: y3, z: z2 } = app.camera;
        const offset = z2 >= 1 ? modulate(z2, [1, 8], [0.125, 0.5], true) : modulate(z2, [0.1, 1], [-2, 0.125], true);
        htmlElm.style.setProperty(
          "transform",
          `scale(${toDomPrecision(z2)}) translate(${toDomPrecision(x3 + offset)}px,${toDomPrecision(
            y3 + offset
          )}px)`
        );
      },
      [app]
    );
    const { context: patternContext, isReady: patternIsReady } = usePattern();
    const events = useCanvasEvents();
    if (onDropOverride) {
      events.onDrop = onDropOverride(events.onDrop);
    }
    React18.useEffect(() => {
      if (patternIsReady && app.isSafari) {
        const htmlElm = rHtmlLayer.current;
        if (htmlElm) {
          requestAnimationFrame(() => {
            htmlElm.style.display = "none";
            requestAnimationFrame(() => {
              htmlElm.style.display = "";
            });
          });
        }
      }
    }, [app, patternIsReady]);
    React18.useEffect(() => {
      var _a5;
      (_a5 = rCanvas.current) == null ? void 0 : _a5.focus();
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", __spreadProps(__spreadValues({ ref: rCanvas, draggable: false, className: "tl-canvas", "data-wd": "canvas" }, events), { children: [
      Background && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Background, {}),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(GridWrapper, {}),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(UiLogger, {}),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { ref: rHtmlLayer, className: "tl-html-layer", draggable: false, children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("svg", { className: "tl-svg-context", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("defs", { children: [
          patternContext,
          Cursor && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Cursor, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(CollaboratorHint, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ArrowheadDot, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ArrowheadCross, {}),
          SvgDefs && /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(SvgDefs, {})
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(SelectionBg, {}),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "tl-shapes", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ShapesToDisplay, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "tl-overlays", children: [
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(HandlesWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(BrushWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ScribbleWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ZoomBrushWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(SelectedIdIndicators, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(HoveredShapeIndicator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(HintedShapeIndicator, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(SnapLinesWrapper, {}),
          /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(SelectionFg, {}),
          debugFlags.newLiveCollaborators.value ? /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(LiveCollaboratorsNext, {}) : /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(LiveCollaborators, {})
        ] })
      ] })
    ] }));
  });
  var GridWrapper = track(function GridWrapper2() {
    const app = useApp();
    const { Grid } = useEditorComponents();
    const { x: x3, y: y3, z: z2 } = app.camera;
    const isGridMode = app.isGridMode;
    if (!(Grid && isGridMode))
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Grid, { x: x3, y: y3, z: z2, size: app.gridSize });
  });
  var ScribbleWrapper = track(function ScribbleWrapper2() {
    const app = useApp();
    const scribble = app.scribble;
    const zoom = app.zoomLevel;
    const { Scribble } = useEditorComponents();
    if (!(Scribble && scribble))
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Scribble, { className: "tl-user-scribble", scribble, zoom });
  });
  var BrushWrapper = track(function BrushWrapper2() {
    const app = useApp();
    const { brush } = app;
    const { Brush } = useEditorComponents();
    if (!(Brush && brush && app.isIn("select.brushing")))
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Brush, { className: "tl-user-brush", brush });
  });
  var ZoomBrushWrapper = track(function Zoom() {
    const app = useApp();
    const { zoomBrush } = app;
    const { ZoomBrush } = useEditorComponents();
    if (!(ZoomBrush && zoomBrush && app.isIn("zoom")))
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ZoomBrush, { className: "tl-user-brush", brush: zoomBrush });
  });
  var SnapLinesWrapper = track(function SnapLines() {
    const app = useApp();
    const {
      snaps: { lines },
      zoomLevel
    } = app;
    const { SnapLine } = useEditorComponents();
    if (!(SnapLine && lines.length > 0))
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(import_jsx_runtime23.Fragment, { children: lines.map((line) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(SnapLine, { className: "tl-user-snapline", line, zoom: zoomLevel }, line.id)) });
  });
  var MIN_HANDLE_DISTANCE = 48;
  var HandlesWrapper = track(function HandlesWrapper2() {
    var _a5;
    const app = useApp();
    const zoom = app.zoomLevel;
    const isChangingStyle = app.isChangingStyle;
    const onlySelectedShape = app.onlySelectedShape;
    const shouldDisplayHandles = app.isInAny("select.idle", "select.pointing_handle") && !isChangingStyle && !app.isReadOnly;
    if (!(onlySelectedShape && shouldDisplayHandles))
      return null;
    const util = app.getShapeUtil(onlySelectedShape);
    const handles = (_a5 = util.handles) == null ? void 0 : _a5.call(util, onlySelectedShape);
    if (!handles)
      return null;
    const transform = app.getPageTransform(onlySelectedShape);
    if (!transform)
      return null;
    const handlesToDisplay = [];
    for (let i3 = 0, handle = handles[i3]; i3 < handles.length; i3++, handle = handles[i3]) {
      if (handle.type !== "vertex") {
        const prev = handles[i3 - 1];
        const next = handles[i3 + 1];
        if (prev && next) {
          if (Math.hypot(prev.y - next.y, prev.x - next.x) < MIN_HANDLE_DISTANCE / zoom) {
            continue;
          }
        }
      }
      handlesToDisplay.push(handle);
    }
    handlesToDisplay.sort((a3) => a3.type === "vertex" ? 1 : -1);
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("svg", { className: "tl-user-handles tl-overlays__item", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("g", { transform: Matrix2d.toCssString(transform), children: handlesToDisplay.map((handle) => {
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(HandleWrapper, { shapeId: onlySelectedShape.id, handle }, handle.id);
    }) }) });
  });
  var HandleWrapper = ({ shapeId, handle }) => {
    const events = useHandleEvents(shapeId, handle.id);
    const { Handle } = useEditorComponents();
    if (!Handle)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("g", __spreadProps(__spreadValues({ "aria-label": "handle", transform: `translate(${handle.x}, ${handle.y})` }, events), { children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Handle, { shapeId, handle }) }));
  };
  var ShapesToDisplay = track(function ShapesToDisplay2() {
    const app = useApp();
    const { renderingShapes } = app;
    const debugSvg = debugFlags.debugSvg.value;
    if (debugSvg) {
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(import_jsx_runtime23.Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(React18.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Shape, __spreadValues({}, result)),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(DebugSvgCopy, { id: result.id })
      ] }, result.id + "_fragment")) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(import_jsx_runtime23.Fragment, { children: renderingShapes.map((result) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Shape, __spreadValues({}, result), result.id + "_shape")) });
  });
  var SelectedIdIndicators = track(function SelectedIdIndicators2() {
    const app = useApp();
    const shouldDisplay = app.isInAny(
      "select.idle",
      "select.brushing",
      "select.scribble_brushing",
      "select.pointing_shape",
      "select.pointing_selection",
      "select.pointing_handle"
    ) && !app.isChangingStyle;
    if (!shouldDisplay)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(import_jsx_runtime23.Fragment, { children: app.selectedIds.map((id) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ShapeIndicator, { className: "tl-user-indicator__selected", id }, id + "_indicator")) });
  });
  var HoveredShapeIndicator = function HoveredShapeIndicator2() {
    const app = useApp();
    const displayingHoveredId = useValue(
      "hovered id and should display",
      () => app.isInAny("select.idle", "select.editing_shape") ? app.pageState.hoveredId : null,
      [app]
    );
    if (!displayingHoveredId)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ShapeIndicator, { className: "tl-user-indicator__hovered", id: displayingHoveredId });
  };
  var HintedShapeIndicator = track(function HintedShapeIndicator2() {
    const app = useApp();
    const ids = dedupe(app.hintingIds);
    if (!ids.length)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(import_jsx_runtime23.Fragment, { children: ids.map((id) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(ShapeIndicator, { className: "tl-user-indicator__hint", id }, id + "_hinting")) });
  });
  function Cursor() {
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("g", { id: "cursor", children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("g", { fill: "rgba(0,0,0,.2)", transform: "translate(-11,-11)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("g", { fill: "white", transform: "translate(-12,-12)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", { d: "m12 24.4219v-16.015l11.591 11.619h-6.781l-.411.124z" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", { d: "m21.0845 25.0962-3.605 1.535-4.682-11.089 3.686-1.553z" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("g", { fill: "currentColor", transform: "translate(-12,-12)", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", { d: "m19.751 24.4155-1.844.774-3.1-7.374 1.841-.775z" }),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", { d: "m13 10.814v11.188l2.969-2.866.428-.139h4.768z" })
      ] })
    ] });
  }
  function CollaboratorHint() {
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("path", { id: "cursor_hint", fill: "currentColor", d: "M -2,-5 2,0 -2,5 Z" });
  }
  function ArrowheadDot() {
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("marker", { id: "arrowhead-dot", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "0", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("circle", { cx: "3", cy: "3", r: "2", strokeDasharray: "100%" }) });
  }
  function ArrowheadCross() {
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("marker", { id: "arrowhead-cross", className: "tl-arrow-hint", refX: "3.0", refY: "3.0", orient: "auto", children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("line", { x1: "1.5", y1: "1.5", x2: "4.5", y2: "4.5", strokeDasharray: "100%" }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("line", { x1: "1.5", y1: "4.5", x2: "4.5", y2: "1.5", strokeDasharray: "100%" })
    ] });
  }
  var DebugSvgCopy = track(function DupSvg({ id }) {
    const app = useApp();
    const shape = app.getShapeById(id);
    const [html, setHtml] = React18.useState("");
    const isInRoot = (shape == null ? void 0 : shape.parentId) === app.currentPageId;
    React18.useEffect(() => {
      if (!isInRoot)
        return;
      let latest = null;
      const unsubscribe = react("shape to svg", () => __async(this, null, function* () {
        const renderId = Math.random();
        latest = renderId;
        const bb = app.getPageBoundsById(id);
        const el = yield app.getSvg([id], { padding: 0 });
        if (el && bb && latest === renderId) {
          el.style.setProperty("overflow", "visible");
          el.setAttribute("preserveAspectRatio", "xMidYMin slice");
          el.style.setProperty("transform", `translate(${bb.x}px, ${bb.y + bb.h + 12}px)`);
          el.style.setProperty("border", "1px solid black");
          setHtml(el == null ? void 0 : el.outerHTML);
        }
      }));
      return () => {
        latest = null;
        unsubscribe();
      };
    }, [app, id, isInRoot]);
    if (!isInRoot)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { style: { paddingTop: 12, position: "absolute" }, children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { style: { display: "flex" }, dangerouslySetInnerHTML: { __html: html } }) });
  });
  var UiLogger = () => {
    const logMessages = useValue(debugFlags.logMessages);
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "debug__ui-logger", children: logMessages.map((message, messageIndex) => {
      const text = typeof message === "string" ? message : JSON.stringify(message);
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "debug__ui-logger__line", children: text }, messageIndex);
    }) });
  };

  // ../../../packages/editor/src/lib/components/DefaultErrorFallback.tsx
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var BASE_ERROR_URL = "https://github.com/tldraw/tldraw/issues/new";
  function noop2() {
  }
  var DefaultErrorFallback = ({ error, app }) => {
    const containerRef = (0, import_react30.useRef)(null);
    const [shouldShowError, setShouldShowError] = (0, import_react30.useState)(false);
    const [didCopy, setDidCopy] = (0, import_react30.useState)(false);
    const [shouldShowResetConfirmation, setShouldShowResetConfirmation] = (0, import_react30.useState)(false);
    const errorMessage = error instanceof Error ? error.message : String(error);
    const errorStack = error instanceof Error ? error.stack : null;
    const isDarkModeFromApp = useValue(
      "isDarkMode",
      () => {
        try {
          if (app) {
            return app.userDocumentSettings.isDarkMode;
          }
        } catch (e2) {
        }
        return null;
      },
      [app]
    );
    const [isDarkMode, setIsDarkMode] = (0, import_react30.useState)(null);
    (0, import_react30.useLayoutEffect)(() => {
      var _a5;
      if (isDarkModeFromApp !== null) {
        setIsDarkMode(isDarkModeFromApp);
      }
      let parent = (_a5 = containerRef.current) == null ? void 0 : _a5.parentElement;
      let foundParentThemeClass = false;
      while (parent) {
        if (parent.classList.contains("tl-theme__dark") || parent.classList.contains("tl-theme__light")) {
          foundParentThemeClass = true;
          break;
        }
        parent = parent.parentElement;
      }
      if (foundParentThemeClass) {
        setIsDarkMode(null);
        return;
      }
      setIsDarkMode(window.matchMedia("(prefetl-color-scheme: dark)").matches);
    }, [isDarkModeFromApp]);
    (0, import_react30.useEffect)(() => {
      if (didCopy) {
        const timeout = setTimeout(() => {
          setDidCopy(false);
        }, 2e3);
        return () => clearTimeout(timeout);
      }
    }, [didCopy]);
    const copyError = () => {
      const textarea = document.createElement("textarea");
      textarea.value = errorStack != null ? errorStack : errorMessage;
      document.body.appendChild(textarea);
      textarea.select();
      document.execCommand("copy");
      textarea.remove();
      setDidCopy(true);
    };
    const refresh = () => {
      refreshPage();
    };
    const resetLocalState = () => __async(void 0, null, function* () {
      hardResetApp();
    });
    const url = new URL(BASE_ERROR_URL);
    url.searchParams.set("title", errorMessage);
    url.searchParams.set("labels", `bug`);
    url.searchParams.set(
      "body",
      `Hey, I ran into an error while using tldraw:

\`\`\`js
${errorStack != null ? errorStack : errorMessage}
\`\`\`

My browser: ${navigator.userAgent}`
    );
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(
      "div",
      {
        ref: containerRef,
        className: (0, import_classnames7.default)(
          "tl-container tl-error-boundary",
          // error-boundary is sometimes used outside of the theme
          // container, so we need to provide it with a theme for our
          // styles to work correctly
          isDarkMode === null ? "" : isDarkMode ? "tl-theme__dark" : "tl-theme__light"
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "tl-error-boundary__overlay" }),
          app && // opportunistically attempt to render the canvas to reassure
          // the user that their document is still there. there's a good
          // chance this won't work (ie the error that we're currently
          // notifying the user about originates in the canvas) so it's
          // not a big deal if it doesn't work - in that case we just have
          // a plain grey background.
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ErrorBoundary, { onError: noop2, fallback: () => null, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(AppContext.Provider, { value: app, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("div", { className: "tl-overlay tl-error-boundary__canvas", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(Canvas, {}) }) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
            "div",
            {
              className: (0, import_classnames7.default)("tl-modal", "tl-error-boundary__content", {
                "tl-error-boundary__content__expanded": shouldShowError && !shouldShowResetConfirmation
              }),
              children: shouldShowResetConfirmation ? /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(import_jsx_runtime24.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { children: "Are you sure?" }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { children: "Resetting your data will delete your drawing and cannot be undone." }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "tl-error-boundary__content__actions", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { onClick: () => setShouldShowResetConfirmation(false), children: "Cancel" }),
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { className: "tl-error-boundary__reset", onClick: resetLocalState, children: "Reset data" })
                ] })
              ] }) : /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(import_jsx_runtime24.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("h2", { children: "Something's gone wrong." }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("p", { children: [
                  "Sorry, we encountered an error. Please refresh the page to continue. If you keep seeing this error, you can ",
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("a", { href: url.toString(), children: "create a GitHub issue" }),
                  " or",
                  " ",
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("a", { href: "https://discord.gg/Cq6cPsTfNy", children: "ask for help on Discord" }),
                  "."
                ] }),
                shouldShowError && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "tl-error-boundary__content__error", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("pre", { children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("code", { children: errorStack != null ? errorStack : errorMessage }) }),
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { onClick: copyError, children: didCopy ? "Copied!" : "Copy" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "tl-error-boundary__content__actions", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { onClick: () => setShouldShowError(!shouldShowError), children: shouldShowError ? "Hide details" : "Show details" }),
                  /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "tl-error-boundary__content__actions__group", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
                      "button",
                      {
                        className: "tl-error-boundary__reset",
                        onClick: () => setShouldShowResetConfirmation(true),
                        children: "Reset data"
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { className: "tl-error-boundary__refresh", onClick: refresh, children: "Refresh Page" })
                  ] })
                ] })
              ] })
            }
          )
        ]
      }
    );
  };

  // ../../../packages/editor/src/lib/components/DefaultGrid.tsx
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var DefaultGrid = ({ x: x3, y: y3, z: z2, size }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("svg", { className: "tl-grid", version: "1.1", xmlns: "http://www.w3.org/2000/svg", children: [
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("defs", { children: GRID_STEPS.map(({ min: min2, mid, step }, i3) => {
        const s3 = step * size * z2;
        const xo = 0.5 + x3 * z2;
        const yo = 0.5 + y3 * z2;
        const gxo = xo > 0 ? xo % s3 : s3 + xo % s3;
        const gyo = yo > 0 ? yo % s3 : s3 + yo % s3;
        const opacity = z2 < mid ? modulate(z2, [min2, mid], [0, 1]) : 1;
        return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          "pattern",
          {
            id: `grid-${step}`,
            width: s3,
            height: s3,
            patternUnits: "userSpaceOnUse",
            children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("circle", { className: "tl-grid-dot", cx: gxo, cy: gyo, r: 1, opacity })
          },
          `grid-pattern-${i3}`
        );
      }) }),
      GRID_STEPS.map(({ step }, i3) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("rect", { width: "100%", height: "100%", fill: `url(#grid-${step})` }, `grid-rect-${i3}`))
    ] });
  };

  // ../../../packages/editor/src/lib/components/DefaultHandle.tsx
  var import_classnames8 = __toESM(require_classnames());
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var DefaultHandle = ({ handle, className }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
      "g",
      {
        className: (0, import_classnames8.default)(
          "tl-handle",
          { "tl-handle__hint": handle.type !== "vertex" },
          className
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("circle", { className: "tl-handle__bg" }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("circle", { className: "tl-handle__fg" })
        ]
      }
    );
  };

  // ../../../packages/editor/src/lib/components/DefaultScribble.tsx
  var import_classnames9 = __toESM(require_classnames());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var DefaultScribble = ({
    scribble,
    zoom,
    color,
    opacity,
    className
  }) => {
    const d3 = getSvgPathFromStroke(
      getStroke(scribble.points, {
        size: scribble.size / zoom,
        start: { taper: true, easing: EASINGS.linear },
        last: scribble.state === "stopping",
        simulatePressure: false
      })
    );
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("svg", { className: className ? (0, import_classnames9.default)("tl-overlays__item", className) : className, children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
      "path",
      {
        className: "tl-scribble",
        d: d3,
        fill: color != null ? color : `var(--color-${scribble.color})`,
        opacity: opacity != null ? opacity : scribble.opacity
      }
    ) });
  };

  // ../../../packages/editor/src/lib/components/DefaultShapeErrorFallback.tsx
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var DefaultShapeErrorFallback = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "tl-shape-error-boundary" });
  };

  // ../../../packages/editor/src/lib/components/DefaultShapeIndicatorErrorFallback.tsx
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var DefaultShapeIndicatorErrorFallback = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("circle", { cx: 4, cy: 4, r: 8, strokeWidth: "1", stroke: "red" });
  };

  // ../../../packages/editor/src/lib/components/DefaultSnapLine.tsx
  var import_classnames10 = __toESM(require_classnames());
  var React19 = __toESM(require_react());
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  function PointsSnapLine({ points: points2, zoom }) {
    const l3 = 2.5 / zoom;
    const minX = points2.reduce((acc, p3) => Math.min(acc, p3.x), Infinity);
    const maxX = points2.reduce((acc, p3) => Math.max(acc, p3.x), -Infinity);
    const minY = points2.reduce((acc, p3) => Math.min(acc, p3.y), Infinity);
    const maxY = points2.reduce((acc, p3) => Math.max(acc, p3.y), -Infinity);
    const useNWtoSEdireciton = points2.some((p3) => p3.x === minX && p3.y === minY);
    let firstX, firstY, secondX, secondY;
    if (useNWtoSEdireciton) {
      firstX = minX;
      firstY = minY;
      secondX = maxX;
      secondY = maxY;
    } else {
      firstX = minX;
      firstY = maxY;
      secondX = maxX;
      secondY = minY;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("g", { className: "tl-snap-line", children: [
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: firstX, y1: firstY, x2: secondX, y2: secondY }),
      points2.map((p3, i3) => /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("g", { transform: `translate(${p3.x},${p3.y})`, children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
        "path",
        {
          className: "tl-snap-point",
          d: `M ${-l3},${-l3} L ${l3},${l3} M ${-l3},${l3} L ${l3},${-l3}`
        }
      ) }, i3))
    ] });
  }
  function GapsSnapLine({ gaps, direction, zoom }) {
    const l3 = 3.5 / zoom;
    let edgeIntersection = [-Infinity, Infinity];
    let nextEdgeIntersection = null;
    const horizontal = direction === "horizontal";
    for (const gap of gaps) {
      nextEdgeIntersection = rangeIntersection(
        edgeIntersection[0],
        edgeIntersection[1],
        horizontal ? gap.startEdge[0].y : gap.startEdge[0].x,
        horizontal ? gap.startEdge[1].y : gap.startEdge[1].x
      );
      if (nextEdgeIntersection) {
        edgeIntersection = nextEdgeIntersection;
      } else {
        continue;
      }
      nextEdgeIntersection = rangeIntersection(
        edgeIntersection[0],
        edgeIntersection[1],
        horizontal ? gap.endEdge[0].y : gap.endEdge[0].x,
        horizontal ? gap.endEdge[1].y : gap.endEdge[1].x
      );
      if (nextEdgeIntersection) {
        edgeIntersection = nextEdgeIntersection;
      } else {
        continue;
      }
    }
    if (edgeIntersection === null) {
      return null;
    }
    const midPoint = (edgeIntersection[0] + edgeIntersection[1]) / 2;
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("g", { className: "tl-snap-line", children: gaps.map(({ startEdge, endEdge }, i3) => /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(React19.Fragment, { children: horizontal ? (
      // horizontal gap
      /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "line",
          {
            x1: startEdge[0].x,
            y1: midPoint - 2 * l3,
            x2: startEdge[1].x,
            y2: midPoint + 2 * l3
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "line",
          {
            x1: endEdge[0].x,
            y1: midPoint - 2 * l3,
            x2: endEdge[1].x,
            y2: midPoint + 2 * l3
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: startEdge[0].x, y1: midPoint, x2: endEdge[0].x, y2: midPoint }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "line",
          {
            x1: (startEdge[0].x + endEdge[0].x) / 2,
            y1: midPoint - l3,
            x2: (startEdge[0].x + endEdge[0].x) / 2,
            y2: midPoint + l3
          }
        )
      ] })
    ) : (
      // vertical gap
      /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "line",
          {
            x1: midPoint - 2 * l3,
            y1: startEdge[0].y,
            x2: midPoint + 2 * l3,
            y2: startEdge[1].y
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "line",
          {
            x1: midPoint - 2 * l3,
            y1: endEdge[0].y,
            x2: midPoint + 2 * l3,
            y2: endEdge[1].y
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("line", { x1: midPoint, y1: startEdge[0].y, x2: midPoint, y2: endEdge[0].y }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(
          "line",
          {
            x1: midPoint - l3,
            y1: (startEdge[0].y + endEdge[0].y) / 2,
            x2: midPoint + l3,
            y2: (startEdge[0].y + endEdge[0].y) / 2
          }
        )
      ] })
    ) }, i3)) });
  }
  var DefaultSnapLine = ({ className, line, zoom }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("svg", { className: (0, import_classnames10.default)("tl-overlays__item", className), children: line.type === "points" ? /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(PointsSnapLine, __spreadProps(__spreadValues({}, line), { zoom })) : line.type === "gaps" ? /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(GapsSnapLine, __spreadProps(__spreadValues({}, line), { zoom })) : null });
  };

  // ../../../packages/editor/src/lib/components/DefaultSpinner.tsx
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var DefaultSpinner = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("svg", { width: 16, height: 16, viewBox: "0 0 16 16", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("g", { strokeWidth: 2, fill: "none", fillRule: "evenodd", children: [
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("circle", { strokeOpacity: 0.25, cx: 8, cy: 8, r: 7, stroke: "black" }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("path", { strokeLinecap: "round", d: "M15 8c0-4.5-4.5-7-7-7", stroke: "black", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(
        "animateTransform",
        {
          attributeName: "transform",
          type: "rotate",
          from: "0 8 8",
          to: "360 8 8",
          dur: "1s",
          repeatCount: "indefinite"
        }
      ) })
    ] }) });
  };

  // ../../../packages/editor/src/lib/components/DefaultSvgDefs.tsx
  var DefaultSvgDefs = () => {
    return null;
  };

  // ../../../packages/editor/src/lib/hooks/useEditorComponents.tsx
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var EditorComponentsContext = (0, import_react31.createContext)({});
  function EditorComponentsProvider({ overrides, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
      EditorComponentsContext.Provider,
      {
        value: __spreadValues({
          Background: DefaultBackground,
          SvgDefs: DefaultSvgDefs,
          Brush: DefaultBrush,
          ZoomBrush: DefaultBrush,
          CollaboratorBrush: DefaultBrush,
          Cursor: DefaultCursor,
          CollaboratorCursor: DefaultCursor,
          CollaboratorHint: DefaultCollaboratorHint,
          CollaboratorShapeIndicator: ShapeIndicator,
          Grid: DefaultGrid,
          Scribble: DefaultScribble,
          SnapLine: DefaultSnapLine,
          Handle: DefaultHandle,
          CollaboratorScribble: DefaultScribble,
          ErrorFallback: DefaultErrorFallback,
          ShapeErrorFallback: DefaultShapeErrorFallback,
          ShapeIndicatorErrorFallback: DefaultShapeIndicatorErrorFallback,
          Spinner: DefaultSpinner
        }, overrides),
        children
      }
    );
  }
  function useEditorComponents() {
    return (0, import_react31.useContext)(EditorComponentsContext);
  }

  // ../../../packages/editor/src/lib/hooks/useIsEditing.ts
  function useIsEditing(shapeId) {
    const app = useApp();
    return useValue("isEditing", () => app.editingId === shapeId, [app, shapeId]);
  }

  // ../../../node_modules/escape-string-regexp/index.js
  function escapeStringRegexp(string2) {
    if (typeof string2 !== "string") {
      throw new TypeError("Expected a string");
    }
    return string2.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
  }

  // ../../../packages/editor/src/lib/utils/embeds.ts
  function matchEmbedUrl(url) {
    const host = new URL(url).host.replace("www.", "");
    for (const localEmbedDef of EMBED_DEFINITIONS) {
      if (checkHostnames(localEmbedDef.hostnames, host)) {
        const originalUrl = localEmbedDef.fromEmbedUrl(url);
        if (originalUrl) {
          return {
            definition: localEmbedDef,
            url: originalUrl,
            embedUrl: url
          };
        }
      }
    }
  }
  var globlikeRegExp = (input) => {
    return input.split("*").map((str) => escapeStringRegexp(str)).join(".+");
  };
  var checkHostnames = (hostnames, targetHostname) => {
    return !!hostnames.find((hostname) => {
      const re = new RegExp(globlikeRegExp(hostname));
      return targetHostname.match(re);
    });
  };
  function matchUrl(url) {
    const host = new URL(url).host.replace("www.", "");
    for (const localEmbedDef of EMBED_DEFINITIONS) {
      if (checkHostnames(localEmbedDef.hostnames, host)) {
        const embedUrl = localEmbedDef.toEmbedUrl(url);
        if (embedUrl) {
          return {
            definition: localEmbedDef,
            embedUrl,
            url
          };
        }
      }
    }
  }
  function getEmbedInfoUnsafely(inputUrl) {
    var _a5;
    const result = (_a5 = matchUrl(inputUrl)) != null ? _a5 : matchEmbedUrl(inputUrl);
    return result;
  }
  function getEmbedInfo(inputUrl) {
    try {
      return getEmbedInfoUnsafely(inputUrl);
    } catch (e2) {
      console.error(e2);
    }
    return void 0;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLEmbedUtil/TLEmbedUtil.tsx
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var getSandboxPermissions = (permissions) => {
    return Object.entries(permissions).filter(([_perm, isEnabled]) => isEnabled).map(([perm]) => perm).join(" ");
  };
  var TLEmbedUtil = class extends TLBoxUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "canUnmount", () => false);
      __publicField(this, "canResize", (shape) => {
        var _a5;
        const result = getEmbedInfo(shape.props.url);
        return !!((_a5 = result == null ? void 0 : result.definition) == null ? void 0 : _a5.doesResize);
      });
      __publicField(this, "hideSelectionBoundsBg", (shape) => !this.canResize(shape));
      __publicField(this, "hideSelectionBoundsFg", (shape) => !this.canResize(shape));
      __publicField(this, "canEdit", () => true);
      __publicField(this, "isAspectRatioLocked", (shape) => {
        var _a5;
        const embedInfo = getEmbedInfo(shape.props.url);
        return (_a5 = embedInfo == null ? void 0 : embedInfo.definition.isAspectRatioLocked) != null ? _a5 : false;
      });
      __publicField(this, "onResize", (shape, info) => {
        var _a5, _b2;
        const isAspectRatioLocked = this.isAspectRatioLocked(shape);
        const embedInfo = getEmbedInfo(shape.props.url);
        let minWidth = (_a5 = embedInfo == null ? void 0 : embedInfo.definition.minWidth) != null ? _a5 : 200;
        let minHeight = (_b2 = embedInfo == null ? void 0 : embedInfo.definition.minHeight) != null ? _b2 : 200;
        if (isAspectRatioLocked) {
          const aspectRatio = shape.props.w / shape.props.h;
          if (aspectRatio > 1) {
            minWidth *= aspectRatio;
          } else {
            minHeight /= aspectRatio;
          }
        }
        return resizeBox(shape, info, { minWidth, minHeight });
      });
    }
    defaultProps() {
      return {
        opacity: "1",
        w: 300,
        h: 300,
        url: "",
        doesResize: true
      };
    }
    render(shape) {
      var _a5, _b2;
      const { w: w3, h: h3, url } = shape.props;
      const isEditing = useIsEditing(shape.id);
      const embedInfo = (0, import_react32.useMemo)(() => getEmbedInfoUnsafely(url), [url]);
      const { Spinner: Spinner2 } = useEditorComponents();
      const isHoveringWhileEditingSameShape = useValue(
        "is hovering",
        () => {
          const { editingId, hoveredId } = this.app.pageState;
          if (editingId && hoveredId !== editingId) {
            const editingShape = this.app.getShapeById(editingId);
            if (editingShape && editingShape.type === "embed") {
              return true;
            }
          }
          return false;
        },
        []
      );
      const pageRotation = this.app.getPageRotation(shape);
      const isInteractive = isEditing || isHoveringWhileEditingSameShape;
      if ((embedInfo == null ? void 0 : embedInfo.definition.type) === "github_gist") {
        const idFromGistUrl = embedInfo.url.split("/").pop();
        if (idFromGistUrl) {
          return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(HTMLContainer, { className: "tl-embed-container", id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
            Gist,
            {
              id: idFromGistUrl,
              width: toDomPrecision(w3),
              height: toDomPrecision(h3),
              isInteractive,
              pageRotation
            }
          ) });
        }
      }
      const sandbox = getSandboxPermissions(__spreadValues(__spreadValues({}, tlEmbedShapePermissionDefaults), (_a5 = embedInfo == null ? void 0 : embedInfo.definition.overridePermissions) != null ? _a5 : {}));
      return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(HTMLContainer, { className: "tl-embed-container", id: shape.id, children: (embedInfo == null ? void 0 : embedInfo.definition) ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        "iframe",
        {
          className: `tl-embed tl-embed-${shape.id}`,
          sandbox,
          src: embedInfo.embedUrl,
          width: toDomPrecision(w3),
          height: toDomPrecision(h3),
          draggable: false,
          frameBorder: "0",
          referrerPolicy: "no-referrer-when-downgrade",
          style: {
            border: 0,
            pointerEvents: isInteractive ? "auto" : "none",
            // Fix for safari <https://stackoverflow.com/a/49150908>
            zIndex: isInteractive ? "" : "-1",
            boxShadow: rotateBoxShadow(pageRotation, ROTATING_SHADOWS),
            borderRadius: (_b2 = embedInfo == null ? void 0 : embedInfo.definition.overrideOutlineRadius) != null ? _b2 : 8,
            background: embedInfo == null ? void 0 : embedInfo.definition.backgroundColor
          }
        }
      ) : Spinner2 ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("g", { transform: `translate(${(w3 - 38) / 2}, ${(h3 - 38) / 2})`, children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Spinner2, {}) }) : null });
    }
    indicator(shape) {
      var _a5, _b2;
      const embedInfo = (0, import_react32.useMemo)(() => getEmbedInfo(shape.props.url), [shape.props.url]);
      return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
        "rect",
        {
          width: toDomPrecision(shape.props.w),
          height: toDomPrecision(shape.props.h),
          rx: (_a5 = embedInfo == null ? void 0 : embedInfo.definition.overrideOutlineRadius) != null ? _a5 : 8,
          ry: (_b2 = embedInfo == null ? void 0 : embedInfo.definition.overrideOutlineRadius) != null ? _b2 : 8
        }
      );
    }
  };
  __publicField(TLEmbedUtil, "type", "embed");
  function Gist({
    id,
    file,
    isInteractive,
    width,
    height,
    style,
    pageRotation
  }) {
    const rIframe = React20.useRef(null);
    const fileArg = file ? `?file=${file}` : "";
    const gistLink = `https://gist.github.com/${id}.js${fileArg}`;
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      "iframe",
      {
        ref: rIframe,
        className: "tl-embed",
        draggable: false,
        width: toDomPrecision(width),
        height: toDomPrecision(height),
        frameBorder: "0",
        scrolling: "no",
        seamless: true,
        referrerPolicy: "no-referrer-when-downgrade",
        style: __spreadProps(__spreadValues({}, style), {
          pointerEvents: isInteractive ? "all" : "none",
          // Fix for safari <https://stackoverflow.com/a/49150908>
          zIndex: isInteractive ? "" : "-1",
          boxShadow: rotateBoxShadow(pageRotation, ROTATING_SHADOWS)
        }),
        srcDoc: `
			<html>
				<head>
					<base target="_blank">
				</head>
				<body>
					<script src=${gistLink}><\/script>
					<style type="text/css">
						* { margin: 0px; }
						table { height: 100%; background-color: red; }
						.gist { background-color: none; height: 100%;  }
						.gist .gist-file { height: calc(100vh - 2px); padding: 0px; display: grid; grid-template-rows: 1fr auto; }
					</style>
				</body>
			</html>`
      }
    );
  }
  var TLEmbedShapeDef = defineShape({
    type: "embed",
    getShapeUtil: () => TLEmbedUtil,
    validator: embedShapeTypeValidator,
    migrations: embedShapeMigrations
  });

  // ../../../packages/editor/src/lib/app/shapeutils/TLFrameUtil/components/FrameHeading.tsx
  var import_react34 = __toESM(require_react());

  // ../../../packages/editor/src/lib/app/shapeutils/TLFrameUtil/components/FrameLabelInput.tsx
  var import_react33 = __toESM(require_react());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var FrameLabelInput = (0, import_react33.forwardRef)(({ id, name, isEditing }, ref) => {
    const app = useApp();
    const handleKeyDown = (0, import_react33.useCallback)(
      (e2) => {
        if (e2.key === "Enter") {
          e2.stopPropagation();
          e2.currentTarget.blur();
          app.setEditingId(null);
        }
      },
      [app]
    );
    const handleBlur = (0, import_react33.useCallback)(
      (e2) => {
        const shape = app.getShapeById(id);
        if (!shape)
          return;
        const name2 = shape.props.name;
        const value = e2.currentTarget.value.trim();
        if (name2 === value)
          return;
        app.updateShapes(
          [
            {
              id,
              type: "frame",
              props: { name: value }
            }
          ],
          true
        );
      },
      [id, app]
    );
    const handleChange = (0, import_react33.useCallback)(
      (e2) => {
        const shape = app.getShapeById(id);
        if (!shape)
          return;
        const name2 = shape.props.name;
        const value = e2.currentTarget.value;
        if (name2 === value)
          return;
        app.updateShapes(
          [
            {
              id,
              type: "frame",
              props: { name: value }
            }
          ],
          true
        );
      },
      [id, app]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: `tl-frame-label ${isEditing ? "tl-frame-label__editing" : ""}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(
        "input",
        {
          className: "tl-frame-name-input",
          ref,
          style: { display: isEditing ? void 0 : "none" },
          value: name,
          autoFocus: true,
          onKeyDown: handleKeyDown,
          onBlur: handleBlur,
          onChange: handleChange
        }
      ),
      defaultEmptyAs(name, "Frame") + String.fromCharCode(8203)
    ] });
  });

  // ../../../packages/editor/src/lib/app/shapeutils/TLFrameUtil/components/FrameHeading.tsx
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var FrameHeading = function FrameHeading2({
    id,
    name,
    width,
    height
  }) {
    const app = useApp();
    const pageRotation = canolicalizeRotation(app.getPageRotationById(id));
    const isEditing = useIsEditing(id);
    const rInput = (0, import_react34.useRef)(null);
    (0, import_react34.useEffect)(() => {
      const el = rInput.current;
      if (el && isEditing) {
        el.focus();
        el.select();
        requestAnimationFrame(() => {
          if (document.activeElement !== el) {
            el.focus();
            el.select();
          }
        });
      }
    }, [rInput, isEditing]);
    const offsetRotation = pageRotation + Math.PI / 4;
    const scaledRotation = (offsetRotation * (2 / Math.PI) + 4) % 4;
    const labelSide = ["top", "left", "bottom", "right"][Math.floor(scaledRotation)];
    let labelTranslate;
    switch (labelSide) {
      case "top":
        labelTranslate = ``;
        break;
      case "right":
        labelTranslate = `translate(${toDomPrecision(width)}px, 0px) rotate(90deg)`;
        break;
      case "bottom":
        labelTranslate = `translate(${toDomPrecision(width)}px, ${toDomPrecision(
          height
        )}px) rotate(180deg)`;
        break;
      case "left":
        labelTranslate = `translate(0px, ${toDomPrecision(height)}px) rotate(270deg)`;
        break;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
      "div",
      {
        className: "tl-frame-heading",
        style: {
          overflow: isEditing ? "visible" : "hidden",
          maxWidth: `calc(var(--tl-zoom) * ${labelSide === "top" || labelSide === "bottom" ? Math.ceil(width) : Math.ceil(height)}px + var(--space-5))`,
          bottom: Math.ceil(height),
          transform: `${labelTranslate} scale(var(--tl-scale)) translateX(calc(-1 * var(--space-3))`
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "tl-frame-heading-hit-area", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(FrameLabelInput, { ref: rInput, id, name, isEditing }) })
      }
    );
  };

  // ../../../packages/editor/src/lib/app/shapeutils/TLFrameUtil/TLFrameUtil.tsx
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var TLFrameUtil = class extends TLBoxUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "canBind", () => true);
      __publicField(this, "canEdit", () => true);
      __publicField(this, "canReceiveNewChildrenOfType", (_type) => {
        return true;
      });
      __publicField(this, "canDropShapes", (_shape, _shapes) => {
        return true;
      });
      __publicField(this, "onDragShapesOver", (frame2, shapes) => {
        if (!shapes.every((child) => child.parentId === frame2.id)) {
          this.app.reparentShapesById(
            shapes.map((shape) => shape.id),
            frame2.id
          );
          return { shouldHint: true };
        }
        return { shouldHint: false };
      });
      __publicField(this, "onDragShapesOut", (_shape, shapes) => {
        const parentId = this.app.getShapeById(_shape.parentId);
        const isInGroup = (parentId == null ? void 0 : parentId.type) === "group";
        if (isInGroup) {
          this.app.reparentShapesById(
            shapes.map((shape) => shape.id),
            parentId.id
          );
        } else {
          this.app.reparentShapesById(
            shapes.map((shape) => shape.id),
            this.app.currentPageId
          );
        }
      });
      __publicField(this, "onResizeEnd", (shape) => {
        const bounds = this.app.getPageBounds(shape);
        const children = this.app.getSortedChildIds(shape.id);
        const shapesToReparent = [];
        for (const childId of children) {
          const childBounds = this.app.getPageBoundsById(childId);
          if (!bounds.includes(childBounds)) {
            shapesToReparent.push(childId);
          }
        }
        if (shapesToReparent.length > 0) {
          this.app.reparentShapesById(shapesToReparent, this.app.currentPageId);
        }
      });
    }
    defaultProps() {
      return { opacity: "1", w: 160 * 2, h: 90 * 2, name: "" };
    }
    render(shape) {
      const bounds = this.bounds(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(import_jsx_runtime36.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(SVGContainer, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("rect", { className: "tl-hitarea-stroke", width: bounds.width, height: bounds.height }),
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
            "rect",
            {
              className: "tl-frame__body",
              width: bounds.width,
              height: bounds.height,
              fill: "none"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
          FrameHeading,
          {
            id: shape.id,
            name: shape.props.name,
            width: bounds.width,
            height: bounds.height
          }
        )
      ] });
    }
    toSvg(shape, font, colors) {
      const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
      const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect.setAttribute("width", shape.props.w.toString());
      rect.setAttribute("height", shape.props.h.toString());
      rect.setAttribute("fill", colors.solid);
      rect.setAttribute("opacity", shape.props.opacity);
      rect.setAttribute("stroke", colors.fill.black);
      rect.setAttribute("stroke-width", "1");
      rect.setAttribute("rx", "1");
      rect.setAttribute("ry", "1");
      g3.appendChild(rect);
      const pageRotation = canolicalizeRotation(this.app.getPageRotationById(shape.id));
      const offsetRotation = pageRotation + Math.PI / 4;
      const scaledRotation = (offsetRotation * (2 / Math.PI) + 4) % 4;
      const labelSide = ["top", "left", "bottom", "right"][Math.floor(scaledRotation)];
      let labelTranslate;
      switch (labelSide) {
        case "top":
          labelTranslate = ``;
          break;
        case "right":
          labelTranslate = `translate(${toDomPrecision(shape.props.w)}px, 0px) rotate(90deg)`;
          break;
        case "bottom":
          labelTranslate = `translate(${toDomPrecision(shape.props.w)}px, ${toDomPrecision(
            shape.props.h
          )}px) rotate(180deg)`;
          break;
        case "left":
          labelTranslate = `translate(0px, ${toDomPrecision(shape.props.h)}px) rotate(270deg)`;
          break;
        default:
          labelTranslate = ``;
      }
      const opts = {
        fontSize: 12,
        fontFamily: "Inter, sans-serif",
        textAlign: "start",
        width: shape.props.w + 16,
        height: 30,
        padding: 8,
        lineHeight: 1,
        fontStyle: "normal",
        fontWeight: "normal"
      };
      let textContent = defaultEmptyAs(shape.props.name, "Frame") + String.fromCharCode(8203);
      const lines = this.app.textMeasure.getTextLines(__spreadValues({
        text: textContent,
        wrap: true
      }, opts));
      textContent = lines.length > 1 ? lines[0] + "\u2026" : lines[0];
      const size = this.app.textMeasure.measureText({
        fontSize: 12,
        fontFamily: "Inter, sans-serif",
        lineHeight: 1,
        fontStyle: "normal",
        fontWeight: "normal",
        text: textContent,
        width: "fit-content",
        maxWidth: "unset",
        padding: "0px"
      });
      const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
      text.setAttribute("x", "0");
      text.setAttribute("y", -(8 + size.h / 2) + "px");
      text.setAttribute("font-family", '"Inter", sans-serif');
      text.setAttribute("font-size", "12px");
      text.setAttribute("font-weight", "400");
      text.style.setProperty("transform", labelTranslate);
      text.textContent = textContent;
      const textBg = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      textBg.setAttribute("x", " -4px");
      textBg.setAttribute("y", -(16 + size.h) + "px");
      textBg.setAttribute("width", size.w + 8 + "px");
      textBg.setAttribute("height", size.h + 8 + "px");
      textBg.setAttribute("rx", 4 + "px");
      textBg.setAttribute("ry", 4 + "px");
      textBg.setAttribute("fill", colors.background);
      g3.appendChild(textBg);
      g3.appendChild(text);
      return g3;
    }
    indicator(shape) {
      const bounds = this.bounds(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
        "rect",
        {
          width: toDomPrecision(bounds.width),
          height: toDomPrecision(bounds.height),
          className: `tl-frame-indicator`
        }
      );
    }
  };
  __publicField(TLFrameUtil, "type", "frame");
  var TLFrameShapeDef = defineShape({
    type: "frame",
    getShapeUtil: () => TLFrameUtil,
    validator: frameShapeTypeValidator,
    migrations: frameShapeMigrations
  });

  // ../../../packages/editor/src/lib/app/shapeutils/shared/TextLabel.tsx
  var import_react35 = __toESM(require_react());
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var TextLabel = import_react35.default.memo(function TextLabel2({
    id,
    type,
    text,
    size,
    labelColor,
    font,
    align,
    wrap: wrap2
  }) {
    const {
      rInput,
      isEmpty,
      isEditing,
      isEditableFromHover,
      handleFocus,
      handleChange,
      handleKeyDown,
      handleBlur
    } = useEditableText(id, type, text);
    const isInteractive = isEditing || isEditableFromHover;
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
      "div",
      {
        className: "tl-text-label",
        "data-font": font,
        "data-align": align,
        "data-hastext": !isEmpty,
        "data-isediting": isEditing,
        "data-textwrap": !!wrap2,
        children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(
          "div",
          {
            className: "tl-text-label__inner",
            style: {
              fontSize: LABEL_FONT_SIZES[size],
              lineHeight: LABEL_FONT_SIZES[size] * TEXT_PROPS.lineHeight + "px",
              minHeight: isEmpty ? LABEL_FONT_SIZES[size] * TEXT_PROPS.lineHeight + 32 : 0,
              minWidth: isEmpty ? 33 : 0,
              color: labelColor
            },
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "tl-text tl-text-content", dir: "ltr", children: TextHelpers.normalizeTextForDom(text) }),
              isInteractive ? (
                // Consider replacing with content-editable
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(
                  "textarea",
                  {
                    ref: rInput,
                    className: "tl-text tl-text-input",
                    name: "text",
                    tabIndex: -1,
                    autoComplete: "false",
                    autoCapitalize: "false",
                    autoCorrect: "false",
                    autoSave: "false",
                    autoFocus: isEditing,
                    placeholder: "",
                    spellCheck: "true",
                    wrap: "off",
                    dir: "auto",
                    datatype: "wysiwyg",
                    defaultValue: text,
                    onFocus: handleFocus,
                    onChange: handleChange,
                    onKeyDown: handleKeyDown,
                    onBlur: handleBlur,
                    onContextMenu: stopEventPropagation
                  }
                )
              ) : null
            ]
          }
        )
      }
    );
  });

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/DashStyleEllipse.tsx
  var React22 = __toESM(require_react());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var DashStyleEllipse = React22.memo(function DashStyleEllipse2({
    w: w3,
    h: h3,
    strokeWidth: sw,
    dash,
    color,
    fill
  }) {
    const cx = w3 / 2;
    const cy = h3 / 2;
    const rx = Math.max(0, cx - sw / 2);
    const ry = Math.max(0, cy - sw / 2);
    const perimeter = perimeterOfEllipse(rx, ry);
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
      perimeter < 64 ? perimeter * 2 : perimeter,
      sw,
      {
        style: dash,
        snap: 4,
        closed: true
      }
    );
    const d3 = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)(import_jsx_runtime38.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ShapeFill, { d: d3, color, fill }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(
        "path",
        {
          d: d3,
          strokeWidth: sw,
          width: toDomPrecision(w3),
          height: toDomPrecision(h3),
          fill: "none",
          stroke: "currentColor",
          strokeDasharray,
          strokeDashoffset,
          pointerEvents: "all"
        }
      )
    ] });
  });
  function DashStyleEllipseSvg({
    w: w3,
    h: h3,
    strokeWidth: sw,
    dash,
    color,
    colors,
    fill
  }) {
    const cx = w3 / 2;
    const cy = h3 / 2;
    const rx = Math.max(0, cx - sw / 2);
    const ry = Math.max(0, cy - sw / 2);
    const perimeter = perimeterOfEllipse(rx, ry);
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
      perimeter < 64 ? perimeter * 2 : perimeter,
      sw,
      {
        style: dash,
        snap: 4,
        closed: true
      }
    );
    const d3 = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
    const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
    strokeElement.setAttribute("d", d3);
    strokeElement.setAttribute("stroke-width", sw.toString());
    strokeElement.setAttribute("width", w3.toString());
    strokeElement.setAttribute("height", h3.toString());
    strokeElement.setAttribute("fill", "none");
    strokeElement.setAttribute("stroke", colors.fill[color]);
    strokeElement.setAttribute("stroke-dasharray", strokeDasharray);
    strokeElement.setAttribute("stroke-dashoffset", strokeDashoffset);
    const fillElement = getShapeFillSvg({
      d: d3,
      fill,
      color,
      colors
    });
    return getSvgWithShapeFill(strokeElement, fillElement);
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/DashStyleOval.tsx
  var React23 = __toESM(require_react());

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/helpers.ts
  function getOvalSolidPath(w3, h3) {
    if (h3 > w3) {
      const offset2 = w3 / 2;
      return `
    M0,${offset2}
    a${offset2},${offset2},0,1,1,${offset2 * 2},0
    L${w3},${h3 - offset2}
    a${offset2},${offset2},0,1,1,-${offset2 * 2},0
    Z`;
    }
    const offset = h3 / 2;
    return `
    M${offset},0
    L${w3 - offset},0
    a${offset},${offset},0,1,1,0,${offset * 2}
    L${offset},${h3}
    a${offset},${offset},0,1,1,0,${-offset * 2}
    Z`;
  }
  function getOvalPerimeter(h3, w3) {
    if (h3 > w3) {
      const offset2 = w3 / 2;
      return perimeterOfEllipse(offset2, offset2) + (h3 - offset2 * 2) * 2;
    }
    const offset = h3 / 2;
    return perimeterOfEllipse(offset, offset) + (w3 - offset * 2) * 2;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/DashStyleOval.tsx
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var DashStyleOval = React23.memo(function DashStyleOval2({
    w: w3,
    h: h3,
    strokeWidth: sw,
    dash,
    color,
    fill
  }) {
    const d3 = getOvalSolidPath(w3, h3);
    const perimeter = getOvalPerimeter(w3, h3);
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
      perimeter < 64 ? perimeter * 2 : perimeter,
      sw,
      {
        style: dash,
        snap: 4,
        start: "outset",
        end: "outset",
        closed: true
      }
    );
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)(import_jsx_runtime39.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(ShapeFill, { d: d3, color, fill }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
        "path",
        {
          d: d3,
          strokeWidth: sw,
          width: toDomPrecision(w3),
          height: toDomPrecision(h3),
          fill: "none",
          stroke: "currentColor",
          strokeDasharray,
          strokeDashoffset,
          pointerEvents: "all"
        }
      )
    ] });
  });
  function DashStyleOvalSvg({
    w: w3,
    h: h3,
    strokeWidth: sw,
    dash,
    color,
    colors,
    fill
  }) {
    const d3 = getOvalSolidPath(w3, h3);
    const perimeter = getOvalPerimeter(w3, h3);
    const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
      perimeter < 64 ? perimeter * 2 : perimeter,
      sw,
      {
        style: dash,
        snap: 4,
        closed: true
      }
    );
    const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
    strokeElement.setAttribute("d", d3);
    strokeElement.setAttribute("stroke-width", sw.toString());
    strokeElement.setAttribute("width", w3.toString());
    strokeElement.setAttribute("height", h3.toString());
    strokeElement.setAttribute("fill", "none");
    strokeElement.setAttribute("stroke", colors.fill[color]);
    strokeElement.setAttribute("stroke-dasharray", strokeDasharray);
    strokeElement.setAttribute("stroke-dashoffset", strokeDashoffset);
    const fillElement = getShapeFillSvg({
      d: d3,
      fill,
      color,
      colors
    });
    return getSvgWithShapeFill(strokeElement, fillElement);
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/DashStylePolygon.tsx
  var React24 = __toESM(require_react());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var DashStylePolygon = React24.memo(function DashStylePolygon2({
    dash,
    fill,
    color,
    strokeWidth,
    outline,
    lines
  }) {
    const innerPath = "M" + outline[0] + "L" + outline.slice(1) + "Z";
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(import_jsx_runtime40.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(ShapeFill, { d: innerPath, fill, color }),
      lines && lines.map((l3, i3) => /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
        "path",
        {
          className: "tl-hitarea-stroke",
          fill: "none",
          d: `M${l3[0].x},${l3[0].y}L${l3[1].x},${l3[1].y}`
        },
        `line_bg_${i3}`
      )),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("g", { strokeWidth, stroke: "currentColor", fill: "none", pointerEvents: "all", children: [
        Array.from(Array(outline.length)).map((_, i3) => {
          const A2 = outline[i3];
          const B = outline[(i3 + 1) % outline.length];
          const dist = Vec2d.Dist(A2, B);
          const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {
            style: dash,
            start: "outset",
            end: "outset"
          });
          return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
            "line",
            {
              x1: A2.x,
              y1: A2.y,
              x2: B.x,
              y2: B.y,
              strokeDasharray,
              strokeDashoffset
            },
            i3
          );
        }),
        lines && lines.map(([A2, B], i3) => {
          const dist = Vec2d.Dist(A2, B);
          const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {
            style: dash,
            start: "skip",
            end: "outset",
            snap: dash === "dotted" ? 4 : void 0
          });
          return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
            "path",
            {
              d: `M${A2.x},${A2.y}L${B.x},${B.y}`,
              stroke: "currentColor",
              strokeWidth,
              fill: "none",
              strokeDasharray,
              strokeDashoffset
            },
            `line_fg_${i3}`
          );
        })
      ] })
    ] });
  });
  function DashStylePolygonSvg({
    dash,
    fill,
    color,
    colors,
    strokeWidth,
    outline,
    lines
  }) {
    const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "g");
    strokeElement.setAttribute("stroke-width", strokeWidth.toString());
    strokeElement.setAttribute("stroke", colors.fill[color]);
    strokeElement.setAttribute("fill", "none");
    Array.from(Array(outline.length)).forEach((_, i3) => {
      const A2 = outline[i3];
      const B = outline[(i3 + 1) % outline.length];
      const dist = Vec2d.Dist(A2, B);
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {
        style: dash
      });
      const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
      line.setAttribute("x1", A2.x.toString());
      line.setAttribute("y1", A2.y.toString());
      line.setAttribute("x2", B.x.toString());
      line.setAttribute("y2", B.y.toString());
      line.setAttribute("stroke-dasharray", strokeDasharray.toString());
      line.setAttribute("stroke-dashoffset", strokeDashoffset.toString());
      strokeElement.appendChild(line);
    });
    if (lines) {
      for (const [A2, B] of lines) {
        const dist = Vec2d.Dist(A2, B);
        const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(dist, strokeWidth, {
          style: dash,
          start: "skip",
          end: "skip",
          snap: dash === "dotted" ? 4 : 2
        });
        const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
        line.setAttribute("x1", A2.x.toString());
        line.setAttribute("y1", A2.y.toString());
        line.setAttribute("x2", B.x.toString());
        line.setAttribute("y2", B.y.toString());
        line.setAttribute("stroke-dasharray", strokeDasharray.toString());
        line.setAttribute("stroke-dashoffset", strokeDashoffset.toString());
        strokeElement.appendChild(line);
      }
    }
    const fillElement = getShapeFillSvg({
      d: "M" + outline[0] + "L" + outline.slice(1) + "Z",
      fill,
      color,
      colors
    });
    return getSvgWithShapeFill(strokeElement, fillElement);
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/DrawStyleEllipse.tsx
  var React25 = __toESM(require_react());
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var DrawStyleEllipse = React25.memo(function DrawStyleEllipse2({
    id,
    w: w3,
    h: h3,
    strokeWidth: sw,
    fill,
    color
  }) {
    const innerPath = getEllipseIndicatorPath(id, w3, h3, sw);
    const outerPath = getEllipsePath(id, w3, h3, sw);
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(import_jsx_runtime41.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ShapeFill, { d: innerPath, color, fill }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("path", { d: outerPath, fill: "currentColor", strokeWidth: 0, pointerEvents: "all" })
    ] });
  });
  function DrawStyleEllipseSvg({
    id,
    w: w3,
    h: h3,
    strokeWidth: sw,
    fill,
    color,
    colors
  }) {
    const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
    strokeElement.setAttribute("d", getEllipsePath(id, w3, h3, sw));
    strokeElement.setAttribute("fill", colors.fill[color]);
    const fillElement = getShapeFillSvg({
      d: getEllipseIndicatorPath(id, w3, h3, sw),
      fill,
      color,
      colors
    });
    return getSvgWithShapeFill(strokeElement, fillElement);
  }
  function getEllipseStrokeOptions(strokeWidth) {
    return {
      size: 1 + strokeWidth,
      thinning: 0.25,
      end: { taper: strokeWidth },
      start: { taper: strokeWidth },
      streamline: 0,
      smoothing: 1,
      simulatePressure: false
    };
  }
  function getEllipseStrokePoints(id, width, height, strokeWidth) {
    const getRandom = rng(id);
    const rx = width / 2;
    const ry = height / 2;
    const perimeter = perimeterOfEllipse(rx, ry);
    const points2 = [];
    const start = PI2 * getRandom();
    const length = PI2 + TAU / 2 + Math.abs(getRandom()) * TAU;
    const count = Math.max(16, perimeter / 10);
    for (let i3 = 0; i3 < count; i3++) {
      const t4 = i3 / (count - 1);
      const r3 = start + t4 * length;
      const c3 = Math.cos(r3);
      const s3 = Math.sin(r3);
      points2.push(
        new Vec2d(
          rx * c3 + width * 0.5 + 0.05 * getRandom(),
          ry * s3 + height / 2 + 0.05 * getRandom(),
          Math.min(
            1,
            0.5 + Math.abs(0.5 - (getRandom() > 0 ? EASINGS.easeInOutSine(t4) : EASINGS.easeInExpo(t4))) / 2
          )
        )
      );
    }
    return getStrokePoints(points2, getEllipseStrokeOptions(strokeWidth));
  }
  function getEllipsePath(id, width, height, strokeWidth) {
    const options = getEllipseStrokeOptions(strokeWidth);
    return getSvgPathFromStroke(
      getStrokeOutlinePoints(
        setStrokePointRadii(getEllipseStrokePoints(id, width, height, strokeWidth), options),
        options
      )
    );
  }
  function getEllipseIndicatorPath(id, width, height, strokeWidth) {
    return getSvgPathFromStrokePoints(getEllipseStrokePoints(id, width, height, strokeWidth));
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/DrawStylePolygon.tsx
  var React26 = __toESM(require_react());
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var DrawStylePolygon = React26.memo(function DrawStylePolygon2({
    id,
    outline,
    lines,
    fill,
    color,
    strokeWidth
  }) {
    const polygonPoints = getRoundedPolygonPoints(id, outline, strokeWidth / 3, strokeWidth * 2, 2);
    let strokePathData = getRoundedInkyPolygonPath(polygonPoints);
    if (lines) {
      for (const [A2, B] of lines) {
        strokePathData += `M${A2.x},${A2.y}L${B.x},${B.y}`;
      }
    }
    const innerPolygonPoints = getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1);
    const innerPathData = getRoundedInkyPolygonPath(innerPolygonPoints);
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)(import_jsx_runtime42.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ShapeFill, { d: innerPathData, fill, color }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("path", { d: strokePathData, stroke: "currentColor", strokeWidth, fill: "none" })
    ] });
  });
  function DrawStylePolygonSvg({
    id,
    outline,
    lines,
    fill,
    color,
    colors,
    strokeWidth
  }) {
    const polygonPoints = getRoundedPolygonPoints(id, outline, strokeWidth / 3, strokeWidth * 2, 2);
    let strokePathData = getRoundedInkyPolygonPath(polygonPoints);
    if (lines) {
      for (const [A2, B] of lines) {
        strokePathData += `M${A2.x},${A2.y}L${B.x},${B.y}`;
      }
    }
    const innerPolygonPoints = getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1);
    const innerPathData = getRoundedInkyPolygonPath(innerPolygonPoints);
    const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
    strokeElement.setAttribute("d", strokePathData);
    strokeElement.setAttribute("fill", "none");
    strokeElement.setAttribute("stroke", colors.fill[color]);
    strokeElement.setAttribute("stroke-width", strokeWidth.toString());
    const fillElement = getShapeFillSvg({
      d: innerPathData,
      fill,
      color,
      colors
    });
    return getSvgWithShapeFill(strokeElement, fillElement);
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/SolidStyleEllipse.tsx
  var React27 = __toESM(require_react());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var SolidStyleEllipse = React27.memo(function SolidStyleEllipse2({
    w: w3,
    h: h3,
    strokeWidth: sw,
    fill,
    color
  }) {
    const cx = w3 / 2;
    const cy = h3 / 2;
    const rx = Math.max(0, cx);
    const ry = Math.max(0, cy);
    const d3 = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(import_jsx_runtime43.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ShapeFill, { d: d3, color, fill }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("path", { d: d3, stroke: `var(--palette-${color})`, strokeWidth: sw, fill: "none" })
    ] });
  });
  function SolidStyleEllipseSvg({
    w: w3,
    h: h3,
    strokeWidth: sw,
    fill,
    color,
    colors
  }) {
    const cx = w3 / 2;
    const cy = h3 / 2;
    const rx = Math.max(0, cx);
    const ry = Math.max(0, cy);
    const d3 = `M${cx - rx},${cy}a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`;
    const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
    strokeElement.setAttribute("d", d3);
    strokeElement.setAttribute("stroke-width", sw.toString());
    strokeElement.setAttribute("width", w3.toString());
    strokeElement.setAttribute("height", h3.toString());
    strokeElement.setAttribute("fill", "none");
    strokeElement.setAttribute("stroke", colors.fill[color]);
    const fillElement = getShapeFillSvg({
      d: d3,
      fill,
      color,
      colors
    });
    return getSvgWithShapeFill(strokeElement, fillElement);
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/SolidStyleOval.tsx
  var React28 = __toESM(require_react());
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var SolidStyleOval = React28.memo(function SolidStyleOval2({
    w: w3,
    h: h3,
    strokeWidth: sw,
    fill,
    color
  }) {
    const d3 = getOvalIndicatorPath(w3, h3);
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(import_jsx_runtime44.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(ShapeFill, { d: d3, color, fill }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("path", { d: d3, stroke: `var(--palette-${color})`, strokeWidth: sw, fill: "none" })
    ] });
  });
  function SolidStyleOvalSvg({
    w: w3,
    h: h3,
    strokeWidth: sw,
    fill,
    color,
    colors
  }) {
    const d3 = getOvalIndicatorPath(w3, h3);
    const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
    strokeElement.setAttribute("d", d3);
    strokeElement.setAttribute("stroke-width", sw.toString());
    strokeElement.setAttribute("width", w3.toString());
    strokeElement.setAttribute("height", h3.toString());
    strokeElement.setAttribute("fill", "none");
    strokeElement.setAttribute("stroke", colors.fill[color]);
    const fillElement = getShapeFillSvg({
      d: d3,
      fill,
      color,
      colors
    });
    return getSvgWithShapeFill(strokeElement, fillElement);
  }
  function getOvalIndicatorPath(w3, h3) {
    let d3;
    if (h3 > w3) {
      const offset = w3 / 2;
      d3 = `
    M0,${offset}
    a${offset},${offset},0,1,1,${offset * 2},0
    L${w3},${h3 - offset}
    a${offset},${offset},0,1,1,-${offset * 2},0
    Z`;
    } else {
      const offset = h3 / 2;
      d3 = `
    M${offset},0
    L${w3 - offset},0
    a${offset},${offset},0,1,1,0,${offset * 2}
    L${offset},${h3}
    a${offset},${offset},0,1,1,0,${-offset * 2}
    Z`;
    }
    return d3;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/components/SolidStylePolygon.tsx
  var React29 = __toESM(require_react());
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var SolidStylePolygon = React29.memo(function SolidStylePolygon2({
    outline,
    lines,
    fill,
    color,
    strokeWidth
  }) {
    let path = "M" + outline[0] + "L" + outline.slice(1) + "Z";
    if (lines) {
      for (const [A2, B] of lines) {
        path += `M${A2.x},${A2.y}L${B.x},${B.y}`;
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(import_jsx_runtime45.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(ShapeFill, { d: path, fill, color }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("path", { d: path, stroke: `var(--palette-${color}`, strokeWidth, fill: "none" })
    ] });
  });
  function SolidStylePolygonSvg({
    outline,
    lines,
    fill,
    color,
    strokeWidth,
    colors
  }) {
    const pathData = "M" + outline[0] + "L" + outline.slice(1) + "Z";
    const fillPathData = pathData;
    let strokePathData = pathData;
    if (lines) {
      for (const [A2, B] of lines) {
        strokePathData += `M${A2.x},${A2.y}L${B.x},${B.y}`;
      }
    }
    const strokeElement = document.createElementNS("http://www.w3.org/2000/svg", "path");
    strokeElement.setAttribute("d", strokePathData);
    strokeElement.setAttribute("stroke-width", strokeWidth.toString());
    strokeElement.setAttribute("stroke", colors.fill[color]);
    strokeElement.setAttribute("fill", "none");
    const fillElement = getShapeFillSvg({
      d: fillPathData,
      fill,
      color,
      colors
    });
    return getSvgWithShapeFill(strokeElement, fillElement);
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGeoUtil/TLGeoUtil.tsx
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var LABEL_PADDING = 16;
  var MIN_SIZE_WITH_LABEL = 17 * 3;
  var TLGeoUtil = class extends TLBoxUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "canEdit", () => true);
      __publicField(this, "onEditEnd", (shape) => {
        const {
          id,
          type,
          props: { text }
        } = shape;
        if (text.trimEnd() !== shape.props.text) {
          this.app.updateShapes([
            {
              id,
              type,
              props: {
                text: text.trimEnd()
              }
            }
          ]);
        }
      });
      __publicField(this, "onResize", (shape, { initialBounds, handle, newPoint, scaleX, scaleY }) => {
        let w3 = initialBounds.width * scaleX;
        let h3 = initialBounds.height * scaleY;
        let overShrinkX = 0;
        let overShrinkY = 0;
        if (shape.props.text.trim()) {
          let newW = Math.max(Math.abs(w3), MIN_SIZE_WITH_LABEL);
          let newH = Math.max(Math.abs(h3), MIN_SIZE_WITH_LABEL);
          if (newW < MIN_SIZE_WITH_LABEL && newH === MIN_SIZE_WITH_LABEL) {
            newW = MIN_SIZE_WITH_LABEL;
          }
          if (newW === MIN_SIZE_WITH_LABEL && newH < MIN_SIZE_WITH_LABEL) {
            newH = MIN_SIZE_WITH_LABEL;
          }
          const labelSize = getLabelSize(this.app, __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, shape.props), {
              w: newW,
              h: newH
            })
          }));
          const nextW = Math.max(Math.abs(w3), labelSize.w) * Math.sign(w3);
          const nextH = Math.max(Math.abs(h3), labelSize.h) * Math.sign(h3);
          overShrinkX = Math.abs(nextW) - Math.abs(w3);
          overShrinkY = Math.abs(nextH) - Math.abs(h3);
          w3 = nextW;
          h3 = nextH;
        }
        const offset = new Vec2d(0, 0);
        if (scaleX < 0) {
          offset.x += w3;
        }
        if (handle === "left" || handle === "top_left" || handle === "bottom_left") {
          offset.x += scaleX < 0 ? overShrinkX : -overShrinkX;
        }
        if (scaleY < 0) {
          offset.y += h3;
        }
        if (handle === "top" || handle === "top_left" || handle === "top_right") {
          offset.y += scaleY < 0 ? overShrinkY : -overShrinkY;
        }
        const { x: x3, y: y3 } = offset.rot(shape.rotation).add(newPoint);
        return {
          x: x3,
          y: y3,
          props: {
            w: Math.max(Math.abs(w3), 1),
            h: Math.max(Math.abs(h3), 1),
            growY: 0
          }
        };
      });
      __publicField(this, "onBeforeCreate", (shape) => {
        if (!shape.props.text) {
          if (shape.props.growY) {
            return __spreadProps(__spreadValues({}, shape), {
              props: __spreadProps(__spreadValues({}, shape.props), {
                growY: 0
              })
            });
          } else {
            return;
          }
        }
        const prevHeight = shape.props.h;
        const nextHeight = getLabelSize(this.app, shape).h;
        let growY = null;
        if (nextHeight > prevHeight) {
          growY = nextHeight - prevHeight;
        } else {
          if (shape.props.growY) {
            growY = 0;
          }
        }
        if (growY !== null) {
          return __spreadProps(__spreadValues({}, shape), {
            props: __spreadProps(__spreadValues({}, shape.props), {
              growY
            })
          });
        }
      });
      __publicField(this, "onBeforeUpdate", (prev, next) => {
        const prevText = prev.props.text.trimEnd();
        const nextText = next.props.text.trimEnd();
        if (prevText === nextText && prev.props.font === next.props.font && prev.props.size === next.props.size) {
          return;
        }
        if (prevText && !nextText) {
          return __spreadProps(__spreadValues({}, next), {
            props: __spreadProps(__spreadValues({}, next.props), {
              growY: 0
            })
          });
        }
        const prevWidth = prev.props.w;
        const prevHeight = prev.props.h;
        const nextSize = getLabelSize(this.app, next);
        const nextWidth = nextSize.w;
        const nextHeight = nextSize.h;
        if (!prevText && nextText && nextText.length === 1) {
          let w3 = Math.max(prevWidth, nextWidth);
          let h3 = Math.max(prevHeight, nextHeight);
          if (prev.props.w < MIN_SIZE_WITH_LABEL && prev.props.h < MIN_SIZE_WITH_LABEL) {
            w3 = Math.max(w3, MIN_SIZE_WITH_LABEL);
            h3 = Math.max(h3, MIN_SIZE_WITH_LABEL);
            w3 = Math.max(w3, h3);
            h3 = Math.max(w3, h3);
          }
          return __spreadProps(__spreadValues({}, next), {
            props: __spreadProps(__spreadValues({}, next.props), {
              w: w3,
              h: h3,
              growY: 0
            })
          });
        }
        let growY = null;
        if (nextHeight > prevHeight) {
          growY = nextHeight - prevHeight;
        } else {
          if (prev.props.growY) {
            growY = 0;
          }
        }
        if (growY !== null) {
          return __spreadProps(__spreadValues({}, next), {
            props: __spreadProps(__spreadValues({}, next.props), {
              growY,
              w: Math.max(next.props.w, nextWidth)
            })
          });
        }
        if (nextWidth > prev.props.w) {
          return __spreadProps(__spreadValues({}, next), {
            props: __spreadProps(__spreadValues({}, next.props), {
              w: nextWidth
            })
          });
        }
      });
      __publicField(this, "onDoubleClick", (shape) => {
        if (this.app.inputs.altKey) {
          switch (shape.props.geo) {
            case "rectangle": {
              return __spreadProps(__spreadValues({}, shape), {
                props: {
                  geo: "check-box"
                }
              });
            }
            case "check-box": {
              return __spreadProps(__spreadValues({}, shape), {
                props: {
                  geo: "rectangle"
                }
              });
            }
          }
        }
        return;
      });
    }
    defaultProps() {
      return {
        w: 100,
        h: 100,
        geo: "rectangle",
        color: "black",
        labelColor: "black",
        fill: "none",
        dash: "draw",
        size: "m",
        opacity: "1",
        font: "draw",
        text: "",
        align: "middle",
        growY: 0,
        url: ""
      };
    }
    hitTestLineSegment(shape, A2, B) {
      const outline = this.outline(shape);
      for (let i3 = 0; i3 < outline.length; i3++) {
        const C2 = outline[i3];
        const D3 = outline[(i3 + 1) % outline.length];
        if (linesIntersect(A2, B, C2, D3))
          return true;
      }
      const lines = getLines(shape.props, 0);
      if (lines !== void 0) {
        for (const [C2, D3] of lines) {
          if (linesIntersect(A2, B, C2, D3))
            return true;
        }
      }
      return false;
    }
    hitTestPoint(shape, point2) {
      const outline = this.outline(shape);
      if (shape.props.fill === "none") {
        const zoomLevel = this.app.zoomLevel;
        const offsetDist = this.app.getStrokeWidth(shape.props.size) / zoomLevel;
        for (let i3 = 0; i3 < outline.length; i3++) {
          const C2 = outline[i3];
          const D3 = outline[(i3 + 1) % outline.length];
          if (Vec2d.DistanceToLineSegment(C2, D3, point2) < offsetDist)
            return true;
        }
        const lines = getLines(shape.props, 1);
        if (lines !== void 0) {
          for (const [C2, D3] of lines) {
            if (Vec2d.DistanceToLineSegment(C2, D3, point2) < offsetDist)
              return true;
          }
        }
        return false;
      }
      return pointInPolygon(point2, outline);
    }
    getBounds(shape) {
      return new Box2d(0, 0, shape.props.w, shape.props.h + shape.props.growY);
    }
    getCenter(shape) {
      return new Vec2d(shape.props.w / 2, (shape.props.h + shape.props.growY) / 2);
    }
    getOutline(shape) {
      const w3 = Math.max(1, shape.props.w);
      const h3 = Math.max(1, shape.props.h + shape.props.growY);
      const cx = w3 / 2;
      const cy = h3 / 2;
      switch (shape.props.geo) {
        case "triangle": {
          return [new Vec2d(cx, 0), new Vec2d(w3, h3), new Vec2d(0, h3)];
        }
        case "diamond": {
          return [new Vec2d(cx, 0), new Vec2d(w3, cy), new Vec2d(cx, h3), new Vec2d(0, cy)];
        }
        case "pentagon": {
          return getPolygonVertices(w3, h3, 5);
        }
        case "hexagon": {
          return getPolygonVertices(w3, h3, 6);
        }
        case "octagon": {
          return getPolygonVertices(w3, h3, 8);
        }
        case "ellipse": {
          const q = Math.pow(cx - cy, 2) / Math.pow(cx + cy, 2);
          const p3 = PI * (cx + cy) * (1 + 3 * q / (10 + Math.sqrt(4 - 3 * q)));
          let len = Math.max(4, Math.ceil(p3 / 10));
          len = Math.ceil(len / 4) * 4;
          const step = PI2 / len;
          const a3 = Math.cos(step);
          const b3 = Math.sin(step);
          let sin = 0;
          let cos = 1;
          let ts = 0;
          let tc = 1;
          const points2 = Array(len);
          for (let i3 = 0; i3 < len; i3++) {
            points2[i3] = new Vec2d(cx + cx * cos, cy + cy * sin);
            ts = b3 * cos + a3 * sin;
            tc = a3 * cos - b3 * sin;
            sin = ts;
            cos = tc;
          }
          return points2;
        }
        case "oval": {
          const len = 10;
          const points2 = Array(len * 2);
          if (h3 > w3) {
            for (let i3 = 0; i3 < len; i3++) {
              const t1 = -PI + PI * i3 / (len - 2);
              const t22 = PI * i3 / (len - 2);
              points2[i3] = new Vec2d(cx + cx * Math.cos(t1), cx + cx * Math.sin(t1));
              points2[i3 + len] = new Vec2d(cx + cx * Math.cos(t22), h3 - cx + cx * Math.sin(t22));
            }
          } else {
            for (let i3 = 0; i3 < len; i3++) {
              const t1 = -TAU + PI * i3 / (len - 2);
              const t22 = TAU + PI * -i3 / (len - 2);
              points2[i3] = new Vec2d(w3 - cy + cy * Math.cos(t1), h3 - cy + cy * Math.sin(t1));
              points2[i3 + len] = new Vec2d(cy - cy * Math.cos(t22), h3 - cy + cy * Math.sin(t22));
            }
          }
          return points2;
        }
        case "star": {
          const sides = 5;
          const step = PI2 / sides / 2;
          const rightMostIndex = Math.floor(sides / 4) * 2;
          const leftMostIndex = sides * 2 - rightMostIndex;
          const topMostIndex = 0;
          const bottomMostIndex = Math.floor(sides / 2) * 2;
          const maxX = Math.cos(-TAU + rightMostIndex * step) * w3 / 2;
          const minX = Math.cos(-TAU + leftMostIndex * step) * w3 / 2;
          const minY = Math.sin(-TAU + topMostIndex * step) * h3 / 2;
          const maxY = Math.sin(-TAU + bottomMostIndex * step) * h3 / 2;
          const diffX = w3 - Math.abs(maxX - minX);
          const diffY = h3 - Math.abs(maxY - minY);
          const offsetX = w3 / 2 + minX - (w3 / 2 - maxX);
          const offsetY = h3 / 2 + minY - (h3 / 2 - maxY);
          const ratio = 1;
          const cx2 = (w3 - offsetX) / 2;
          const cy2 = (h3 - offsetY) / 2;
          const ox = (w3 + diffX) / 2;
          const oy = (h3 + diffY) / 2;
          const ix = ox * ratio / 2;
          const iy = oy * ratio / 2;
          return Array.from(Array(sides * 2)).map((_, i3) => {
            const theta = -TAU + i3 * step;
            return new Vec2d(
              cx2 + (i3 % 2 ? ix : ox) * Math.cos(theta),
              cy2 + (i3 % 2 ? iy : oy) * Math.sin(theta)
            );
          });
        }
        case "rhombus": {
          const offset = Math.min(w3 * 0.38, h3 * 0.38);
          return [new Vec2d(offset, 0), new Vec2d(w3, 0), new Vec2d(w3 - offset, h3), new Vec2d(0, h3)];
        }
        case "rhombus-2": {
          const offset = Math.min(w3 * 0.38, h3 * 0.38);
          return [new Vec2d(0, 0), new Vec2d(w3 - offset, 0), new Vec2d(w3, h3), new Vec2d(offset, h3)];
        }
        case "trapezoid": {
          const offset = Math.min(w3 * 0.38, h3 * 0.38);
          return [new Vec2d(offset, 0), new Vec2d(w3 - offset, 0), new Vec2d(w3, h3), new Vec2d(0, h3)];
        }
        case "arrow-right": {
          const ox = Math.min(w3, h3) * 0.38;
          const oy = h3 * 0.16;
          return [
            new Vec2d(0, oy),
            new Vec2d(w3 - ox, oy),
            new Vec2d(w3 - ox, 0),
            new Vec2d(w3, h3 / 2),
            new Vec2d(w3 - ox, h3),
            new Vec2d(w3 - ox, h3 - oy),
            new Vec2d(0, h3 - oy)
          ];
        }
        case "arrow-left": {
          const ox = Math.min(w3, h3) * 0.38;
          const oy = h3 * 0.16;
          return [
            new Vec2d(ox, 0),
            new Vec2d(ox, oy),
            new Vec2d(w3, oy),
            new Vec2d(w3, h3 - oy),
            new Vec2d(ox, h3 - oy),
            new Vec2d(ox, h3),
            new Vec2d(0, h3 / 2)
          ];
        }
        case "arrow-up": {
          const ox = w3 * 0.16;
          const oy = Math.min(w3, h3) * 0.38;
          return [
            new Vec2d(w3 / 2, 0),
            new Vec2d(w3, oy),
            new Vec2d(w3 - ox, oy),
            new Vec2d(w3 - ox, h3),
            new Vec2d(ox, h3),
            new Vec2d(ox, oy),
            new Vec2d(0, oy)
          ];
        }
        case "arrow-down": {
          const ox = w3 * 0.16;
          const oy = Math.min(w3, h3) * 0.38;
          return [
            new Vec2d(ox, 0),
            new Vec2d(w3 - ox, 0),
            new Vec2d(w3 - ox, h3 - oy),
            new Vec2d(w3, h3 - oy),
            new Vec2d(w3 / 2, h3),
            new Vec2d(0, h3 - oy),
            new Vec2d(ox, h3 - oy)
          ];
        }
        case "check-box":
        case "x-box":
        case "rectangle": {
          return [new Vec2d(0, 0), new Vec2d(w3, 0), new Vec2d(w3, h3), new Vec2d(0, h3)];
        }
      }
    }
    render(shape) {
      const { id, type, props } = shape;
      const forceSolid = useForceSolid();
      const strokeWidth = this.app.getStrokeWidth(props.size);
      const { w: w3, color, labelColor, fill, dash, growY, font, align, size, text } = props;
      const getShape = () => {
        const h3 = props.h + growY;
        switch (props.geo) {
          case "ellipse": {
            if (dash === "solid" || dash === "draw" && forceSolid) {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SolidStyleEllipse, { strokeWidth, w: w3, h: h3, color, fill });
            } else if (dash === "dashed" || dash === "dotted") {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
                DashStyleEllipse,
                {
                  id,
                  strokeWidth,
                  w: w3,
                  h: h3,
                  dash: dash === "dashed" ? dash : size === "s" && forceSolid ? "dashed" : dash,
                  color,
                  fill
                }
              );
            } else if (dash === "draw") {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SolidStyleEllipse, { strokeWidth, w: w3, h: h3, color, fill });
            }
            break;
          }
          case "oval": {
            if (dash === "solid" || dash === "draw" && forceSolid) {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SolidStyleOval, { strokeWidth, w: w3, h: h3, color, fill });
            } else if (dash === "dashed" || dash === "dotted") {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
                DashStyleOval,
                {
                  id,
                  strokeWidth,
                  w: w3,
                  h: h3,
                  dash: dash === "dashed" ? dash : size === "s" && forceSolid ? "dashed" : dash,
                  color,
                  fill
                }
              );
            } else if (dash === "draw") {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SolidStyleOval, { strokeWidth, w: w3, h: h3, color, fill });
            }
            break;
          }
          default: {
            const outline = this.outline(shape);
            const lines = getLines(shape.props, strokeWidth);
            if (dash === "solid" || dash === "draw" && forceSolid) {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
                SolidStylePolygon,
                {
                  fill,
                  color,
                  strokeWidth,
                  outline,
                  lines
                }
              );
            } else if (dash === "dashed" || dash === "dotted") {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
                DashStylePolygon,
                {
                  dash: dash === "dashed" ? dash : size === "s" && forceSolid ? "dashed" : dash,
                  fill,
                  color,
                  strokeWidth,
                  outline,
                  lines
                }
              );
            } else if (dash === "draw") {
              return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
                DrawStylePolygon,
                {
                  id,
                  fill,
                  color,
                  strokeWidth,
                  outline,
                  lines
                }
              );
            }
          }
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(import_jsx_runtime46.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SVGContainer, { id, children: getShape() }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
          TextLabel,
          {
            id,
            type,
            font,
            fill,
            size,
            align,
            text,
            labelColor: this.app.getCssColor(labelColor),
            wrap: true
          }
        ),
        "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.app.zoomLevel })
      ] });
    }
    indicator(shape) {
      const { id, props } = shape;
      const { w: w3, h: h3, growY, size } = props;
      const forceSolid = useForceSolid();
      const strokeWidth = this.app.getStrokeWidth(size);
      switch (props.geo) {
        case "ellipse": {
          if (props.dash === "draw" && !forceSolid) {
            return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("path", { d: getEllipseIndicatorPath(id, w3, h3 + growY, strokeWidth) });
          }
          return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("ellipse", { cx: w3 / 2, cy: (h3 + growY) / 2, rx: w3 / 2, ry: (h3 + growY) / 2 });
        }
        case "oval": {
          return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("path", { d: getOvalIndicatorPath(w3, h3 + growY) });
        }
        default: {
          const outline = this.outline(shape);
          let path;
          if (props.dash === "draw" && !forceSolid) {
            const polygonPoints = getRoundedPolygonPoints(id, outline, 0, strokeWidth * 2, 1);
            path = getRoundedInkyPolygonPath(polygonPoints);
          } else {
            path = "M" + outline[0] + "L" + outline.slice(1) + "Z";
          }
          const lines = getLines(shape.props, strokeWidth);
          if (lines) {
            for (const [A2, B] of lines) {
              path += `M${A2.x},${A2.y}L${B.x},${B.y}`;
            }
          }
          return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("path", { d: path });
        }
      }
    }
    toSvg(shape, font, colors) {
      const { id, props } = shape;
      const strokeWidth = this.app.getStrokeWidth(props.size);
      let svgElm;
      switch (props.geo) {
        case "ellipse": {
          switch (props.dash) {
            case "draw":
              svgElm = DrawStyleEllipseSvg({
                id,
                w: props.w,
                h: props.h,
                color: props.color,
                fill: props.fill,
                strokeWidth,
                colors
              });
              break;
            case "solid":
              svgElm = SolidStyleEllipseSvg({
                strokeWidth,
                w: props.w,
                h: props.h,
                color: props.color,
                fill: props.fill,
                colors
              });
              break;
            default:
              svgElm = DashStyleEllipseSvg({
                id,
                strokeWidth,
                w: props.w,
                h: props.h,
                dash: props.dash,
                color: props.color,
                fill: props.fill,
                colors
              });
              break;
          }
          break;
        }
        case "oval": {
          switch (props.dash) {
            case "draw":
              svgElm = DashStyleOvalSvg({
                id,
                strokeWidth,
                w: props.w,
                h: props.h,
                dash: props.dash,
                color: props.color,
                fill: props.fill,
                colors
              });
              break;
            case "solid":
              svgElm = SolidStyleOvalSvg({
                strokeWidth,
                w: props.w,
                h: props.h,
                color: props.color,
                fill: props.fill,
                colors
              });
              break;
            default:
              svgElm = DashStyleOvalSvg({
                id,
                strokeWidth,
                w: props.w,
                h: props.h,
                dash: props.dash,
                color: props.color,
                fill: props.fill,
                colors
              });
          }
          break;
        }
        default: {
          const outline = this.outline(shape);
          const lines = getLines(shape.props, strokeWidth);
          switch (props.dash) {
            case "draw":
              svgElm = DrawStylePolygonSvg({
                id,
                fill: props.fill,
                color: props.color,
                strokeWidth,
                outline,
                lines,
                colors
              });
              break;
            case "solid":
              svgElm = SolidStylePolygonSvg({
                fill: props.fill,
                color: props.color,
                strokeWidth,
                outline,
                lines,
                colors
              });
              break;
            default:
              svgElm = DashStylePolygonSvg({
                dash: props.dash,
                fill: props.fill,
                color: props.color,
                strokeWidth,
                outline,
                lines,
                colors
              });
              break;
          }
          break;
        }
      }
      if (props.text) {
        const bounds = this.bounds(shape);
        const opts = {
          fontSize: LABEL_FONT_SIZES[shape.props.size],
          fontFamily: font,
          textAlign: shape.props.align,
          padding: 16,
          lineHeight: TEXT_PROPS.lineHeight,
          fontStyle: "normal",
          fontWeight: "normal",
          width: Math.ceil(bounds.width),
          height: Math.ceil(bounds.height)
        };
        const lines = this.app.textMeasure.getTextLines(__spreadValues({
          text: props.text,
          wrap: true
        }, opts));
        const groupEl = document.createElementNS("http://www.w3.org/2000/svg", "g");
        const labelSize = getLabelSize(this.app, shape);
        const textBgEl = getTextSvgElement(this.app, __spreadProps(__spreadValues({}, opts), {
          lines,
          strokeWidth: 2,
          stroke: colors.background,
          fill: colors.background,
          width: labelSize.w
        }));
        textBgEl.setAttribute("transform", `translate(${(bounds.width - labelSize.w) / 2}, 0)`);
        const textElm = textBgEl.cloneNode(true);
        textElm.setAttribute("fill", colors.fill[shape.props.labelColor]);
        textElm.setAttribute("stroke", "none");
        groupEl.append(textBgEl);
        groupEl.append(textElm);
        if (svgElm.nodeName === "g") {
          svgElm.appendChild(groupEl);
          return svgElm;
        } else {
          const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
          g3.appendChild(svgElm);
          g3.appendChild(groupEl);
          return g3;
        }
      }
      return svgElm;
    }
  };
  __publicField(TLGeoUtil, "type", "geo");
  function getLabelSize(app, shape) {
    const text = shape.props.text.trimEnd();
    if (!text) {
      return { w: 0, h: 0 };
    }
    const minSize = app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
      text: "w",
      fontFamily: FONT_FAMILIES[shape.props.font],
      fontSize: LABEL_FONT_SIZES[shape.props.size],
      width: "fit-content",
      maxWidth: "100px"
    }));
    const sizes = {
      s: 2,
      m: 3.5,
      l: 5,
      xl: 10
    };
    const size = app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
      text,
      fontFamily: FONT_FAMILIES[shape.props.font],
      fontSize: LABEL_FONT_SIZES[shape.props.size],
      width: "fit-content",
      minWidth: minSize.w + "px",
      maxWidth: Math.max(
        // Guard because a DOM nodes can't be less 0
        0,
        // A 'w' width that we're setting as the min-width
        Math.ceil(minSize.w + sizes[shape.props.size]),
        // The actual text size
        Math.ceil(shape.props.w - LABEL_PADDING * 2)
      ) + "px"
    }));
    return {
      w: size.w + LABEL_PADDING * 2,
      h: size.h + LABEL_PADDING * 2
    };
  }
  function getLines(props, sw) {
    switch (props.geo) {
      case "x-box": {
        return getXBoxLines(props.w, props.h, sw, props.dash);
      }
      case "check-box": {
        return getCheckBoxLines(props.w, props.h);
      }
      default: {
        return void 0;
      }
    }
  }
  function getXBoxLines(w3, h3, sw, dash) {
    const inset = dash === "draw" ? 0.62 : 0;
    if (dash === "dashed") {
      return [
        [new Vec2d(0, 0), new Vec2d(w3 / 2, h3 / 2)],
        [new Vec2d(w3, h3), new Vec2d(w3 / 2, h3 / 2)],
        [new Vec2d(0, h3), new Vec2d(w3 / 2, h3 / 2)],
        [new Vec2d(w3, 0), new Vec2d(w3 / 2, h3 / 2)]
      ];
    }
    return [
      [new Vec2d(sw * inset, sw * inset), new Vec2d(w3 - sw * inset, h3 - sw * inset)],
      [new Vec2d(sw * inset, h3 - sw * inset), new Vec2d(w3 - sw * inset, sw * inset)]
    ];
  }
  function getCheckBoxLines(w3, h3) {
    const size = Math.min(w3, h3) * 0.82;
    const ox = (w3 - size) / 2;
    const oy = (h3 - size) / 2;
    return [
      [new Vec2d(ox + size * 0.25, oy + size * 0.52), new Vec2d(ox + size * 0.45, oy + size * 0.82)],
      [new Vec2d(ox + size * 0.45, oy + size * 0.82), new Vec2d(ox + size * 0.82, oy + size * 0.22)]
    ];
  }
  var TLGeoShapeDef = defineShape({
    type: "geo",
    getShapeUtil: () => TLGeoUtil,
    validator: geoShapeTypeValidator,
    migrations: geoShapeMigrations
  });

  // ../../../packages/editor/src/lib/app/shapeutils/shared/DashedOutlineBox.tsx
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  function DashedOutlineBox({
    bounds,
    zoomLevel,
    className
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("g", { className, pointerEvents: "none", strokeLinecap: "round", strokeLinejoin: "round", children: bounds.sides.map((side, i3) => {
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
        side[0].dist(side[1]),
        1 / zoomLevel,
        {
          style: "dashed",
          lengthRatio: 4
        }
      );
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
        "line",
        {
          x1: side[0].x,
          y1: side[0].y,
          x2: side[1].x,
          y2: side[1].y,
          strokeDasharray,
          strokeDashoffset
        },
        i3
      );
    }) });
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLGroupUtil/TLGroupUtil.tsx
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var TLGroupUtil = class extends TLShapeUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "hideSelectionBoundsBg", () => false);
      __publicField(this, "hideSelectionBoundsFg", () => true);
      __publicField(this, "canBind", () => false);
      __publicField(this, "onChildrenChange", (group) => {
        const children = this.app.getSortedChildIds(group.id);
        if (children.length === 0) {
          if (this.app.pageState.focusLayerId === group.id) {
            this.app.popFocusLayer();
          }
          this.app.deleteShapes([group.id]);
          return;
        } else if (children.length === 1) {
          if (this.app.pageState.focusLayerId === group.id) {
            this.app.popFocusLayer();
          }
          this.app.reparentShapesById(children, group.parentId);
          this.app.deleteShapes([group.id]);
          return;
        }
      });
    }
    defaultProps() {
      return { opacity: "1" };
    }
    getBounds(shape) {
      const children = this.app.getSortedChildIds(shape.id);
      if (children.length === 0) {
        return new Box2d();
      }
      const allChildPoints = children.flatMap((childId) => {
        const shape2 = this.app.getShapeById(childId);
        return this.app.getOutlineById(childId).map((point2) => Matrix2d.applyToPoint(this.app.getTransform(shape2), point2));
      });
      return Box2d.FromPoints(allChildPoints);
    }
    getCenter(shape) {
      return this.bounds(shape).center;
    }
    getOutline(shape) {
      return this.bounds(shape).corners;
    }
    render(shape) {
      const {
        erasingIdsSet,
        pageState: { hintingIds, focusLayerId },
        zoomLevel
      } = this.app;
      const isErasing = erasingIdsSet.has(shape.id);
      const isHintingOtherGroup = hintingIds.length > 0 && hintingIds.some((id) => {
        var _a5;
        return id !== shape.id && ((_a5 = this.app.getShapeById(id)) == null ? void 0 : _a5.type) === "group";
      });
      if (
        // always show the outline while we're erasing the group
        !isErasing && // show the outline while the group is focused unless something outside of the group is being hinted
        // this happens dropping shapes from a group onto some outside group
        (shape.id !== focusLayerId || isHintingOtherGroup)
      ) {
        return null;
      }
      const bounds = this.bounds(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(SVGContainer, { id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(DashedOutlineBox, { className: "tl-group", bounds, zoomLevel }) });
    }
    indicator(shape) {
      const {
        camera: { z: zoomLevel }
      } = this.app;
      const bounds = this.bounds(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(DashedOutlineBox, { className: "", bounds, zoomLevel });
    }
  };
  __publicField(TLGroupUtil, "type", "group");
  var TLGroupShapeDef = defineShape({
    type: "group",
    getShapeUtil: () => TLGroupUtil,
    validator: groupShapeTypeValidator,
    migrations: groupShapeMigrations
  });

  // ../../../packages/editor/src/lib/app/shapeutils/TLImageUtil/TLImageUtil.tsx
  var import_react36 = __toESM(require_react());

  // ../../../packages/editor/src/lib/hooks/useIsCropping.ts
  function useIsCropping(shapeId) {
    const app = useApp();
    return useValue("isCropping", () => app.croppingId === shapeId, [app, shapeId]);
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLImageUtil/TLImageUtil.tsx
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var loadImage = (url) => __async(void 0, null, function* () {
    return new Promise((resolve, reject) => {
      const image = new Image();
      image.onload = () => resolve(image);
      image.onerror = () => reject(new Error("Failed to load image"));
      image.crossOrigin = "anonymous";
      image.src = url;
    });
  });
  var getStateFrame = (url) => __async(void 0, null, function* () {
    const image = yield loadImage(url);
    const canvas = document.createElement("canvas");
    canvas.width = image.width;
    canvas.height = image.height;
    const ctx = canvas.getContext("2d");
    if (!ctx)
      return;
    ctx.drawImage(image, 0, 0);
    return canvas.toDataURL();
  });
  function getDataURIFromURL(url) {
    return __async(this, null, function* () {
      const response = yield fetch(url);
      const blob = yield response.blob();
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(blob);
      });
    });
  }
  var TLImageUtil = class extends TLBoxUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "isAspectRatioLocked", () => true);
      __publicField(this, "canCrop", () => true);
      __publicField(this, "onDoubleClick", (shape) => {
        const asset = shape.props.assetId ? this.app.getAssetById(shape.props.assetId) : void 0;
        if (!asset)
          return;
        const canPlay = asset.props.src && "mimeType" in asset.props && asset.props.mimeType === "image/gif";
        if (!canPlay)
          return;
        this.app.updateShapes([
          {
            type: "image",
            id: shape.id,
            props: {
              playing: !shape.props.playing
            }
          }
        ]);
      });
      __publicField(this, "onDoubleClickEdge", (shape) => {
        const props = shape.props;
        if (!props)
          return;
        if (this.app.croppingId !== shape.id) {
          return;
        }
        const crop = deepCopy(props.crop) || {
          topLeft: { x: 0, y: 0 },
          bottomRight: { x: 1, y: 1 }
        };
        const w3 = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
        const h3 = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
        const pointDelta = new Vec2d(crop.topLeft.x * w3, crop.topLeft.y * h3).rot(shape.rotation);
        const partial = {
          id: shape.id,
          type: shape.type,
          x: shape.x - pointDelta.x,
          y: shape.y - pointDelta.y,
          props: {
            crop: {
              topLeft: { x: 0, y: 0 },
              bottomRight: { x: 1, y: 1 }
            },
            w: w3,
            h: h3
          }
        };
        this.app.updateShapes([partial]);
      });
    }
    defaultProps() {
      return {
        opacity: "1",
        w: 100,
        h: 100,
        assetId: null,
        playing: true,
        url: "",
        crop: null
      };
    }
    render(shape) {
      var _a5, _b2;
      const containerStyle = getContainerStyle(shape);
      const isCropping = useIsCropping(shape.id);
      const prefersReducedMotion = usePrefersReducedMotion();
      const [staticFrameSrc, setStaticFrameSrc] = (0, import_react36.useState)("");
      const { Spinner: Spinner2 } = useEditorComponents();
      const { w: w3, h: h3 } = shape.props;
      const asset = shape.props.assetId ? this.app.getAssetById(shape.props.assetId) : void 0;
      if ((asset == null ? void 0 : asset.type) === "bookmark") {
        throw Error("Bookmark assets can't be rendered as images");
      }
      const isSelected = useValue(
        "onlySelectedShape",
        () => {
          var _a6;
          return shape.id === ((_a6 = this.app.onlySelectedShape) == null ? void 0 : _a6.id);
        },
        [this.app]
      );
      const showCropPreview = isSelected && isCropping && this.app.isInAny("select.crop", "select.cropping", "select.pointing_crop_handle");
      const reduceMotion = prefersReducedMotion && (((_a5 = asset == null ? void 0 : asset.props.mimeType) == null ? void 0 : _a5.includes("video")) || ((_b2 = asset == null ? void 0 : asset.props.mimeType) == null ? void 0 : _b2.includes("gif")));
      (0, import_react36.useEffect)(() => {
        if ((asset == null ? void 0 : asset.props.src) && "mimeType" in asset.props && (asset == null ? void 0 : asset.props.mimeType) === "image/gif") {
          let cancelled = false;
          const run = () => __async(this, null, function* () {
            const newStaticFrame = yield getStateFrame(asset.props.src);
            if (cancelled)
              return;
            if (newStaticFrame) {
              setStaticFrameSrc(newStaticFrame);
            }
          });
          run();
          return () => {
            cancelled = true;
          };
        }
      }, [prefersReducedMotion, asset == null ? void 0 : asset.props]);
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)(import_jsx_runtime49.Fragment, { children: [
        (asset == null ? void 0 : asset.props.src) && showCropPreview && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { style: containerStyle, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
          "div",
          {
            className: `tl-image tl-image-${shape.id}-crop`,
            style: {
              opacity: 0.1,
              backgroundImage: `url(${!shape.props.playing || reduceMotion ? staticFrameSrc : asset.props.src})`
            },
            draggable: false
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(HTMLContainer, { id: shape.id, style: { overflow: "hidden" }, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsxs)("div", { className: "tl-image-container", style: containerStyle, children: [
          (asset == null ? void 0 : asset.props.src) ? /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(
            "div",
            {
              className: `tl-image tl-image-${shape.id}`,
              style: {
                backgroundImage: `url(${!shape.props.playing || reduceMotion ? staticFrameSrc : asset.props.src})`
              },
              draggable: false
            }
          ) : Spinner2 ? /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("g", { transform: `translate(${(w3 - 38) / 2}, ${(h3 - 38) / 2})`, children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Spinner2, {}) }) : null,
          (asset == null ? void 0 : asset.props.isAnimated) && !shape.props.playing && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("div", { className: "tl-image__tg", children: "GIF" })
        ] }) }),
        "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.app.zoomLevel })
      ] });
    }
    indicator(shape) {
      const isCropping = useIsCropping(shape.id);
      if (isCropping) {
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)("rect", { width: toDomPrecision(shape.props.w), height: toDomPrecision(shape.props.h) });
    }
    toSvg(shape) {
      return __async(this, null, function* () {
        const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
        const asset = shape.props.assetId ? this.app.getAssetById(shape.props.assetId) : null;
        let src = (asset == null ? void 0 : asset.props.src) || "";
        if (src && src.startsWith("http")) {
          src = (yield getDataURIFromURL(src)) || "";
        }
        const image = document.createElementNS("http://www.w3.org/2000/svg", "image");
        image.setAttributeNS("http://www.w3.org/1999/xlink", "href", src);
        const containerStyle = getContainerStyle(shape);
        const crop = shape.props.crop;
        if (containerStyle && crop) {
          const { transform, width, height } = containerStyle;
          const points2 = [
            new Vec2d(crop.topLeft.x * width, crop.topLeft.y * height),
            new Vec2d(crop.bottomRight.x * width, crop.topLeft.y * height),
            new Vec2d(crop.bottomRight.x * width, crop.bottomRight.y * height),
            new Vec2d(crop.topLeft.x * width, crop.bottomRight.y * height)
          ];
          const innerElement = document.createElementNS("http://www.w3.org/2000/svg", "g");
          innerElement.style.clipPath = `polygon(${points2.map((p3) => `${p3.x}px ${p3.y}px`).join(",")})`;
          image.setAttribute("width", width.toString());
          image.setAttribute("height", height.toString());
          image.style.transform = transform;
          innerElement.appendChild(image);
          g3.appendChild(innerElement);
        } else {
          image.setAttribute("width", shape.props.w.toString());
          image.setAttribute("height", shape.props.h.toString());
          g3.appendChild(image);
        }
        return g3;
      });
    }
  };
  __publicField(TLImageUtil, "type", "image");
  var TLImageShapeDef = defineShape({
    type: "image",
    getShapeUtil: () => TLImageUtil,
    validator: imageShapeTypeValidator,
    migrations: imageShapeMigrations
  });
  function getContainerStyle(shape) {
    const crop = shape.props.crop;
    const topLeft = crop == null ? void 0 : crop.topLeft;
    if (!topLeft)
      return;
    const w3 = 1 / (crop.bottomRight.x - crop.topLeft.x) * shape.props.w;
    const h3 = 1 / (crop.bottomRight.y - crop.topLeft.y) * shape.props.h;
    const offsetX = -topLeft.x * w3;
    const offsetY = -topLeft.y * h3;
    return {
      transform: `translate(${offsetX}px, ${offsetY}px)`,
      width: w3,
      height: h3
    };
  }

  // ../../../packages/editor/src/lib/utils/reordering/dgreensp/dgreensp.ts
  var DIGITS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  var INTEGER_ZERO = "a0";
  var SMALLEST_INTEGER = "A00000000000000000000000000";
  function getIntegerLength(head) {
    if (head >= "a" && head <= "z") {
      return head.charCodeAt(0) - "a".charCodeAt(0) + 2;
    } else if (head >= "A" && head <= "Z") {
      return "Z".charCodeAt(0) - head.charCodeAt(0) + 2;
    } else {
      throw new Error("Invalid index key head: " + head);
    }
  }
  function validateInteger(int) {
    if (int.length !== getIntegerLength(int.charAt(0))) {
      throw new Error("invalid integer part of index key: " + int);
    }
  }
  function isNotUndefined(n3) {
    if (n3 === void 0)
      throw Error("n is undefined");
  }
  function incrementInteger(x3) {
    validateInteger(x3);
    const [head, ...digs] = x3.split("");
    let carry = true;
    for (let i3 = digs.length - 1; carry && i3 >= 0; i3--) {
      const d3 = DIGITS.indexOf(digs[i3]) + 1;
      if (d3 === DIGITS.length) {
        digs[i3] = "0";
      } else {
        digs[i3] = DIGITS.charAt(d3);
        carry = false;
      }
    }
    if (carry) {
      if (head === "Z")
        return "a0";
      if (head === "z")
        return void 0;
      const h3 = String.fromCharCode(head.charCodeAt(0) + 1);
      if (h3 > "a") {
        digs.push("0");
      } else {
        digs.pop();
      }
      return h3 + digs.join("");
    } else {
      return head + digs.join("");
    }
  }
  function decrementInteger(x3) {
    validateInteger(x3);
    const [head, ...digs] = x3.split("");
    let borrow = true;
    for (let i3 = digs.length - 1; borrow && i3 >= 0; i3--) {
      const d3 = DIGITS.indexOf(digs[i3]) - 1;
      if (d3 === -1) {
        digs[i3] = DIGITS.slice(-1);
      } else {
        digs[i3] = DIGITS.charAt(d3);
        borrow = false;
      }
    }
    if (borrow) {
      if (head === "a")
        return "Z" + DIGITS.slice(-1);
      if (head === "A")
        return void 0;
      const h3 = String.fromCharCode(head.charCodeAt(0) - 1);
      if (h3 < "Z") {
        digs.push(DIGITS.slice(-1));
      } else {
        digs.pop();
      }
      return h3 + digs.join("");
    } else {
      return head + digs.join("");
    }
  }
  function midpoint(a3, b3) {
    if (b3 !== void 0 && a3 >= b3) {
      throw new Error(a3 + " >= " + b3);
    }
    if (a3.slice(-1) === "0" || b3 && b3.slice(-1) === "0") {
      throw new Error("trailing zero");
    }
    if (b3) {
      let n3 = 0;
      while ((a3.charAt(n3) || "0") === b3.charAt(n3)) {
        n3++;
      }
      if (n3 > 0) {
        return b3.slice(0, n3) + midpoint(a3.slice(n3), b3.slice(n3));
      }
    }
    const digitA = a3 ? DIGITS.indexOf(a3.charAt(0)) : 0;
    const digitB = b3 !== void 0 ? DIGITS.indexOf(b3.charAt(0)) : DIGITS.length;
    if (digitB - digitA > 1) {
      const midDigit = Math.round(0.5 * (digitA + digitB));
      return DIGITS.charAt(midDigit);
    } else {
      if (b3 && b3.length > 1) {
        return b3.slice(0, 1);
      } else {
        return DIGITS.charAt(digitA) + midpoint(a3.slice(1), void 0);
      }
    }
  }
  function getIntegerPart(index2) {
    const integerPartLength = getIntegerLength(index2.charAt(0));
    if (integerPartLength > index2.length) {
      throw new Error("invalid index: " + index2);
    }
    return index2.slice(0, integerPartLength);
  }
  function validateOrder(index2) {
    if (index2 === SMALLEST_INTEGER) {
      throw new Error("invalid index: " + index2);
    }
    const i3 = getIntegerPart(index2);
    const f3 = index2.slice(i3.length);
    if (f3.slice(-1) === "0") {
      throw new Error("invalid index: " + index2);
    }
  }
  function generateKeyBetween(a3, b3) {
    if (a3 !== void 0)
      validateOrder(a3);
    if (b3 !== void 0)
      validateOrder(b3);
    if (a3 !== void 0 && b3 !== void 0 && a3 >= b3) {
      throw new Error(a3 + " >= " + b3);
    }
    if (a3 === void 0 && b3 === void 0) {
      return INTEGER_ZERO;
    }
    if (a3 === void 0) {
      if (b3 === void 0)
        throw Error("b is undefined");
      const ib2 = getIntegerPart(b3);
      const fb2 = b3.slice(ib2.length);
      if (ib2 === SMALLEST_INTEGER) {
        return ib2 + midpoint("", fb2);
      }
      if (ib2 < b3) {
        return ib2;
      }
      const ibl = decrementInteger(ib2);
      isNotUndefined(ibl);
      return ibl;
    }
    if (b3 === void 0) {
      const ia2 = getIntegerPart(a3);
      const fa2 = a3.slice(ia2.length);
      const i4 = incrementInteger(ia2);
      return i4 === void 0 ? ia2 + midpoint(fa2, void 0) : i4;
    }
    const ia = getIntegerPart(a3);
    const fa = a3.slice(ia.length);
    const ib = getIntegerPart(b3);
    const fb = b3.slice(ib.length);
    if (ia === ib) {
      return ia + midpoint(fa, fb);
    }
    const i3 = incrementInteger(ia);
    isNotUndefined(i3);
    return i3 < b3 ? i3 : ia + midpoint(fa, void 0);
  }
  function generateNKeysBetween(a3, b3, n3) {
    if (n3 === 0)
      return [];
    if (n3 === 1)
      return [generateKeyBetween(a3, b3)];
    if (b3 === void 0) {
      let c4 = generateKeyBetween(a3, b3);
      const result = [c4];
      for (let i3 = 0; i3 < n3 - 1; i3++) {
        c4 = generateKeyBetween(c4, b3);
        result.push(c4);
      }
      return result;
    }
    if (a3 === void 0) {
      let c4 = generateKeyBetween(a3, b3);
      const result = [c4];
      for (let i3 = 0; i3 < n3 - 1; i3++) {
        c4 = generateKeyBetween(a3, c4);
        result.push(c4);
      }
      result.reverse();
      return result;
    }
    const mid = Math.floor(n3 / 2);
    const c3 = generateKeyBetween(a3, b3);
    return [...generateNKeysBetween(a3, c3, mid), c3, ...generateNKeysBetween(c3, b3, n3 - mid - 1)];
  }

  // ../../../packages/editor/src/lib/utils/reordering/reordering.ts
  function getIndicesBetween(below, above, n3) {
    return generateNKeysBetween(below, above, n3);
  }
  function getIndicesAbove(below, n3) {
    return generateNKeysBetween(below, void 0, n3);
  }
  function getIndexBetween(below, above) {
    return generateNKeysBetween(below, above, 1)[0];
  }
  function getIndexAbove(below) {
    return generateNKeysBetween(below, void 0, 1)[0];
  }
  function getIndexBelow(above) {
    return generateNKeysBetween(void 0, above, 1)[0];
  }
  function getIndices(n3) {
    return ["a1", ...generateNKeysBetween("a1", void 0, n3)];
  }
  function sortByIndex2(a3, b3) {
    if (a3.index < b3.index) {
      return -1;
    } else if (a3.index > b3.index) {
      return 1;
    }
    return 0;
  }
  function sortById(a3, b3) {
    if (a3.id < b3.id) {
      return -1;
    } else if (a3.id > b3.id) {
      return 1;
    }
    return 0;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLLineUtil/components/getLinePath.ts
  function getLinePoints(spline) {
    const { segments } = spline;
    const allPoints = [];
    for (let j = 0, k2 = segments.length; j < k2; j++) {
      const segment = segments[j];
      const lut = segment.lut;
      const n3 = lut.length - 1;
      if (j > 0) {
        allPoints.push(Vec2d.Lrp(lut[0], lut[1], 0.25));
      } else {
        allPoints.push(lut[0]);
      }
      for (let i3 = 1; i3 < n3; i3++) {
        allPoints.push(lut[i3]);
      }
      if (j < k2 - 1) {
        allPoints.push(Vec2d.Lrp(lut[n3 - 1], lut[n3], 0.75));
      } else {
        allPoints.push(lut[n3]);
      }
    }
    return allPoints;
  }
  function getLineDrawFreehandOptions(strokeWidth) {
    return {
      size: strokeWidth,
      thinning: 0.4,
      streamline: 0,
      smoothing: 0.5,
      simulatePressure: true,
      last: true
    };
  }
  function getLineStrokePoints(shape, spline, strokeWidth) {
    const points2 = getLinePoints(spline);
    const options = getLineDrawFreehandOptions(strokeWidth);
    return getStrokePoints(points2, options);
  }
  function getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth) {
    const options = getLineDrawFreehandOptions(strokeWidth);
    return getStrokeOutlinePoints(
      setStrokePointRadii(getLineStrokePoints(shape, spline, strokeWidth), options),
      options
    );
  }
  function getLineDrawPath(shape, spline, strokeWidth) {
    const stroke = getLineDrawStrokeOutlinePoints(shape, spline, strokeWidth);
    return getSvgPathFromStroke(stroke);
  }
  function getLineIndicatorPath(shape, spline, strokeWidth) {
    if (shape.props.dash === "draw") {
      const strokePoints = getLineStrokePoints(shape, spline, strokeWidth);
      return getSvgPathFromStrokePoints(strokePoints);
    }
    return spline.path;
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLLineUtil/components/getLineSvg.ts
  function getDrawLineShapeSvg({
    shape,
    strokeWidth,
    spline,
    color
  }) {
    const pfPath = getLineDrawPath(shape, spline, strokeWidth);
    const p3 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    p3.setAttribute("stroke-width", "0");
    p3.setAttribute("stroke", "none");
    p3.setAttribute("fill", color);
    p3.setAttribute("d", pfPath);
    return p3;
  }
  function getDashedLineShapeSvg({
    dash,
    strokeWidth,
    spline,
    color
  }) {
    const { segments } = spline;
    const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
    g3.setAttribute("stroke", color);
    g3.setAttribute("stroke-width", strokeWidth.toString());
    segments.forEach((segment, i3) => {
      const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
      const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(segment.length, strokeWidth, {
        style: dash,
        start: i3 > 0 ? "outset" : "none",
        end: i3 < segments.length - 1 ? "outset" : "none"
      });
      path.setAttribute("stroke-dasharray", strokeDasharray.toString());
      path.setAttribute("stroke-dashoffset", strokeDashoffset.toString());
      path.setAttribute("d", segment.path);
      path.setAttribute("fill", "none");
      g3.appendChild(path);
    });
    return g3;
  }
  function getSolidLineShapeSvg({
    strokeWidth,
    spline,
    color
  }) {
    const { path } = spline;
    const p3 = document.createElementNS("http://www.w3.org/2000/svg", "path");
    p3.setAttribute("stroke-width", strokeWidth.toString());
    p3.setAttribute("stroke", color);
    p3.setAttribute("fill", "none");
    p3.setAttribute("d", path);
    return p3;
  }
  function getLineSvg(shape, spline, color, strokeWidth) {
    switch (shape.props.dash) {
      case "draw":
        return getDrawLineShapeSvg({
          shape,
          strokeWidth,
          spline,
          color
        });
      case "solid":
        return getSolidLineShapeSvg({
          strokeWidth,
          spline,
          color
        });
      default:
        return getDashedLineShapeSvg({
          strokeWidth,
          spline,
          dash: shape.props.dash,
          color
        });
    }
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLLineUtil/TLLineUtil.tsx
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var splinesCache = new WeakMapCache();
  var handlesCache = new WeakMapCache();
  var TLLineUtil = class extends TLShapeUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "hideResizeHandles", () => true);
      __publicField(this, "hideRotateHandle", () => true);
      __publicField(this, "hideSelectionBoundsBg", () => true);
      __publicField(this, "hideSelectionBoundsFg", () => true);
      __publicField(this, "isClosed", () => false);
      //   Events
      __publicField(this, "onResize", (shape, info) => {
        const { scaleX, scaleY } = info;
        const handles = deepCopy(shape.props.handles);
        Object.values(shape.props.handles).forEach(({ id, x: x3, y: y3 }) => {
          handles[id].x = x3 * scaleX;
          handles[id].y = y3 * scaleY;
        });
        return {
          props: {
            handles
          }
        };
      });
      __publicField(this, "onHandleChange", (shape, { handle }) => {
        const next = deepCopy(shape);
        switch (handle.id) {
          case "start":
          case "end": {
            next.props.handles[handle.id] = __spreadProps(__spreadValues({}, next.props.handles[handle.id]), {
              x: handle.x,
              y: handle.y
            });
            break;
          }
          default: {
            const id = "handle:" + handle.index;
            const existing = shape.props.handles[id];
            if (existing) {
              next.props.handles[id] = __spreadProps(__spreadValues({}, existing), {
                x: handle.x,
                y: handle.y
              });
            } else {
              next.props.handles[id] = {
                id,
                type: "vertex",
                canBind: false,
                index: handle.index,
                x: handle.x,
                y: handle.y
              };
            }
            break;
          }
        }
        return next;
      });
    }
    defaultProps() {
      return {
        opacity: "1",
        dash: "draw",
        size: "m",
        color: "black",
        spline: "line",
        handles: {
          start: {
            id: "start",
            type: "vertex",
            canBind: false,
            index: "a1",
            x: 0,
            y: 0
          },
          end: {
            id: "end",
            type: "vertex",
            canBind: false,
            index: "a2",
            x: 0,
            y: 0
          }
        }
      };
    }
    getBounds(shape) {
      const spline = getSplineForLineShape(shape);
      return spline.bounds;
    }
    getCenter(shape) {
      return this.bounds(shape).center;
    }
    getHandles(shape) {
      return handlesCache.get(shape.props, () => {
        const handles = shape.props.handles;
        const spline = getSplineForLineShape(shape);
        const sortedHandles = Object.values(handles).sort(sortByIndex2);
        const results = sortedHandles.slice();
        for (let i3 = 0; i3 < spline.segments.length; i3++) {
          const segment = spline.segments[i3];
          const point2 = segment.getPoint(0.5);
          const index2 = getIndexBetween(sortedHandles[i3].index, sortedHandles[i3 + 1].index);
          results.push({
            id: `mid-${i3}`,
            type: "create",
            index: index2,
            x: point2.x,
            y: point2.y
          });
        }
        return results.sort(sortByIndex2);
      });
    }
    getOutline(shape) {
      return getLinePoints(getSplineForLineShape(shape));
    }
    hitTestPoint(shape, point2) {
      const zoomLevel = this.app.zoomLevel;
      const offsetDist = this.app.getStrokeWidth(shape.props.size) / zoomLevel;
      return pointNearToPolyline(point2, this.outline(shape), offsetDist);
    }
    hitTestLineSegment(shape, A2, B) {
      return intersectLineSegmentPolyline(A2, B, this.outline(shape)) !== null;
    }
    render(shape) {
      const forceSolid = useForceSolid();
      const spline = getSplineForLineShape(shape);
      const strokeWidth = this.app.getStrokeWidth(shape.props.size);
      const { dash, color } = shape.props;
      if (shape.props.spline === "line") {
        if (dash === "solid") {
          const outline = spline.points;
          const pathData = "M" + outline[0] + "L" + outline.slice(1);
          return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(SVGContainer, { id: shape.id, children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ShapeFill, { d: pathData, fill: "none", color }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", { d: pathData, stroke: "currentColor", strokeWidth, fill: "none" })
          ] });
        }
        if (dash === "dashed" || dash === "dotted") {
          const outline = spline.points;
          const pathData = "M" + outline[0] + "L" + outline.slice(1);
          return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(SVGContainer, { id: shape.id, children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ShapeFill, { d: pathData, fill: "none", color }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("g", { stroke: "currentColor", strokeWidth, children: spline.segments.map((segment, i3) => {
              const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
                segment.length,
                strokeWidth,
                {
                  style: dash,
                  start: i3 > 0 ? "outset" : "none",
                  end: i3 < spline.segments.length - 1 ? "outset" : "none"
                }
              );
              return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
                "path",
                {
                  strokeDasharray,
                  strokeDashoffset,
                  d: segment.path,
                  fill: "none"
                },
                i3
              );
            }) })
          ] });
        }
        if (dash === "draw") {
          const outline = spline.points;
          const [innerPathData, outerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth);
          return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(SVGContainer, { id: shape.id, children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ShapeFill, { d: innerPathData, fill: "none", color }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", { d: outerPathData, stroke: "currentColor", strokeWidth, fill: "none" })
          ] });
        }
      }
      if (shape.props.spline === "cubic") {
        const splinePath = spline.path;
        if (dash === "solid" || dash === "draw" && forceSolid) {
          return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(SVGContainer, { id: shape.id, children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ShapeFill, { d: splinePath, fill: "none", color }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", { strokeWidth, stroke: "currentColor", fill: "none", d: splinePath })
          ] });
        }
        if (dash === "dashed" || dash === "dotted") {
          return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(SVGContainer, { id: shape.id, children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ShapeFill, { d: splinePath, fill: "none", color }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("g", { stroke: "currentColor", strokeWidth, children: spline.segments.map((segment, i3) => {
              const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
                segment.length,
                strokeWidth,
                {
                  style: dash,
                  start: i3 > 0 ? "outset" : "none",
                  end: i3 < spline.segments.length - 1 ? "outset" : "none"
                }
              );
              return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
                "path",
                {
                  strokeDasharray,
                  strokeDashoffset,
                  d: segment.path,
                  fill: "none"
                },
                i3
              );
            }) })
          ] });
        }
        if (dash === "draw") {
          return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(SVGContainer, { id: shape.id, children: [
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ShapeFill, { d: splinePath, fill: "none", color }),
            /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(
              "path",
              {
                d: getLineDrawPath(shape, spline, strokeWidth),
                strokeWidth: 1,
                stroke: "currentColor",
                fill: "currentColor"
              }
            )
          ] });
        }
      }
    }
    indicator(shape) {
      const strokeWidth = this.app.getStrokeWidth(shape.props.size);
      const spline = getSplineForLineShape(shape);
      const { dash } = shape.props;
      let path;
      if (shape.props.spline === "line") {
        const outline = spline.points;
        if (dash === "solid" || dash === "dotted" || dash === "dashed") {
          path = "M" + outline[0] + "L" + outline.slice(1);
        } else {
          const [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth);
          path = innerPathData;
        }
      } else {
        path = getLineIndicatorPath(shape, spline, strokeWidth);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)("path", { d: path });
    }
    toSvg(shape, _font, colors) {
      const { color: _color, size } = shape.props;
      const color = colors.fill[_color];
      const spline = getSplineForLineShape(shape);
      return getLineSvg(shape, spline, color, this.app.getStrokeWidth(size));
    }
  };
  __publicField(TLLineUtil, "type", "line");
  var TLLineShapeDef = defineShape({
    type: "line",
    getShapeUtil: () => TLLineUtil,
    validator: lineShapeTypeValidator,
    migrations: lineShapeMigrations
  });
  function getSplineForLineShape(shape) {
    return splinesCache.get(shape.props, () => {
      const { spline, handles } = shape.props;
      const handlePoints = Object.values(handles).sort(sortByIndex2).map(Vec2d.From);
      switch (spline) {
        case "cubic": {
          return new CubicSpline2d(handlePoints, handlePoints.length === 2 ? 2 : 1.2, 20);
        }
        case "line": {
          return new Polyline2d(handlePoints);
        }
      }
    });
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLNoteUtil/TLNoteUtil.tsx
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var NOTE_SIZE = 200;
  var TLNoteUtil = class extends TLShapeUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "canEdit", () => true);
      __publicField(this, "hideResizeHandles", () => true);
      __publicField(this, "hideSelectionBoundsBg", () => true);
      __publicField(this, "hideSelectionBoundsFg", () => true);
      __publicField(this, "onBeforeCreate", (next) => {
        return getGrowY(this.app, next, next.props.growY);
      });
      __publicField(this, "onBeforeUpdate", (prev, next) => {
        if (prev.props.text === next.props.text && prev.props.font === next.props.font && prev.props.size === next.props.size) {
          return;
        }
        return getGrowY(this.app, next, prev.props.growY);
      });
      __publicField(this, "onEditEnd", (shape) => {
        const {
          id,
          type,
          props: { text }
        } = shape;
        if (text.trimEnd() !== shape.props.text) {
          this.app.updateShapes([
            {
              id,
              type,
              props: {
                text: text.trimEnd()
              }
            }
          ]);
        }
      });
    }
    defaultProps() {
      return {
        opacity: "1",
        color: "black",
        size: "m",
        text: "",
        font: "draw",
        align: "middle",
        growY: 0,
        url: ""
      };
    }
    getHeight(shape) {
      return NOTE_SIZE + shape.props.growY;
    }
    getBounds(shape) {
      const height = this.getHeight(shape);
      return new Box2d(0, 0, NOTE_SIZE, height);
    }
    getOutline(shape) {
      return this.bounds(shape).corners;
    }
    getCenter(_shape) {
      return new Vec2d(NOTE_SIZE / 2, this.getHeight(_shape) / 2);
    }
    render(shape) {
      const {
        id,
        type,
        props: { color, font, size, align, text }
      } = shape;
      const adjustedColor = color === "black" ? "yellow" : color;
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(import_jsx_runtime51.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
          "div",
          {
            style: {
              position: "absolute",
              width: NOTE_SIZE,
              height: this.getHeight(shape)
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime51.jsxs)(
              "div",
              {
                className: "tl-note__container tl-hitarea-fill",
                style: {
                  color: `var(--palette-${adjustedColor})`,
                  backgroundColor: `var(--palette-${adjustedColor})`
                },
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime51.jsx)("div", { className: "tl-note__scrim" }),
                  /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
                    TextLabel,
                    {
                      id,
                      type,
                      font,
                      size,
                      align,
                      text,
                      labelColor: "inherit",
                      wrap: true
                    }
                  )
                ]
              }
            )
          }
        ),
        "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: this.app.zoomLevel })
      ] });
    }
    indicator(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
        "rect",
        {
          rx: "7",
          width: toDomPrecision(NOTE_SIZE),
          height: toDomPrecision(this.getHeight(shape))
        }
      );
    }
    toSvg(shape, font, colors) {
      const bounds = this.bounds(shape);
      const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
      const adjustedColor = shape.props.color === "black" ? "yellow" : shape.props.color;
      const rect1 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect1.setAttribute("rx", "10");
      rect1.setAttribute("width", NOTE_SIZE.toString());
      rect1.setAttribute("height", bounds.height.toString());
      rect1.setAttribute("fill", colors.fill[adjustedColor]);
      rect1.setAttribute("stroke", colors.fill[adjustedColor]);
      rect1.setAttribute("stroke-width", "1");
      g3.appendChild(rect1);
      const rect2 = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect2.setAttribute("rx", "10");
      rect2.setAttribute("width", NOTE_SIZE.toString());
      rect2.setAttribute("height", bounds.height.toString());
      rect2.setAttribute("fill", colors.background);
      rect2.setAttribute("opacity", ".28");
      g3.appendChild(rect2);
      const PADDING = 17;
      const opts = {
        fontSize: LABEL_FONT_SIZES[shape.props.size],
        fontFamily: font,
        textAlign: shape.props.align,
        width: bounds.width - PADDING * 2,
        height: bounds.height - PADDING * 2,
        padding: 0,
        lineHeight: TEXT_PROPS.lineHeight,
        fontStyle: "normal",
        fontWeight: "normal"
      };
      const lines = this.app.textMeasure.getTextLines(__spreadValues({
        text: shape.props.text,
        wrap: true
      }, opts));
      const maxWidth = lines.reduce((max, line) => {
        return Math.max(
          max,
          this.app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
            text: line.trim(),
            fontFamily: opts.fontFamily,
            fontSize: opts.fontSize,
            width: "fit-content",
            padding: `0px`
          })).w
        );
      }, 0);
      if (shape.props.align === "start") {
        opts.padding = (bounds.width - maxWidth) / 2;
      } else if (shape.props.align === "end") {
        opts.padding = -(bounds.width - maxWidth) / 2;
      } else {
        opts.padding = PADDING;
      }
      opts.width = bounds.width;
      const textElm = getTextSvgElement(this.app, __spreadValues({
        lines
      }, opts));
      textElm.setAttribute("fill", colors.text);
      textElm.setAttribute("transform", `translate(0 ${PADDING})`);
      g3.appendChild(textElm);
      return g3;
    }
  };
  __publicField(TLNoteUtil, "type", "note");
  var TLNoteShapeDef = defineShape({
    getShapeUtil: () => TLNoteUtil,
    type: "note",
    validator: noteShapeTypeValidator,
    migrations: noteShapeMigrations
  });
  function getGrowY(app, shape, prevGrowY = 0) {
    const PADDING = 17;
    const nextTextSize = app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
      text: shape.props.text,
      fontFamily: FONT_FAMILIES[shape.props.font],
      fontSize: LABEL_FONT_SIZES[shape.props.size],
      width: NOTE_SIZE - PADDING * 2 + "px"
    }));
    const nextHeight = nextTextSize.h + PADDING * 2;
    let growY = null;
    if (nextHeight > NOTE_SIZE) {
      growY = nextHeight - NOTE_SIZE;
    } else {
      if (prevGrowY) {
        growY = 0;
      }
    }
    if (growY !== null) {
      return __spreadProps(__spreadValues({}, shape), {
        props: __spreadProps(__spreadValues({}, shape.props), {
          growY
        })
      });
    }
  }

  // ../../../packages/editor/src/lib/app/shapeutils/shared/resizeScaled.ts
  function resizeScaled(shape, {
    initialBounds,
    scaleX,
    scaleY,
    newPoint
  }) {
    const scaleDelta = Math.max(0.01, Math.min(Math.abs(scaleX), Math.abs(scaleY)));
    const offset = new Vec2d(0, 0);
    if (scaleX < 0) {
      offset.x = -(initialBounds.width * scaleDelta);
    }
    if (scaleY < 0) {
      offset.y = -(initialBounds.height * scaleDelta);
    }
    const { x: x3, y: y3 } = Vec2d.Add(newPoint, offset.rot(shape.rotation));
    return {
      x: x3,
      y: y3,
      props: {
        scale: scaleDelta * shape.props.scale
      }
    };
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLTextUtil/TLTextUtil.tsx
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var sizeCache = new WeakMapCache();
  var TLTextUtil = class extends TLShapeUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "canEdit", () => true);
      __publicField(this, "isAspectRatioLocked", () => true);
      __publicField(this, "onResize", (shape, info) => {
        const { initialBounds, initialShape, scaleX, handle } = info;
        if (info.mode === "scale_shape" || handle !== "right" && handle !== "left") {
          return resizeScaled(shape, info);
        } else {
          const prevWidth = initialBounds.width;
          let nextWidth = prevWidth * scaleX;
          const offset = new Vec2d(0, 0);
          nextWidth = Math.max(1, Math.abs(nextWidth));
          if (handle === "left") {
            offset.x = prevWidth - nextWidth;
            if (scaleX < 0) {
              offset.x += nextWidth;
            }
          } else {
            if (scaleX < 0) {
              offset.x -= nextWidth;
            }
          }
          const { x: x3, y: y3 } = offset.rot(shape.rotation).add(initialShape);
          return {
            x: x3,
            y: y3,
            props: {
              w: nextWidth / initialShape.props.scale,
              autoSize: false
            }
          };
        }
      });
      __publicField(this, "onBeforeCreate", (shape) => {
        if (!shape.props.autoSize)
          return;
        if (shape.props.text.trim())
          return;
        const bounds = this.getMinDimensions(shape);
        return __spreadProps(__spreadValues({}, shape), {
          x: shape.x - bounds.width / 2,
          y: shape.y - bounds.height / 2
        });
      });
      __publicField(this, "onEditEnd", (shape) => {
        const {
          id,
          type,
          props: { text }
        } = shape;
        const trimmedText = shape.props.text.trimEnd();
        if (trimmedText.length === 0) {
          this.app.deleteShapes([shape.id]);
        } else {
          if (trimmedText !== shape.props.text) {
            this.app.updateShapes([
              {
                id,
                type,
                props: {
                  text: text.trimEnd()
                }
              }
            ]);
          }
        }
      });
      __publicField(this, "onBeforeUpdate", (prev, next) => {
        if (!next.props.autoSize)
          return;
        const styleDidChange = prev.props.size !== next.props.size || prev.props.align !== next.props.align || prev.props.font !== next.props.font || prev.props.scale !== 1 && next.props.scale === 1;
        const textDidChange = prev.props.text !== next.props.text;
        if (!styleDidChange && !textDidChange)
          return;
        const boundsA = this.getMinDimensions(prev);
        const boundsB = getTextSize(this.app, next.props);
        const wA = boundsA.width * prev.props.scale;
        const hA = boundsA.height * prev.props.scale;
        const wB = boundsB.width * next.props.scale;
        const hB = boundsB.height * next.props.scale;
        let delta;
        switch (next.props.align) {
          case "middle": {
            delta = new Vec2d((wB - wA) / 2, textDidChange ? 0 : (hB - hA) / 2);
            break;
          }
          case "end": {
            delta = new Vec2d(wB - wA, textDidChange ? 0 : (hB - hA) / 2);
            break;
          }
          default: {
            if (textDidChange)
              break;
            delta = new Vec2d(0, (hB - hA) / 2);
            break;
          }
        }
        if (delta) {
          delta.rot(next.rotation);
          const { x: x3, y: y3 } = next;
          return __spreadProps(__spreadValues({}, next), {
            x: x3 - delta.x,
            y: y3 - delta.y,
            props: __spreadProps(__spreadValues({}, next.props), { w: wB })
          });
        } else {
          return __spreadProps(__spreadValues({}, next), {
            props: __spreadProps(__spreadValues({}, next.props), { w: wB })
          });
        }
      });
      __publicField(this, "onDoubleClickEdge", (shape) => {
        if (!shape.props.autoSize) {
          return {
            id: shape.id,
            type: shape.type,
            props: {
              autoSize: true
            }
          };
        }
        if (shape.props.scale !== 1) {
          return {
            id: shape.id,
            type: shape.type,
            props: {
              scale: 1
            }
          };
        }
      });
    }
    defaultProps() {
      return {
        opacity: "1",
        color: "black",
        size: "m",
        w: 8,
        text: "",
        font: "draw",
        align: "middle",
        autoSize: true,
        scale: 1
      };
    }
    // @computed
    // private get minDimensionsCache() {
    // 	return this.app.store.createSelectedComputedCache<
    // 		TLTextShape['props'],
    // 		{ width: number; height: number },
    // 		TLTextShape
    // 	>(
    // 		'text measure cache',
    // 		(shape) => {
    // 			return shape.props
    // 		},
    // 		(props) => getTextSize(this.app, props)
    // 	)
    // }
    getMinDimensions(shape) {
      return sizeCache.get(shape.props, (props) => getTextSize(this.app, props));
    }
    getBounds(shape) {
      const { scale } = shape.props;
      const { width, height } = this.getMinDimensions(shape);
      return new Box2d(0, 0, width * scale, height * scale);
    }
    getOutline(shape) {
      const bounds = this.bounds(shape);
      return [
        new Vec2d(0, 0),
        new Vec2d(bounds.width, 0),
        new Vec2d(bounds.width, bounds.height),
        new Vec2d(0, bounds.height)
      ];
    }
    getCenter(shape) {
      const bounds = this.bounds(shape);
      return new Vec2d(bounds.width / 2, bounds.height / 2);
    }
    render(shape) {
      const {
        id,
        type,
        props: { text }
      } = shape;
      const { width, height } = this.getMinDimensions(shape);
      const {
        rInput,
        isEmpty,
        isEditing,
        isEditableFromHover,
        handleFocus,
        handleChange,
        handleKeyDown,
        handleBlur
      } = useEditableText(id, type, text);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(HTMLContainer, { id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime52.jsxs)(
        "div",
        {
          className: "tl-text-shape__wrapper tl-text-shadow",
          "data-font": shape.props.font,
          "data-align": shape.props.align,
          "data-hastext": !isEmpty,
          "data-isediting": isEditing || isEditableFromHover,
          "data-textwrap": true,
          style: {
            fontSize: FONT_SIZES[shape.props.size],
            lineHeight: FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + "px",
            transform: `scale(${shape.props.scale})`,
            transformOrigin: "top left",
            width: Math.max(1, width),
            height: Math.max(FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight, height)
          },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("div", { className: "tl-text tl-text-content", dir: "ltr", children: text }),
            isEditing || isEditableFromHover ? /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(
              "textarea",
              {
                ref: rInput,
                className: "tl-text tl-text-input",
                name: "text",
                tabIndex: -1,
                autoComplete: "false",
                autoCapitalize: "false",
                autoCorrect: "false",
                autoSave: "false",
                autoFocus: isEditing,
                placeholder: "",
                spellCheck: "true",
                wrap: "off",
                dir: "ltr",
                datatype: "wysiwyg",
                defaultValue: text,
                onFocus: handleFocus,
                onChange: handleChange,
                onKeyDown: handleKeyDown,
                onBlur: handleBlur,
                onTouchEnd: stopEventPropagation,
                onContextMenu: stopEventPropagation
              }
            ) : null
          ]
        }
      ) });
    }
    indicator(shape) {
      const bounds = this.bounds(shape);
      return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)("rect", { width: toDomPrecision(bounds.width), height: toDomPrecision(bounds.height) });
    }
    toSvg(shape, font, colors) {
      var _a5, _b2;
      const bounds = this.bounds(shape);
      const text = shape.props.text;
      const width = bounds.width / ((_a5 = shape.props.scale) != null ? _a5 : 1);
      const height = bounds.height / ((_b2 = shape.props.scale) != null ? _b2 : 1);
      const opts = {
        fontSize: FONT_SIZES[shape.props.size],
        fontFamily: font,
        textAlign: shape.props.align,
        width,
        height,
        padding: 0,
        // no padding?
        lineHeight: TEXT_PROPS.lineHeight,
        fontStyle: "normal",
        fontWeight: "normal"
      };
      const lines = this.app.textMeasure.getTextLines(__spreadValues({
        text,
        wrap: true
      }, opts));
      const color = colors.fill[shape.props.color];
      const groupEl = document.createElementNS("http://www.w3.org/2000/svg", "g");
      const textBgEl = getTextSvgElement(this.app, __spreadProps(__spreadValues({
        lines
      }, opts), {
        stroke: colors.background,
        strokeWidth: 2,
        fill: colors.background,
        padding: 0
      }));
      const textElm = textBgEl.cloneNode(true);
      textElm.setAttribute("fill", color);
      textElm.setAttribute("stroke", "none");
      groupEl.append(textBgEl);
      groupEl.append(textElm);
      return groupEl;
    }
  };
  __publicField(TLTextUtil, "type", "text");
  var TLTextShapeDef = defineShape({
    type: "text",
    getShapeUtil: () => TLTextUtil,
    validator: textShapeTypeValidator,
    migrations: textShapeMigrations
  });
  function getTextSize(app, props) {
    const { font, text, autoSize, size, w: w3 } = props;
    const minWidth = 16;
    const fontSize = FONT_SIZES[size];
    const cw = autoSize ? "fit-content" : (
      // `measureText` floors the number so we need to do the same here to avoid issues.
      Math.floor(Math.max(minWidth, w3)) + "px"
    );
    const result = app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
      text,
      fontFamily: FONT_FAMILIES[font],
      fontSize,
      width: cw
    }));
    if (autoSize) {
      result.w += 1;
    }
    return {
      width: Math.max(minWidth, result.w),
      height: Math.max(fontSize, result.h)
    };
  }

  // ../../../packages/editor/src/lib/app/shapeutils/TLVideoUtil/TLVideoUtil.tsx
  var React30 = __toESM(require_react());
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  var TLVideoUtil = class extends TLBoxUtil {
    constructor() {
      super(...arguments);
      __publicField(this, "canEdit", () => true);
      __publicField(this, "isAspectRatioLocked", () => true);
    }
    defaultProps() {
      return {
        opacity: "1",
        w: 100,
        h: 100,
        assetId: null,
        time: 0,
        playing: true,
        url: ""
      };
    }
    render(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(TLVideoUtilComponent, { shape, videoUtil: this });
    }
    indicator(shape) {
      return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("rect", { width: toDomPrecision(shape.props.w), height: toDomPrecision(shape.props.h) });
    }
    toSvg(shape) {
      const g3 = document.createElementNS("http://www.w3.org/2000/svg", "g");
      const image = document.createElementNS("http://www.w3.org/2000/svg", "image");
      image.setAttributeNS("http://www.w3.org/1999/xlink", "href", serializeVideo(shape.id));
      image.setAttribute("width", shape.props.w.toString());
      image.setAttribute("height", shape.props.h.toString());
      g3.appendChild(image);
      return g3;
    }
  };
  __publicField(TLVideoUtil, "type", "video");
  var TLVideoShapeDef = defineShape({
    type: "video",
    getShapeUtil: () => TLVideoUtil,
    validator: videoShapeTypeValidator,
    migrations: videoShapeMigrations
  });
  function serializeVideo(id) {
    const splitId = id.split(":")[1];
    const video = document.querySelector(`.tl-video-shape-${splitId}`);
    if (video) {
      const canvas = document.createElement("canvas");
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext("2d").drawImage(video, 0, 0);
      return canvas.toDataURL("image/png");
    } else
      throw new Error("Video with id " + splitId + " not found");
  }
  var TLVideoUtilComponent = track(function TLVideoUtilComponent2(props) {
    const { Spinner: Spinner2 } = useEditorComponents();
    const { shape, videoUtil } = props;
    const showControls = videoUtil.app.getBounds(shape).w * videoUtil.app.zoomLevel >= 110;
    const asset = shape.props.assetId ? videoUtil.app.getAssetById(shape.props.assetId) : null;
    const { w: w3, h: h3, time, playing } = shape.props;
    const isEditing = useIsEditing(shape.id);
    const prefersReducedMotion = usePrefersReducedMotion();
    const rVideo = React30.useRef(null);
    const handlePlay = React30.useCallback(
      (e2) => {
        const video = e2.currentTarget;
        videoUtil.app.updateShapes([
          {
            type: "video",
            id: shape.id,
            props: {
              playing: true,
              time: video.currentTime
            }
          }
        ]);
      },
      [shape.id, videoUtil.app]
    );
    const handlePause = React30.useCallback(
      (e2) => {
        const video = e2.currentTarget;
        videoUtil.app.updateShapes([
          {
            type: "video",
            id: shape.id,
            props: {
              playing: false,
              time: video.currentTime
            }
          }
        ]);
      },
      [shape.id, videoUtil.app]
    );
    const handleSetCurrentTime = React30.useCallback(
      (e2) => {
        const video = e2.currentTarget;
        if (isEditing) {
          videoUtil.app.updateShapes([
            {
              type: "video",
              id: shape.id,
              props: {
                time: video.currentTime
              }
            }
          ]);
        }
      },
      [isEditing, shape.id, videoUtil.app]
    );
    const [isLoaded, setIsLoaded] = React30.useState(false);
    const handleLoadedData = React30.useCallback(
      (e2) => {
        const video = e2.currentTarget;
        if (time !== video.currentTime) {
          video.currentTime = time;
        }
        if (!playing) {
          video.pause();
        }
        setIsLoaded(true);
      },
      [playing, time]
    );
    React30.useEffect(() => {
      const video = rVideo.current;
      if (!video)
        return;
      if (isLoaded && !isEditing && time !== video.currentTime) {
        video.currentTime = time;
      }
    }, [isEditing, isLoaded, time]);
    React30.useEffect(() => {
      if (prefersReducedMotion) {
        const video = rVideo.current;
        video.pause();
        video.currentTime = 0;
      }
    }, [rVideo, prefersReducedMotion]);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(import_jsx_runtime53.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(HTMLContainer, { id: shape.id, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("div", { className: "tl-counter-scaled", children: (asset == null ? void 0 : asset.props.src) ? /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(
        "video",
        {
          ref: rVideo,
          className: `tl-video tl-video-shape-${shape.id.split(":")[1]} tl-hitarea-stroke`,
          width: "100%",
          height: "100%",
          draggable: false,
          playsInline: true,
          autoPlay: true,
          muted: true,
          loop: true,
          disableRemotePlayback: true,
          disablePictureInPicture: true,
          controls: isEditing && showControls,
          onPlay: handlePlay,
          onPause: handlePause,
          onTimeUpdate: handleSetCurrentTime,
          onLoadedData: handleLoadedData,
          hidden: !isLoaded,
          children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("source", { src: asset.props.src })
        }
      ) : Spinner2 ? /* @__PURE__ */ (0, import_jsx_runtime53.jsx)("g", { transform: `translate(${(w3 - 38) / 2}, ${(h3 - 38) / 2})`, children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(Spinner2, {}) }) : null }) }),
      "url" in shape.props && shape.props.url && /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(HyperlinkButton, { url: shape.props.url, zoomLevel: videoUtil.app.zoomLevel })
    ] });
  });

  // ../../../packages/editor/src/lib/config/TldrawEditorConfig.tsx
  var _TldrawEditorConfig = class {
    constructor(args) {
      __publicField(this, "storeSchema");
      __publicField(this, "shapes");
      __publicField(this, "TLShape");
      __publicField(this, "tools");
      const { shapes = [], tools = [], allowUnknownShapes = false, derivePresenceState } = args;
      this.tools = tools;
      this.shapes = [
        TLArrowShapeDef,
        TLBookmarkShapeDef,
        TLDrawShapeDef,
        TLEmbedShapeDef,
        TLFrameShapeDef,
        TLGeoShapeDef,
        TLGroupShapeDef,
        TLImageShapeDef,
        TLLineShapeDef,
        TLNoteShapeDef,
        TLTextShapeDef,
        TLVideoShapeDef,
        ...shapes
      ];
      this.storeSchema = createTLSchema({
        allowUnknownShapes,
        customShapeDefs: shapes,
        derivePresenceState
      });
      this.TLShape = this.storeSchema.types.shape;
    }
    createStore(config) {
      var _a5, _b2;
      let initialData = config.initialData;
      if (initialData) {
        initialData = CLIENT_FIXUP_SCRIPT(initialData);
      }
      return new Store({
        schema: this.storeSchema,
        initialData,
        props: {
          userId: (_a5 = config == null ? void 0 : config.userId) != null ? _a5 : TLUser.createId(),
          instanceId: (_b2 = config == null ? void 0 : config.instanceId) != null ? _b2 : TLInstance.createId(),
          documentId: TLDOCUMENT_ID
        }
      });
    }
  };
  var TldrawEditorConfig = _TldrawEditorConfig;
  __publicField(TldrawEditorConfig, "default", new _TldrawEditorConfig({}));

  // ../../../packages/editor/src/lib/utils/data.ts
  function uniqueId() {
    return nanoid();
  }
  function fileToBase64(file) {
    return new Promise((resolve, reject) => {
      if (file) {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = (error) => reject(error);
        reader.onabort = (error) => reject(error);
      }
    });
  }
  function getIncrementedName(name, others) {
    var _a5;
    let result = name;
    const set = new Set(others);
    while (set.has(result)) {
      result = ((_a5 = /^.*(\d+)$/.exec(result)) == null ? void 0 : _a5[1]) ? result.replace(/(\d+)(?=\D?)$/, (m3) => {
        return (+m3 + 1).toString();
      }) : `${result} 1`;
    }
    return result;
  }

  // ../../../packages/editor/src/lib/utils/props-for-next-shape.ts
  function setPropsForNextShape(previousProps, newProps) {
    let nextProps = null;
    for (const [prop, value] of Object.entries(newProps)) {
      if (!TL_STYLE_TYPES.has(prop))
        continue;
      if (!nextProps)
        nextProps = __spreadValues({}, previousProps);
      nextProps[prop] = value;
    }
    return nextProps != null ? nextProps : previousProps;
  }

  // ../../../packages/editor/src/lib/utils/rotation.ts
  function getRotationSnapshot({ app }) {
    const {
      selectionRotation,
      selectionPageCenter,
      inputs: { originPagePoint },
      selectedShapes
    } = app;
    return {
      selectionPageCenter,
      initialCursorAngle: selectionPageCenter.angle(originPagePoint),
      initialSelectionRotation: selectionRotation,
      shapeSnapshots: selectedShapes.map((shape) => ({
        shape: structuredClone(shape),
        initialPagePoint: app.getPagePointById(shape.id)
      }))
    };
  }
  function applyRotationToSnapshotShapes({
    delta,
    app,
    snapshot,
    stage
  }) {
    const { selectionPageCenter, shapeSnapshots } = snapshot;
    app.updateShapes(
      shapeSnapshots.map(({ shape, initialPagePoint }) => {
        const parentTransform = isShapeId(shape.parentId) ? app.getPageTransformById(shape.parentId) : Matrix2d.Identity();
        const newPagePoint = Vec2d.RotWith(initialPagePoint, selectionPageCenter, delta);
        const newLocalPoint = Matrix2d.applyToPoint(
          // use the current parent transform in case it has moved/resized since the start
          // (e.g. if rotating a shape at the edge of a group)
          Matrix2d.Inverse(parentTransform),
          newPagePoint
        );
        const newRotation = canolicalizeRotation(shape.rotation + delta);
        return {
          id: shape.id,
          type: shape.type,
          x: newLocalPoint.x,
          y: newLocalPoint.y,
          rotation: newRotation
        };
      })
    );
    const changes = [];
    shapeSnapshots.forEach(({ shape }) => {
      var _a5, _b2, _c;
      const current = app.getShapeById(shape.id);
      if (!current)
        return;
      const util = app.getShapeUtil(shape);
      if (stage === "start" || stage === "one-off") {
        const changeStart = (_a5 = util.onRotateStart) == null ? void 0 : _a5.call(util, shape);
        if (changeStart)
          changes.push(changeStart);
      }
      const changeUpdate = (_b2 = util.onRotate) == null ? void 0 : _b2.call(util, shape, current);
      if (changeUpdate)
        changes.push(changeUpdate);
      if (stage === "end" || stage === "one-off") {
        const changeEnd = (_c = util.onRotateEnd) == null ? void 0 : _c.call(util, shape, current);
        if (changeEnd)
          changes.push(changeEnd);
      }
    });
    if (changes.length > 0) {
      app.updateShapes(changes);
    }
  }

  // ../../../packages/editor/src/lib/app/derivations/arrowBindingsIndex.ts
  var arrowBindingsIndex = (store) => {
    const shapeHistory = store.query.filterHistory("shape");
    const arrowQuery = store.query.records("shape", () => ({ type: { eq: "arrow" } }));
    function fromScratch() {
      const allArrows = arrowQuery.value;
      const bindings2Arrows = {};
      for (const arrow2 of allArrows) {
        const { start, end } = arrow2.props;
        if (start.type === "binding") {
          const arrows = bindings2Arrows[start.boundShapeId];
          if (arrows)
            arrows.push({ arrowId: arrow2.id, handleId: "start" });
          else
            bindings2Arrows[start.boundShapeId] = [{ arrowId: arrow2.id, handleId: "start" }];
        }
        if (end.type === "binding") {
          const arrows = bindings2Arrows[end.boundShapeId];
          if (arrows)
            arrows.push({ arrowId: arrow2.id, handleId: "end" });
          else
            bindings2Arrows[end.boundShapeId] = [{ arrowId: arrow2.id, handleId: "end" }];
        }
      }
      return bindings2Arrows;
    }
    return computed("arrowBindingsIndex", (_lastValue, lastComputedEpoch) => {
      if (isUninitialized(_lastValue)) {
        return fromScratch();
      }
      const lastValue = _lastValue;
      const diff = shapeHistory.getDiffSince(lastComputedEpoch);
      if (diff === RESET_VALUE) {
        return fromScratch();
      }
      let nextValue = void 0;
      function ensureNewArray(boundShapeId) {
        if (!nextValue) {
          nextValue = __spreadValues({}, lastValue);
        }
        if (!nextValue[boundShapeId]) {
          nextValue[boundShapeId] = [];
        } else if (nextValue[boundShapeId] === lastValue[boundShapeId]) {
          nextValue[boundShapeId] = [...nextValue[boundShapeId]];
        }
      }
      function removingBinding(boundShapeId, arrowId, handleId) {
        ensureNewArray(boundShapeId);
        nextValue[boundShapeId] = nextValue[boundShapeId].filter(
          (binding) => binding.arrowId !== arrowId || binding.handleId !== handleId
        );
        if (nextValue[boundShapeId].length === 0) {
          delete nextValue[boundShapeId];
        }
      }
      function addBinding(boundShapeId, arrowId, handleId) {
        ensureNewArray(boundShapeId);
        nextValue[boundShapeId].push({ arrowId, handleId });
      }
      for (const changes of diff) {
        for (const newShape of Object.values(changes.added)) {
          if (TLArrowShapeDef.is(newShape)) {
            const { start, end } = newShape.props;
            if (start.type === "binding") {
              addBinding(start.boundShapeId, newShape.id, "start");
            }
            if (end.type === "binding") {
              addBinding(end.boundShapeId, newShape.id, "end");
            }
          }
        }
        for (const [prev, next] of Object.values(changes.updated)) {
          if (!TLArrowShapeDef.is(prev) || !TLArrowShapeDef.is(next))
            continue;
          for (const handle of ["start", "end"]) {
            const prevTerminal = prev.props[handle];
            const nextTerminal = next.props[handle];
            if (prevTerminal.type === "binding" && nextTerminal.type === "point") {
              removingBinding(prevTerminal.boundShapeId, prev.id, handle);
            } else if (prevTerminal.type === "point" && nextTerminal.type === "binding") {
              addBinding(nextTerminal.boundShapeId, next.id, handle);
            } else if (prevTerminal.type === "binding" && nextTerminal.type === "binding" && prevTerminal.boundShapeId !== nextTerminal.boundShapeId) {
              removingBinding(prevTerminal.boundShapeId, prev.id, handle);
              addBinding(nextTerminal.boundShapeId, next.id, handle);
            }
          }
        }
        for (const prev of Object.values(changes.removed)) {
          if (TLArrowShapeDef.is(prev)) {
            const { start, end } = prev.props;
            if (start.type === "binding") {
              removingBinding(start.boundShapeId, prev.id, "start");
            }
            if (end.type === "binding") {
              removingBinding(end.boundShapeId, prev.id, "end");
            }
          }
        }
      }
      return nextValue != null ? nextValue : lastValue;
    });
  };

  // ../../../packages/editor/src/lib/app/derivations/parentsToChildrenWithIndexes.ts
  var parentsToChildrenWithIndexes = (store) => {
    const shapeIds = store.query.ids("shape");
    function fromScratch() {
      const result = {};
      shapeIds.value.forEach((id) => {
        const shape = store.get(id);
        if (!result[shape.parentId]) {
          result[shape.parentId] = [];
        }
        result[shape.parentId].push([id, shape.index]);
      });
      Object.values(result).forEach((arr) => arr.sort((a3, b3) => a3[1] < b3[1] ? -1 : 1));
      return result;
    }
    return computed(
      "parentsToChildrenWithIndexes",
      (lastValue, lastComputedEpoch) => {
        if (isUninitialized(lastValue)) {
          return fromScratch();
        }
        const diff = store.history.getDiffSince(lastComputedEpoch);
        if (diff === RESET_VALUE) {
          return fromScratch();
        }
        if (diff.length === 0)
          return lastValue;
        let newValue = null;
        const ensureNewArray = (parentId) => {
          if (!newValue) {
            newValue = __spreadValues({}, lastValue);
          }
          if (!newValue[parentId]) {
            newValue[parentId] = [];
          } else if (newValue[parentId] === lastValue[parentId]) {
            newValue[parentId] = [...newValue[parentId]];
          }
        };
        const toSort = /* @__PURE__ */ new Set();
        let changes;
        for (let i3 = 0, n3 = diff.length; i3 < n3; i3++) {
          changes = diff[i3];
          for (const record of Object.values(changes.added)) {
            if (!isShape(record))
              continue;
            ensureNewArray(record.parentId);
            newValue[record.parentId].push([record.id, record.index]);
            toSort.add(newValue[record.parentId]);
          }
          for (const [from, to] of Object.values(changes.updated)) {
            if (!isShape(to))
              continue;
            if (!isShape(from))
              continue;
            if (from.parentId !== to.parentId) {
              ensureNewArray(from.parentId);
              ensureNewArray(to.parentId);
              newValue[from.parentId].splice(
                newValue[from.parentId].findIndex((i4) => i4[0] === to.id),
                1
              );
              newValue[to.parentId].push([to.id, to.index]);
              toSort.add(newValue[to.parentId]);
            } else if (from.index !== to.index) {
              ensureNewArray(to.parentId);
              const idx = newValue[to.parentId].findIndex((i4) => i4[0] === to.id);
              newValue[to.parentId][idx] = [to.id, to.index];
              toSort.add(newValue[to.parentId]);
            }
          }
          for (const record of Object.values(changes.removed)) {
            if (!isShape(record))
              continue;
            ensureNewArray(record.parentId);
            newValue[record.parentId].splice(
              newValue[record.parentId].findIndex((i4) => i4[0] === record.id),
              1
            );
          }
        }
        for (const arr of toSort) {
          arr.sort((a3, b3) => a3[1] < b3[1] ? -1 : 1);
        }
        return newValue != null ? newValue : lastValue;
      }
    );
  };

  // ../../../packages/editor/src/lib/app/derivations/shapeIdsInCurrentPage.ts
  var isShapeInPage = (store, pageId, shape) => {
    while (!TLPage.isId(shape.parentId)) {
      const parent = store.get(shape.parentId);
      if (!parent)
        return false;
      shape = parent;
    }
    return shape.parentId === pageId;
  };
  var shapeIdsInCurrentPage = (store, getCurrentPageId) => {
    const shapesIndex = store.query.ids("shape");
    let lastPageId = null;
    function fromScratch() {
      const currentPageId = getCurrentPageId();
      lastPageId = currentPageId;
      return new Set(
        [...shapesIndex.value].filter((id) => isShapeInPage(store, currentPageId, store.get(id)))
      );
    }
    return computed("_shapeIdsInCurrentPage", (prevValue, lastComputedEpoch) => {
      if (isUninitialized(prevValue)) {
        return fromScratch();
      }
      const currentPageId = getCurrentPageId();
      if (currentPageId !== lastPageId) {
        return fromScratch();
      }
      const diff = store.history.getDiffSince(lastComputedEpoch);
      if (diff === RESET_VALUE) {
        return fromScratch();
      }
      const builder = new IncrementalSetConstructor(
        prevValue
      );
      for (const changes of diff) {
        for (const record of Object.values(changes.added)) {
          if (isShape(record) && isShapeInPage(store, currentPageId, record)) {
            builder.add(record.id);
          }
        }
        for (const [_from, to] of Object.values(changes.updated)) {
          if (isShape(to)) {
            if (isShapeInPage(store, currentPageId, to)) {
              builder.add(to.id);
            } else {
              builder.remove(to.id);
            }
          }
        }
        for (const id of Object.keys(changes.removed)) {
          if (isShapeId(id)) {
            builder.remove(id);
          }
        }
      }
      const result = builder.get();
      if (!result) {
        return prevValue;
      }
      return withDiff(result.value, result.diff);
    });
  };

  // ../../../packages/editor/src/lib/app/managers/ActiveAreaManager.ts
  var DEFAULT_OFFSETS = {
    top: 10,
    left: 10,
    bottom: 10,
    right: 10
  };
  function getActiveAreaScreenSpace(app) {
    const containerEl = app.getContainer();
    const el = containerEl.querySelector('*[data-tldraw-area="active-drawing"]');
    const out = __spreadProps(__spreadValues({}, DEFAULT_OFFSETS), {
      width: 0,
      height: 0
    });
    if (el && containerEl) {
      const cBbbox = containerEl.getBoundingClientRect();
      const bbox = el.getBoundingClientRect();
      out.top = bbox.top;
      out.left = bbox.left;
      out.bottom = cBbbox.height - bbox.bottom;
      out.right = cBbbox.width - bbox.right;
    }
    out.width = app.viewportScreenBounds.width - out.left - out.right;
    out.height = app.viewportScreenBounds.height - out.top - out.bottom;
    return out;
  }
  function getActiveAreaPageSpace(app) {
    const out = getActiveAreaScreenSpace(app);
    const z2 = app.zoomLevel;
    out.left /= z2;
    out.right /= z2;
    out.top /= z2;
    out.bottom /= z2;
    out.width /= z2;
    out.height /= z2;
    return out;
  }
  var ActiveAreaManager = class {
    constructor(app) {
      this.app = app;
      __publicField(this, "offsets", atom("activeAreaOffsets", DEFAULT_OFFSETS));
      __publicField(this, "updateOffsets", () => {
        const offsets = getActiveAreaPageSpace(this.app);
        this.offsets.set(offsets);
      });
      // Clear the listener
      __publicField(this, "dispose", () => {
        window.addEventListener("resize", this.updateOffsets);
      });
      window.addEventListener("resize", this.updateOffsets);
      this.app.disposables.add(this.dispose);
    }
  };

  // ../../../packages/editor/src/lib/app/managers/CameraManager.ts
  var CAMERA_SETTLE_TIMEOUT = 12;
  var CameraManager = class {
    constructor(app) {
      this.app = app;
      __publicField(this, "state", atom("camera state", "idle"));
      __publicField(this, "timeoutRemaining", 0);
      __publicField(this, "decay", (elapsed) => {
        this.timeoutRemaining -= elapsed;
        if (this.timeoutRemaining <= 0) {
          this.state.set("idle");
          this.app.off("tick", this.decay);
          this.app.updateCullingBounds();
        }
      });
      __publicField(this, "tick", () => {
        this.timeoutRemaining = CAMERA_SETTLE_TIMEOUT;
        if (this.state.__unsafe__getWithoutCapture() === "idle") {
          this.state.set("moving");
          this.app.on("tick", this.decay);
        }
      });
    }
  };

  // ../../../packages/editor/src/lib/app/managers/ClickManager.ts
  var MAX_CLICK_DISTANCE = 40;
  var ClickManager = class {
    constructor(app) {
      this.app = app;
      __publicField(this, "_clickId", "");
      __publicField(this, "_clickTimeout");
      __publicField(this, "_clickScreenPoint");
      __publicField(this, "_previousScreenPoint");
      __publicField(this, "_getClickTimeout", (state, id = uniqueId()) => {
        this._clickId = id;
        clearTimeout(this._clickTimeout);
        this._clickTimeout = setTimeout(
          () => {
            if (this._clickState === state && this._clickId === id) {
              switch (this._clickState) {
                case "pendingTriple": {
                  this.app.dispatch(__spreadProps(__spreadValues({}, this.lastPointerInfo), {
                    type: "click",
                    name: "double_click",
                    phase: "settle"
                  }));
                  break;
                }
                case "pendingQuadruple": {
                  this.app.dispatch(__spreadProps(__spreadValues({}, this.lastPointerInfo), {
                    type: "click",
                    name: "triple_click",
                    phase: "settle"
                  }));
                  break;
                }
                case "pendingOverflow": {
                  this.app.dispatch(__spreadProps(__spreadValues({}, this.lastPointerInfo), {
                    type: "click",
                    name: "quadruple_click",
                    phase: "settle"
                  }));
                  break;
                }
                default: {
                }
              }
              this._clickState = "idle";
            }
          },
          state === "idle" || state === "pendingDouble" ? DOUBLE_CLICK_DURATION : MULTI_CLICK_DURATION
        );
      });
      /**
       * The current click state.
       *
       * @internal
       */
      __publicField(this, "_clickState", "idle");
      __publicField(this, "lastPointerInfo", {});
      /**
       * Start the double click timeout.
       *
       * @param info - The event info.
       */
      __publicField(this, "transformPointerDownEvent", (info) => {
        if (!this._clickState)
          return info;
        this._clickScreenPoint = Vec2d.From(info.point);
        if (this._previousScreenPoint && this._previousScreenPoint.dist(this._clickScreenPoint) > MAX_CLICK_DISTANCE) {
          this._clickState = "idle";
        }
        this._previousScreenPoint = this._clickScreenPoint;
        this.lastPointerInfo = info;
        switch (this._clickState) {
          case "idle": {
            this._clickState = "pendingDouble";
            this._clickTimeout = this._getClickTimeout(this._clickState);
            return info;
          }
          case "pendingDouble": {
            this._clickState = "pendingTriple";
            this._clickTimeout = this._getClickTimeout(this._clickState);
            return __spreadProps(__spreadValues({}, info), {
              type: "click",
              name: "double_click",
              phase: "down"
            });
          }
          case "pendingTriple": {
            this._clickState = "pendingQuadruple";
            this._clickTimeout = this._getClickTimeout(this._clickState);
            return __spreadProps(__spreadValues({}, info), {
              type: "click",
              name: "triple_click",
              phase: "down"
            });
          }
          case "pendingQuadruple": {
            this._clickState = "pendingOverflow";
            this._clickTimeout = this._getClickTimeout(this._clickState);
            return __spreadProps(__spreadValues({}, info), {
              type: "click",
              name: "quadruple_click",
              phase: "down"
            });
          }
          case "pendingOverflow": {
            this._clickState = "overflow";
            this._clickTimeout = this._getClickTimeout(this._clickState);
            return info;
          }
          default: {
            this._clickTimeout = this._getClickTimeout(this._clickState);
            return info;
          }
        }
      });
      /**
       * Emit click_up events on pointer up.
       *
       * @param info - The event info.
       */
      __publicField(this, "transformPointerUpEvent", (info) => {
        if (!this._clickState)
          return info;
        this._clickScreenPoint = Vec2d.From(info.point);
        switch (this._clickState) {
          case "pendingTriple": {
            return __spreadProps(__spreadValues({}, this.lastPointerInfo), {
              type: "click",
              name: "double_click",
              phase: "up"
            });
          }
          case "pendingQuadruple": {
            return __spreadProps(__spreadValues({}, this.lastPointerInfo), {
              type: "click",
              name: "triple_click",
              phase: "up"
            });
          }
          case "pendingOverflow": {
            return __spreadProps(__spreadValues({}, this.lastPointerInfo), {
              type: "click",
              name: "quadruple_click",
              phase: "up"
            });
          }
          default: {
            return info;
          }
        }
      });
      /**
       * Cancel the double click timeout.
       *
       * @internal
       */
      __publicField(this, "cancelDoubleClickTimeout", () => {
        this._clickTimeout = clearTimeout(this._clickTimeout);
        this._clickState = "idle";
      });
      /**
       * Handle a move event, possibly cancelling the click timeout.
       *
       * @internal
       */
      __publicField(this, "handleMove", () => {
        if (this._clickState !== "idle" && this._clickScreenPoint && this._clickScreenPoint.dist(this.app.inputs.currentScreenPoint) > (this.app.isCoarsePointer ? COARSE_DRAG_DISTANCE : DRAG_DISTANCE)) {
          this.cancelDoubleClickTimeout();
        }
      });
    }
    /**
     * The current click state.
     *
     * @public
     */
    get clickState() {
      return this._clickState;
    }
  };

  // ../../../packages/editor/src/lib/app/managers/DprManager.ts
  var DprManager = class {
    constructor(app) {
      this.app = app;
      __publicField(this, "_currentMM");
      __publicField(this, "dpr", atom(
        "devicePixelRatio",
        typeof window === "undefined" ? 1 : window.devicePixelRatio
      ));
      // Update the device pixel ratio atom
      __publicField(this, "updateDevicePixelRatio", () => {
        this.dpr.set(window.devicePixelRatio);
        this.rebind();
      });
      // Clear the listener
      __publicField(this, "dispose", () => {
        var _a5;
        (_a5 = this._currentMM) == null ? void 0 : _a5.removeEventListener("change", this.updateDevicePixelRatio);
      });
      this.rebind();
      this.app.disposables.add(this.dispose);
    }
    // Set a listener to update the dpr when the device pixel ratio changes
    rebind() {
      var _a5;
      this.dispose();
      this._currentMM = this.getMedia();
      (_a5 = this._currentMM) == null ? void 0 : _a5.addEventListener("change", this.updateDevicePixelRatio);
    }
    // Get the media query list for the device pixel ratio
    getMedia() {
      if (window.matchMedia) {
        return matchMedia(`(resolution: ${window.devicePixelRatio}dppx)`);
      }
    }
  };

  // ../../../packages/editor/src/lib/app/managers/Stack.ts
  function stack2(items) {
    if (items) {
      let result = EMPTY_STACK_ITEM;
      while (items.length) {
        result = result.push(items.pop());
      }
      return result;
    }
    return EMPTY_STACK_ITEM;
  }
  var EmptyStackItem = class {
    constructor() {
      __publicField(this, "length", 0);
      __publicField(this, "head", null);
      __publicField(this, "tail", this);
    }
    push(head) {
      return new StackItem(head, this);
    }
    toArray() {
      return EMPTY_ARRAY;
    }
    [Symbol.iterator]() {
      return {
        next() {
          return { value: void 0, done: true };
        }
      };
    }
  };
  var EMPTY_STACK_ITEM = new EmptyStackItem();
  var StackItem = class {
    constructor(head, tail) {
      this.head = head;
      this.tail = tail;
      __publicField(this, "length");
      this.length = tail.length + 1;
    }
    push(head) {
      return new StackItem(head, this);
    }
    toArray() {
      return Array.from(this);
    }
    [Symbol.iterator]() {
      let stack3 = this;
      return {
        next() {
          if (stack3.length) {
            const value = stack3.head;
            stack3 = stack3.tail;
            return { value, done: false };
          } else {
            return { value: void 0, done: true };
          }
        }
      };
    }
  };

  // ../../../packages/editor/src/lib/app/managers/HistoryManager.ts
  var HistoryManager = class {
    // A flag for whether the user is in a batch operation
    constructor(ctx, onBatchComplete, annotateError2) {
      this.ctx = ctx;
      this.onBatchComplete = onBatchComplete;
      this.annotateError = annotateError2;
      __publicField(this, "_undos", atom("HistoryManager.undos", stack2()));
      // Updated by each action that includes and undo
      __publicField(this, "_redos", atom("HistoryManager.redos", stack2()));
      // Updated when a user undoes
      __publicField(this, "_batchDepth", 0);
      __publicField(this, "_commands", {});
      __publicField(this, "createCommand", (name, constructor, handle) => {
        if (this._commands[name]) {
          throw new Error(`Duplicate command: ${name}`);
        }
        this._commands[name] = handle;
        const exec = (...args) => {
          if (!this._batchDepth) {
            this.batch(() => exec(...args));
            return this.ctx;
          }
          const result = constructor(...args);
          if (!result) {
            return this.ctx;
          }
          const { data, ephemeral, squashing, preservesRedoStack } = result;
          this.ignoringUpdates((undos, redos) => {
            handle.do(data);
            return { undos, redos };
          });
          if (!ephemeral) {
            const prev = this._undos.value.head;
            if (squashing && prev && prev.type === "command" && prev.name === name && prev.preservesRedoStack === preservesRedoStack) {
              this._undos.update(
                (undos) => undos.tail.push(__spreadProps(__spreadValues({}, prev), {
                  id: uniqueId(),
                  data: devFreeze(handle.squash(prev.data, data))
                }))
              );
            } else {
              this._undos.update(
                (undos) => undos.push({
                  type: "command",
                  name,
                  data: devFreeze(data),
                  id: uniqueId(),
                  preservesRedoStack
                })
              );
            }
            if (!result.preservesRedoStack) {
              this._redos.set(stack2());
            }
            this.ctx.emit("change-history", { reason: "push" });
          }
          return this.ctx;
        };
        return exec;
      });
      __publicField(this, "batch", (fn) => {
        try {
          this._batchDepth++;
          if (this._batchDepth === 1) {
            transact(() => {
              var _a5, _b2;
              const mostRecentActionId = (_a5 = this._undos.value.head) == null ? void 0 : _a5.id;
              fn();
              if (mostRecentActionId !== ((_b2 = this._undos.value.head) == null ? void 0 : _b2.id)) {
                this.onBatchComplete();
              }
            });
          } else {
            fn();
          }
        } catch (error) {
          this.annotateError(error);
          throw error;
        } finally {
          this._batchDepth--;
        }
        return this;
      });
      __publicField(this, "ignoringUpdates", (fn) => {
        let undos = this._undos.value;
        let redos = this._redos.value;
        this._undos.set(stack2());
        this._redos.set(stack2());
        try {
          ;
          ({ undos, redos } = transact(() => fn(undos, redos)));
        } finally {
          this._undos.set(undos);
          this._redos.set(redos);
        }
      });
      // History
      __publicField(this, "_undo", ({
        pushToRedoStack,
        toMark = void 0
      }) => {
        this.ignoringUpdates((undos, redos) => {
          var _a5;
          if (undos.length === 0) {
            return { undos, redos };
          }
          while (((_a5 = undos.head) == null ? void 0 : _a5.type) === "STOP") {
            const mark = undos.head;
            undos = undos.tail;
            if (pushToRedoStack) {
              redos = redos.push(mark);
            }
            if (mark.id === toMark) {
              this.ctx.emit(
                "change-history",
                pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark }
              );
              return { undos, redos };
            }
          }
          if (undos.length === 0) {
            this.ctx.emit(
              "change-history",
              pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark }
            );
            return { undos, redos };
          }
          while (undos.head) {
            const command = undos.head;
            undos = undos.tail;
            if (pushToRedoStack) {
              redos = redos.push(command);
            }
            if (command.type === "STOP") {
              if (command.onUndo && (!toMark || command.id === toMark)) {
                this.ctx.emit(
                  "change-history",
                  pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark }
                );
                return { undos, redos };
              }
            } else {
              const handler = this._commands[command.name];
              handler.undo(command.data);
            }
          }
          this.ctx.emit(
            "change-history",
            pushToRedoStack ? { reason: "undo" } : { reason: "bail", markId: toMark }
          );
          return { undos, redos };
        });
        return this;
      });
      __publicField(this, "undo", () => {
        this._undo({ pushToRedoStack: true });
        return this;
      });
      __publicField(this, "redo", () => {
        this.ignoringUpdates((undos, redos) => {
          var _a5;
          if (redos.length === 0) {
            return { undos, redos };
          }
          while (((_a5 = redos.head) == null ? void 0 : _a5.type) === "STOP") {
            undos = undos.push(redos.head);
            redos = redos.tail;
          }
          if (redos.length === 0) {
            this.ctx.emit("change-history", { reason: "redo" });
            return { undos, redos };
          }
          while (redos.head) {
            const command = redos.head;
            undos = undos.push(redos.head);
            redos = redos.tail;
            if (command.type === "STOP") {
              if (command.onRedo) {
                break;
              }
            } else {
              const handler = this._commands[command.name];
              if (handler.redo) {
                handler.redo(command.data);
              } else {
                handler.do(command.data);
              }
            }
          }
          this.ctx.emit("change-history", { reason: "redo" });
          return { undos, redos };
        });
        return this;
      });
      __publicField(this, "bail", () => {
        this._undo({ pushToRedoStack: false });
        return this;
      });
      __publicField(this, "bailToMark", (id) => {
        this._undo({ pushToRedoStack: false, toMark: id });
        return this;
      });
      __publicField(this, "mark", (id = uniqueId(), onUndo = true, onRedo = true) => {
        const mostRecent = this._undos.value.head;
        if (mostRecent && mostRecent.type === "STOP") {
          if (mostRecent.id === id && mostRecent.onUndo === onUndo && mostRecent.onRedo === onRedo) {
            return mostRecent.id;
          }
        }
        this._undos.update((undos) => undos.push({ type: "STOP", id, onUndo, onRedo }));
        this.ctx.emit("mark-history", { id });
        return id;
      });
    }
    get numUndos() {
      return this._undos.value.length;
    }
    get numRedos() {
      return this._redos.value.length;
    }
    clear() {
      this._undos.set(stack2());
      this._redos.set(stack2());
    }
  };

  // ../../../packages/editor/src/lib/app/managers/SnapManager.ts
  var round = (x3) => {
    const decimalPlacesTolerance = 8;
    return Math.round(x3 * __pow(10, decimalPlacesTolerance)) / __pow(10, decimalPlacesTolerance);
  };
  function findAdjacentGaps(gaps, shapeId, gapLength, direction, intersection) {
    const matches = gaps.filter(
      (gap) => (direction === "forward" ? gap.startNode.id === shapeId : gap.endNode.id === shapeId) && round(gap.length) === round(gapLength) && rangeIntersection(
        gap.breadthIntersection[0],
        gap.breadthIntersection[1],
        intersection[0],
        intersection[1]
      )
    );
    if (matches.length === 0)
      return [];
    const nextNodes = /* @__PURE__ */ new Set();
    for (const match of matches) {
      const node = direction === "forward" ? match.endNode.id : match.startNode.id;
      if (!nextNodes.has(node)) {
        nextNodes.add(node);
        matches.push(
          ...findAdjacentGaps(
            gaps,
            node,
            gapLength,
            direction,
            rangeIntersection(
              match.breadthIntersection[0],
              match.breadthIntersection[1],
              intersection[0],
              intersection[1]
            )
          )
        );
      }
    }
    return matches;
  }
  function dedupeGapSnaps(snaps) {
    snaps.sort((a3, b3) => b3.gaps.length - a3.gaps.length);
    for (let i3 = snaps.length - 1; i3 > 0; i3--) {
      const snap = snaps[i3];
      for (let j = i3 - 1; j >= 0; j--) {
        const otherSnap = snaps[j];
        if (otherSnap.direction === snap.direction && snap.gaps.every(
          (gap) => otherSnap.gaps.some(
            (otherGap) => round(gap.startEdge[0].x) === round(otherGap.startEdge[0].x) && round(gap.startEdge[0].y) === round(otherGap.startEdge[0].y) && round(gap.startEdge[1].x) === round(otherGap.startEdge[1].x) && round(gap.startEdge[1].y) === round(otherGap.startEdge[1].y)
          ) && otherSnap.gaps.some(
            (otherGap) => round(gap.endEdge[0].x) === round(otherGap.endEdge[0].x) && round(gap.endEdge[0].y) === round(otherGap.endEdge[0].y) && round(gap.endEdge[1].x) === round(otherGap.endEdge[1].x) && round(gap.endEdge[1].y) === round(otherGap.endEdge[1].y)
          )
        )) {
          snaps.splice(i3, 1);
          break;
        }
      }
    }
  }
  var SnapManager = class {
    constructor(app) {
      this.app = app;
      __publicField(this, "_snapLines", atom("snapLines", void 0));
    }
    get lines() {
      var _a5;
      return (_a5 = this._snapLines.value) != null ? _a5 : EMPTY_ARRAY;
    }
    clear() {
      if (this.lines.length) {
        this._snapLines.set(void 0);
      }
    }
    setLines(lines) {
      this._snapLines.set(lines);
    }
    get snapPointsCache() {
      return this.app.store.createComputedCache("snapPoints", (shape) => {
        const pageTransfrorm = this.app.getPageTransformById(shape.id);
        if (!pageTransfrorm)
          return void 0;
        const util = this.app.getShapeUtil(shape);
        const snapPoints = util.snapPoints(shape);
        return snapPoints.map((point2, i3) => {
          const { x: x3, y: y3 } = Matrix2d.applyToPoint(pageTransfrorm, point2);
          return { x: x3, y: y3, id: `${shape.id}:${i3}` };
        });
      });
    }
    get snapThreshold() {
      return 8 / this.app.zoomLevel;
    }
    get visibleShapesNotInSelection() {
      const selectedIds = this.app.selectedIds;
      const result = /* @__PURE__ */ new Set();
      const processParent = (parentId) => {
        const children = this.app.getSortedChildIds(parentId);
        for (const id of children) {
          const shape = this.app.getShapeById(id);
          if (!shape)
            continue;
          if (shape.type === "arrow")
            continue;
          if (selectedIds.includes(id))
            continue;
          if (!this.app.isShapeInViewport(shape.id))
            continue;
          if (shape.type === "group") {
            processParent(id);
            continue;
          }
          result.add({ id: shape.id, pageBounds: this.app.getPageBoundsById(shape.id) });
          if (shape.type !== "frame") {
            processParent(id);
          }
        }
      };
      const commonFrameAncestor = this.app.findCommonAncestor(
        compact(selectedIds.map((id) => this.app.getShapeById(id))),
        (parent) => parent.type === "frame"
      );
      processParent(commonFrameAncestor != null ? commonFrameAncestor : this.app.currentPageId);
      return result;
    }
    get visibleSnapPointsNotInSelection() {
      const result = [];
      for (const shape of this.visibleShapesNotInSelection) {
        const snapPoints = this.snapPointsCache.get(shape.id);
        if (snapPoints) {
          result.push(...snapPoints);
        }
      }
      return result;
    }
    get visibleGaps() {
      const horizontal = [];
      const vertical = [];
      const sortedShapesHorizontal = [...this.visibleShapesNotInSelection].sort((a3, b3) => {
        return a3.pageBounds.minX - b3.pageBounds.minX;
      });
      for (let i3 = 0; i3 < sortedShapesHorizontal.length; i3++) {
        const startNode = sortedShapesHorizontal[i3];
        for (let j = i3 + 1; j < sortedShapesHorizontal.length; j++) {
          const endNode = sortedShapesHorizontal[j];
          if (
            // is there space between the boxes
            startNode.pageBounds.maxX < endNode.pageBounds.minX && // and they overlap in the y axis
            rangesOverlap(
              startNode.pageBounds.minY,
              startNode.pageBounds.maxY,
              endNode.pageBounds.minY,
              endNode.pageBounds.maxY
            )
          ) {
            horizontal.push({
              startNode,
              endNode,
              startEdge: [
                new Vec2d(startNode.pageBounds.maxX, startNode.pageBounds.minY),
                new Vec2d(startNode.pageBounds.maxX, startNode.pageBounds.maxY)
              ],
              endEdge: [
                new Vec2d(endNode.pageBounds.minX, endNode.pageBounds.minY),
                new Vec2d(endNode.pageBounds.minX, endNode.pageBounds.maxY)
              ],
              length: endNode.pageBounds.minX - startNode.pageBounds.maxX,
              breadthIntersection: rangeIntersection(
                startNode.pageBounds.minY,
                startNode.pageBounds.maxY,
                endNode.pageBounds.minY,
                endNode.pageBounds.maxY
              )
            });
          }
        }
      }
      const sortedShapesVertical = sortedShapesHorizontal.slice(0).sort((a3, b3) => {
        return a3.pageBounds.minY - b3.pageBounds.minY;
      });
      for (let i3 = 0; i3 < sortedShapesVertical.length; i3++) {
        const startNode = sortedShapesVertical[i3];
        for (let j = i3 + 1; j < sortedShapesVertical.length; j++) {
          const endNode = sortedShapesVertical[j];
          if (
            // is there space between the boxes
            startNode.pageBounds.maxY < endNode.pageBounds.minY && // do they overlap in the x axis
            rangesOverlap(
              startNode.pageBounds.minX,
              startNode.pageBounds.maxX,
              endNode.pageBounds.minX,
              endNode.pageBounds.maxX
            )
          ) {
            vertical.push({
              startNode,
              endNode,
              startEdge: [
                new Vec2d(startNode.pageBounds.minX, startNode.pageBounds.maxY),
                new Vec2d(startNode.pageBounds.maxX, startNode.pageBounds.maxY)
              ],
              endEdge: [
                new Vec2d(endNode.pageBounds.minX, endNode.pageBounds.minY),
                new Vec2d(endNode.pageBounds.maxX, endNode.pageBounds.minY)
              ],
              length: endNode.pageBounds.minY - startNode.pageBounds.maxY,
              breadthIntersection: rangeIntersection(
                startNode.pageBounds.minX,
                startNode.pageBounds.maxX,
                endNode.pageBounds.minX,
                endNode.pageBounds.maxX
              )
            });
          }
        }
      }
      return { horizontal, vertical };
    }
    snapTranslate({
      lockedAxis,
      initialSelectionPageBounds,
      initialSelectionSnapPoints,
      dragDelta
    }) {
      var _a5, _b2, _c, _d;
      const isXLocked = lockedAxis === "x";
      const isYLocked = lockedAxis === "y";
      const selectionPageBounds = initialSelectionPageBounds.clone().translate(dragDelta);
      const selectionSnapPoints = initialSelectionSnapPoints.map(({ x: x3, y: y3 }, i3) => ({
        id: "selection:" + i3,
        x: x3 + dragDelta.x,
        y: y3 + dragDelta.y
      }));
      const otherNodeSnapPoints = this.visibleSnapPointsNotInSelection;
      const nearestSnapsX = [];
      const nearestSnapsY = [];
      const minOffset = new Vec2d(this.snapThreshold, this.snapThreshold);
      this.findPointSnaps({
        minOffset,
        nearestSnapsX,
        nearestSnapsY,
        otherNodeSnapPoints,
        selectionSnapPoints
      });
      this.findGapSnaps({ selectionPageBounds, nearestSnapsX, nearestSnapsY, minOffset });
      const nudge = new Vec2d(
        isXLocked ? 0 : (_b2 = (_a5 = nearestSnapsX[0]) == null ? void 0 : _a5.nudge) != null ? _b2 : 0,
        isYLocked ? 0 : (_d = (_c = nearestSnapsY[0]) == null ? void 0 : _c.nudge) != null ? _d : 0
      );
      minOffset.x = 0;
      minOffset.y = 0;
      nearestSnapsX.length = 0;
      nearestSnapsY.length = 0;
      selectionSnapPoints.forEach((s3) => {
        s3.x += nudge.x;
        s3.y += nudge.y;
      });
      selectionPageBounds.translate(nudge);
      this.findPointSnaps({
        minOffset,
        nearestSnapsX,
        nearestSnapsY,
        otherNodeSnapPoints,
        selectionSnapPoints
      });
      this.findGapSnaps({
        selectionPageBounds,
        nearestSnapsX,
        nearestSnapsY,
        minOffset
      });
      const pointSnaps = this.getPointSnapLines({
        nearestSnapsX,
        nearestSnapsY
      });
      const gapSnaps = this.getGapSnapLines({
        selectionPageBounds,
        nearestSnapsX,
        nearestSnapsY
      });
      this._snapLines.set([...gapSnaps, ...pointSnaps]);
      return { nudge };
    }
    // for a handle of a line:
    // - find the nearest snap point
    // - return the nudge vector to snap to that point
    // note: this happens within page space
    snapLineHandleTranslate({
      lineId,
      handleId,
      handlePoint
    }) {
      const line = this.app.getShapeById(lineId);
      if (!line) {
        return { nudge: new Vec2d(0, 0) };
      }
      const util = this.app.getShapeUtilByDef(TLLineShapeDef);
      const handles = util.handles(line).sort(sortByIndex2);
      if (handles.length < 3)
        return { nudge: new Vec2d(0, 0) };
      const handleNumber = handles.findIndex((h3) => h3.id === handleId);
      const handle = handles[handleNumber];
      const segmentNumber = handle.type === "vertex" ? handleNumber / 2 : (handleNumber + 1) / 2;
      const spline = getSplineForLineShape(line);
      const ignoreCount = 1;
      const pageTransform = this.app.getPageTransform(line);
      const pageHeadSegments = spline.segments.slice(0, Math.max(0, segmentNumber - ignoreCount)).map((s3) => Matrix2d.applyToPoints(pageTransform, s3.lut));
      const pageTailSegments = spline.segments.slice(segmentNumber + ignoreCount).map((s3) => Matrix2d.applyToPoints(pageTransform, s3.lut));
      return this.snapHandleTranslate({
        handlePoint,
        additionalOutlines: [...pageHeadSegments, ...pageTailSegments]
      });
    }
    // for a handle:
    // - find the nearest snap point from all non-selected shapes
    // - return the nudge vector to snap to that point
    // note: this happens within page space
    snapHandleTranslate({
      handlePoint,
      additionalOutlines = []
    }) {
      var _a5, _b2;
      const visibleShapesNotInSelection = this.visibleShapesNotInSelection;
      const pageOutlines = [];
      for (const visibleShape of visibleShapesNotInSelection) {
        const shape = this.app.getShapeById(visibleShape.id);
        if (shape.type === "text" || shape.type === "icon") {
          continue;
        }
        const outline = deepCopy(this.app.getOutlineById(visibleShape.id));
        const isClosed = (_b2 = (_a5 = this.app.getShapeUtil(shape)).isClosed) == null ? void 0 : _b2.call(_a5, shape);
        if (isClosed) {
          outline.push(outline[0]);
        }
        pageOutlines.push(Matrix2d.applyToPoints(this.app.getPageTransformById(shape.id), outline));
      }
      let minDistance = this.snapThreshold;
      let nearestPoint = null;
      for (const outline of [...pageOutlines, ...additionalOutlines]) {
        for (let i3 = 0; i3 < outline.length - 1; i3++) {
          const C2 = outline[i3];
          const D3 = outline[i3 + 1];
          const distance = Vec2d.DistanceToLineSegment(C2, D3, handlePoint);
          if (isNaN(distance))
            continue;
          if (distance < minDistance) {
            minDistance = distance;
            nearestPoint = Vec2d.NearestPointOnLineSegment(C2, D3, handlePoint);
          }
        }
      }
      if (nearestPoint) {
        const snapLines = [];
        snapLines.push({
          id: uniqueId(),
          type: "points",
          points: [nearestPoint]
        });
        this._snapLines.set(snapLines);
        return {
          nudge: Vec2d.Sub(nearestPoint, handlePoint)
        };
      }
      return { nudge: new Vec2d(0, 0) };
    }
    snapResize({
      initialSelectionPageBounds,
      dragDelta,
      handle: originalHandle,
      isAspectRatioLocked,
      isResizingFromCenter
    }) {
      var _a5, _b2, _c, _d;
      const {
        box: unsnappedResizedPageBounds,
        scaleX,
        scaleY
      } = Box2d.Resize(
        initialSelectionPageBounds,
        originalHandle,
        isResizingFromCenter ? dragDelta.x * 2 : dragDelta.x,
        isResizingFromCenter ? dragDelta.y * 2 : dragDelta.y,
        isAspectRatioLocked
      );
      let handle = originalHandle;
      if (scaleX < 0) {
        handle = flipSelectionHandleX(handle);
      }
      if (scaleY < 0) {
        handle = flipSelectionHandleY(handle);
      }
      if (isResizingFromCenter) {
        unsnappedResizedPageBounds.center = initialSelectionPageBounds.center;
      }
      const isXLocked = handle === "top" || handle === "bottom";
      const isYLocked = handle === "left" || handle === "right";
      const selectionSnapPoints = getResizeSnapPointsForHandle(handle, unsnappedResizedPageBounds);
      const otherNodeSnapPoints = this.visibleSnapPointsNotInSelection;
      const nearestSnapsX = [];
      const nearestSnapsY = [];
      const minOffset = new Vec2d(this.snapThreshold, this.snapThreshold);
      this.findPointSnaps({
        minOffset,
        nearestSnapsX,
        nearestSnapsY,
        otherNodeSnapPoints,
        selectionSnapPoints
      });
      const nudge = new Vec2d(
        isXLocked ? 0 : (_b2 = (_a5 = nearestSnapsX[0]) == null ? void 0 : _a5.nudge) != null ? _b2 : 0,
        isYLocked ? 0 : (_d = (_c = nearestSnapsY[0]) == null ? void 0 : _c.nudge) != null ? _d : 0
      );
      if (isAspectRatioLocked && isSelectionCorner(handle) && nudge.len() !== 0) {
        const primaryNudgeAxis = nearestSnapsX.length && nearestSnapsY.length ? Math.abs(nudge.x) < Math.abs(nudge.y) ? "x" : "y" : nearestSnapsX.length ? "x" : "y";
        const ratio = initialSelectionPageBounds.aspectRatio;
        if (primaryNudgeAxis === "x") {
          nearestSnapsY.length = 0;
          nudge.y = nudge.x / ratio;
          if (handle === "bottom_left" || handle === "top_right") {
            nudge.y = -nudge.y;
          }
        } else {
          nearestSnapsX.length = 0;
          nudge.x = nudge.y * ratio;
          if (handle === "bottom_left" || handle === "top_right") {
            nudge.x = -nudge.x;
          }
        }
      }
      const snappedDelta = Vec2d.Add(dragDelta, nudge);
      const { box: snappedResizedPageBounds } = Box2d.Resize(
        initialSelectionPageBounds,
        originalHandle,
        isResizingFromCenter ? snappedDelta.x * 2 : snappedDelta.x,
        isResizingFromCenter ? snappedDelta.y * 2 : snappedDelta.y,
        isAspectRatioLocked
      );
      if (isResizingFromCenter) {
        snappedResizedPageBounds.center = initialSelectionPageBounds.center;
      }
      const snappedSelectionPoints = getResizeSnapPointsForHandle("any", snappedResizedPageBounds);
      nearestSnapsX.length = 0;
      nearestSnapsY.length = 0;
      minOffset.x = 0;
      minOffset.y = 0;
      this.findPointSnaps({
        minOffset,
        nearestSnapsX,
        nearestSnapsY,
        otherNodeSnapPoints,
        selectionSnapPoints: snappedSelectionPoints
      });
      const pointSnaps = this.getPointSnapLines({
        nearestSnapsX,
        nearestSnapsY
      });
      this._snapLines.set([...pointSnaps]);
      return { nudge };
    }
    findPointSnaps({
      selectionSnapPoints,
      otherNodeSnapPoints,
      minOffset,
      nearestSnapsX,
      nearestSnapsY
    }) {
      for (const thisSnapPoint of selectionSnapPoints) {
        for (const otherSnapPoint of otherNodeSnapPoints) {
          const offset = Vec2d.Sub(thisSnapPoint, otherSnapPoint);
          const offsetX = Math.abs(offset.x);
          const offsetY = Math.abs(offset.y);
          if (round(offsetX) <= round(minOffset.x)) {
            if (round(offsetX) < round(minOffset.x)) {
              nearestSnapsX.length = 0;
            }
            nearestSnapsX.push({
              type: "points",
              points: { thisPoint: thisSnapPoint, otherPoint: otherSnapPoint },
              nudge: otherSnapPoint.x - thisSnapPoint.x
            });
            minOffset.x = offsetX;
          }
          if (round(offsetY) <= round(minOffset.y)) {
            if (round(offsetY) < round(minOffset.y)) {
              nearestSnapsY.length = 0;
            }
            nearestSnapsY.push({
              type: "points",
              points: { thisPoint: thisSnapPoint, otherPoint: otherSnapPoint },
              nudge: otherSnapPoint.y - thisSnapPoint.y
            });
            minOffset.y = offsetY;
          }
        }
      }
    }
    findGapSnaps({
      selectionPageBounds,
      minOffset,
      nearestSnapsX,
      nearestSnapsY
    }) {
      for (const gap of this.visibleGaps.horizontal) {
        if (!rangesOverlap(
          gap.breadthIntersection[0],
          gap.breadthIntersection[1],
          selectionPageBounds.minY,
          selectionPageBounds.maxY
        )) {
          continue;
        }
        const gapMidX = gap.startEdge[0].x + gap.length / 2;
        const centerNudge = gapMidX - selectionPageBounds.center.x;
        const gapIsLargerThanSelection = gap.length > selectionPageBounds.width;
        if (gapIsLargerThanSelection && round(Math.abs(centerNudge)) <= round(minOffset.x)) {
          if (round(Math.abs(centerNudge)) < round(minOffset.x)) {
            nearestSnapsX.length = 0;
          }
          minOffset.x = Math.abs(centerNudge);
          const snap = {
            type: "gap_center",
            gap,
            nudge: centerNudge
          };
          const otherCenterSnap = nearestSnapsX.find(({ type }) => type === "gap_center");
          const gapBreadthsOverlap = otherCenterSnap && rangeIntersection(
            gap.breadthIntersection[0],
            gap.breadthIntersection[1],
            otherCenterSnap.gap.breadthIntersection[0],
            otherCenterSnap.gap.breadthIntersection[1]
          );
          if (otherCenterSnap && otherCenterSnap.gap.length > gap.length && gapBreadthsOverlap) {
            nearestSnapsX[nearestSnapsX.indexOf(otherCenterSnap)] = snap;
          } else if (!otherCenterSnap || !gapBreadthsOverlap) {
            nearestSnapsX.push(snap);
          }
        }
        const duplicationLeftX = gap.startNode.pageBounds.minX - gap.length;
        const selectionRightX = selectionPageBounds.maxX;
        const duplicationLeftNudge = duplicationLeftX - selectionRightX;
        if (round(Math.abs(duplicationLeftNudge)) <= round(minOffset.x)) {
          if (round(Math.abs(duplicationLeftNudge)) < round(minOffset.x)) {
            nearestSnapsX.length = 0;
          }
          minOffset.x = Math.abs(duplicationLeftNudge);
          nearestSnapsX.push({
            type: "gap_duplicate",
            gap,
            protrusionDirection: "left",
            nudge: duplicationLeftNudge
          });
        }
        const duplicationRightX = gap.endNode.pageBounds.maxX + gap.length;
        const selectionLeftX = selectionPageBounds.minX;
        const duplicationRightNudge = duplicationRightX - selectionLeftX;
        if (round(Math.abs(duplicationRightNudge)) <= round(minOffset.x)) {
          if (round(Math.abs(duplicationRightNudge)) < round(minOffset.x)) {
            nearestSnapsX.length = 0;
          }
          minOffset.x = Math.abs(duplicationRightNudge);
          nearestSnapsX.push({
            type: "gap_duplicate",
            gap,
            protrusionDirection: "right",
            nudge: duplicationRightNudge
          });
        }
      }
      for (const gap of this.visibleGaps.vertical) {
        if (!rangesOverlap(
          gap.breadthIntersection[0],
          gap.breadthIntersection[1],
          selectionPageBounds.minX,
          selectionPageBounds.maxX
        )) {
          continue;
        }
        const gapMidY = gap.startEdge[0].y + gap.length / 2;
        const centerNudge = gapMidY - selectionPageBounds.center.y;
        const gapIsLargerThanSelection = gap.length > selectionPageBounds.height;
        if (gapIsLargerThanSelection && round(Math.abs(centerNudge)) <= round(minOffset.y)) {
          if (round(Math.abs(centerNudge)) < round(minOffset.y)) {
            nearestSnapsY.length = 0;
          }
          minOffset.y = Math.abs(centerNudge);
          const snap = {
            type: "gap_center",
            gap,
            nudge: centerNudge
          };
          const otherCenterSnap = nearestSnapsY.find(({ type }) => type === "gap_center");
          const gapBreadthsOverlap = otherCenterSnap && rangesOverlap(
            otherCenterSnap.gap.breadthIntersection[0],
            otherCenterSnap.gap.breadthIntersection[1],
            gap.breadthIntersection[0],
            gap.breadthIntersection[1]
          );
          if (otherCenterSnap && otherCenterSnap.gap.length > gap.length && gapBreadthsOverlap) {
            nearestSnapsY[nearestSnapsY.indexOf(otherCenterSnap)] = snap;
          } else if (!otherCenterSnap || !gapBreadthsOverlap) {
            nearestSnapsY.push(snap);
          }
          continue;
        }
        const duplicationTopY = gap.startNode.pageBounds.minY - gap.length;
        const selectionBottomY = selectionPageBounds.maxY;
        const duplicationTopNudge = duplicationTopY - selectionBottomY;
        if (round(Math.abs(duplicationTopNudge)) <= round(minOffset.y)) {
          if (round(Math.abs(duplicationTopNudge)) < round(minOffset.y)) {
            nearestSnapsY.length = 0;
          }
          minOffset.y = Math.abs(duplicationTopNudge);
          nearestSnapsY.push({
            type: "gap_duplicate",
            gap,
            protrusionDirection: "top",
            nudge: duplicationTopNudge
          });
        }
        const duplicationBottomY = gap.endNode.pageBounds.maxY + gap.length;
        const selectionTopY = selectionPageBounds.minY;
        const duplicationBottomNudge = duplicationBottomY - selectionTopY;
        if (round(Math.abs(duplicationBottomNudge)) <= round(minOffset.y)) {
          if (round(Math.abs(duplicationBottomNudge)) < round(minOffset.y)) {
            nearestSnapsY.length = 0;
          }
          minOffset.y = Math.abs(duplicationBottomNudge);
          nearestSnapsY.push({
            type: "gap_duplicate",
            gap,
            protrusionDirection: "bottom",
            nudge: duplicationBottomNudge
          });
        }
      }
    }
    getPointSnapLines({
      nearestSnapsX,
      nearestSnapsY
    }) {
      const snapGroupsX = {};
      const snapGroupsY = {};
      const result = [];
      if (nearestSnapsX.length > 0) {
        for (const snap of nearestSnapsX) {
          if (snap.type === "points") {
            const key = round(snap.points.otherPoint.x);
            if (!snapGroupsX[key]) {
              snapGroupsX[key] = [];
            }
            snapGroupsX[key].push(snap.points);
          }
        }
      }
      if (nearestSnapsY.length > 0) {
        for (const snap of nearestSnapsY) {
          if (snap.type === "points") {
            const key = round(snap.points.otherPoint.y);
            if (!snapGroupsY[key]) {
              snapGroupsY[key] = [];
            }
            snapGroupsY[key].push(snap.points);
          }
        }
      }
      for (const [_, snapGroup] of Object.entries(snapGroupsX).concat(Object.entries(snapGroupsY))) {
        result.push({
          id: uniqueId(),
          type: "points",
          points: dedupe(
            snapGroup.map((snap) => Vec2d.From(snap.otherPoint)).concat(snapGroup.map((snap) => Vec2d.From(snap.thisPoint))),
            (a3, b3) => a3.equals(b3)
          )
        });
      }
      return result;
    }
    getGapSnapLines({
      selectionPageBounds,
      nearestSnapsX,
      nearestSnapsY
    }) {
      const selectionSides = {
        top: selectionPageBounds.sides[0],
        right: selectionPageBounds.sides[1],
        // need bottom and left to be sorted asc, which .sides is not.
        bottom: [selectionPageBounds.corners[3], selectionPageBounds.corners[2]],
        left: [selectionPageBounds.corners[0], selectionPageBounds.corners[3]]
      };
      const result = [];
      if (nearestSnapsX.length > 0) {
        for (const snap of nearestSnapsX) {
          if (snap.type === "gap_center") {
            const newGapsLength = (snap.gap.length - selectionPageBounds.width) / 2;
            const gapBreadthIntersection = rangeIntersection(
              snap.gap.breadthIntersection[0],
              snap.gap.breadthIntersection[1],
              selectionPageBounds.minY,
              selectionPageBounds.maxY
            );
            result.push({
              type: "gaps",
              direction: "horizontal",
              id: uniqueId(),
              gaps: [
                ...findAdjacentGaps(
                  this.visibleGaps.horizontal,
                  snap.gap.startNode.id,
                  newGapsLength,
                  "backward",
                  gapBreadthIntersection
                ),
                {
                  startEdge: snap.gap.startEdge,
                  endEdge: selectionSides.left
                },
                {
                  startEdge: selectionSides.right,
                  endEdge: snap.gap.endEdge
                },
                ...findAdjacentGaps(
                  this.visibleGaps.horizontal,
                  snap.gap.endNode.id,
                  newGapsLength,
                  "forward",
                  gapBreadthIntersection
                )
              ]
            });
          }
          if (snap.type === "gap_duplicate") {
            const gapBreadthIntersection = rangeIntersection(
              snap.gap.breadthIntersection[0],
              snap.gap.breadthIntersection[1],
              selectionPageBounds.minY,
              selectionPageBounds.maxY
            );
            result.push({
              type: "gaps",
              direction: "horizontal",
              id: uniqueId(),
              gaps: snap.protrusionDirection === "left" ? [
                {
                  startEdge: selectionSides.right,
                  endEdge: [
                    Vec2d.Add(snap.gap.startEdge[0], {
                      x: -snap.gap.startNode.pageBounds.width,
                      y: 0
                    }),
                    Vec2d.Add(snap.gap.startEdge[1], {
                      x: -snap.gap.startNode.pageBounds.width,
                      y: 0
                    })
                  ]
                },
                {
                  startEdge: snap.gap.startEdge,
                  endEdge: snap.gap.endEdge
                },
                ...findAdjacentGaps(
                  this.visibleGaps.horizontal,
                  snap.gap.endNode.id,
                  snap.gap.length,
                  "forward",
                  gapBreadthIntersection
                )
              ] : [
                ...findAdjacentGaps(
                  this.visibleGaps.horizontal,
                  snap.gap.startNode.id,
                  snap.gap.length,
                  "backward",
                  gapBreadthIntersection
                ),
                {
                  startEdge: snap.gap.startEdge,
                  endEdge: snap.gap.endEdge
                },
                {
                  startEdge: [
                    Vec2d.Add(snap.gap.endEdge[0], {
                      x: snap.gap.endNode.pageBounds.width,
                      y: 0
                    }),
                    Vec2d.Add(snap.gap.endEdge[1], {
                      x: snap.gap.endNode.pageBounds.width,
                      y: 0
                    })
                  ],
                  endEdge: selectionSides.left
                }
              ]
            });
          }
        }
      }
      if (nearestSnapsY.length > 0) {
        for (const snap of nearestSnapsY) {
          if (snap.type === "gap_center") {
            const newGapsLength = (snap.gap.length - selectionPageBounds.height) / 2;
            const gapBreadthIntersection = rangeIntersection(
              snap.gap.breadthIntersection[0],
              snap.gap.breadthIntersection[1],
              selectionPageBounds.minX,
              selectionPageBounds.maxX
            );
            result.push({
              type: "gaps",
              direction: "vertical",
              id: uniqueId(),
              gaps: [
                ...findAdjacentGaps(
                  this.visibleGaps.vertical,
                  snap.gap.startNode.id,
                  newGapsLength,
                  "backward",
                  gapBreadthIntersection
                ),
                {
                  startEdge: snap.gap.startEdge,
                  endEdge: selectionSides.top
                },
                {
                  startEdge: selectionSides.bottom,
                  endEdge: snap.gap.endEdge
                },
                ...findAdjacentGaps(
                  this.visibleGaps.vertical,
                  snap.gap.endNode.id,
                  newGapsLength,
                  "forward",
                  gapBreadthIntersection
                )
              ]
            });
          }
          if (snap.type === "gap_duplicate") {
            const gapBreadthIntersection = rangeIntersection(
              snap.gap.breadthIntersection[0],
              snap.gap.breadthIntersection[1],
              selectionPageBounds.minX,
              selectionPageBounds.maxX
            );
            result.push({
              type: "gaps",
              direction: "vertical",
              id: uniqueId(),
              gaps: snap.protrusionDirection === "top" ? [
                {
                  startEdge: selectionSides.bottom,
                  endEdge: [
                    Vec2d.Add(snap.gap.startEdge[0], {
                      x: 0,
                      y: -snap.gap.startNode.pageBounds.height
                    }),
                    Vec2d.Add(snap.gap.startEdge[1], {
                      x: 0,
                      y: -snap.gap.startNode.pageBounds.height
                    })
                  ]
                },
                {
                  startEdge: snap.gap.startEdge,
                  endEdge: snap.gap.endEdge
                },
                ...findAdjacentGaps(
                  this.visibleGaps.vertical,
                  snap.gap.endNode.id,
                  snap.gap.length,
                  "forward",
                  gapBreadthIntersection
                )
              ] : [
                ...findAdjacentGaps(
                  this.visibleGaps.vertical,
                  snap.gap.startNode.id,
                  snap.gap.length,
                  "backward",
                  gapBreadthIntersection
                ),
                {
                  startEdge: snap.gap.startEdge,
                  endEdge: snap.gap.endEdge
                },
                {
                  startEdge: [
                    Vec2d.Add(snap.gap.endEdge[0], {
                      x: 0,
                      y: snap.gap.endNode.pageBounds.height
                    }),
                    Vec2d.Add(snap.gap.endEdge[1], {
                      x: 0,
                      y: snap.gap.endNode.pageBounds.height
                    })
                  ],
                  endEdge: selectionSides.top
                }
              ]
            });
          }
        }
      }
      dedupeGapSnaps(result);
      return result;
    }
  };
  __decorateClass([
    computed
  ], SnapManager.prototype, "snapPointsCache", 1);
  __decorateClass([
    computed
  ], SnapManager.prototype, "visibleShapesNotInSelection", 1);
  __decorateClass([
    computed
  ], SnapManager.prototype, "visibleSnapPointsNotInSelection", 1);
  __decorateClass([
    computed
  ], SnapManager.prototype, "visibleGaps", 1);
  function getResizeSnapPointsForHandle(handle, selectionPageBounds) {
    const { minX, maxX, minY, maxY } = selectionPageBounds;
    const result = [];
    switch (handle) {
      case "top":
      case "left":
      case "top_left":
      case "any":
        result.push({
          id: "top_left",
          handle: "top_left",
          x: minX,
          y: minY
        });
    }
    switch (handle) {
      case "top":
      case "right":
      case "top_right":
      case "any":
        result.push({
          id: "top_right",
          handle: "top_right",
          x: maxX,
          y: minY
        });
    }
    switch (handle) {
      case "bottom":
      case "right":
      case "bottom_right":
      case "any":
        result.push({
          id: "bottom_right",
          handle: "bottom_right",
          x: maxX,
          y: maxY
        });
    }
    switch (handle) {
      case "bottom":
      case "left":
      case "bottom_left":
      case "any":
        result.push({
          id: "bottom_left",
          handle: "bottom_left",
          x: minX,
          y: maxY
        });
    }
    return result;
  }

  // ../../../packages/editor/src/lib/app/managers/TextManager.ts
  var textAlignmentsForLtr = {
    start: "left",
    middle: "center",
    end: "right"
  };
  var TextManager = class {
    constructor(app) {
      this.app = app;
      __publicField(this, "measureText", (opts) => {
        var _a5;
        const elm = this.getTextElement();
        elm.setAttribute("dir", "ltr");
        elm.style.setProperty("font-family", opts.fontFamily);
        elm.style.setProperty("font-style", opts.fontStyle);
        elm.style.setProperty("font-weight", opts.fontWeight);
        elm.style.setProperty("font-size", opts.fontSize + "px");
        elm.style.setProperty("line-height", opts.lineHeight * opts.fontSize + "px");
        elm.style.setProperty("width", opts.width);
        elm.style.setProperty("min-width", (_a5 = opts.minWidth) != null ? _a5 : null);
        elm.style.setProperty("max-width", opts.maxWidth);
        elm.style.setProperty("padding", opts.padding);
        elm.textContent = TextHelpers.normalizeTextForDom(opts.text);
        const rect = elm.getBoundingClientRect();
        return {
          x: 0,
          y: 0,
          w: rect.width,
          h: rect.height
        };
      });
    }
    getTextElement() {
      const oldElm = document.querySelector(".tl-text-measure");
      oldElm == null ? void 0 : oldElm.remove();
      const elm = document.createElement("div");
      this.app.getContainer().appendChild(elm);
      elm.id = `__textMeasure_${uniqueId()}`;
      elm.classList.add("tl-text");
      elm.classList.add("tl-text-measure");
      elm.tabIndex = -1;
      return elm;
    }
    getTextLines(opts) {
      const elm = this.getTextElement();
      elm.style.setProperty("width", opts.width - opts.padding * 2 + "px");
      elm.style.setProperty("height", "min-content");
      elm.style.setProperty("dir", "ltr");
      elm.style.setProperty("font-size", opts.fontSize + "px");
      elm.style.setProperty("font-family", opts.fontFamily);
      elm.style.setProperty("font-weight", opts.fontWeight);
      elm.style.setProperty("line-height", opts.lineHeight * opts.fontSize + "px");
      elm.style.setProperty("text-align", textAlignmentsForLtr[opts.textAlign]);
      const words = opts.text.replace(/ {2}/g, "	").split(/( |\t|\n)/).filter(Boolean).map((str) => str === "	" ? INDENT : str);
      const lines = [];
      let currentLine = [];
      elm.textContent = "";
      let prevHeight = elm.offsetHeight;
      let prevTextContent = elm.textContent;
      for (let i3 = 0, n3 = words.length; i3 < n3; i3++) {
        const word = words[i3];
        elm.textContent += word;
        const newHeight = elm.offsetHeight;
        if (newHeight <= prevHeight) {
          currentLine.push(word);
          prevTextContent = elm.textContent;
          continue;
        }
        if (word === "\n") {
          currentLine = [];
          lines.push(currentLine);
          prevTextContent = elm.textContent;
          continue;
        }
        const afterTextContent = elm.textContent;
        elm.textContent = prevTextContent;
        elm.textContent += "\n";
        const chars = [...word];
        elm.textContent += chars[0];
        prevHeight = elm.offsetHeight;
        let currentSubLine = [chars[0]];
        const subLines = [currentSubLine];
        for (let i4 = 1; i4 < chars.length; i4++) {
          const char = chars[i4];
          elm.textContent += char;
          const newHeight2 = elm.offsetHeight;
          if (newHeight2 > prevHeight) {
            currentSubLine = [char];
            subLines.push(currentSubLine);
            prevHeight = newHeight2;
          } else {
            currentSubLine.push(char);
          }
        }
        const joinedSubLines = subLines.map((b3) => [b3.join("")]);
        lines.push(...joinedSubLines);
        currentLine = lines[lines.length - 1];
        elm.textContent = afterTextContent;
        prevHeight = elm.offsetHeight;
        prevTextContent = elm.textContent;
      }
      elm.remove();
      const result = lines.map((line) => line.join("").trimEnd());
      return result;
    }
  };

  // ../../../packages/editor/src/lib/app/managers/TickManager.ts
  var TickManager = class {
    constructor(app) {
      this.app = app;
      __publicField(this, "raf");
      __publicField(this, "isPaused", true);
      __publicField(this, "last", 0);
      __publicField(this, "t", 0);
      __publicField(this, "start", () => {
        this.isPaused = false;
        cancelAnimationFrame(this.raf);
        this.raf = requestAnimationFrame(this.tick);
        this.last = Date.now();
      });
      __publicField(this, "tick", () => {
        if (this.isPaused) {
          return;
        }
        const now = Date.now();
        const elapsed = now - this.last;
        this.last = now;
        this.t += elapsed;
        if (this.t < 16) {
          this.raf = requestAnimationFrame(this.tick);
          return;
        }
        this.t -= 16;
        this.updatePointerVelocity(elapsed);
        this.app.emit("tick", elapsed);
        this.raf = requestAnimationFrame(this.tick);
      });
      // Clear the listener
      __publicField(this, "dispose", () => {
        this.isPaused = true;
        cancelAnimationFrame(this.raf);
      });
      __publicField(this, "prevPoint", new Vec2d());
      __publicField(this, "updatePointerVelocity", (elapsed) => {
        const {
          prevPoint,
          app: {
            inputs: { currentScreenPoint, pointerVelocity }
          }
        } = this;
        if (elapsed === 0)
          return;
        const delta = Vec2d.Sub(currentScreenPoint, prevPoint);
        this.prevPoint = currentScreenPoint.clone();
        const length = delta.len();
        const direction = length ? delta.div(length) : new Vec2d(0, 0);
        const next = pointerVelocity.clone().lrp(direction.mul(length / elapsed), 0.5);
        if (Math.abs(next.x) < 0.01)
          next.x = 0;
        if (Math.abs(next.y) < 0.01)
          next.y = 0;
        if (!pointerVelocity.equals(next)) {
          this.app.inputs.pointerVelocity = next;
        }
      });
      this.app.disposables.add(this.dispose);
      this.start();
    }
  };

  // ../../../packages/editor/src/lib/app/types/event-types.ts
  var EVENT_NAME_MAP = {
    wheel: "onWheel",
    pointer_enter: "onPointerEnter",
    pointer_leave: "onPointerLeave",
    pointer_down: "onPointerDown",
    pointer_move: "onPointerMove",
    pointer_up: "onPointerUp",
    right_click: "onRightClick",
    middle_click: "onMiddleClick",
    key_down: "onKeyDown",
    key_up: "onKeyUp",
    key_repeat: "onKeyRepeat",
    cancel: "onCancel",
    complete: "onComplete",
    interrupt: "onInterrupt",
    double_click: "onDoubleClick",
    triple_click: "onTripleClick",
    quadruple_click: "onQuadrupleClick"
  };

  // ../../../packages/editor/src/lib/app/statechart/StateNode.ts
  var StateNode = class {
    constructor(app, parent) {
      this.app = app;
      __publicField(this, "path");
      __publicField(this, "id");
      __publicField(this, "current");
      __publicField(this, "type");
      __publicField(this, "styles", []);
      __publicField(this, "initial");
      __publicField(this, "children");
      __publicField(this, "parent");
      __publicField(this, "isActive", false);
      __publicField(this, "onWheel");
      __publicField(this, "onPointerEnter");
      __publicField(this, "onPointerLeave");
      __publicField(this, "onPointerDown");
      __publicField(this, "onPointerMove");
      __publicField(this, "onPointerUp");
      __publicField(this, "onDoubleClick");
      __publicField(this, "onTripleClick");
      __publicField(this, "onQuadrupleClick");
      __publicField(this, "onRightClick");
      __publicField(this, "onMiddleClick");
      __publicField(this, "onKeyDown");
      __publicField(this, "onKeyUp");
      __publicField(this, "onKeyRepeat");
      __publicField(this, "onCancel");
      __publicField(this, "onComplete");
      __publicField(this, "onInterrupt");
      __publicField(this, "onEnter");
      __publicField(this, "onExit");
      const { id, children, initial } = this.constructor;
      this.id = id;
      this.current = atom("toolState" + this.id, void 0);
      this.path = computed("toolPath" + this.id, () => {
        const current = this.current.value;
        return this.id + (current ? `.${current.path.value}` : "");
      });
      this.parent = parent != null ? parent : {};
      if (this.parent) {
        if (children && initial) {
          this.type = "branch";
          this.initial = initial;
          this.children = Object.fromEntries(
            children().map((Ctor) => [Ctor.id, new Ctor(this.app, this)])
          );
          this.current.set(this.children[this.initial]);
        } else {
          this.type = "leaf";
        }
      } else {
        this.type = "root";
        if (children && initial) {
          this.initial = initial;
          this.children = Object.fromEntries(
            children().map((Ctor) => [Ctor.id, new Ctor(this.app, this)])
          );
          this.current.set(this.children[this.initial]);
        }
      }
    }
    transition(id, info) {
      var _a5;
      const path = id.split(".");
      let currState = this;
      for (let i3 = 0; i3 < path.length; i3++) {
        const id2 = path[i3];
        const prevChildState = currState.current.value;
        const nextChildState = (_a5 = currState.children) == null ? void 0 : _a5[id2];
        if (!nextChildState) {
          throw Error(`${currState.id} - no child state exists with the id ${id2}.`);
        }
        if ((prevChildState == null ? void 0 : prevChildState.id) !== nextChildState.id) {
          prevChildState == null ? void 0 : prevChildState.exit(info, id2);
          currState.current.set(nextChildState);
          nextChildState.enter(info, (prevChildState == null ? void 0 : prevChildState.id) || "initial");
          if (!nextChildState.isActive)
            break;
        }
        currState = nextChildState;
      }
      return this;
    }
    handleEvent(info) {
      var _a5;
      const cbName = EVENT_NAME_MAP[info.name];
      const x3 = this.current.value;
      (_a5 = this[cbName]) == null ? void 0 : _a5.call(this, info);
      if (this.current.value === x3 && this.isActive) {
        x3 == null ? void 0 : x3.handleEvent(info);
      }
    }
    enter(info, from) {
      var _a5;
      this.isActive = true;
      (_a5 = this.onEnter) == null ? void 0 : _a5.call(this, info, from);
      if (this.children && this.initial && this.isActive) {
        const initial = this.children[this.initial];
        this.current.set(initial);
        initial.enter(info, from);
      }
    }
    exit(info, from) {
      var _a5, _b2;
      this.isActive = false;
      (_a5 = this.onExit) == null ? void 0 : _a5.call(this, info, from);
      if (!this.isActive) {
        (_b2 = this.current.value) == null ? void 0 : _b2.exit(info, from);
      }
    }
  };
  __publicField(StateNode, "id");
  __publicField(StateNode, "initial");
  __publicField(StateNode, "children");

  // ../../../packages/editor/src/lib/app/statechart/TLArrowTool/children/Idle.ts
  var Idle = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerDown", (info) => {
        this.parent.transition("pointing", info);
      });
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "cross" });
      });
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select");
      });
    }
  };
  __publicField(Idle, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLArrowTool/children/Pointing.ts
  var Pointing = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "shapeType", "");
      __publicField(this, "shape");
      __publicField(this, "preciseTimeout", -1);
      __publicField(this, "didTimeout", false);
      __publicField(this, "onEnter", () => {
        var _a5, _b2, _c;
        const {
          inputs: { currentPagePoint }
        } = this.app;
        this.didTimeout = false;
        this.shapeType = this.parent.shapeType;
        this.app.mark("creating");
        const id = createShapeId();
        this.app.createShapes([
          {
            id,
            type: this.shapeType,
            x: currentPagePoint.x,
            y: currentPagePoint.y
          }
        ]);
        const util = this.app.getShapeUtilByDef(TLArrowShapeDef);
        const shape = this.app.getShapeById(id);
        if (!shape)
          return;
        const handles = (_a5 = util.handles) == null ? void 0 : _a5.call(util, shape);
        if (handles) {
          const point2 = this.app.getPointInShapeSpace(shape, currentPagePoint);
          const change = (_b2 = util.onHandleChange) == null ? void 0 : _b2.call(util, shape, {
            handle: __spreadProps(__spreadValues({}, handles[0]), { x: point2.x, y: point2.y }),
            isPrecise: true
          });
          if (change) {
            const startTerminal = (_c = change.props) == null ? void 0 : _c.start;
            if ((startTerminal == null ? void 0 : startTerminal.type) === "binding") {
              this.app.setHintingIds([startTerminal.boundShapeId]);
            }
            this.app.updateShapes([change], true);
          }
        }
        this.app.select(id);
        this.shape = this.app.getShapeById(id);
        this.startPreciseTimeout();
      });
      __publicField(this, "onExit", () => {
        this.clearPreciseTimeout();
      });
      __publicField(this, "onPointerMove", () => {
        var _a5, _b2;
        if (!this.shape)
          return;
        if (this.app.inputs.isDragging) {
          const util = this.app.getShapeUtil(this.shape);
          const handles = (_a5 = util.handles) == null ? void 0 : _a5.call(util, this.shape);
          if (!handles) {
            this.app.bailToMark("creating");
            throw Error("No handles found");
          }
          if (!this.didTimeout) {
            const util2 = this.app.getShapeUtilByDef(TLArrowShapeDef);
            const shape = this.app.getShapeById(this.shape.id);
            if (!shape)
              return;
            const handles2 = util2.handles(shape);
            if (handles2) {
              const { x: x3, y: y3 } = this.app.getPointInShapeSpace(shape, this.app.inputs.originPagePoint);
              const change = (_b2 = util2.onHandleChange) == null ? void 0 : _b2.call(util2, shape, {
                handle: __spreadProps(__spreadValues({}, handles2[0]), {
                  x: x3,
                  y: y3
                }),
                isPrecise: false
              });
              if (change) {
                this.app.updateShapes([change], true);
              }
            }
          }
          this.app.setSelectedTool("select.dragging_handle", {
            shape: this.shape,
            handle: handles.find((h3) => h3.id === "end"),
            isCreating: true,
            onInteractionEnd: "arrow"
          });
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.cancel();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.cancel();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    startPreciseTimeout() {
      this.preciseTimeout = window.setTimeout(() => {
        if (!this.isActive)
          return;
        if (!this.shape)
          return;
        this.didTimeout = true;
      }, 300);
    }
    clearPreciseTimeout() {
      clearTimeout(this.preciseTimeout);
    }
    cancel() {
      this.app.bailToMark("creating");
      this.app.setHintingIds([]);
      this.parent.transition("idle", {});
    }
  };
  __publicField(Pointing, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLArrowTool/TLArrowTool.ts
  var TLArrowTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "shapeType", "arrow");
      __publicField(this, "styles", [
        "color",
        "opacity",
        "dash",
        "size",
        "arrowheadStart",
        "arrowheadEnd",
        "font",
        "fill"
      ]);
    }
  };
  __publicField(TLArrowTool, "id", "arrow");
  __publicField(TLArrowTool, "initial", "idle");
  __publicField(TLArrowTool, "children", () => [Idle, Pointing]);

  // ../../../packages/editor/src/lib/app/statechart/TLDrawTool/children/Drawing.ts
  var Drawing = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "initialShape");
      __publicField(this, "util", this.app.getShapeUtilByDef(TLDrawShapeDef));
      __publicField(this, "isPen", false);
      __publicField(this, "segmentMode", "free");
      __publicField(this, "didJustShiftClickToExtendPreviousShapeLine", false);
      __publicField(this, "pagePointWhereCurrentSegmentChanged", {});
      __publicField(this, "pagePointWhereNextSegmentChanged", null);
      __publicField(this, "lastRecordedPoint", {});
      __publicField(this, "mergeNextPoint", false);
      __publicField(this, "currentLineLength", 0);
      __publicField(this, "canDraw", false);
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        this.canDraw = !this.app.isMenuOpen;
        this.lastRecordedPoint = this.app.inputs.currentPagePoint.clone();
        if (this.canDraw) {
          this.startShape();
        }
      });
      __publicField(this, "onPointerMove", () => {
        const {
          app: { inputs }
        } = this;
        if (this.isPen !== inputs.isPen) {
          this.cancel();
        }
        if (!this.canDraw && inputs.isDragging) {
          this.startShape();
          this.canDraw = true;
        }
        if (this.canDraw) {
          if (inputs.isPen) {
            if (Vec2d.Dist(inputs.currentPagePoint, this.lastRecordedPoint) >= 1 / this.app.zoomLevel) {
              this.lastRecordedPoint = inputs.currentPagePoint.clone();
              this.mergeNextPoint = false;
            } else {
              this.mergeNextPoint = true;
            }
          } else {
            this.mergeNextPoint = false;
          }
          this.updateShapes();
        }
      });
      __publicField(this, "onKeyDown", (info) => {
        if (info.key === "Shift") {
          switch (this.segmentMode) {
            case "free": {
              this.segmentMode = "starting_straight";
              this.pagePointWhereNextSegmentChanged = this.app.inputs.currentPagePoint.clone();
              break;
            }
            case "starting_free": {
              this.segmentMode = "starting_straight";
            }
          }
        }
        this.updateShapes();
      });
      __publicField(this, "onKeyUp", (info) => {
        if (info.key === "Shift") {
          this.app.snaps.clear();
          switch (this.segmentMode) {
            case "straight": {
              this.segmentMode = "starting_free";
              this.pagePointWhereNextSegmentChanged = this.app.inputs.currentPagePoint.clone();
              break;
            }
            case "starting_straight": {
              this.pagePointWhereNextSegmentChanged = null;
              this.segmentMode = "free";
              break;
            }
          }
        }
        this.updateShapes();
      });
      __publicField(this, "onExit", () => {
        this.app.snaps.clear();
        this.pagePointWhereCurrentSegmentChanged = this.app.inputs.currentPagePoint.clone();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onInterrupt", () => {
        if (this.app.inputs.isDragging) {
          return;
        }
        this.app.bail();
        this.cancel();
      });
    }
    getIsClosed(segments, size) {
      const strokeWidth = this.app.getStrokeWidth(size);
      const firstPoint = segments[0].points[0];
      const lastSegment = segments[segments.length - 1];
      const lastPoint = lastSegment.points[lastSegment.points.length - 1];
      return this.currentLineLength > strokeWidth * 4 && Vec2d.Dist(firstPoint, lastPoint) < strokeWidth * 2;
    }
    startShape() {
      const {
        inputs: { originPagePoint, isPen }
      } = this.app;
      this.app.mark("draw create start");
      this.isPen = isPen;
      const pressure = this.isPen ? this.info.point.z * 1.25 : 0.5;
      this.segmentMode = this.app.inputs.shiftKey ? "straight" : "free";
      this.didJustShiftClickToExtendPreviousShapeLine = false;
      this.lastRecordedPoint = originPagePoint.clone();
      if (this.initialShape) {
        const shape = this.app.getShapeById(this.initialShape.id);
        if (shape && this.segmentMode === "straight") {
          this.didJustShiftClickToExtendPreviousShapeLine = true;
          const prevSegment = last(shape.props.segments);
          if (!prevSegment)
            throw Error("Expected a previous segment!");
          const prevPoint = last(prevSegment.points);
          if (!prevPoint)
            throw Error("Expected a previous point!");
          const { x: x3, y: y3 } = this.app.getPointInShapeSpace(shape, originPagePoint).toFixed();
          const pressure2 = this.isPen ? this.info.point.z * 1.25 : 0.5;
          const newSegment = {
            type: this.segmentMode,
            points: [
              {
                x: prevPoint.x,
                y: prevPoint.y,
                z: +pressure2.toFixed(2)
              },
              {
                x: x3,
                y: y3,
                z: +pressure2.toFixed(2)
              }
            ]
          };
          const prevPointPageSpace = Matrix2d.applyToPoint(
            this.app.getPageTransformById(shape.id),
            prevPoint
          );
          this.pagePointWhereCurrentSegmentChanged = prevPointPageSpace;
          this.pagePointWhereNextSegmentChanged = null;
          const segments = [...shape.props.segments, newSegment];
          this.currentLineLength = this.getLineLength(segments);
          this.app.updateShapes([
            {
              id: shape.id,
              type: "draw",
              props: {
                segments,
                isClosed: this.getIsClosed(segments, shape.props.size)
              }
            }
          ]);
          return;
        }
      }
      this.pagePointWhereCurrentSegmentChanged = originPagePoint.clone();
      const id = createShapeId();
      this.app.createShapes([
        {
          id,
          type: "draw",
          x: originPagePoint.x,
          y: originPagePoint.y,
          props: {
            isPen: this.isPen,
            segments: [
              {
                type: this.segmentMode,
                points: [
                  {
                    x: 0,
                    y: 0,
                    z: +pressure.toFixed(2)
                  }
                ]
              }
            ]
          }
        }
      ]);
      this.currentLineLength = 0;
      this.initialShape = this.app.getShapeById(id);
    }
    updateShapes() {
      const { inputs } = this.app;
      const { initialShape } = this;
      if (!initialShape)
        return;
      const {
        id,
        props: { size }
      } = initialShape;
      const shape = this.app.getShapeById(id);
      if (!shape)
        return;
      const { segments } = shape.props;
      const { x: x3, y: y3, z: z2 } = this.app.getPointInShapeSpace(shape, inputs.currentPagePoint).toFixed();
      const newPoint = { x: x3, y: y3, z: this.isPen ? +(z2 * 1.25).toFixed(2) : 0.5 };
      switch (this.segmentMode) {
        case "starting_straight": {
          const { pagePointWhereNextSegmentChanged } = this;
          if (pagePointWhereNextSegmentChanged === null) {
            throw Error("We should have a point where the segment changed");
          }
          const hasMovedFarEnough = Vec2d.Dist(pagePointWhereNextSegmentChanged, inputs.currentPagePoint) > DRAG_DISTANCE;
          if (hasMovedFarEnough) {
            this.pagePointWhereCurrentSegmentChanged = this.pagePointWhereNextSegmentChanged.clone();
            this.pagePointWhereNextSegmentChanged = null;
            this.segmentMode = "straight";
            const prevSegment = last(segments);
            if (!prevSegment)
              throw Error("Expected a previous segment!");
            const prevLastPoint = last(prevSegment.points);
            if (!prevLastPoint)
              throw Error("Expected a previous last point!");
            let newSegment;
            const newLastPoint = this.app.getPointInShapeSpace(shape, this.pagePointWhereCurrentSegmentChanged).toFixed().toJson();
            if (prevSegment.type === "straight") {
              this.currentLineLength += Vec2d.Dist(prevLastPoint, newLastPoint);
              newSegment = {
                type: "straight",
                points: [__spreadValues({}, prevLastPoint), newLastPoint]
              };
              const transform = this.app.getPageTransform(shape);
              this.pagePointWhereCurrentSegmentChanged = Matrix2d.applyToPoint(
                transform,
                prevLastPoint
              );
            } else {
              newSegment = {
                type: "straight",
                points: [newLastPoint, newPoint]
              };
            }
            this.app.updateShapes(
              [
                {
                  id,
                  type: "draw",
                  props: {
                    segments: [...segments, newSegment],
                    isClosed: this.getIsClosed(segments, size)
                  }
                }
              ],
              true
            );
          }
          break;
        }
        case "starting_free": {
          const { pagePointWhereNextSegmentChanged } = this;
          if (pagePointWhereNextSegmentChanged === null) {
            throw Error("We should have a point where the segment changed");
          }
          const hasMovedFarEnough = Vec2d.Dist(pagePointWhereNextSegmentChanged, inputs.currentPagePoint) > DRAG_DISTANCE;
          if (hasMovedFarEnough) {
            this.pagePointWhereCurrentSegmentChanged = this.pagePointWhereNextSegmentChanged.clone();
            this.pagePointWhereNextSegmentChanged = null;
            this.segmentMode = "free";
            const newSegments = segments.slice();
            const prevStraightSegment = newSegments[newSegments.length - 1];
            const prevPoint = last(prevStraightSegment.points);
            if (!prevPoint) {
              throw Error("No previous point!");
            }
            const newFreeSegment = {
              type: "free",
              points: [
                ...Vec2d.PointsBetween(prevPoint, newPoint, 6).map((p3) => p3.toFixed().toJson())
              ]
            };
            this.currentLineLength = this.getLineLength(segments);
            this.app.updateShapes(
              [
                {
                  id,
                  type: "draw",
                  props: {
                    segments: [...newSegments, newFreeSegment],
                    isClosed: this.getIsClosed(segments, size)
                  }
                }
              ],
              true
            );
          }
          break;
        }
        case "straight": {
          const newSegments = segments.slice();
          const newSegment = newSegments[newSegments.length - 1];
          const { pagePointWhereCurrentSegmentChanged } = this;
          const { currentPagePoint, ctrlKey } = this.app.inputs;
          if (!pagePointWhereCurrentSegmentChanged)
            throw Error("We should have a point where the segment changed");
          let pagePoint;
          let shouldSnapToAngle = false;
          if (this.didJustShiftClickToExtendPreviousShapeLine) {
            if (this.app.inputs.isDragging) {
              shouldSnapToAngle = !ctrlKey;
              this.didJustShiftClickToExtendPreviousShapeLine = false;
            } else {
            }
          } else {
            shouldSnapToAngle = !ctrlKey;
          }
          let newPoint2 = this.app.getPointInShapeSpace(shape, currentPagePoint).toFixed().toJson();
          let didSnap = false;
          let snapSegment = void 0;
          const shouldSnap = this.app.userDocumentSettings.isSnapMode ? !ctrlKey : ctrlKey;
          if (shouldSnap) {
            if (newSegments.length > 2) {
              let nearestPoint = void 0;
              let minDistance = 8 / this.app.zoomLevel;
              for (let i3 = 0, n3 = segments.length - 2; i3 < n3; i3++) {
                const segment = segments[i3];
                if (!segment)
                  break;
                if (segment.type === "free")
                  continue;
                const first = segment.points[0];
                const lastPoint = last(segment.points);
                if (!(first && lastPoint))
                  continue;
                const nearestPointOnSegment = Vec2d.NearestPointOnLineSegment(
                  first,
                  lastPoint,
                  newPoint2
                );
                const distance = Vec2d.Dist(nearestPointOnSegment, newPoint2);
                if (distance < minDistance) {
                  nearestPoint = nearestPointOnSegment.toFixed().toJson();
                  minDistance = distance;
                  snapSegment = segment;
                  break;
                }
              }
              if (nearestPoint) {
                didSnap = true;
                newPoint2 = nearestPoint;
              }
            }
          }
          if (didSnap && snapSegment) {
            const transform = this.app.getPageTransform(shape);
            const first = snapSegment.points[0];
            const lastPoint = last(snapSegment.points);
            if (!lastPoint)
              throw Error("Expected a last point!");
            const A2 = Matrix2d.applyToPoint(transform, first);
            const B = Matrix2d.applyToPoint(transform, lastPoint);
            const snappedPoint = Matrix2d.applyToPoint(transform, newPoint2);
            this.app.snaps.setLines([
              {
                id: uniqueId(),
                type: "points",
                points: [A2, snappedPoint, B]
              }
            ]);
          } else {
            this.app.snaps.clear();
            if (shouldSnapToAngle) {
              const currentAngle = Vec2d.Angle(pagePointWhereCurrentSegmentChanged, currentPagePoint);
              const snappedAngle = snapAngle(currentAngle, 24);
              const angleDiff = snappedAngle - currentAngle;
              pagePoint = Vec2d.RotWith(
                currentPagePoint,
                pagePointWhereCurrentSegmentChanged,
                angleDiff
              );
            } else {
              pagePoint = currentPagePoint;
            }
            newPoint2 = this.app.getPointInShapeSpace(shape, pagePoint).toFixed().toJson();
          }
          this.currentLineLength += Vec2d.Dist(newSegment.points[0], newPoint2);
          newSegments[newSegments.length - 1] = __spreadProps(__spreadValues({}, newSegment), {
            type: "straight",
            points: [newSegment.points[0], newPoint2]
          });
          this.app.updateShapes(
            [
              {
                id,
                type: "draw",
                props: {
                  segments: newSegments,
                  isClosed: this.getIsClosed(segments, size)
                }
              }
            ],
            true
          );
          break;
        }
        case "free": {
          const newSegments = segments.slice();
          const newSegment = newSegments[newSegments.length - 1];
          const newPoints = [...newSegment.points];
          if (newPoints.length && this.mergeNextPoint) {
            const { z: z3 } = newPoints[newPoints.length - 1];
            newPoints[newPoints.length - 1] = {
              x: newPoint.x,
              y: newPoint.y,
              z: z3 ? Math.max(z3, newPoint.z) : newPoint.z
            };
          } else {
            this.currentLineLength += Vec2d.Dist(newPoints[newPoints.length - 1], newPoint);
            newPoints.push(newPoint);
          }
          newSegments[newSegments.length - 1] = __spreadProps(__spreadValues({}, newSegment), {
            points: newPoints
          });
          this.app.updateShapes(
            [
              {
                id,
                type: "draw",
                props: {
                  segments: newSegments,
                  isClosed: this.getIsClosed(segments, size)
                }
              }
            ],
            true
          );
          if (newPoints.length > 500) {
            this.app.updateShapes([{ id, type: "draw", props: { isComplete: true } }]);
            const { currentPagePoint } = this.app.inputs;
            const newShapeId = this.app.createShapeId();
            this.app.createShapes([
              {
                id: newShapeId,
                type: "draw",
                x: currentPagePoint.x,
                y: currentPagePoint.y,
                props: {
                  isPen: this.isPen,
                  segments: [
                    {
                      type: "free",
                      points: [{ x: 0, y: 0, z: this.isPen ? +(z2 * 1.25).toFixed() : 0.5 }]
                    }
                  ]
                }
              }
            ]);
            this.initialShape = structuredClone(this.app.getShapeById(newShapeId));
            this.mergeNextPoint = false;
            this.lastRecordedPoint = this.app.inputs.currentPagePoint.clone();
            this.currentLineLength = 0;
          }
          break;
        }
      }
    }
    getLineLength(segments) {
      let length = 0;
      for (const segment of segments) {
        for (let i3 = 0; i3 < segment.points.length - 1; i3++) {
          const A2 = segment.points[i3];
          const B = segment.points[i3 + 1];
          length += Vec2d.Sub(B, A2).len2();
        }
      }
      return Math.sqrt(length);
    }
    complete() {
      if (!this.canDraw) {
        this.cancel();
        return;
      }
      const { initialShape } = this;
      if (!initialShape)
        return;
      this.app.updateShapes([
        { id: initialShape.id, type: initialShape.type, props: { isComplete: true } }
      ]);
      this.parent.transition("idle", {});
    }
    cancel() {
      this.parent.transition("idle", this.info);
    }
  };
  __publicField(Drawing, "id", "drawing");

  // ../../../packages/editor/src/lib/app/statechart/TLDrawTool/children/Idle.ts
  var Idle2 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerDown", (info) => {
        this.parent.transition("drawing", info);
      });
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "cross" });
      });
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select");
      });
    }
  };
  __publicField(Idle2, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLDrawTool/TLDrawTool.ts
  var TLDrawTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "styles", ["color", "opacity", "dash", "fill", "size"]);
      __publicField(this, "onExit", () => {
        const drawingState = this.children["drawing"];
        drawingState.initialShape = void 0;
      });
    }
  };
  __publicField(TLDrawTool, "id", "draw");
  __publicField(TLDrawTool, "initial", "idle");
  __publicField(TLDrawTool, "children", () => [Idle2, Drawing]);

  // ../../../packages/editor/src/lib/app/managers/ScribbleManager.ts
  var ScribbleManager = class {
    constructor(opts) {
      // Scribble properties
      __publicField(this, "state");
      __publicField(this, "points");
      __publicField(this, "size");
      __publicField(this, "color");
      __publicField(this, "opacity");
      // Callbacks
      __publicField(this, "onUpdate");
      __publicField(this, "onComplete");
      // Internal state
      __publicField(this, "prev", null);
      __publicField(this, "next", null);
      __publicField(this, "resume", () => {
        this.state = "active";
      });
      __publicField(this, "pause", () => {
        this.state = "starting";
      });
      /**
       * Start stopping the scribble. The scribble won't be removed until its last point is cleared.
       *
       * @public
       */
      __publicField(this, "stop", () => {
        this.state = "stopping";
      });
      /**
       * Set the scribble's next point.
       *
       * @param point - The point to add.
       * @public
       */
      __publicField(this, "addPoint", (x3, y3) => {
        const { prev } = this;
        const point2 = { x: x3, y: y3, z: 0.5 };
        if (prev && Vec2d.Dist(prev, point2) < 1)
          return;
        this.next = point2;
      });
      __publicField(this, "timeoutMs", 0);
      __publicField(this, "tick", (elapsed) => {
        this.timeoutMs += elapsed;
        if (this.timeoutMs >= 16) {
          this.timeoutMs = 0;
        }
        const { timeoutMs, state, prev, next, points: points2 } = this;
        switch (state) {
          case "active": {
            if (next && next !== prev) {
              this.prev = next;
              points2.push(next);
              if (points2.length > 8) {
                points2.shift();
              }
              this.updateScribble();
            } else {
              if (timeoutMs === 0 && points2.length > 1) {
                points2.shift();
                this.updateScribble();
              }
            }
            break;
          }
          case "stopping": {
            if (timeoutMs === 0) {
              if (points2.length === 1) {
                this.state = "paused";
                this.onComplete();
                return;
              }
              this.size *= 0.9;
              points2.shift();
              this.updateScribble();
            }
            break;
          }
          case "paused": {
            break;
          }
        }
      });
      const { size = 20, color = "accent", opacity = 0.8, onComplete, onUpdate } = opts;
      this.onUpdate = onUpdate;
      this.onComplete = onComplete;
      this.size = size;
      this.color = color;
      this.opacity = opacity;
      this.points = [];
      this.state = "starting";
      this.prev = null;
      this.next = null;
      this.resume();
    }
    /**
     * Get the current TLScribble object from the scribble manager.
     *
     * @public
     */
    getScribble() {
      return {
        state: this.state,
        size: this.size,
        color: this.color,
        opacity: this.opacity,
        points: [...this.points]
      };
    }
    updateScribble() {
      this.onUpdate(this.getScribble());
    }
  };

  // ../../../packages/editor/src/lib/app/statechart/TLEraserTool/children/Erasing.ts
  var Erasing = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "scribble", {});
      __publicField(this, "markId", "");
      __publicField(this, "excludedShapeIds", /* @__PURE__ */ new Set());
      __publicField(this, "onEnter", (info) => {
        this.markId = this.app.mark("erase scribble begin");
        this.info = info;
        const { originPagePoint } = this.app.inputs;
        this.excludedShapeIds = new Set(
          this.app.shapesArray.filter(
            (shape) => (shape.type === "frame" || shape.type === "group") && this.app.isPointInShape(originPagePoint, shape)
          ).map((shape) => shape.id)
        );
        this.startScribble();
        this.update();
      });
      __publicField(this, "startScribble", () => {
        this.scribble = new ScribbleManager({
          onUpdate: this.onScribbleUpdate,
          onComplete: this.onScribbleComplete,
          color: "muted-1",
          size: 12
        });
        this.app.on("tick", this.scribble.tick);
      });
      __publicField(this, "pushPointToScribble", () => {
        const { x: x3, y: y3 } = this.app.inputs.currentPagePoint;
        this.scribble.addPoint(x3, y3);
      });
      __publicField(this, "onScribbleUpdate", (scribble) => {
        this.app.setScribble(scribble);
      });
      __publicField(this, "onScribbleComplete", () => {
        this.app.off("tick", this.scribble.tick);
        this.app.setScribble(null);
      });
      __publicField(this, "onExit", () => {
        this.scribble.stop();
      });
      __publicField(this, "onPointerMove", () => {
        this.update();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
    }
    update() {
      const {
        shapesArray,
        erasingIdsSet,
        inputs: { currentPagePoint, previousPagePoint }
      } = this.app;
      const { excludedShapeIds } = this;
      this.pushPointToScribble();
      const erasing = new Set(erasingIdsSet);
      for (const shape of shapesArray) {
        if (shape.type === "group")
          continue;
        const pageMask = this.app.getPageMaskById(shape.id);
        if (pageMask && !pointInPolygon(currentPagePoint, pageMask)) {
          continue;
        }
        const util = this.app.getShapeUtil(shape);
        const A2 = this.app.getPointInShapeSpace(shape, previousPagePoint);
        const B = this.app.getPointInShapeSpace(shape, currentPagePoint);
        if (util.hitTestLineSegment(shape, A2, B)) {
          erasing.add(this.app.getOutermostSelectableShape(shape).id);
        }
      }
      this.app.setErasingIds([...erasing].filter((id) => !excludedShapeIds.has(id)));
    }
    complete() {
      this.app.deleteShapes(this.app.pageState.erasingIds);
      this.app.setErasingIds([]);
      this.parent.transition("idle", {});
    }
    cancel() {
      this.app.setErasingIds([]);
      this.app.bailToMark(this.markId);
      this.parent.transition("idle", this.info);
    }
  };
  __publicField(Erasing, "id", "erasing");

  // ../../../packages/editor/src/lib/app/statechart/TLEraserTool/children/Idle.ts
  var Idle3 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerDown", (info) => {
        this.parent.transition("pointing", info);
      });
    }
  };
  __publicField(Idle3, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLEraserTool/children/Pointing.ts
  var Pointing2 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onEnter", () => {
        const { inputs } = this.app;
        const erasing = /* @__PURE__ */ new Set();
        const initialSize = erasing.size;
        for (const shape of [...this.app.sortedShapesArray].reverse()) {
          if (this.app.isPointInShape(inputs.currentPagePoint, shape)) {
            if (shape.type === "group")
              continue;
            const hitShape = this.app.getOutermostSelectableShape(shape);
            if (hitShape.type === "frame" && erasing.size > initialSize)
              break;
            erasing.add(hitShape.id);
          }
        }
        this.app.setErasingIds([...erasing]);
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          this.parent.transition("erasing", info);
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    complete() {
      const { erasingIds } = this.app;
      if (erasingIds.length) {
        this.app.mark("erase end");
        this.app.deleteShapes(erasingIds);
      }
      this.app.setErasingIds([]);
      this.parent.transition("idle", {});
    }
    cancel() {
      this.app.setErasingIds([]);
      this.parent.transition("idle", {});
    }
  };
  __publicField(Pointing2, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLEraserTool/TLEraserTool.ts
  var TLEraserTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "cross" });
      });
    }
  };
  __publicField(TLEraserTool, "id", "eraser");
  __publicField(TLEraserTool, "initial", "idle");
  __publicField(TLEraserTool, "children", () => [Idle3, Pointing2, Erasing]);

  // ../../../packages/editor/src/lib/app/statechart/TLBoxTool/children/Idle.ts
  var Idle4 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerDown", (info) => {
        this.parent.transition("pointing", info);
      });
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "cross" });
      });
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select");
      });
    }
  };
  __publicField(Idle4, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLBoxTool/children/Pointing.ts
  var Pointing3 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "markId", "creating");
      __publicField(this, "wasFocusedOnEnter", false);
      __publicField(this, "onEnter", () => {
        const { isMenuOpen } = this.app;
        this.wasFocusedOnEnter = !isMenuOpen;
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          const { originPagePoint } = this.app.inputs;
          const shapeType = this.parent.shapeType;
          const id = createShapeId();
          this.app.mark(this.markId);
          this.app.createShapes([
            {
              id,
              type: shapeType,
              x: originPagePoint.x,
              y: originPagePoint.y,
              props: {
                w: 1,
                h: 1
              }
            }
          ]);
          this.app.setSelectedIds([id]);
          this.app.setSelectedTool("select.resizing", __spreadProps(__spreadValues({}, info), {
            target: "selection",
            handle: "bottom_right",
            isCreating: true,
            creationCursorOffset: { x: 1, y: 1 },
            onInteractionEnd: this.parent.id
          }));
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    complete() {
      const { originPagePoint } = this.app.inputs;
      if (!this.wasFocusedOnEnter) {
        return;
      }
      this.app.mark(this.markId);
      const shapeType = this.parent.shapeType;
      const id = createShapeId();
      this.app.mark(this.markId);
      this.app.createShapes([
        {
          id,
          type: shapeType,
          x: originPagePoint.x,
          y: originPagePoint.y
        }
      ]);
      const shape = this.app.getShapeById(id);
      const { w: w3, h: h3 } = this.app.getShapeUtil(shape).defaultProps();
      const delta = this.app.getDeltaInParentSpace(shape, new Vec2d(w3 / 2, h3 / 2));
      this.app.updateShapes([
        {
          id,
          type: shapeType,
          x: shape.x - delta.x,
          y: shape.y - delta.y
        }
      ]);
      this.app.setSelectedIds([id]);
      if (this.app.instanceState.isToolLocked) {
        this.parent.transition("idle", {});
      } else {
        this.app.setSelectedTool("select.idle");
      }
    }
    cancel() {
      this.parent.transition("idle", {});
    }
  };
  __publicField(Pointing3, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLBoxTool/TLBoxTool.ts
  var TLBoxTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "styles", ["opacity"]);
    }
  };
  __publicField(TLBoxTool, "id", "box");
  __publicField(TLBoxTool, "initial", "idle");
  __publicField(TLBoxTool, "children", () => [Idle4, Pointing3]);

  // ../../../packages/editor/src/lib/app/statechart/TLFrameTool/TLFrameTool.ts
  var TLFrameTool = class extends TLBoxTool {
    constructor() {
      super(...arguments);
      __publicField(this, "shapeType", "frame");
      __publicField(this, "styles", ["opacity"]);
    }
  };
  __publicField(TLFrameTool, "id", "frame");
  __publicField(TLFrameTool, "initial", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLGeoTool/children/Idle.ts
  var Idle5 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerDown", (info) => {
        this.parent.transition("pointing", info);
      });
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "cross" });
      });
      __publicField(this, "onKeyUp", (info) => {
        if (info.key === "Enter") {
          const shape = this.app.onlySelectedShape;
          if (shape && shape.type === "geo") {
            this.app.mark("editing shape");
            this.app.setEditingId(shape.id);
            this.app.setSelectedTool("select.editing_shape", __spreadProps(__spreadValues({}, info), {
              target: "shape",
              shape
            }));
          }
        }
      });
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select");
      });
    }
  };
  __publicField(Idle5, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLGeoTool/children/Pointing.ts
  var Pointing4 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          const { originPagePoint } = this.app.inputs;
          const id = createShapeId();
          this.app.mark("creating");
          this.app.createShapes([
            {
              id,
              type: "geo",
              x: originPagePoint.x,
              y: originPagePoint.y,
              props: {
                w: 1,
                h: 1,
                geo: this.app.instanceState.propsForNextShape.geo
              }
            }
          ]);
          this.app.select(id);
          this.app.setSelectedTool("select.resizing", __spreadProps(__spreadValues({}, info), {
            target: "selection",
            handle: "bottom_right",
            isCreating: true,
            creationCursorOffset: { x: 1, y: 1 },
            onInteractionEnd: "geo"
          }));
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    complete() {
      const { originPagePoint } = this.app.inputs;
      const id = createShapeId();
      this.app.mark("creating");
      this.app.createShapes([
        {
          id,
          type: "geo",
          x: originPagePoint.x,
          y: originPagePoint.y,
          props: {
            geo: this.app.instanceState.propsForNextShape.geo,
            w: 1,
            h: 1
          }
        }
      ]);
      const shape = this.app.getShapeById(id);
      if (!shape)
        return;
      const bounds = shape.props.geo === "star" ? getStarBounds(5, 200, 200) : new Box2d(0, 0, 200, 200);
      const delta = this.app.getDeltaInParentSpace(shape, bounds.center);
      this.app.select(id);
      this.app.updateShapes([
        {
          id: shape.id,
          type: "geo",
          x: shape.x - delta.x,
          y: shape.y - delta.y,
          props: {
            geo: this.app.instanceState.propsForNextShape.geo,
            w: bounds.width,
            h: bounds.height
          }
        }
      ]);
      if (this.app.instanceState.isToolLocked) {
        this.parent.transition("idle", {});
      } else {
        this.app.setSelectedTool("select", {});
      }
    }
    cancel() {
      this.parent.transition("idle", {});
    }
  };
  __publicField(Pointing4, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLGeoTool/TLGeoTool.ts
  var TLGeoTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "styles", ["color", "opacity", "dash", "fill", "size", "geo", "font", "align"]);
    }
  };
  __publicField(TLGeoTool, "id", "geo");
  __publicField(TLGeoTool, "initial", "idle");
  __publicField(TLGeoTool, "children", () => [Idle5, Pointing4]);

  // ../../../packages/editor/src/lib/app/statechart/TLHandTool/children/Dragging.ts
  var Dragging = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onEnter", () => {
        this.update();
      });
      __publicField(this, "onPointerMove", () => {
        this.update();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
    }
    update() {
      const { currentScreenPoint, previousScreenPoint } = this.app.inputs;
      const delta = Vec2d.Sub(currentScreenPoint, previousScreenPoint);
      if (Math.abs(delta.x) > 0 || Math.abs(delta.y) > 0) {
        this.app.pan(delta.x, delta.y);
      }
    }
    complete() {
      this.app.slideCamera({
        speed: Math.min(2, this.app.inputs.pointerVelocity.len()),
        direction: this.app.inputs.pointerVelocity,
        friction: HAND_TOOL_FRICTION
      });
      this.parent.transition("idle", {});
    }
  };
  __publicField(Dragging, "id", "dragging");

  // ../../../packages/editor/src/lib/app/statechart/TLHandTool/children/Idle.ts
  var Idle6 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "grab" });
      });
      __publicField(this, "onPointerDown", (info) => {
        this.parent.transition("pointing", info);
      });
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select");
      });
    }
  };
  __publicField(Idle6, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLHandTool/children/Pointing.ts
  var Pointing5 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onEnter", () => {
        this.app.stopCameraAnimation();
        this.app.setCursor({ type: "grabbing" });
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          this.parent.transition("dragging", info);
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onInterrupt", () => {
        this.complete();
      });
    }
    complete() {
      this.parent.transition("idle", {});
    }
  };
  __publicField(Pointing5, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLHandTool/TLHandTool.ts
  var TLHandTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "styles", []);
      __publicField(this, "onDoubleClick", (info) => {
        if (info.phase === "settle") {
          const { currentScreenPoint } = this.app.inputs;
          this.app.zoomIn(currentScreenPoint, { duration: 220, easing: EASINGS.easeOutQuint });
        }
      });
      __publicField(this, "onTripleClick", (info) => {
        if (info.phase === "settle") {
          const { currentScreenPoint } = this.app.inputs;
          this.app.zoomOut(currentScreenPoint, { duration: 320, easing: EASINGS.easeOutQuint });
        }
      });
      __publicField(this, "onQuadrupleClick", (info) => {
        if (info.phase === "settle") {
          const {
            zoomLevel,
            inputs: { currentScreenPoint }
          } = this.app;
          if (zoomLevel === 1) {
            this.app.zoomToFit({ duration: 400, easing: EASINGS.easeOutQuint });
          } else {
            this.app.resetZoom(currentScreenPoint, { duration: 320, easing: EASINGS.easeOutQuint });
          }
        }
      });
    }
  };
  __publicField(TLHandTool, "id", "hand");
  __publicField(TLHandTool, "initial", "idle");
  __publicField(TLHandTool, "children", () => [Idle6, Pointing5, Dragging]);

  // ../../../packages/editor/src/lib/app/statechart/TLLineTool/children/Idle.ts
  var Idle7 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "shapeId", "");
      __publicField(this, "onEnter", (info) => {
        this.shapeId = info.shapeId;
        this.app.setCursor({ type: "cross" });
      });
      __publicField(this, "onPointerDown", () => {
        this.parent.transition("pointing", { shapeId: this.shapeId });
      });
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select");
      });
    }
  };
  __publicField(Idle7, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLLineTool/children/Pointing.ts
  var Pointing6 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "shapeType", "");
      __publicField(this, "shape", {});
      __publicField(this, "markPointId", "");
      __publicField(this, "onEnter", (info) => {
        const { inputs } = this.app;
        const { currentPagePoint } = inputs;
        this.shapeType = this.parent.shapeType;
        this.markPointId = this.app.mark("creating");
        let shapeExists = false;
        if (info.shapeId) {
          const shape = this.app.getShapeById(info.shapeId);
          if (shape) {
            shapeExists = true;
            this.shape = shape;
          }
        }
        if (inputs.shiftKey && shapeExists) {
          const handles = this.app.getShapeUtil(this.shape).handles(this.shape);
          const vertexHandles = handles.filter((h3) => h3.type === "vertex").sort(sortByIndex2);
          const endHandle = vertexHandles[vertexHandles.length - 1];
          const shapePagePoint = Matrix2d.applyToPoint(
            this.app.getParentTransform(this.shape),
            new Vec2d(this.shape.x, this.shape.y)
          );
          let nextEndHandleIndex, nextEndHandleId, nextEndHandle;
          if (vertexHandles.length === 2 && vertexHandles[1].x === 1 && vertexHandles[1].y === 1) {
            nextEndHandleIndex = vertexHandles[1].index;
            nextEndHandleId = vertexHandles[1].id;
            nextEndHandle = __spreadProps(__spreadValues({}, vertexHandles[1]), {
              x: currentPagePoint.x - shapePagePoint.x,
              y: currentPagePoint.y - shapePagePoint.y
            });
          } else {
            nextEndHandleIndex = getIndexAbove(endHandle.index);
            nextEndHandleId = "handle:" + nextEndHandleIndex;
            nextEndHandle = {
              x: currentPagePoint.x - shapePagePoint.x,
              y: currentPagePoint.y - shapePagePoint.y,
              index: nextEndHandleIndex,
              canBind: false,
              type: "vertex",
              id: nextEndHandleId
            };
          }
          const nextHandles = structuredClone(this.shape.props.handles);
          nextHandles[nextEndHandle.id] = nextEndHandle;
          this.app.updateShapes([
            {
              id: this.shape.id,
              type: this.shape.type,
              props: {
                handles: nextHandles
              }
            }
          ]);
        } else {
          const id = createShapeId();
          this.app.createShapes([
            {
              id,
              type: this.shapeType,
              x: currentPagePoint.x,
              y: currentPagePoint.y
            }
          ]);
          this.app.select(id);
          this.shape = this.app.getShapeById(id);
        }
      });
      __publicField(this, "onPointerMove", () => {
        var _a5;
        if (!this.shape)
          return;
        if (this.app.inputs.isDragging) {
          const util = this.app.getShapeUtil(this.shape);
          const handles = (_a5 = util.handles) == null ? void 0 : _a5.call(util, this.shape);
          if (!handles) {
            this.app.bailToMark("creating");
            throw Error("No handles found");
          }
          this.app.setSelectedTool("select.dragging_handle", {
            shape: this.shape,
            isCreating: true,
            handle: last(handles),
            onInteractionEnd: "line"
          });
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onInterrupt", () => {
        this.parent.transition("idle", {});
        this.app.bailToMark("creating");
        this.app.snaps.clear();
      });
    }
    complete() {
      this.parent.transition("idle", { shapeId: this.shape.id });
      this.app.snaps.clear();
    }
    cancel() {
      this.app.bailToMark(this.markPointId);
      this.parent.transition("idle", { shapeId: this.shape.id });
      this.app.snaps.clear();
    }
  };
  __publicField(Pointing6, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLLineTool/TLLineTool.ts
  var TLLineTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "shapeType", "line");
      __publicField(this, "styles", ["color", "opacity", "dash", "size", "spline"]);
    }
  };
  __publicField(TLLineTool, "id", "line");
  __publicField(TLLineTool, "initial", "idle");
  __publicField(TLLineTool, "children", () => [Idle7, Pointing6]);

  // ../../../packages/editor/src/lib/app/statechart/TLNoteTool/children/Idle.ts
  var Idle8 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerDown", (info) => {
        this.parent.transition("pointing", info);
      });
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "cross" });
      });
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select");
      });
    }
  };
  __publicField(Idle8, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLNoteTool/children/Pointing.ts
  var Pointing7 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "dragged", false);
      __publicField(this, "info", {});
      __publicField(this, "wasFocusedOnEnter", false);
      __publicField(this, "markPointId", "creating");
      __publicField(this, "onEnter", () => {
        this.wasFocusedOnEnter = !this.app.isMenuOpen;
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          this.app.mark(this.markPointId);
          const shape = this.createShape();
          if (!shape)
            return;
          this.app.setSelectedTool("select.translating", __spreadProps(__spreadValues({}, info), {
            target: "shape",
            shape,
            isCreating: true,
            editAfterComplete: true,
            onInteractionEnd: "note"
          }));
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
    }
    complete() {
      if (!this.wasFocusedOnEnter) {
        return;
      }
      this.app.mark(this.markPointId);
      const shape = this.createShape();
      if (this.app.instanceState.isToolLocked) {
        this.parent.transition("idle", {});
      } else {
        if (!shape)
          return;
        this.app.setEditingId(shape.id);
        this.app.setSelectedTool("select.editing_shape", __spreadProps(__spreadValues({}, this.info), {
          target: "shape",
          shape
        }));
      }
    }
    cancel() {
      this.app.bailToMark(this.markPointId);
      this.parent.transition("idle", this.info);
    }
    createShape() {
      const {
        inputs: { originPagePoint }
      } = this.app;
      const id = this.app.createShapeId();
      this.app.createShapes(
        [
          {
            id,
            type: "note",
            x: originPagePoint.x,
            y: originPagePoint.y
          }
        ],
        true
      );
      const util = this.app.getShapeUtilByDef(TLNoteShapeDef);
      const shape = this.app.getShapeById(id);
      assert(TLNoteShapeDef.is(shape));
      const bounds = util.bounds(shape);
      this.app.updateShapes([
        {
          id,
          type: "note",
          x: shape.x - bounds.width / 2,
          y: shape.y - bounds.height / 2
        }
      ]);
      return this.app.getShapeById(id);
    }
  };
  __publicField(Pointing7, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLNoteTool/TLNoteTool.ts
  var TLNoteTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "styles", ["color", "opacity", "size", "align", "font"]);
    }
  };
  __publicField(TLNoteTool, "id", "note");
  __publicField(TLNoteTool, "initial", "idle");
  __publicField(TLNoteTool, "children", () => [Idle8, Pointing7]);

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Brushing.ts
  var Brushing = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "brush", new Box2d());
      __publicField(this, "initialSelectedIds", []);
      // The shape that the brush started on
      __publicField(this, "initialStartShape", null);
      __publicField(this, "onEnter", (info) => {
        const { altKey: altKey2, currentPagePoint } = this.app.inputs;
        if (altKey2) {
          this.parent.transition("scribble_brushing", info);
          return;
        }
        this.info = info;
        this.initialSelectedIds = this.app.selectedIds.slice();
        this.initialStartShape = this.app.getShapesAtPoint(currentPagePoint)[0];
        this.onPointerMove();
      });
      __publicField(this, "onExit", () => {
        this.initialSelectedIds = [];
        this.app.setBrush(null);
      });
      __publicField(this, "onPointerMove", () => {
        this.hitTestShapes();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onCancel", (info) => {
        this.app.setSelectedIds(this.initialSelectedIds, true);
        this.parent.transition("idle", info);
      });
      __publicField(this, "onKeyDown", (info) => {
        if (this.app.inputs.altKey) {
          this.parent.transition("scribble_brushing", info);
        } else {
          this.hitTestShapes();
        }
      });
      __publicField(this, "onKeyUp", () => {
        this.hitTestShapes();
      });
      __publicField(this, "onInterrupt", () => {
        this.app.setBrush(null);
      });
    }
    complete() {
      this.parent.transition("idle", {});
    }
    hitTestShapes() {
      const {
        currentPageId,
        shapesArray,
        inputs: { originPagePoint, currentPagePoint, shiftKey, ctrlKey }
      } = this.app;
      this.brush.setTo(Box2d.FromPoints([originPagePoint, currentPagePoint]));
      const results = new Set(shiftKey ? this.initialSelectedIds : []);
      let A2, B, shape, util, pageBounds, pageTransform, localCorners;
      const { corners } = this.brush;
      testAllShapes:
        for (let i3 = 0, n3 = shapesArray.length; i3 < n3; i3++) {
          shape = shapesArray[i3];
          if (shape.type === "group")
            continue testAllShapes;
          if (results.has(shape.id))
            continue testAllShapes;
          pageBounds = this.app.getPageBounds(shape);
          if (!pageBounds)
            continue testAllShapes;
          if (this.brush.contains(pageBounds)) {
            this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
            continue testAllShapes;
          }
          if (ctrlKey || shape.type === "frame") {
            continue testAllShapes;
          }
          if (this.brush.collides(pageBounds)) {
            util = this.app.getShapeUtil(shape);
            pageTransform = this.app.getPageTransform(shape);
            if (!pageTransform) {
              continue testAllShapes;
            }
            localCorners = Matrix2d.applyToPoints(Matrix2d.Inverse(pageTransform), corners);
            hitTestBrushEdges:
              for (let i4 = 0; i4 < localCorners.length; i4++) {
                A2 = localCorners[i4];
                B = localCorners[(i4 + 1) % localCorners.length];
                if (util.hitTestLineSegment(shape, A2, B)) {
                  this.handleHit(shape, currentPagePoint, currentPageId, results, corners);
                  break hitTestBrushEdges;
                }
              }
          }
        }
      this.app.setBrush(__spreadValues({}, this.brush.toJson()));
      this.app.setSelectedIds(Array.from(results), true);
    }
    handleHit(shape, currentPagePoint, currentPageId, results, corners) {
      if (shape.parentId === currentPageId) {
        results.add(shape.id);
        return;
      }
      const selectedShape = this.app.getOutermostSelectableShape(shape);
      const pageMask = this.app.getPageMaskById(selectedShape.id);
      if (pageMask && polygonsIntersect(pageMask, corners) !== null && !pointInPolygon(currentPagePoint, pageMask)) {
        return;
      }
      results.add(selectedShape.id);
    }
  };
  __publicField(Brushing, "id", "brushing");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Crop/children/crop_helpers.ts
  function getTranslateCroppedImageChange(app, shape, delta) {
    if (!shape) {
      throw Error("Needs to translate a cropped shape!");
    }
    const { crop: oldCrop } = shape.props;
    if (!oldCrop) {
      return;
    }
    const flatten = app.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? "x" : "y" : null;
    if (flatten === "x") {
      delta.x = 0;
    } else if (flatten === "y") {
      delta.y = 0;
    }
    delta.rot(-shape.rotation);
    const w3 = 1 / (oldCrop.bottomRight.x - oldCrop.topLeft.x) * shape.props.w;
    const h3 = 1 / (oldCrop.bottomRight.y - oldCrop.topLeft.y) * shape.props.h;
    const yCrop = oldCrop.bottomRight.y - oldCrop.topLeft.y;
    const xCrop = oldCrop.bottomRight.x - oldCrop.topLeft.x;
    const newCrop = deepCopy(oldCrop);
    newCrop.topLeft.x = Math.min(1 - xCrop, Math.max(0, newCrop.topLeft.x - delta.x / w3));
    newCrop.topLeft.y = Math.min(1 - yCrop, Math.max(0, newCrop.topLeft.y - delta.y / h3));
    newCrop.bottomRight.x = newCrop.topLeft.x + xCrop;
    newCrop.bottomRight.y = newCrop.topLeft.y + yCrop;
    const partial = {
      id: shape.id,
      type: shape.type,
      props: {
        crop: newCrop
      }
    };
    return partial;
  }

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Crop/children/Idle.ts
  var Idle9 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "default" });
        const { onlySelectedShape } = this.app;
        this.app.on("change-history", this.cleanupCroppingState);
        this.app.mark("crop");
        if (onlySelectedShape) {
          this.app.setCroppingId(onlySelectedShape.id);
        }
      });
      __publicField(this, "onExit", () => {
        this.app.setCursor({ type: "default" });
        this.app.off("change-history", this.cleanupCroppingState);
      });
      __publicField(this, "onCancel", () => {
        this.app.setCroppingId(null);
        this.app.setSelectedTool("select.idle", {});
      });
      __publicField(this, "onPointerDown", (info) => {
        var _a5;
        if (this.app.isMenuOpen)
          return;
        if (info.ctrlKey) {
          this.app.setCroppingId(null);
          this.app.setSelectedTool("select.brushing", info);
          return;
        }
        switch (info.target) {
          case "canvas": {
            this.cancel();
            break;
          }
          case "shape": {
            if (info.shape.id === this.app.croppingId) {
              this.app.setSelectedTool("select.crop.pointing_crop", info);
              return;
            } else {
              if ((_a5 = this.app.getShapeUtil(info.shape)) == null ? void 0 : _a5.canCrop(info.shape)) {
                this.app.setCroppingId(info.shape.id);
                this.app.setSelectedIds([info.shape.id]);
                this.app.setSelectedTool("select.crop.pointing_crop", info);
              } else {
                this.cancel();
              }
            }
            break;
          }
          case "selection": {
            switch (info.handle) {
              case "mobile_rotate":
              case "top_left_rotate":
              case "top_right_rotate":
              case "bottom_left_rotate":
              case "bottom_right_rotate": {
                this.app.setSelectedTool("select.pointing_rotate_handle", __spreadProps(__spreadValues({}, info), {
                  onInteractionEnd: "select.crop"
                }));
                break;
              }
              case "top":
              case "right":
              case "bottom":
              case "left": {
                this.app.setSelectedTool("select.pointing_crop_handle", __spreadProps(__spreadValues({}, info), {
                  onInteractionEnd: "select.crop"
                }));
                break;
              }
              case "top_left":
              case "top_right":
              case "bottom_left":
              case "bottom_right": {
                this.app.setSelectedTool("select.pointing_crop_handle", __spreadProps(__spreadValues({}, info), {
                  onInteractionEnd: "select.crop"
                }));
                break;
              }
              default: {
                this.cancel();
              }
            }
            break;
          }
        }
      });
      __publicField(this, "onDoubleClick", (info) => {
        var _a5;
        if (info.phase !== "up")
          return;
        if (!this.app.croppingId)
          return;
        const shape = this.app.getShapeById(this.app.croppingId);
        if (!shape)
          return;
        const util = this.app.getShapeUtil(shape);
        if (!util)
          return;
        if (info.target === "selection") {
          (_a5 = util.onDoubleClickEdge) == null ? void 0 : _a5.call(util, shape);
        }
      });
      __publicField(this, "onKeyDown", () => {
        this.nudgeCroppingImage(false);
      });
      __publicField(this, "onKeyRepeat", () => {
        this.nudgeCroppingImage(true);
      });
      __publicField(this, "onKeyUp", (info) => {
        switch (info.code) {
          case "Enter": {
            this.app.setCroppingId(null);
            this.app.setSelectedTool("select.idle", {});
            break;
          }
        }
      });
      __publicField(this, "cleanupCroppingState", () => {
        if (!this.app.croppingId) {
          this.app.setSelectedTool("select.idle", {});
        }
      });
    }
    cancel() {
      this.app.setCroppingId(null);
      this.app.setSelectedTool("select.idle", {});
    }
    nudgeCroppingImage(ephemeral = false) {
      const {
        app: {
          inputs: { keys }
        }
      } = this;
      const shiftKey = keys.has("Shift");
      const delta = new Vec2d(0, 0);
      if (keys.has("ArrowLeft"))
        delta.x += 1;
      if (keys.has("ArrowRight"))
        delta.x -= 1;
      if (keys.has("ArrowUp"))
        delta.y += 1;
      if (keys.has("ArrowDown"))
        delta.y -= 1;
      if (delta.equals(new Vec2d(0, 0)))
        return;
      if (shiftKey)
        delta.mul(10);
      const shape = this.app.getShapeById(this.app.croppingId);
      if (!shape)
        return;
      const partial = getTranslateCroppedImageChange(this.app, shape, delta);
      if (partial) {
        if (!ephemeral) {
          this.app.mark("translate crop");
        }
        this.app.updateShapes([partial]);
      }
    }
  };
  __publicField(Idle9, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Crop/children/PointingCrop.ts
  var PointingCrop = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select.crop.idle", {});
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          this.app.setSelectedTool("select.crop.translating_crop", info);
        }
      });
      __publicField(this, "onPointerUp", (info) => {
        this.app.setSelectedTool("select.crop.idle", info);
      });
    }
  };
  __publicField(PointingCrop, "id", "pointing_crop");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Crop/children/TranslatingCrop.ts
  var TranslatingCrop = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "markId", "translating crop");
      __publicField(this, "snapshot", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        this.snapshot = this.createSnapshot();
        this.app.mark(this.markId);
        this.app.setCursor({ type: "move" });
        this.updateShapes();
      });
      __publicField(this, "onExit", () => {
        this.app.setCursor({ type: "default" });
      });
      __publicField(this, "onPointerMove", () => {
        this.updateShapes();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onKeyDown", (info) => {
        switch (info.key) {
          case "Alt":
          case "Shift": {
            this.updateShapes();
            return;
          }
        }
      });
      __publicField(this, "onKeyUp", (info) => {
        switch (info.key) {
          case "Enter": {
            this.complete();
            return;
          }
          case "Alt":
          case "Shift": {
            this.updateShapes();
          }
        }
      });
    }
    complete() {
      this.updateShapes();
      this.app.setSelectedTool("select.crop.idle", this.info);
    }
    cancel() {
      this.app.bailToMark(this.markId);
      this.app.setSelectedTool("select.crop.idle", this.info);
    }
    createSnapshot() {
      const shape = this.app.onlySelectedShape;
      return { shape };
    }
    updateShapes() {
      const shape = this.snapshot.shape;
      if (!shape)
        return;
      const { originPagePoint, currentPagePoint } = this.app.inputs;
      const delta = currentPagePoint.clone().sub(originPagePoint);
      const partial = getTranslateCroppedImageChange(this.app, shape, delta);
      if (partial) {
        this.app.updateShapes([partial], true);
      }
    }
  };
  __publicField(TranslatingCrop, "id", "translating_crop");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Crop/Crop.ts
  var Crop = class extends StateNode {
  };
  __publicField(Crop, "id", "crop");
  __publicField(Crop, "initial", "idle");
  __publicField(Crop, "children", () => [Idle9, TranslatingCrop, PointingCrop]);

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/PointingResizeHandle.ts
  var CursorTypeMap = {
    bottom: "ns-resize",
    top: "ns-resize",
    left: "ew-resize",
    right: "ew-resize",
    bottom_left: "nesw-resize",
    bottom_right: "nwse-resize",
    top_left: "nwse-resize",
    top_right: "nesw-resize",
    bottom_left_rotate: "swne-rotate",
    bottom_right_rotate: "senw-rotate",
    top_left_rotate: "nwse-rotate",
    top_right_rotate: "nesw-rotate",
    mobile_rotate: "grabbing"
  };
  var PointingResizeHandle = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        this.updateCursor();
      });
      __publicField(this, "onPointerMove", () => {
        const isDragging = this.app.inputs.isDragging;
        if (isDragging) {
          this.parent.transition("resizing", this.info);
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      // override onPinchStart: TLEventHandlers['onPinchStart'] = (info) => {
      // 	this.parent.transition('pinching', info)
      // }
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.cancel();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    updateCursor() {
      const selected = this.app.selectedShapes;
      const cursorType = CursorTypeMap[this.info.handle];
      this.app.setCursor({
        type: cursorType,
        rotation: selected.length === 1 ? selected[0].rotation : 0
      });
    }
    complete() {
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle", {});
      }
    }
    cancel() {
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle", {});
      }
    }
  };
  __publicField(PointingResizeHandle, "id", "pointing_resize_handle");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Cropping.ts
  var Cropping = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "markId", "");
      __publicField(this, "snapshot", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        this.markId = this.app.mark("cropping");
        this.snapshot = this.createSnapshot();
        this.updateShapes();
      });
      __publicField(this, "onPointerMove", () => {
        this.updateShapes();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "getDefaultCrop", () => ({
        topLeft: { x: 0, y: 0 },
        bottomRight: { x: 1, y: 1 }
      }));
    }
    updateCursor() {
      const selectedShape = this.app.selectedShapes[0];
      if (!selectedShape)
        return;
      const cursorType = CursorTypeMap[this.info.handle];
      this.app.setCursor({
        type: cursorType,
        rotation: selectedShape.rotation
      });
    }
    updateShapes() {
      var _a5;
      const { shape, cursorHandleOffset } = this.snapshot;
      if (!shape)
        return;
      const util = this.app.getShapeUtil(shape);
      if (!util)
        return;
      const props = shape.props;
      const currentPagePoint = this.app.inputs.currentPagePoint.clone().sub(cursorHandleOffset);
      const originPagePoint = this.app.inputs.originPagePoint.clone().sub(cursorHandleOffset);
      const change = currentPagePoint.clone().sub(originPagePoint).rot(-shape.rotation);
      const crop = (_a5 = props.crop) != null ? _a5 : this.getDefaultCrop();
      const newCrop = deepCopy(crop);
      const newPoint = new Vec2d(shape.x, shape.y);
      const pointDelta = new Vec2d(0, 0);
      const w3 = 1 / (crop.bottomRight.x - crop.topLeft.x) * props.w;
      const h3 = 1 / (crop.bottomRight.y - crop.topLeft.y) * props.h;
      let hasCropChanged = false;
      switch (this.info.handle) {
        case "top":
        case "top_left":
        case "top_right": {
          if (h3 < MIN_CROP_SIZE)
            break;
          hasCropChanged = true;
          newCrop.topLeft.y = newCrop.topLeft.y + change.y / h3;
          const heightAfterCrop = h3 * (newCrop.bottomRight.y - newCrop.topLeft.y);
          if (heightAfterCrop < MIN_CROP_SIZE) {
            newCrop.topLeft.y = newCrop.bottomRight.y - MIN_CROP_SIZE / h3;
            pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h3;
          } else {
            if (newCrop.topLeft.y <= 0) {
              newCrop.topLeft.y = 0;
              pointDelta.y = (newCrop.topLeft.y - crop.topLeft.y) * h3;
            } else {
              pointDelta.y = change.y;
            }
          }
          break;
        }
        case "bottom":
        case "bottom_left":
        case "bottom_right": {
          if (h3 < MIN_CROP_SIZE)
            break;
          hasCropChanged = true;
          newCrop.bottomRight.y = Math.min(1, newCrop.bottomRight.y + change.y / h3);
          const heightAfterCrop = h3 * (newCrop.bottomRight.y - newCrop.topLeft.y);
          if (heightAfterCrop < MIN_CROP_SIZE) {
            newCrop.bottomRight.y = newCrop.topLeft.y + MIN_CROP_SIZE / h3;
          }
          break;
        }
      }
      switch (this.info.handle) {
        case "left":
        case "top_left":
        case "bottom_left": {
          if (w3 < MIN_CROP_SIZE)
            break;
          hasCropChanged = true;
          newCrop.topLeft.x = newCrop.topLeft.x + change.x / w3;
          const widthAfterCrop = w3 * (newCrop.bottomRight.x - newCrop.topLeft.x);
          if (widthAfterCrop < MIN_CROP_SIZE) {
            newCrop.topLeft.x = newCrop.bottomRight.x - MIN_CROP_SIZE / w3;
            pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w3;
          } else {
            if (newCrop.topLeft.x <= 0) {
              newCrop.topLeft.x = 0;
              pointDelta.x = (newCrop.topLeft.x - crop.topLeft.x) * w3;
            } else {
              pointDelta.x = change.x;
            }
          }
          break;
        }
        case "right":
        case "top_right":
        case "bottom_right": {
          if (w3 < MIN_CROP_SIZE)
            break;
          hasCropChanged = true;
          newCrop.bottomRight.x = Math.min(1, newCrop.bottomRight.x + change.x / w3);
          const widthAfterCrop = w3 * (newCrop.bottomRight.x - newCrop.topLeft.x);
          if (widthAfterCrop < MIN_CROP_SIZE) {
            newCrop.bottomRight.x = newCrop.topLeft.x + MIN_CROP_SIZE / w3;
          }
          break;
        }
      }
      if (!hasCropChanged)
        return;
      newPoint.add(pointDelta.rot(shape.rotation));
      const partial = {
        id: shape.id,
        type: shape.type,
        x: newPoint.x,
        y: newPoint.y,
        props: {
          crop: newCrop,
          w: (newCrop.bottomRight.x - newCrop.topLeft.x) * w3,
          h: (newCrop.bottomRight.y - newCrop.topLeft.y) * h3
        }
      };
      this.app.updateShapes([partial], true);
      this.updateCursor();
    }
    complete() {
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, this.info);
      } else {
        this.app.setCroppingId(null);
        this.parent.transition("idle", {});
      }
    }
    cancel() {
      this.app.bailToMark(this.markId);
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, this.info);
      } else {
        this.app.setCroppingId(null);
        this.parent.transition("idle", {});
      }
    }
    createSnapshot() {
      const {
        selectionRotation,
        inputs: { originPagePoint }
      } = this.app;
      const shape = this.app.onlySelectedShape;
      const selectionBounds = this.app.selectionBounds;
      const dragHandlePoint = Vec2d.RotWith(
        selectionBounds.getHandlePoint(this.info.handle),
        selectionBounds.point,
        selectionRotation
      );
      const cursorHandleOffset = Vec2d.Sub(originPagePoint, dragHandlePoint);
      return {
        shape,
        cursorHandleOffset
      };
    }
  };
  __publicField(Cropping, "id", "cropping");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/DraggingHandle.ts
  var DraggingHandle = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "shapeId", "");
      __publicField(this, "initialHandle", {});
      __publicField(this, "initialAdjacentHandle", null);
      __publicField(this, "markId", "");
      __publicField(this, "initialPageTransform");
      __publicField(this, "initialPageRotation");
      __publicField(this, "info", {});
      __publicField(this, "isPrecise", false);
      __publicField(this, "isPreciseId", null);
      __publicField(this, "pointingId", null);
      __publicField(this, "onEnter", (info) => {
        const { shape, isCreating, handle } = info;
        this.info = info;
        this.shapeId = shape.id;
        this.markId = isCreating ? "creating" : this.app.mark("dragging handle");
        this.initialHandle = deepCopy(handle);
        this.initialPageTransform = this.app.getPageTransform(shape);
        this.initialPageRotation = this.app.getPageRotation(shape);
        this.app.setCursor({ type: isCreating ? "cross" : "grabbing", rotation: 0 });
        const handles = this.app.getShapeUtil(shape).handles(shape).sort(sortByIndex2);
        const index2 = handles.findIndex((h3) => h3.id === info.handle.id);
        this.initialAdjacentHandle = null;
        for (let i3 = index2 + 1; i3 < handles.length; i3++) {
          const handle2 = handles[i3];
          if (handle2.type === "vertex" && handle2.id !== "middle" && handle2.id !== info.handle.id) {
            this.initialAdjacentHandle = handle2;
            break;
          }
        }
        if (!this.initialAdjacentHandle) {
          for (let i3 = handles.length - 1; i3 >= 0; i3--) {
            const handle2 = handles[i3];
            if (handle2.type === "vertex" && handle2.id !== "middle" && handle2.id !== info.handle.id) {
              this.initialAdjacentHandle = handle2;
              break;
            }
          }
        }
        const initialTerminal = shape.props[info.handle.id];
        this.isPrecise = false;
        if ((initialTerminal == null ? void 0 : initialTerminal.type) === "binding") {
          this.app.setHintingIds([initialTerminal.boundShapeId]);
          this.isPrecise = !Vec2d.Equals(initialTerminal.normalizedAnchor, { x: 0.5, y: 0.5 });
          if (this.isPrecise) {
            this.isPreciseId = initialTerminal.boundShapeId;
          } else {
            this.resetExactTimeout();
          }
        }
        this.update();
      });
      __publicField(this, "exactTimeout", -1);
      __publicField(this, "onPointerMove", () => {
        this.update();
      });
      __publicField(this, "onKeyDown", () => {
        this.update();
      });
      __publicField(this, "onKeyUp", () => {
        this.update();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onExit", () => {
        this.app.setHintingIds([]);
        this.app.snaps.clear();
        this.app.setCursor({ type: "default" });
      });
    }
    resetExactTimeout() {
      if (this.exactTimeout !== -1) {
        this.clearExactTimeout();
      }
      this.exactTimeout = setTimeout(() => {
        if (this.isActive && !this.isPrecise) {
          this.isPrecise = true;
          this.isPreciseId = this.pointingId;
          this.update();
        }
        this.exactTimeout = -1;
      }, 750);
    }
    clearExactTimeout() {
      if (this.exactTimeout !== -1) {
        clearTimeout(this.exactTimeout);
        this.exactTimeout = -1;
      }
    }
    complete() {
      this.app.snaps.clear();
      const { onInteractionEnd } = this.info;
      if (this.app.instanceState.isToolLocked && onInteractionEnd) {
        this.app.setSelectedTool(onInteractionEnd, { shapeId: this.shapeId });
        return;
      }
      this.parent.transition("idle", {});
    }
    cancel() {
      this.app.bailToMark(this.markId);
      this.app.snaps.clear();
      const { onInteractionEnd } = this.info;
      if (onInteractionEnd) {
        this.app.setSelectedTool(onInteractionEnd, { shapeId: this.shapeId });
        return;
      }
      this.parent.transition("idle", {});
    }
    update() {
      var _a5;
      const { currentPagePoint, originPagePoint, shiftKey } = this.app.inputs;
      const shape = this.app.getShapeById(this.shapeId);
      if (!shape)
        return;
      let point2 = Vec2d.Add(
        Vec2d.Rot(Vec2d.Sub(currentPagePoint, originPagePoint), -this.initialPageRotation),
        this.initialHandle
      );
      if (shiftKey && this.initialHandle.id !== "middle") {
        const { initialAdjacentHandle } = this;
        if (initialAdjacentHandle) {
          const angle = Vec2d.Angle(initialAdjacentHandle, point2);
          const snappedAngle = snapAngle(angle, 24);
          const angleDifference = snappedAngle - angle;
          point2 = Vec2d.RotWith(point2, initialAdjacentHandle, angleDifference);
        }
      }
      this.app.snaps.clear();
      const { ctrlKey } = this.app.inputs;
      const shouldSnap = this.app.userDocumentSettings.isSnapMode ? !ctrlKey : ctrlKey;
      if (shouldSnap && shape.type === "line") {
        const pagePoint = Matrix2d.applyToPoint(this.app.getPageTransformById(shape.id), point2);
        const snapData = this.app.snaps.snapLineHandleTranslate({
          lineId: shape.id,
          handleId: this.initialHandle.id,
          handlePoint: pagePoint
        });
        const { nudge } = snapData;
        if (nudge.x || nudge.y) {
          const shapeSpaceNudge = this.app.getDeltaInShapeSpace(shape, nudge);
          point2 = Vec2d.Add(point2, shapeSpaceNudge);
        }
      }
      const util = this.app.getShapeUtil(shape);
      const changes = (_a5 = util.onHandleChange) == null ? void 0 : _a5.call(util, shape, {
        handle: __spreadProps(__spreadValues({}, this.initialHandle), {
          x: point2.x,
          y: point2.y
        }),
        isPrecise: this.isPrecise || this.app.inputs.altKey
      });
      const next = __spreadValues(__spreadValues({}, shape), changes);
      if (this.initialHandle.canBind) {
        const bindingAfter = next.props[this.initialHandle.id];
        if ((bindingAfter == null ? void 0 : bindingAfter.type) === "binding") {
          if (this.app.hintingIds[0] !== bindingAfter.boundShapeId) {
            this.app.setHintingIds([bindingAfter.boundShapeId]);
            this.pointingId = bindingAfter.boundShapeId;
            this.isPrecise = this.app.inputs.pointerVelocity.len() < 0.5 || this.app.inputs.altKey;
            this.isPreciseId = this.isPrecise ? bindingAfter.boundShapeId : null;
            this.resetExactTimeout();
          }
        } else {
          if (this.app.hintingIds.length > 0) {
            this.app.setHintingIds([]);
            this.pointingId = null;
            this.isPrecise = false;
            this.isPreciseId = null;
            this.resetExactTimeout();
          }
        }
      }
      if (changes) {
        this.app.updateShapes([next], true);
      }
    }
  };
  __publicField(DraggingHandle, "id", "dragging_handle");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/EditingShape.ts
  var EditingShape = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerEnter", (info) => {
        switch (info.target) {
          case "shape": {
            const { selectedIds, focusLayerId } = this.app;
            const hoveringShape = this.app.getOutermostSelectableShape(
              info.shape,
              (parent) => !selectedIds.includes(parent.id)
            );
            if (hoveringShape.id !== focusLayerId) {
              this.app.setHoveredId(hoveringShape.id);
            }
            break;
          }
        }
      });
      __publicField(this, "onPointerLeave", (info) => {
        switch (info.target) {
          case "shape": {
            this.app.setHoveredId(null);
            break;
          }
        }
      });
      __publicField(this, "onExit", () => {
        var _a5;
        if (!this.app.pageState.editingId)
          return;
        const { editingId } = this.app.pageState;
        if (!editingId)
          return;
        this.app.setEditingId(null);
        const shape = this.app.getShapeById(editingId);
        const util = this.app.getShapeUtil(shape);
        (_a5 = util.onEditEnd) == null ? void 0 : _a5.call(util, shape);
      });
      __publicField(this, "onPointerDown", (info) => {
        var _a5, _b2, _c, _d;
        switch (info.target) {
          case "shape": {
            const { shape } = info;
            const { editingId } = this.app.pageState;
            if (editingId) {
              if (shape.id === editingId) {
                return;
              }
              const editingShape = this.app.getShapeById(editingId);
              if (editingShape) {
                const editingShapeUtil = this.app.getShapeUtil(editingShape);
                (_a5 = editingShapeUtil.onEditEnd) == null ? void 0 : _a5.call(editingShapeUtil, editingShape);
                const util = this.app.getShapeUtil(shape);
                if (shape.type === editingShape.type && ((_b2 = util.canEdit) == null ? void 0 : _b2.call(util, shape))) {
                  this.app.setEditingId(shape.id);
                  this.app.setHoveredId(shape.id);
                  this.app.setSelectedIds([shape.id]);
                  return;
                }
              }
            }
          }
        }
        this.parent.transition("idle", info);
        (_d = (_c = this.parent.current.value) == null ? void 0 : _c.onPointerDown) == null ? void 0 : _d.call(_c, info);
      });
      __publicField(this, "onComplete", (info) => {
        this.parent.transition("idle", info);
      });
      __publicField(this, "onCancel", (info) => {
        this.parent.transition("idle", info);
      });
    }
  };
  __publicField(EditingShape, "id", "editing_shape");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Idle.ts
  var Idle10 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerEnter", (info) => {
        switch (info.target) {
          case "canvas": {
            break;
          }
          case "shape": {
            const { selectedIds, focusLayerId } = this.app;
            const hoveringShape = this.app.getOutermostSelectableShape(
              info.shape,
              (parent) => !selectedIds.includes(parent.id)
            );
            if (hoveringShape.id !== focusLayerId) {
              this.app.setHoveredId(hoveringShape.id);
            }
            break;
          }
        }
      });
      __publicField(this, "onPointerLeave", (info) => {
        switch (info.target) {
          case "shape": {
            this.app.setHoveredId(null);
            break;
          }
        }
      });
      __publicField(this, "onPointerDown", (info) => {
        if (this.app.isMenuOpen)
          return;
        const shouldEnterCropMode = this.shouldEnterCropMode(info, true);
        if (info.ctrlKey && !shouldEnterCropMode) {
          this.parent.transition("brushing", info);
          return;
        }
        switch (info.target) {
          case "canvas": {
            this.parent.transition("pointing_canvas", info);
            break;
          }
          case "shape": {
            this.parent.transition("pointing_shape", info);
            break;
          }
          case "handle": {
            if (this.app.isReadOnly)
              break;
            if (this.app.inputs.altKey) {
              this.parent.transition("pointing_shape", info);
            } else {
              this.parent.transition("pointing_handle", info);
            }
            break;
          }
          case "selection": {
            switch (info.handle) {
              case "mobile_rotate":
              case "top_left_rotate":
              case "top_right_rotate":
              case "bottom_left_rotate":
              case "bottom_right_rotate": {
                this.parent.transition("pointing_rotate_handle", info);
                break;
              }
              case "top":
              case "right":
              case "bottom":
              case "left": {
                if (shouldEnterCropMode) {
                  this.parent.transition("pointing_crop_handle", info);
                } else {
                  this.parent.transition("pointing_resize_handle", info);
                }
                break;
              }
              case "top_left":
              case "top_right":
              case "bottom_left":
              case "bottom_right": {
                if (shouldEnterCropMode) {
                  this.parent.transition("pointing_crop_handle", info);
                } else {
                  this.parent.transition("pointing_resize_handle", info);
                }
                break;
              }
              default: {
                this.parent.transition("pointing_selection", info);
              }
            }
            break;
          }
        }
      });
      __publicField(this, "onDoubleClick", (info) => {
        var _a5, _b2, _c, _d;
        if (info.phase !== "up")
          return;
        switch (info.target) {
          case "canvas": {
            if (this.app.isReadOnly)
              break;
            this.createTextShapeAtPoint(info);
            break;
          }
          case "selection": {
            if (this.app.isReadOnly)
              break;
            const { onlySelectedShape } = this.app;
            if (onlySelectedShape) {
              const util = this.app.getShapeUtil(onlySelectedShape);
              if (info.handle === "right" || info.handle === "left" || info.handle === "top" || info.handle === "bottom") {
                const change = (_a5 = util.onDoubleClickEdge) == null ? void 0 : _a5.call(util, onlySelectedShape);
                if (change) {
                  this.app.mark("double click edge");
                  this.app.updateShapes([change]);
                  return;
                }
              }
              if (util.canCrop(onlySelectedShape)) {
                this.parent.transition("crop", info);
                return;
              }
              if (util.canEdit(onlySelectedShape)) {
                this.startEditingShape(onlySelectedShape, info);
              }
            }
            break;
          }
          case "shape": {
            const { shape } = info;
            const util = this.app.getShapeUtil(shape);
            if (shape.type !== "video" && shape.type !== "embed" && this.app.isReadOnly)
              break;
            if (util.onDoubleClick) {
              const change = (_b2 = util.onDoubleClick) == null ? void 0 : _b2.call(util, shape);
              if (change) {
                this.app.updateShapes([change]);
                return;
              } else if (util.canCrop(shape)) {
                this.app.mark("select and crop");
                this.app.select((_c = info.shape) == null ? void 0 : _c.id);
                this.parent.transition("crop", info);
                return;
              }
            }
            if (util.canEdit(shape)) {
              this.startEditingShape(shape, info);
            } else {
              this.createTextShapeAtPoint(info);
            }
            break;
          }
          case "handle": {
            if (this.app.isReadOnly)
              break;
            const { shape, handle } = info;
            const util = this.app.getShapeUtil(shape);
            const changes = (_d = util.onDoubleClickHandle) == null ? void 0 : _d.call(util, shape, handle);
            if (changes) {
              this.app.updateShapes([changes]);
            } else {
              if (util.canEdit(shape)) {
                this.startEditingShape(shape, info);
              }
            }
          }
        }
      });
      __publicField(this, "onRightClick", (info) => {
        switch (info.target) {
          case "canvas": {
            this.app.selectNone();
            break;
          }
          case "shape": {
            const { selectedIds } = this.app.pageState;
            const { shape } = info;
            const targetShape = this.app.getOutermostSelectableShape(
              shape,
              (parent) => !this.app.isSelected(parent.id)
            );
            if (!selectedIds.includes(targetShape.id)) {
              this.app.mark("selecting shape");
              this.app.setSelectedIds([targetShape.id]);
            }
            break;
          }
        }
      });
      __publicField(this, "onEnter", () => {
        this.app.setHoveredId(null);
        this.app.setCursor({ type: "default" });
      });
      __publicField(this, "onCancel", () => {
        if (this.app.focusLayerId !== this.app.currentPageId && this.app.selectedIds.length > 0) {
          this.app.popFocusLayer();
        } else {
          this.app.mark("clearing selection");
          this.app.selectNone();
        }
      });
      __publicField(this, "onKeyDown", (info) => {
        switch (info.code) {
          case "ArrowLeft":
          case "ArrowRight":
          case "ArrowUp":
          case "ArrowDown": {
            this.nudgeSelectedShapes(false);
            break;
          }
        }
      });
      __publicField(this, "onKeyRepeat", (info) => {
        switch (info.code) {
          case "ArrowLeft":
          case "ArrowRight":
          case "ArrowUp":
          case "ArrowDown": {
            this.nudgeSelectedShapes(true);
            break;
          }
        }
      });
      __publicField(this, "onKeyUp", (info) => {
        if (this.app.isReadOnly) {
          switch (info.code) {
            case "Enter": {
              if (this.shouldStartEditingShape() && this.app.onlySelectedShape) {
                this.startEditingShape(this.app.onlySelectedShape, __spreadProps(__spreadValues({}, info), {
                  target: "shape",
                  shape: this.app.onlySelectedShape
                }));
                return;
              }
              break;
            }
          }
        } else {
          switch (info.code) {
            case "Enter": {
              const { selectedShapes } = this.app;
              if (selectedShapes.every((shape) => shape.type === "group")) {
                this.app.setSelectedIds(
                  selectedShapes.flatMap((shape) => this.app.getSortedChildIds(shape.id))
                );
                return;
              }
              if (this.shouldStartEditingShape() && this.app.onlySelectedShape) {
                this.startEditingShape(this.app.onlySelectedShape, __spreadProps(__spreadValues({}, info), {
                  target: "shape",
                  shape: this.app.onlySelectedShape
                }));
                return;
              }
              if (this.shouldEnterCropMode(info, false)) {
                this.parent.transition("crop", info);
              }
              break;
            }
          }
        }
      });
    }
    shouldStartEditingShape() {
      const { onlySelectedShape } = this.app;
      if (!onlySelectedShape)
        return false;
      const util = this.app.getShapeUtil(onlySelectedShape);
      return util.canEdit(onlySelectedShape);
    }
    shouldEnterCropMode(info, withCtrlKey) {
      const singleShape = this.app.onlySelectedShape;
      if (!singleShape)
        return false;
      const shapeUtil = this.app.getShapeUtil(singleShape);
      if (withCtrlKey) {
        return shapeUtil.canCrop(singleShape) && info.ctrlKey;
      } else {
        return shapeUtil.canCrop(singleShape);
      }
    }
    startEditingShape(shape, info) {
      this.app.mark("editing shape");
      this.app.setEditingId(shape.id);
      this.parent.transition("editing_shape", info);
    }
    createTextShapeAtPoint(info) {
      this.app.mark("creating text shape");
      const id = createShapeId();
      const { x: x3, y: y3 } = this.app.inputs.currentPagePoint;
      this.app.createShapes([
        {
          id,
          type: "text",
          x: x3,
          y: y3,
          props: {
            text: "",
            autoSize: true
          }
        }
      ]);
      const shape = this.app.getShapeById(id);
      if (!shape)
        return;
      const bounds = this.app.getBounds(shape);
      this.app.updateShapes([
        {
          id,
          type: "text",
          x: shape.x - bounds.width / 2,
          y: shape.y - bounds.height / 2
        }
      ]);
      this.app.setEditingId(id);
      this.app.select(id);
      this.parent.transition("editing_shape", info);
    }
    nudgeSelectedShapes(ephemeral = false) {
      const {
        app: {
          inputs: { keys }
        }
      } = this;
      const shiftKey = keys.has("Shift");
      const delta = new Vec2d(0, 0);
      if (keys.has("ArrowLeft"))
        delta.x -= 1;
      if (keys.has("ArrowRight"))
        delta.x += 1;
      if (keys.has("ArrowUp"))
        delta.y -= 1;
      if (keys.has("ArrowDown"))
        delta.y += 1;
      if (delta.equals(new Vec2d(0, 0)))
        return;
      if (!ephemeral)
        this.app.mark("nudge shapes");
      this.app.nudgeShapes(this.app.selectedIds, delta, shiftKey);
    }
  };
  __publicField(Idle10, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/PointingCanvas.ts
  var PointingCanvas = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onEnter", () => {
        const { inputs } = this.app;
        if (!inputs.shiftKey) {
          if (this.app.selectedIds.length > 0) {
            this.app.mark("selecting none");
            this.app.selectNone();
          }
        }
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          this.parent.transition("brushing", info);
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onInterrupt", () => {
        this.parent.transition("idle", {});
      });
    }
    _clickWasInsideFocusedGroup() {
      const { focusLayerId, inputs } = this.app;
      if (!isShapeId(focusLayerId)) {
        return false;
      }
      const groupShape = this.app.getShapeById(focusLayerId);
      if (!groupShape) {
        return false;
      }
      const clickPoint = this.app.getPointInShapeSpace(groupShape, inputs.currentPagePoint);
      const util = this.app.getShapeUtil(groupShape);
      return util.hitTestPoint(groupShape, clickPoint);
    }
    complete() {
      const { shiftKey } = this.app.inputs;
      if (!shiftKey) {
        this.app.selectNone();
        if (!this._clickWasInsideFocusedGroup()) {
          this.app.setFocusLayer(null);
        }
      }
      this.parent.transition("idle", {});
    }
  };
  __publicField(PointingCanvas, "id", "pointing_canvas");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/PointingCropHandle.ts
  var PointingCropHandle = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        const selectedShape = this.app.selectedShapes[0];
        if (!selectedShape)
          return;
        this.updateCursor(selectedShape);
        this.app.setCroppingId(selectedShape.id);
      });
      __publicField(this, "onPointerMove", () => {
        const isDragging = this.app.inputs.isDragging;
        if (isDragging) {
          this.parent.transition("cropping", __spreadProps(__spreadValues({}, this.info), {
            onInteractionEnd: this.info.onInteractionEnd
          }));
        }
      });
      __publicField(this, "onPointerUp", () => {
        if (this.info.onInteractionEnd) {
          this.app.setSelectedTool(this.info.onInteractionEnd, this.info);
        } else {
          this.app.setCroppingId(null);
          this.parent.transition("idle", {});
        }
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.cancel();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    updateCursor(shape) {
      const cursorType = CursorTypeMap[this.info.handle];
      this.app.setCursor({
        type: cursorType,
        rotation: shape.rotation
      });
    }
    cancel() {
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, this.info);
      } else {
        this.app.setCroppingId(null);
        this.parent.transition("idle", {});
      }
    }
  };
  __publicField(PointingCropHandle, "id", "pointing_crop_handle");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/PointingHandle.ts
  var PointingHandle = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        const initialTerminal = info.shape.props[info.handle.id];
        if ((initialTerminal == null ? void 0 : initialTerminal.type) === "binding") {
          this.app.setHintingIds([initialTerminal.boundShapeId]);
        }
        this.app.setCursor({ type: "grabbing" });
      });
      __publicField(this, "onExit", () => {
        this.app.setHintingIds([]);
        this.app.setCursor({ type: "default" });
      });
      __publicField(this, "onPointerUp", () => {
        this.parent.transition("idle", this.info);
      });
      __publicField(this, "onPointerMove", () => {
        if (this.app.inputs.isDragging) {
          this.parent.transition("dragging_handle", this.info);
        }
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.cancel();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    cancel() {
      this.parent.transition("idle", {});
    }
  };
  __publicField(PointingHandle, "id", "pointing_handle");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/PointingRotateHandle.ts
  var PointingRotateHandle = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        this.updateCursor();
      });
      __publicField(this, "onPointerMove", () => {
        const { isDragging } = this.app.inputs;
        if (isDragging) {
          this.parent.transition("rotating", this.info);
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.cancel();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    updateCursor() {
      const { selectionRotation } = this.app;
      this.app.setCursor({
        type: CursorTypeMap[this.info.handle],
        rotation: selectionRotation
      });
    }
    complete() {
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle", {});
      }
    }
    cancel() {
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle", {});
      }
    }
  };
  __publicField(PointingRotateHandle, "id", "pointing_rotate_handle");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/PointingSelection.ts
  var PointingSelection = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
      });
      __publicField(this, "onPointerUp", (info) => {
        this.app.selectNone();
        this.parent.transition("idle", info);
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          if (this.app.isReadOnly)
            return;
          this.parent.transition("translating", info);
        }
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.cancel();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    cancel() {
      this.parent.transition("idle", {});
    }
  };
  __publicField(PointingSelection, "id", "pointing_selection");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/PointingShape.ts
  var PointingShape = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "eventTargetShape", {});
      __publicField(this, "selectingShape", {});
      __publicField(this, "didSelectOnEnter", false);
      __publicField(this, "onEnter", (info) => {
        var _a5;
        this.eventTargetShape = info.shape;
        this.selectingShape = this.app.getOutermostSelectableShape(info.shape);
        const util = this.app.getShapeUtil(info.shape);
        if (util.onClick || this.selectingShape.id === this.app.focusLayerId) {
          this.didSelectOnEnter = false;
          return;
        }
        const isSelected = this.app.isWithinSelection(this.selectingShape.id);
        const isBehindSelectionBounds = this.app.selectedIds.length > 1 && // only on 2+ selected shapes!
        ((_a5 = this.app.selectionBounds) == null ? void 0 : _a5.containsPoint(this.app.inputs.currentPagePoint));
        this.didSelectOnEnter = !isSelected && this.selectingShape.id !== this.app.focusLayerId && !isBehindSelectionBounds;
        if (this.didSelectOnEnter) {
          const { inputs, selectedIds } = this.app;
          const parent = this.app.getParentShape(info.shape);
          if (parent && parent.type === "group") {
            this.app.cancelDoubleClick();
          }
          if (inputs.shiftKey && !inputs.altKey) {
            if (!selectedIds.includes(this.selectingShape.id)) {
              this.app.mark("shift selecting shape");
              this.app.setSelectedIds([...selectedIds, this.selectingShape.id]);
            }
          } else {
            this.app.mark("selecting shape");
            this.app.setSelectedIds([this.selectingShape.id]);
          }
        }
      });
      __publicField(this, "onPointerUp", (info) => {
        var _a5;
        const { shape } = info;
        if (shape) {
          const util = this.app.getShapeUtil(shape);
          if (util.onClick) {
            const change = (_a5 = util.onClick) == null ? void 0 : _a5.call(util, shape);
            if (change) {
              this.app.updateShapes([change]);
              this.parent.transition("idle", info);
              return;
            }
          }
        }
        if (!this.didSelectOnEnter && this.selectingShape.id !== this.app.focusLayerId) {
          this.app.mark("selecting shape (pointer up)");
          const targetShape = this.app.getOutermostSelectableShape(
            this.eventTargetShape,
            // if a group is selected, we want to stop before reaching that group
            // so we can drill down into the group
            (parent) => !this.app.isSelected(parent.id)
          );
          if (this.app.selectedIds.includes(targetShape.id)) {
            this.app.setSelectedIds(
              this.app.inputs.shiftKey ? this.app.selectedIds.filter((id) => id !== this.selectingShape.id) : [this.selectingShape.id]
            );
          } else if (this.app.inputs.shiftKey) {
            const ancestors = this.app.getAncestors(targetShape);
            this.app.setSelectedIds([
              ...this.app.selectedIds.filter((id) => !ancestors.find((a3) => a3.id === id)),
              targetShape.id
            ]);
          } else {
            this.app.setSelectedIds([targetShape.id]);
          }
        } else if (this.selectingShape.id === this.app.focusLayerId) {
          if (this.app.selectedIds.length > 0) {
            this.app.setSelectedIds([]);
          } else {
            this.app.popFocusLayer();
          }
        }
        this.parent.transition("idle", info);
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          if (this.app.isReadOnly)
            return;
          this.parent.transition("translating", info);
        }
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.cancel();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    cancel() {
      this.parent.transition("idle", {});
    }
  };
  __publicField(PointingShape, "id", "pointing_shape");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Resizing.ts
  var Resizing = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "markId", "");
      // we transition into the resizing state from the geo pointing state, which starts with a shape of size w: 1, h: 1,
      // so if the user drags x: +50, y: +50 after mouseDown, the shape will be w: 51, h: 51, which is too many pixels, alas
      // so we allow passing a further offset into this state to negate such issues
      __publicField(this, "creationCursorOffset", { x: 0, y: 0 });
      __publicField(this, "editAfterComplete", false);
      __publicField(this, "snapshot", {});
      __publicField(this, "onEnter", (info) => {
        const {
          isCreating = false,
          editAfterComplete = false,
          creationCursorOffset = { x: 0, y: 0 }
        } = info;
        this.info = info;
        this.editAfterComplete = editAfterComplete;
        this.creationCursorOffset = creationCursorOffset;
        if (info.isCreating) {
          this.app.setCursor({ type: "cross", rotation: 0 });
        }
        this.snapshot = this._createSnapshot();
        this.markId = isCreating ? "creating" : this.app.mark("starting resizing");
        this.handleResizeStart();
        this.updateShapes();
      });
      __publicField(this, "onPointerMove", () => {
        this.updateShapes();
      });
      __publicField(this, "onKeyDown", () => {
        this.updateShapes();
      });
      __publicField(this, "onKeyUp", () => {
        this.updateShapes();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onExit", () => {
        this.app.snaps.clear();
      });
      __publicField(this, "_createSnapshot", () => {
        const {
          selectedIds,
          selectionRotation,
          inputs: { originPagePoint }
        } = this.app;
        const selectionBounds = this.app.selectionBounds;
        const dragHandlePoint = Vec2d.RotWith(
          selectionBounds.getHandlePoint(this.info.handle),
          selectionBounds.point,
          selectionRotation
        );
        const cursorHandleOffset = Vec2d.Sub(originPagePoint, dragHandlePoint);
        const shapeSnapshots = /* @__PURE__ */ new Map();
        selectedIds.forEach((id) => {
          const shape = this.app.getShapeById(id);
          if (shape) {
            shapeSnapshots.set(shape.id, this._createShapeSnapshot(shape));
            if (shape.type === "frame" && selectedIds.length === 1)
              return;
            this.app.visitDescendants(shape.id, (descendantId) => {
              const descendent = this.app.getShapeById(descendantId);
              if (descendent) {
                shapeSnapshots.set(descendent.id, this._createShapeSnapshot(descendent));
                if (descendent.type === "frame") {
                  return false;
                }
              }
            });
          }
        });
        const canShapesDeform = ![...shapeSnapshots.values()].some(
          (shape) => !areAnglesCompatible(shape.pageRotation, selectionRotation) || shape.isAspectRatioLocked
        );
        return {
          shapeSnapshots,
          selectionBounds,
          cursorHandleOffset,
          selectionRotation,
          selectedIds,
          canShapesDeform,
          initialSelectionPageBounds: this.app.selectedPageBounds
        };
      });
      __publicField(this, "_createShapeSnapshot", (shape) => {
        const pageTransform = this.app.getPageTransform(shape);
        const util = this.app.getShapeUtil(shape);
        return {
          shape,
          bounds: util.bounds(shape),
          pageTransform,
          pageRotation: Matrix2d.Decompose(pageTransform).rotation,
          isAspectRatioLocked: util.isAspectRatioLocked(shape)
        };
      });
    }
    cancel() {
      this.app.bailToMark(this.markId);
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, {});
      } else {
        this.parent.transition("idle", {});
      }
    }
    complete() {
      this.handleResizeEnd();
      if (this.editAfterComplete && this.app.onlySelectedShape) {
        this.app.setEditingId(this.app.onlySelectedShape.id);
        this.app.setSelectedTool("select");
        this.app.root.current.value.transition("editing_shape", {});
        return;
      }
      if (this.app.instanceState.isToolLocked && this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd, {});
        return;
      }
      this.parent.transition("idle", {});
    }
    handleResizeStart() {
      const { shapeSnapshots } = this.snapshot;
      const changes = [];
      shapeSnapshots.forEach(({ shape }) => {
        var _a5;
        const util = this.app.getShapeUtil(shape);
        const change = (_a5 = util.onResizeStart) == null ? void 0 : _a5.call(util, shape);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.app.updateShapes(changes);
      }
    }
    handleResizeEnd() {
      const { shapeSnapshots } = this.snapshot;
      const changes = [];
      shapeSnapshots.forEach(({ shape }) => {
        var _a5;
        const current = this.app.getShapeById(shape.id);
        const util = this.app.getShapeUtil(shape);
        const change = (_a5 = util.onResizeEnd) == null ? void 0 : _a5.call(util, shape, current);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.app.updateShapes(changes);
      }
    }
    updateShapes() {
      const { altKey: altKey2, shiftKey } = this.app.inputs;
      const {
        shapeSnapshots,
        selectionBounds,
        cursorHandleOffset,
        selectedIds,
        selectionRotation,
        canShapesDeform
      } = this.snapshot;
      const isAspectRatioLocked = shiftKey || !canShapesDeform;
      const { ctrlKey } = this.app.inputs;
      const currentPagePoint = this.app.inputs.currentPagePoint.clone().sub(cursorHandleOffset).sub(this.creationCursorOffset);
      const originPagePoint = this.app.inputs.originPagePoint.clone().sub(cursorHandleOffset);
      if (this.app.isGridMode && !ctrlKey) {
        currentPagePoint.snapToGrid(this.app.gridSize);
      }
      const dragHandle = this.info.handle;
      const scaleOriginHandle = rotateSelectionHandle2(dragHandle, Math.PI);
      this.app.snaps.clear();
      const shouldSnap = this.app.userDocumentSettings.isSnapMode ? !ctrlKey : ctrlKey;
      if (shouldSnap && selectionRotation % TAU === 0) {
        const { nudge } = this.app.snaps.snapResize({
          dragDelta: Vec2d.Sub(currentPagePoint, originPagePoint),
          initialSelectionPageBounds: this.snapshot.initialSelectionPageBounds,
          handle: rotateSelectionHandle2(dragHandle, selectionRotation),
          isAspectRatioLocked,
          isResizingFromCenter: altKey2
        });
        currentPagePoint.add(nudge);
      }
      const scaleOriginPage = Vec2d.RotWith(
        altKey2 ? selectionBounds.center : selectionBounds.getHandlePoint(scaleOriginHandle),
        selectionBounds.point,
        selectionRotation
      );
      const distanceFromScaleOriginNow = Vec2d.Sub(currentPagePoint, scaleOriginPage).rot(
        -selectionRotation
      );
      const distanceFromScaleOriginAtStart = Vec2d.Sub(originPagePoint, scaleOriginPage).rot(
        -selectionRotation
      );
      const scale = Vec2d.DivV(distanceFromScaleOriginNow, distanceFromScaleOriginAtStart);
      if (!Number.isFinite(scale.x))
        scale.x = 1;
      if (!Number.isFinite(scale.y))
        scale.y = 1;
      const isXLocked = dragHandle === "top" || dragHandle === "bottom";
      const isYLocked = dragHandle === "left" || dragHandle === "right";
      if (isAspectRatioLocked) {
        if (isYLocked) {
          scale.y = Math.abs(scale.x);
        } else if (isXLocked) {
          scale.x = Math.abs(scale.y);
        } else if (Math.abs(scale.x) > Math.abs(scale.y)) {
          scale.y = Math.abs(scale.x) * (scale.y < 0 ? -1 : 1);
        } else {
          scale.x = Math.abs(scale.y) * (scale.x < 0 ? -1 : 1);
        }
      } else {
        if (isXLocked) {
          scale.x = 1;
        }
        if (isYLocked) {
          scale.y = 1;
        }
      }
      if (!this.info.isCreating) {
        this.updateCursor({
          dragHandle,
          isFlippedX: scale.x < 0,
          isFlippedY: scale.y < 0,
          rotation: selectionRotation
        });
      }
      for (const id of shapeSnapshots.keys()) {
        const snapshot = shapeSnapshots.get(id);
        this.app.resizeShape(id, scale, {
          initialBounds: snapshot.bounds,
          dragHandle,
          initialPageTransform: snapshot.pageTransform,
          initialShape: snapshot.shape,
          mode: selectedIds.length === 1 && id === selectedIds[0] ? "resize_bounds" : "scale_shape",
          scaleOrigin: scaleOriginPage,
          scaleAxisRotation: selectionRotation
        });
      }
    }
    // ---
    updateCursor({
      dragHandle,
      isFlippedX,
      isFlippedY,
      rotation
    }) {
      const nextCursor = __spreadValues({}, this.app.cursor);
      switch (dragHandle) {
        case "top_left":
        case "bottom_right": {
          nextCursor.type = "nwse-resize";
          if (isFlippedX !== isFlippedY) {
            nextCursor.type = "nesw-resize";
          }
          break;
        }
        case "top_right":
        case "bottom_left": {
          nextCursor.type = "nesw-resize";
          if (isFlippedX !== isFlippedY) {
            nextCursor.type = "nwse-resize";
          }
          break;
        }
      }
      nextCursor.rotation = rotation;
      this.app.setCursor(nextCursor);
    }
  };
  __publicField(Resizing, "id", "resizing");
  var ORDERED_SELECTION_HANDLES = [
    "top",
    "top_right",
    "right",
    "bottom_right",
    "bottom",
    "bottom_left",
    "left",
    "top_left"
  ];
  function rotateSelectionHandle2(handle, rotation) {
    rotation = rotation % PI2;
    const numSteps = Math.round(rotation / (PI / 4));
    const currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle);
    return ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length];
  }

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Rotating.ts
  var Rotating = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "snapshot", {});
      __publicField(this, "info", {});
      __publicField(this, "markId", "");
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        this.markId = this.app.mark("rotate start");
        this.snapshot = getRotationSnapshot({ app: this.app });
        this.handleStart();
      });
      __publicField(this, "onExit", () => {
        this.app.setCursor({ type: "none" });
        this.snapshot = {};
      });
      __publicField(this, "onPointerMove", () => {
        this.update();
      });
      __publicField(this, "onKeyDown", () => {
        this.update();
      });
      __publicField(this, "onKeyUp", () => {
        this.update();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      // ---
      __publicField(this, "update", () => {
        const newSelectionRotation = this._getRotationFromPointerPosition({
          snapToNearestDegree: false
        });
        applyRotationToSnapshotShapes({
          app: this.app,
          delta: newSelectionRotation,
          snapshot: this.snapshot,
          stage: "update"
        });
        this.app.setCursor({
          type: CursorTypeMap[this.info.handle],
          rotation: newSelectionRotation + this.snapshot.initialSelectionRotation
        });
      });
      __publicField(this, "cancel", () => {
        this.app.bailToMark(this.markId);
        if (this.info.onInteractionEnd) {
          this.app.setSelectedTool(this.info.onInteractionEnd, this.info);
        } else {
          this.parent.transition("idle", this.info);
        }
      });
      __publicField(this, "complete", () => {
        applyRotationToSnapshotShapes({
          app: this.app,
          delta: this._getRotationFromPointerPosition({ snapToNearestDegree: true }),
          snapshot: this.snapshot,
          stage: "end"
        });
        if (this.info.onInteractionEnd) {
          this.app.setSelectedTool(this.info.onInteractionEnd, this.info);
        } else {
          this.parent.transition("idle", this.info);
        }
      });
    }
    handleStart() {
      const newSelectionRotation = this._getRotationFromPointerPosition({
        snapToNearestDegree: false
      });
      applyRotationToSnapshotShapes({
        app: this.app,
        delta: this._getRotationFromPointerPosition({ snapToNearestDegree: false }),
        snapshot: this.snapshot,
        stage: "start"
      });
      this.app.setCursor({
        type: CursorTypeMap[this.info.handle],
        rotation: newSelectionRotation + this.snapshot.initialSelectionRotation
      });
    }
    _getRotationFromPointerPosition({ snapToNearestDegree }) {
      const {
        selectionPageCenter,
        inputs: { shiftKey, currentPagePoint }
      } = this.app;
      const { initialCursorAngle, initialSelectionRotation } = this.snapshot;
      const preSnapRotationDelta = selectionPageCenter.angle(currentPagePoint) - initialCursorAngle;
      let newSelectionRotation = initialSelectionRotation + preSnapRotationDelta;
      if (shiftKey) {
        newSelectionRotation = snapAngle(newSelectionRotation, 24);
      } else if (snapToNearestDegree) {
        newSelectionRotation = Math.round(newSelectionRotation / EPSILON) * EPSILON;
        if (this.app.isCoarsePointer) {
          const snappedToRightAngle = snapAngle(newSelectionRotation, 4);
          const angleToRightAngle = angleDelta(newSelectionRotation, snappedToRightAngle);
          if (Math.abs(angleToRightAngle) < degreesToRadians(5)) {
            newSelectionRotation = snappedToRightAngle;
          }
        }
      }
      return newSelectionRotation - initialSelectionRotation;
    }
  };
  __publicField(Rotating, "id", "rotating");

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/ScribbleBrushing.ts
  var ScribbleBrushing = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "hits", /* @__PURE__ */ new Set());
      __publicField(this, "size", 0);
      __publicField(this, "scribble", {});
      __publicField(this, "initialSelectedIds", /* @__PURE__ */ new Set());
      __publicField(this, "newlySelectedIds", /* @__PURE__ */ new Set());
      __publicField(this, "onEnter", () => {
        this.initialSelectedIds = new Set(
          this.app.inputs.shiftKey ? this.app.selectedIds : []
        );
        this.newlySelectedIds = /* @__PURE__ */ new Set();
        this.size = 0;
        this.hits.clear();
        this.startScribble();
        this.updateBrushSelection();
        requestAnimationFrame(() => {
          this.app.setBrush(null);
        });
      });
      __publicField(this, "onExit", () => {
        this.app.setErasingIds([]);
        this.scribble.stop();
      });
      __publicField(this, "onPointerMove", () => {
        this.updateBrushSelection();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onKeyDown", () => {
        this.updateBrushSelection();
      });
      __publicField(this, "onKeyUp", () => {
        if (!this.app.inputs.altKey) {
          this.parent.transition("brushing", {});
        } else {
          this.updateBrushSelection();
        }
      });
      __publicField(this, "startScribble", () => {
        this.scribble = new ScribbleManager({
          onUpdate: this.onScribbleUpdate,
          onComplete: this.onScribbleComplete,
          color: "selection-stroke",
          opacity: 0.32,
          size: 12
        });
        this.app.on("tick", this.scribble.tick);
      });
      __publicField(this, "pushPointToScribble", () => {
        const { x: x3, y: y3 } = this.app.inputs.currentPagePoint;
        this.scribble.addPoint(x3, y3);
      });
      __publicField(this, "onScribbleUpdate", (scribble) => {
        this.app.setScribble(scribble);
      });
      __publicField(this, "onScribbleComplete", () => {
        this.app.off("tick", this.scribble.tick);
        this.app.setScribble(null);
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
    }
    updateBrushSelection() {
      const {
        shapesArray,
        inputs: { originPagePoint, previousPagePoint, currentPagePoint }
      } = this.app;
      this.pushPointToScribble();
      const shapes = shapesArray;
      let shape, util;
      for (let i3 = 0, n3 = shapes.length; i3 < n3; i3++) {
        shape = shapes[i3];
        util = this.app.getShapeUtil(shape);
        if (shape.type === "group" || this.newlySelectedIds.has(shape.id) || shape.type === "frame" && util.hitTestPoint(shape, this.app.getPointInShapeSpace(shape, originPagePoint))) {
          continue;
        }
        if (util.hitTestLineSegment(
          shape,
          this.app.getPointInShapeSpace(shape, previousPagePoint),
          this.app.getPointInShapeSpace(shape, currentPagePoint)
        )) {
          const outermostShape = this.app.getOutermostSelectableShape(shape);
          const pageMask = this.app.getPageMaskById(outermostShape.id);
          if (pageMask) {
            const intersection = intersectLineSegmentPolyline(
              previousPagePoint,
              currentPagePoint,
              pageMask
            );
            if (intersection !== null) {
              const isInMask = pointInPolygon(currentPagePoint, pageMask);
              if (!isInMask)
                continue;
            }
          }
          this.newlySelectedIds.add(outermostShape.id);
        }
      }
      this.app.setSelectedIds(
        [.../* @__PURE__ */ new Set([...this.newlySelectedIds, ...this.initialSelectedIds])],
        true
      );
    }
    complete() {
      this.parent.transition("idle", {});
    }
    cancel() {
      this.app.setSelectedIds([...this.initialSelectedIds], true);
      this.parent.transition("idle", {});
    }
  };
  __publicField(ScribbleBrushing, "id", "scribble_brushing");
  __publicField(ScribbleBrushing, "canActivateInReadOnly", true);

  // ../../../packages/editor/src/lib/app/managers/DragAndDropManager.ts
  var LAG_DURATION = 100;
  var DragAndDropManager = class {
    constructor(app) {
      this.app = app;
      __publicField(this, "prevDroppingShapeId", null);
      __publicField(this, "currDroppingShapeId", null);
      __publicField(this, "droppingNodeTimer", null);
      __publicField(this, "dispose", () => {
        this.clear();
      });
      app.disposables.add(this.dispose);
    }
    updateDroppingNode(movingShapes, cb) {
      var _a5, _b2;
      if (this.droppingNodeTimer === null) {
        const { currentPagePoint } = this.app.inputs;
        this.currDroppingShapeId = (_b2 = (_a5 = this.app.getDroppingShape(currentPagePoint, movingShapes)) == null ? void 0 : _a5.id) != null ? _b2 : null;
        this.setDragTimer(movingShapes, LAG_DURATION * 10, cb);
      } else if (this.app.inputs.pointerVelocity.len() > 0.5) {
        clearInterval(this.droppingNodeTimer);
        this.setDragTimer(movingShapes, LAG_DURATION, cb);
      }
    }
    setDragTimer(movingShapes, duration, cb) {
      this.droppingNodeTimer = setTimeout(() => {
        this.app.batch(() => {
          this.handleDrag(movingShapes, cb);
        });
        this.droppingNodeTimer = null;
      }, duration);
    }
    handleDrag(movingShapes, cb) {
      var _a5, _b2, _c, _d, _e, _f;
      const { currentPagePoint } = this.app.inputs;
      movingShapes = compact(movingShapes.map((shape) => this.app.getShapeById(shape.id)));
      const currDroppingShapeId = (_b2 = (_a5 = this.app.getDroppingShape(currentPagePoint, movingShapes)) == null ? void 0 : _a5.id) != null ? _b2 : null;
      if (currDroppingShapeId !== this.currDroppingShapeId) {
        this.prevDroppingShapeId = this.currDroppingShapeId;
        this.currDroppingShapeId = currDroppingShapeId;
      }
      const { prevDroppingShapeId } = this;
      if (currDroppingShapeId === prevDroppingShapeId) {
        return;
      }
      const prevDroppingShape = prevDroppingShapeId && this.app.getShapeById(prevDroppingShapeId);
      const nextDroppingShape = currDroppingShapeId && this.app.getShapeById(currDroppingShapeId);
      this.prevDroppingShapeId = this.currDroppingShapeId;
      if (prevDroppingShape) {
        (_d = (_c = this.app.getShapeUtil(prevDroppingShape)).onDragShapesOut) == null ? void 0 : _d.call(_c, prevDroppingShape, movingShapes);
      }
      if (nextDroppingShape) {
        const res = (_f = (_e = this.app.getShapeUtil(nextDroppingShape)).onDragShapesOver) == null ? void 0 : _f.call(_e, nextDroppingShape, movingShapes);
        if (res && res.shouldHint) {
          this.app.setHintingIds([nextDroppingShape.id]);
        }
      } else {
        this.app.setHintingIds([]);
      }
      cb == null ? void 0 : cb();
    }
    dropShapes(shapes) {
      var _a5, _b2;
      const { currDroppingShapeId } = this;
      this.handleDrag(shapes);
      if (currDroppingShapeId) {
        const shape = this.app.getShapeById(currDroppingShapeId);
        if (!shape)
          return;
        (_b2 = (_a5 = this.app.getShapeUtil(shape)).onDropShapesOver) == null ? void 0 : _b2.call(_a5, shape, shapes);
      }
    }
    clear() {
      this.prevDroppingShapeId = null;
      this.currDroppingShapeId = null;
      if (this.droppingNodeTimer !== null) {
        clearInterval(this.droppingNodeTimer);
      }
      this.droppingNodeTimer = null;
      this.app.setHintingIds([]);
    }
  };

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/children/Translating.ts
  var Translating = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "selectionSnapshot", {});
      __publicField(this, "snapshot", {});
      __publicField(this, "markId", "");
      __publicField(this, "isCloning", false);
      __publicField(this, "isCreating", false);
      __publicField(this, "editAfterComplete", false);
      __publicField(this, "dragAndDropManager", new DragAndDropManager(this.app));
      __publicField(this, "onEnter", (info) => {
        const { isCreating = false, editAfterComplete = false } = info;
        this.info = info;
        this.isCreating = isCreating;
        this.editAfterComplete = editAfterComplete;
        this.markId = isCreating ? "creating" : this.app.mark("translating");
        this.handleEnter(info);
        this.app.on("tick", this.updateParent);
      });
      __publicField(this, "updateParent", () => {
        const { snapshot } = this;
        this.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, this.updateParentTransforms);
      });
      __publicField(this, "onExit", () => {
        this.app.off("tick", this.updateParent);
        this.selectionSnapshot = {};
        this.snapshot = {};
        this.app.snaps.clear();
        this.app.setCursor({ type: "default" });
        this.dragAndDropManager.clear();
      });
      __publicField(this, "onPointerMove", () => {
        this.updateShapes();
      });
      __publicField(this, "onKeyDown", () => {
        if (this.app.inputs.altKey && !this.isCloning) {
          this.startCloning();
          return;
        }
        this.updateShapes();
      });
      __publicField(this, "onKeyUp", () => {
        if (!this.app.inputs.altKey && this.isCloning) {
          this.stopCloning();
          return;
        }
        this.updateShapes();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "updateParentTransforms", () => {
        const {
          app,
          snapshot: { shapeSnapshots }
        } = this;
        const movingShapes = [];
        shapeSnapshots.forEach((shapeSnapshot) => {
          const shape = app.getShapeById(shapeSnapshot.shape.id);
          if (!shape)
            return null;
          movingShapes.push(shape);
          const parentTransform = TLPage.isId(shape.parentId) ? null : Matrix2d.Inverse(app.getPageTransformById(shape.parentId));
          shapeSnapshot.parentTransform = parentTransform;
        });
      });
    }
    reset() {
      this.app.bailToMark(this.markId);
    }
    startCloning() {
      if (this.isCreating)
        return;
      this.isCloning = true;
      this.reset();
      this.markId = this.app.mark("translating");
      this.app.duplicateShapes();
      this.snapshot = getTranslatingSnapshot(this.app);
      this.handleStart();
      this.updateShapes();
    }
    stopCloning() {
      this.isCloning = false;
      this.snapshot = this.selectionSnapshot;
      this.reset();
      this.markId = this.app.mark("translating");
      this.updateShapes();
    }
    complete() {
      this.updateShapes();
      this.dragAndDropManager.dropShapes(this.snapshot.movingShapes);
      this.handleEnd();
      if (this.app.instanceState.isToolLocked && this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd);
      } else {
        if (this.editAfterComplete) {
          const onlySelected = this.app.onlySelectedShape;
          if (onlySelected) {
            this.app.setEditingId(onlySelected.id);
            this.app.setSelectedTool("select");
            this.app.root.current.value.transition("editing_shape", {});
          }
        } else {
          this.parent.transition("idle", {});
        }
      }
    }
    cancel() {
      this.reset();
      if (this.info.onInteractionEnd) {
        this.app.setSelectedTool(this.info.onInteractionEnd);
      } else {
        this.parent.transition("idle", this.info);
      }
    }
    handleEnter(info) {
      this.isCloning = false;
      this.info = info;
      this.app.setCursor({ type: "move" });
      this.selectionSnapshot = getTranslatingSnapshot(this.app);
      if (!this.isCreating) {
        if (this.app.inputs.altKey) {
          this.startCloning();
          return;
        }
      }
      this.snapshot = this.selectionSnapshot;
      this.handleStart();
      this.updateShapes();
    }
    handleStart() {
      const { movingShapes } = this.snapshot;
      const changes = [];
      movingShapes.forEach((shape) => {
        var _a5;
        const util = this.app.getShapeUtil(shape);
        const change = (_a5 = util.onTranslateStart) == null ? void 0 : _a5.call(util, shape);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.app.updateShapes(changes);
      }
    }
    handleEnd() {
      const { movingShapes } = this.snapshot;
      const changes = [];
      movingShapes.forEach((shape) => {
        var _a5;
        const current = this.app.getShapeById(shape.id);
        const util = this.app.getShapeUtil(shape);
        const change = (_a5 = util.onTranslateEnd) == null ? void 0 : _a5.call(util, shape, current);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.app.updateShapes(changes);
      }
    }
    handleChange() {
      const { movingShapes } = this.snapshot;
      const changes = [];
      movingShapes.forEach((shape) => {
        var _a5;
        const current = this.app.getShapeById(shape.id);
        const util = this.app.getShapeUtil(shape);
        const change = (_a5 = util.onTranslate) == null ? void 0 : _a5.call(util, shape, current);
        if (change) {
          changes.push(change);
        }
      });
      if (changes.length > 0) {
        this.app.updateShapes(changes);
      }
    }
    updateShapes() {
      const { snapshot } = this;
      this.dragAndDropManager.updateDroppingNode(snapshot.movingShapes, this.updateParentTransforms);
      moveShapesToPoint({
        app: this.app,
        shapeSnapshots: snapshot.shapeSnapshots,
        averagePagePoint: snapshot.averagePagePoint,
        initialSelectionPageBounds: snapshot.initialPageBounds,
        initialSelectionSnapPoints: snapshot.initialSnapPoints
      });
      this.handleChange();
    }
  };
  __publicField(Translating, "id", "translating");
  function getTranslatingSnapshot(app) {
    const movingShapes = [];
    const pagePoints = [];
    const shapeSnapshots = compact(
      app.selectedIds.map((id) => {
        const shape = app.getShapeById(id);
        if (!shape)
          return null;
        movingShapes.push(shape);
        const pagePoint = app.getPagePointById(id);
        if (!pagePoint)
          return null;
        pagePoints.push(pagePoint);
        const parentTransform = TLPage.isId(shape.parentId) ? null : Matrix2d.Inverse(app.getPageTransformById(shape.parentId));
        return {
          shape,
          pagePoint,
          parentTransform
        };
      })
    );
    return {
      averagePagePoint: Vec2d.Average(pagePoints),
      movingShapes,
      shapeSnapshots,
      initialPageBounds: app.selectedPageBounds,
      initialSnapPoints: app.selectedIds.length === 1 ? app.snaps.snapPointsCache.get(app.selectedIds[0]) : app.selectedPageBounds ? app.selectedPageBounds.snapPoints.map((p3, i3) => ({
        id: "selection:" + i3,
        x: p3.x,
        y: p3.y
      })) : []
    };
  }
  function moveShapesToPoint({
    app,
    shapeSnapshots: snapshots,
    averagePagePoint,
    initialSelectionPageBounds,
    initialSelectionSnapPoints
  }) {
    const { inputs, isGridMode, gridSize } = app;
    const delta = Vec2d.Sub(inputs.currentPagePoint, inputs.originPagePoint);
    const flatten = app.inputs.shiftKey ? Math.abs(delta.x) < Math.abs(delta.y) ? "x" : "y" : null;
    if (flatten === "x") {
      delta.x = 0;
    } else if (flatten === "y") {
      delta.y = 0;
    }
    app.snaps.clear();
    const shouldSnap = (app.userDocumentSettings.isSnapMode ? !inputs.ctrlKey : inputs.ctrlKey) && app.inputs.pointerVelocity.len() < 0.5;
    if (shouldSnap) {
      const { nudge } = app.snaps.snapTranslate({
        dragDelta: delta,
        initialSelectionPageBounds,
        lockedAxis: flatten,
        initialSelectionSnapPoints
      });
      delta.add(nudge);
    }
    const averageSnappedPoint = Vec2d.Add(averagePagePoint, delta);
    if (isGridMode && !inputs.ctrlKey) {
      averageSnappedPoint.snapToGrid(gridSize);
    }
    const averageSnap = Vec2d.Sub(averageSnappedPoint, averagePagePoint);
    app.updateShapes(
      compact(
        snapshots.map(({ shape, pagePoint, parentTransform }) => {
          const newPagePoint = Vec2d.Add(pagePoint, averageSnap);
          const newLocalPoint = parentTransform ? Matrix2d.applyToPoint(parentTransform, newPagePoint) : newPagePoint;
          return {
            id: shape.id,
            type: shape.type,
            x: newLocalPoint.x,
            y: newLocalPoint.y
          };
        })
      ),
      true
    );
  }

  // ../../../packages/editor/src/lib/app/statechart/TLSelectTool/TLSelectTool.ts
  var TLSelectTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "styles", ["color", "opacity", "dash", "fill", "size"]);
      __publicField(this, "onExit", () => {
        if (this.app.pageState.editingId) {
          this.app.setEditingId(null);
        }
      });
    }
  };
  __publicField(TLSelectTool, "id", "select");
  __publicField(TLSelectTool, "initial", "idle");
  __publicField(TLSelectTool, "children", () => [
    Crop,
    Cropping,
    Idle10,
    PointingCanvas,
    PointingShape,
    Translating,
    Brushing,
    ScribbleBrushing,
    PointingCropHandle,
    PointingSelection,
    PointingResizeHandle,
    EditingShape,
    Resizing,
    Rotating,
    PointingRotateHandle,
    PointingHandle,
    DraggingHandle
  ]);

  // ../../../packages/editor/src/lib/app/statechart/TLTextTool/children/Idle.ts
  var Idle11 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onPointerEnter", (info) => {
        switch (info.target) {
          case "canvas": {
            break;
          }
          case "shape": {
            const { selectedIds, focusLayerId } = this.app;
            const hoveringShape = this.app.getOutermostSelectableShape(
              info.shape,
              (parent) => !selectedIds.includes(parent.id)
            );
            if (hoveringShape.id !== focusLayerId) {
              if (hoveringShape.type === "text") {
                this.app.setHoveredId(hoveringShape.id);
              }
            }
            break;
          }
        }
      });
      __publicField(this, "onPointerLeave", (info) => {
        switch (info.target) {
          case "shape": {
            this.app.setHoveredId(null);
            break;
          }
        }
      });
      __publicField(this, "onPointerDown", (info) => {
        const { hoveredId } = this.app;
        if (hoveredId) {
          const shape = this.app.getShapeById(hoveredId);
          if (shape.type === "text") {
            requestAnimationFrame(() => {
              this.app.setSelectedIds([shape.id]);
              this.app.setEditingId(shape.id);
              this.app.setSelectedTool("select.editing_shape", __spreadProps(__spreadValues({}, info), {
                target: "shape",
                shape
              }));
            });
            return;
          }
        }
        this.parent.transition("pointing", info);
      });
      __publicField(this, "onEnter", () => {
        this.app.setCursor({ type: "cross" });
      });
      __publicField(this, "onKeyDown", (info) => {
        if (info.key === "Enter") {
          const shape = this.app.selectedShapes[0];
          if (shape && shape.type === "geo") {
            this.app.setSelectedTool("select");
            this.app.setEditingId(shape.id);
            this.app.root.current.value.transition("editing_shape", __spreadProps(__spreadValues({}, info), {
              target: "shape",
              shape
            }));
          }
        }
      });
      __publicField(this, "onCancel", () => {
        this.app.setSelectedTool("select");
      });
    }
  };
  __publicField(Idle11, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLTextTool/children/Pointing.ts
  var Pointing8 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "shape");
      __publicField(this, "onExit", () => {
        this.app.setHintingIds([]);
      });
      __publicField(this, "onPointerMove", (info) => {
        if (this.app.inputs.isDragging) {
          const {
            inputs: { originPagePoint }
          } = this.app;
          const id = createShapeId();
          this.app.mark("creating");
          this.app.createShapes([
            {
              id,
              type: "text",
              x: originPagePoint.x,
              y: originPagePoint.y,
              props: {
                text: "",
                autoSize: false,
                w: 20
              }
            }
          ]);
          this.app.select(id);
          this.shape = this.app.getShapeById(id);
          if (!this.shape)
            return;
          this.app.setSelectedTool("select.resizing", __spreadProps(__spreadValues({}, info), {
            target: "selection",
            handle: "right",
            isCreating: true,
            creationCursorOffset: { x: 1, y: 1 },
            editAfterComplete: true,
            onInteractionEnd: "text"
          }));
        }
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onComplete", () => {
        this.cancel();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
      __publicField(this, "onInterrupt", () => {
        this.cancel();
      });
    }
    complete() {
      var _a5;
      this.app.mark("creating text shape");
      const id = createShapeId();
      const { x: x3, y: y3 } = this.app.inputs.currentPagePoint;
      this.app.createShapes(
        [
          {
            id,
            type: "text",
            x: x3,
            y: y3,
            props: {
              text: "",
              autoSize: true
            }
          }
        ],
        true
      );
      this.app.setEditingId(id);
      this.app.setSelectedTool("select");
      (_a5 = this.app.root.current.value) == null ? void 0 : _a5.transition("editing_shape", {});
    }
    cancel() {
      this.parent.transition("idle", {});
      this.app.bailToMark("creating");
    }
  };
  __publicField(Pointing8, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLTextTool/TLTextTool.ts
  var TLTextTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "styles", ["color", "opacity", "font", "align", "size"]);
    }
  };
  __publicField(TLTextTool, "id", "text");
  __publicField(TLTextTool, "initial", "idle");
  __publicField(TLTextTool, "children", () => [Idle11, Pointing8]);

  // ../../../packages/editor/src/lib/app/statechart/TLZoomTool/children/Idle.ts
  var Idle12 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
      });
      __publicField(this, "onPointerDown", () => {
        this.parent.transition("pointing", this.info);
      });
    }
  };
  __publicField(Idle12, "id", "idle");

  // ../../../packages/editor/src/lib/app/statechart/TLZoomTool/children/Pointing.ts
  var Pointing9 = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onPointerMove", () => {
        if (this.app.inputs.isDragging) {
          this.parent.transition("zoom_brushing", this.info);
        }
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
    }
    complete() {
      const { currentScreenPoint } = this.app.inputs;
      if (this.app.inputs.altKey) {
        this.app.zoomOut(currentScreenPoint, { duration: 220 });
      } else {
        this.app.zoomIn(currentScreenPoint, { duration: 220 });
      }
      this.parent.transition("idle", this.info);
    }
    cancel() {
      this.parent.transition("idle", this.info);
    }
  };
  __publicField(Pointing9, "id", "pointing");

  // ../../../packages/editor/src/lib/app/statechart/TLZoomTool/children/ZoomBrushing.ts
  var ZoomBrushing = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "zoomBrush", new Box2d());
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        this.update();
      });
      __publicField(this, "onExit", () => {
        this.app.setZoomBrush(null);
      });
      __publicField(this, "onPointerMove", () => {
        this.update();
      });
      __publicField(this, "onPointerUp", () => {
        this.complete();
      });
      __publicField(this, "onCancel", () => {
        this.cancel();
      });
    }
    update() {
      const {
        inputs: { originPagePoint, currentPagePoint }
      } = this.app;
      this.zoomBrush.setTo(Box2d.FromPoints([originPagePoint, currentPagePoint]));
      this.app.setZoomBrush(this.zoomBrush.toJson());
    }
    cancel() {
      this.parent.transition("idle", this.info);
    }
    complete() {
      const { zoomBrush } = this;
      const threshold = 8 / this.app.zoomLevel;
      if (zoomBrush.width < threshold && zoomBrush.height < threshold) {
        const point2 = this.app.inputs.currentScreenPoint;
        if (this.app.inputs.altKey) {
          this.app.zoomOut(point2, { duration: 220 });
        } else {
          this.app.zoomIn(point2, { duration: 220 });
        }
      } else {
        const zoomLevel = this.app.inputs.altKey ? this.app.zoomLevel / 2 : void 0;
        this.app.zoomToBounds(
          zoomBrush.x,
          zoomBrush.y,
          zoomBrush.width,
          zoomBrush.height,
          zoomLevel,
          { duration: 220 }
        );
      }
      this.parent.transition("idle", this.info);
    }
  };
  __publicField(ZoomBrushing, "id", "zoom_brushing");

  // ../../../packages/editor/src/lib/app/statechart/TLZoomTool/TLZoomTool.ts
  var TLZoomTool = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "info", {});
      __publicField(this, "onEnter", (info) => {
        this.info = info;
        this.updateCursor();
      });
      __publicField(this, "onExit", () => {
        this.app.setZoomBrush(null);
        this.app.setCursor({ type: "default" });
      });
      __publicField(this, "onKeyDown", () => {
        this.updateCursor();
      });
      __publicField(this, "onKeyUp", (info) => {
        this.updateCursor();
        if (info.code === "KeyZ") {
          this.complete();
        }
      });
      __publicField(this, "onInterrupt", () => {
        this.complete();
      });
    }
    updateCursor() {
      if (this.app.inputs.altKey) {
        this.app.setCursor({ type: "zoom-out" });
      } else {
        this.app.setCursor({ type: "zoom-in" });
      }
    }
    complete() {
      if (this.info.onInteractionEnd && this.info.onInteractionEnd !== "select") {
        this.app.setSelectedTool(this.info.onInteractionEnd, this.info);
      } else {
        this.parent.transition("select", {});
      }
    }
  };
  __publicField(TLZoomTool, "id", "zoom");
  __publicField(TLZoomTool, "initial", "idle");
  __publicField(TLZoomTool, "children", () => [Idle12, ZoomBrushing, Pointing9]);

  // ../../../packages/editor/src/lib/app/statechart/RootState.ts
  var RootState = class extends StateNode {
    constructor() {
      super(...arguments);
      __publicField(this, "onKeyDown", (info) => {
        var _a5;
        switch (info.code) {
          case "KeyZ": {
            if (!(info.shiftKey || info.ctrlKey)) {
              const currentTool = this.current.value;
              if (currentTool && ((_a5 = currentTool.current.value) == null ? void 0 : _a5.id) === "idle") {
                this.app.setSelectedTool("zoom", __spreadProps(__spreadValues({}, info), { onInteractionEnd: currentTool.id }));
              }
            }
            break;
          }
        }
      });
    }
  };
  __publicField(RootState, "id", "root");
  __publicField(RootState, "initial", "select");
  __publicField(RootState, "children", () => [
    TLSelectTool,
    TLHandTool,
    TLEraserTool,
    TLDrawTool,
    TLTextTool,
    TLLineTool,
    TLArrowTool,
    TLGeoTool,
    TLNoteTool,
    TLFrameTool,
    TLZoomTool
  ]);

  // ../../../packages/editor/src/lib/app/App.ts
  function isShapeWithHandles(shape) {
    return shape.type === "arrow" || shape.type === "line" || shape.type === "draw";
  }
  var _App = class extends import_eventemitter3.EventEmitter {
    constructor({ config = TldrawEditorConfig.default, store, getContainer }) {
      super();
      /**
       * The editor's store
       *
       * @public
       */
      __publicField(this, "store");
      /**
       * The editor's config
       *
       * @public
       */
      __publicField(this, "config");
      /**
       * The root state of the statechart.
       *
       * @public
       */
      __publicField(this, "root");
      /**
       * A cache of shape ids in the current page.
       *
       * @internal
       */
      __publicField(this, "_shapeIds");
      /**
       * A set of functions to call when the app is disposed.
       *
       * @public
       */
      __publicField(this, "disposables", /* @__PURE__ */ new Set());
      /** @internal */
      __publicField(this, "_dprManager", new DprManager(this));
      /** @internal */
      __publicField(this, "_cameraManager", new CameraManager(this));
      /** @internal */
      __publicField(this, "_activeAreaManager", new ActiveAreaManager(this));
      /** @internal */
      __publicField(this, "_tickManager", new TickManager(this));
      /** @internal */
      __publicField(this, "_updateDepth", 0);
      /**
       * A manager for the app's snapping feature.
       *
       * @public
       */
      __publicField(this, "snaps", new SnapManager(this));
      /**
       * Whether the editor is running in Safari.
       *
       * @public
       */
      __publicField(this, "isSafari");
      /**
       * Whether the editor is running on iOS.
       *
       * @public
       */
      __publicField(this, "isIos");
      /**
       * Whether the editor is running on iOS.
       *
       * @public
       */
      __publicField(this, "isChromeForIos");
      // Flags
      __publicField(this, "_canMoveCamera", atom("can move camera", true));
      __publicField(this, "_isFocused", atom("_isFocused", false));
      /**
       * The current HTML element containing the editor.
       *
       * @example
       *
       * ```ts
       * const container = app.getContainer()
       * ```
       *
       * @public
       */
      __publicField(this, "getContainer");
      /** @internal */
      __publicField(this, "_crashingError", null);
      __publicField(this, "_openMenus", atom("open-menus", []));
      /**
       * Add an open menu.
       *
       * ```ts
       * app.addOpenMenu('menu-id')
       * ```
       * @public
       */
      __publicField(this, "addOpenMenu", (id) => {
        const menus = new Set(this.openMenus);
        if (!menus.has(id)) {
          menus.add(id);
          this._openMenus.set([...menus]);
        }
        return this;
      });
      /**
       * Delete an open menu.
       *
       * ```ts
       * app.deleteOpenMenu('menu-id')
       * ```
       * @public
       */
      __publicField(this, "deleteOpenMenu", (id) => {
        const menus = new Set(this.openMenus);
        if (menus.has(id)) {
          menus.delete(id);
          this._openMenus.set([...menus]);
        }
        return this;
      });
      /** @internal */
      __publicField(this, "_isCoarsePointer", atom("isCoarsePointer", false));
      /** @internal */
      __publicField(this, "_isChangingStyle", atom("isChangingStyle", false));
      /** @internal */
      __publicField(this, "_isChangingStyleTimeout", -1);
      /**
       * A cache of parents to children.
       *
       * @internal
       */
      __publicField(this, "_parentIdsToChildIds");
      /**
       * A manager for the app's history.
       *
       * @readonly
       */
      __publicField(this, "history", new HistoryManager(
        this,
        () => this._complete(),
        (error) => {
          this.annotateError(error, { origin: "history.batch", willCrashApp: true });
          this.crash(error);
        }
      ));
      /**
       * A map of shape utility classes (TLShapeUtils) by shape type.
       *
       * @public
       */
      __publicField(this, "shapeUtils");
      /**
       * A cache of children for each parent.
       *
       * @internal
       */
      __publicField(this, "_childIdsCache", new WeakMapCache());
      /**
       * A derived object containing all current props among the user's selected shapes.
       *
       * @internal
       */
      __publicField(this, "_selectionSharedProps", computed("_selectionSharedProps", () => {
        const { selectedShapes } = this;
        const sharedProps = {};
        for (let i3 = 0, n3 = selectedShapes.length; i3 < n3; i3++) {
          this._extractSharedProps(selectedShapes[i3], sharedProps);
        }
        return sharedProps;
      }));
      /** @internal */
      __publicField(this, "_prevProps", {});
      /**
       * _invalidParents is used to trigger the 'onChildrenChange' callback that shapes can have.
       *
       * @internal
       */
      __publicField(this, "_invalidParents", /* @__PURE__ */ new Set());
      __publicField(this, "_isReadOnly", atom("isReadOnly", false));
      /** @internal */
      __publicField(this, "_isPenMode", atom("isPenMode", false));
      /** @internal */
      __publicField(this, "_touchEventsRemainingBeforeExitingPenMode", 0);
      /** @internal */
      __publicField(this, "_cullingBounds", atom("culling viewport", new Box2d()));
      /** @internal */
      __publicField(this, "_cullingBoundsExpanded", atom("culling viewport expanded", new Box2d()));
      /** @internal */
      __publicField(this, "_setFocusLayer", this.history.createCommand(
        "setFocusLayer",
        (next) => {
          if (next === null && !this.canUndo) {
            return;
          }
          const prev = this.pageState.focusLayerId;
          return { data: { prev, next }, preservesRedoStack: true, squashing: true };
        },
        {
          do: ({ next }) => {
            this.store.update(this.pageState.id, (s3) => __spreadProps(__spreadValues({}, s3), { focusLayerId: next }));
          },
          undo: ({ prev }) => {
            this.store.update(this.pageState.id, (s3) => __spreadProps(__spreadValues({}, s3), { focusLayerId: prev }));
          },
          squash({ prev }, { next }) {
            return { prev, next };
          }
        }
      ));
      /* --------------------- Styles --------------------- */
      /**
       * A mapping of color ids to CSS color values.
       *
       * @internal
       */
      __publicField(this, "colors");
      /**
       * A mapping of size ids to size values.
       *
       * @internal
       */
      __publicField(this, "sizes", {
        s: 2,
        m: 3.5,
        l: 5,
        xl: 10
      });
      /* --------------------- Inputs --------------------- */
      /**
       * The app's current input state.
       *
       * @public
       */
      __publicField(this, "inputs", {
        /** The most recent pointer down's position in page space. */
        originPagePoint: new Vec2d(),
        /** The most recent pointer down's position in screen space. */
        originScreenPoint: new Vec2d(),
        /** The previous pointer position in page space. */
        previousPagePoint: new Vec2d(),
        /** The previous pointer position in screen space. */
        previousScreenPoint: new Vec2d(),
        /** The most recent pointer position in page space. */
        currentPagePoint: new Vec2d(),
        /** The most recent pointer position in screen space. */
        currentScreenPoint: new Vec2d(),
        /** A set containing the currently pressed keys. */
        keys: /* @__PURE__ */ new Set(),
        /** A set containing the currently pressed buttons. */
        buttons: /* @__PURE__ */ new Set(),
        /** Whether the input is from a pe. */
        isPen: false,
        /** Whether the shift key is currently pressed. */
        shiftKey: false,
        /** Whether the control or command key is currently pressed. */
        ctrlKey: false,
        /** Whether the alt or option key is currently pressed. */
        altKey: false,
        /** Whether the user is dragging. */
        isDragging: false,
        /** Whether the user is pointing. */
        isPointing: false,
        /** Whether the user is pinching. */
        isPinching: false,
        /** Whether the user is editing. */
        isEditing: false,
        /** Whether the user is panning. */
        isPanning: false,
        /** Veclocity of mouse pointer, in pixels per millisecond */
        pointerVelocity: new Vec2d()
      });
      /* --------------------- Events --------------------- */
      /**
       * A manager for recording multiple click events.
       *
       * @internal
       */
      __publicField(this, "_clickManager", new ClickManager(this));
      /**
       * The previous cursor. Used for restoring the cursor after pan events.
       *
       * @internal
       */
      __publicField(this, "_prevCursor", "default");
      /** @internal */
      __publicField(this, "_shiftKeyTimeout", -1);
      /** @internal */
      __publicField(this, "_setShiftKeyTimeout", () => {
        this.inputs.shiftKey = false;
        this.dispatch({
          type: "keyboard",
          name: "key_up",
          key: "Shift",
          shiftKey: this.inputs.shiftKey,
          ctrlKey: this.inputs.ctrlKey,
          altKey: this.inputs.altKey,
          code: "ShiftLeft"
        });
      });
      /** @internal */
      __publicField(this, "_altKeyTimeout", -1);
      /** @internal */
      __publicField(this, "_setAltKeyTimeout", () => {
        this.inputs.altKey = false;
        this.dispatch({
          type: "keyboard",
          name: "key_up",
          key: "Alt",
          shiftKey: this.inputs.shiftKey,
          ctrlKey: this.inputs.ctrlKey,
          altKey: this.inputs.altKey,
          code: "AltLeft"
        });
      });
      /** @internal */
      __publicField(this, "_ctrlKeyTimeout", -1);
      /** @internal */
      __publicField(this, "_setCtrlKeyTimeout", () => {
        this.inputs.ctrlKey = false;
        this.dispatch({
          type: "keyboard",
          name: "key_up",
          key: "Ctrl",
          shiftKey: this.inputs.shiftKey,
          ctrlKey: this.inputs.ctrlKey,
          altKey: this.inputs.altKey,
          code: "CtrlLeft"
        });
      });
      /** @internal */
      __publicField(this, "_restoreToolId", "select");
      /** @internal */
      __publicField(this, "_pinchStart", 1);
      /** @internal */
      __publicField(this, "_didPinch", false);
      /** @internal */
      __publicField(this, "_selectedIdsAtPointerDown", []);
      /**
       * Dispatch an event to the app.
       *
       * @example
       *
       * ```ts
       * app.dispatch(myPointerEvent)
       * ```
       *
       * @param info - The event info.
       * @public
       */
      __publicField(this, "dispatch", (info) => {
        if (this.crashingError)
          return this;
        const { inputs } = this;
        const { type } = info;
        this.batch(() => {
          var _a5;
          if (info.type === "misc") {
            if (info.name === "cancel" || info.name === "complete") {
              this.inputs.isDragging = false;
              if (this.inputs.isPanning) {
                this.inputs.isPanning = false;
                this.setCursor({
                  type: this._prevCursor
                });
              }
            }
            this.root.handleEvent(info);
            return;
          }
          if (info.shiftKey) {
            clearInterval(this._shiftKeyTimeout);
            this._shiftKeyTimeout = -1;
            inputs.shiftKey = true;
          } else if (!info.shiftKey && inputs.shiftKey && this._shiftKeyTimeout === -1) {
            this._shiftKeyTimeout = setTimeout(this._setShiftKeyTimeout, 150);
          }
          if (info.altKey) {
            clearInterval(this._altKeyTimeout);
            this._altKeyTimeout = -1;
            inputs.altKey = true;
          } else if (!info.altKey && inputs.altKey && this._altKeyTimeout === -1) {
            this._altKeyTimeout = setTimeout(this._setAltKeyTimeout, 150);
          }
          if (info.ctrlKey) {
            clearInterval(this._ctrlKeyTimeout);
            this._ctrlKeyTimeout = -1;
            inputs.ctrlKey = true;
          } else if (!info.ctrlKey && inputs.ctrlKey && this._ctrlKeyTimeout === -1) {
            this._ctrlKeyTimeout = setTimeout(this._setCtrlKeyTimeout, 150);
          }
          const { originPagePoint, originScreenPoint, currentPagePoint, currentScreenPoint } = inputs;
          if (!inputs.isPointing) {
            inputs.isDragging = false;
          }
          switch (type) {
            case "pinch": {
              if (!this.canMoveCamera)
                return;
              this._updateInputsFromEvent(info);
              switch (info.name) {
                case "pinch_start": {
                  if (inputs.isPinching)
                    return;
                  if (!inputs.isEditing) {
                    this._pinchStart = this.camera.z;
                    if (!this._selectedIdsAtPointerDown.length) {
                      this._selectedIdsAtPointerDown = this.selectedIds.slice();
                    }
                    this._didPinch = true;
                    inputs.isPinching = true;
                    this.interrupt();
                  }
                  return;
                }
                case "pinch": {
                  if (!inputs.isPinching)
                    return;
                  const {
                    point: { x: x3, y: y3, z: z2 = 1 },
                    delta: { x: dx, y: dy }
                  } = info;
                  const {
                    camera: { x: cx, y: cy, z: cz }
                  } = this;
                  const zoom = Math.min(MAX_ZOOM, Math.max(MIN_ZOOM, z2));
                  this.setCamera(
                    cx + dx / cz - x3 / cz + x3 / zoom,
                    cy + dy / cz - y3 / cz + y3 / zoom,
                    zoom
                  );
                  return;
                }
                case "pinch_end": {
                  if (!inputs.isPinching)
                    return this;
                  inputs.isPinching = false;
                  const { _selectedIdsAtPointerDown } = this;
                  this.setSelectedIds(this._selectedIdsAtPointerDown, true);
                  this._selectedIdsAtPointerDown = [];
                  const {
                    camera: { x: cx, y: cy, z: cz }
                  } = this;
                  let zoom;
                  if (cz > 0.9 && cz < 1.05) {
                    zoom = 1;
                  } else if (cz > 0.49 && cz < 0.505) {
                    zoom = 0.5;
                  }
                  if (cz > this._pinchStart - 0.1 && cz < this._pinchStart + 0.05) {
                    zoom = this._pinchStart;
                  }
                  if (zoom !== void 0) {
                    const { x: x3, y: y3 } = this.viewportScreenCenter;
                    this.animateCamera(
                      cx + (x3 / zoom - x3) - (x3 / cz - x3),
                      cy + (y3 / zoom - y3) - (y3 / cz - y3),
                      zoom,
                      { duration: 100 }
                    );
                  }
                  if (this._didPinch) {
                    this._didPinch = false;
                    requestAnimationFrame(() => {
                      if (!this._didPinch) {
                        this.setSelectedIds(_selectedIdsAtPointerDown, true);
                      }
                    });
                  }
                  return;
                }
              }
            }
            case "wheel": {
              if (!this.canMoveCamera)
                return;
              if (this.isMenuOpen) {
              } else {
                if (inputs.ctrlKey) {
                  const { x: x3, y: y3 } = this.inputs.currentScreenPoint;
                  const { x: cx, y: cy, z: cz } = this.camera;
                  const zoom = Math.min(MAX_ZOOM, Math.max(MIN_ZOOM, cz + ((_a5 = info.delta.z) != null ? _a5 : 0) * cz));
                  this.setCamera(
                    cx + (x3 / zoom - x3) - (x3 / cz - x3),
                    cy + (y3 / zoom - y3) - (y3 / cz - y3),
                    zoom
                  );
                  return;
                }
                this.pan(info.delta.x, info.delta.y);
                if (!inputs.isDragging && inputs.isPointing && originPagePoint.dist(currentPagePoint) > (this.isCoarsePointer ? COARSE_DRAG_DISTANCE : DRAG_DISTANCE) / this.zoomLevel) {
                  inputs.isDragging = true;
                }
              }
              break;
            }
            case "pointer": {
              if (inputs.isPinching)
                return;
              this._updateInputsFromEvent(info);
              const { isPen } = info;
              switch (info.name) {
                case "pointer_down": {
                  this._selectedIdsAtPointerDown = this.selectedIds.slice();
                  inputs.buttons.add(info.button);
                  inputs.isPointing = true;
                  inputs.isDragging = false;
                  if (this.isPenMode) {
                    if (!isPen) {
                      this._touchEventsRemainingBeforeExitingPenMode--;
                      if (this._touchEventsRemainingBeforeExitingPenMode === 0) {
                        this.setPenMode(false);
                      } else {
                        return;
                      }
                    } else {
                      this._touchEventsRemainingBeforeExitingPenMode = 3;
                    }
                  } else {
                    if (isPen) {
                      this.setPenMode(true);
                    }
                  }
                  if (info.button === 5) {
                    this._restoreToolId = this.currentToolId;
                    this.complete();
                    this.setSelectedTool("eraser");
                  } else if (info.button === 1) {
                    if (!this.inputs.isPanning) {
                      this._prevCursor = this.instanceState.cursor.type;
                    }
                    this.inputs.isPanning = true;
                  }
                  if (this.inputs.isPanning) {
                    this.stopCameraAnimation();
                    this.setCursor({
                      type: "grabbing"
                    });
                    return this;
                  }
                  originScreenPoint.setTo(currentScreenPoint);
                  originPagePoint.setTo(currentPagePoint);
                  break;
                }
                case "pointer_move": {
                  if (!isPen && this.isPenMode) {
                    return;
                  }
                  if (this.inputs.isPanning && this.inputs.isPointing) {
                    const { currentScreenPoint: currentScreenPoint2, previousScreenPoint } = this.inputs;
                    const delta = Vec2d.Sub(currentScreenPoint2, previousScreenPoint);
                    this.pan(delta.x, delta.y);
                    return;
                  }
                  if (!inputs.isDragging && inputs.isPointing && originPagePoint.dist(currentPagePoint) > (this.isCoarsePointer ? COARSE_DRAG_DISTANCE : DRAG_DISTANCE) / this.zoomLevel) {
                    inputs.isDragging = true;
                  }
                  break;
                }
                case "pointer_up": {
                  inputs.buttons.delete(info.button);
                  inputs.isPointing = false;
                  inputs.isDragging = false;
                  if (this.isMenuOpen) {
                    return;
                  }
                  if (!isPen && this.isPenMode) {
                    return;
                  }
                  if (inputs.isPanning) {
                    if (info.button === 1) {
                      if (!this.inputs.keys.has(" ")) {
                        inputs.isPanning = false;
                        this.slideCamera({
                          speed: Math.min(2, this.inputs.pointerVelocity.len()),
                          direction: this.inputs.pointerVelocity,
                          friction: HAND_TOOL_FRICTION
                        });
                        this.setCursor({
                          type: this._prevCursor
                        });
                      } else {
                        this.slideCamera({
                          speed: Math.min(2, this.inputs.pointerVelocity.len()),
                          direction: this.inputs.pointerVelocity,
                          friction: HAND_TOOL_FRICTION
                        });
                        this.setCursor({
                          type: "grab"
                        });
                      }
                    } else if (info.button === 0) {
                      this.slideCamera({
                        speed: Math.min(2, this.inputs.pointerVelocity.len()),
                        direction: this.inputs.pointerVelocity,
                        friction: HAND_TOOL_FRICTION
                      });
                      this.setCursor({
                        type: "grab"
                      });
                    }
                  } else {
                    if (info.button === 5) {
                      this.complete();
                      this.setSelectedTool(this._restoreToolId);
                    }
                  }
                  break;
                }
              }
              break;
            }
            case "keyboard": {
              switch (info.name) {
                case "key_down": {
                  inputs.keys.add(info.code);
                  if (!info.ctrlKey && info.code === "Space") {
                    if (!this.inputs.isPanning) {
                      this._prevCursor = this.instanceState.cursor.type;
                    }
                    this.inputs.isPanning = true;
                    this.setCursor({
                      type: this.inputs.isPointing ? "grabbing" : "grab"
                    });
                  }
                  break;
                }
                case "key_up": {
                  inputs.keys.delete(info.code);
                  if (info.code === "Space" && !this.inputs.buttons.has(1)) {
                    this.inputs.isPanning = false;
                    this.setCursor({
                      type: this._prevCursor
                    });
                  }
                  break;
                }
                case "key_repeat": {
                  break;
                }
              }
              break;
            }
          }
          if (info.type === "pointer") {
            if (info.button === 1) {
              info.name = "middle_click";
            } else if (info.button === 2) {
              info.name = "right_click";
            }
            if (info.isPen === this.isPenMode) {
              switch (info.name) {
                case "pointer_down": {
                  const otherEvent = this._clickManager.transformPointerDownEvent(info);
                  if (info.name !== otherEvent.name) {
                    this.root.handleEvent(info);
                    this.emit("event", info);
                    this.root.handleEvent(otherEvent);
                    this.emit("event", otherEvent);
                    return;
                  }
                  break;
                }
                case "pointer_up": {
                  const otherEvent = this._clickManager.transformPointerUpEvent(info);
                  if (info.name !== otherEvent.name) {
                    this.root.handleEvent(info);
                    this.emit("event", info);
                    this.root.handleEvent(otherEvent);
                    this.emit("event", otherEvent);
                    return;
                  }
                  break;
                }
                case "pointer_move": {
                  this._clickManager.handleMove();
                  break;
                }
              }
            }
          }
          this.root.handleEvent(info);
          this.emit("event", info);
        });
        return this;
      });
      /** @internal */
      __publicField(this, "_createShapes", this.history.createCommand(
        "createShapes",
        (partials, select = false) => {
          if (this.isReadOnly)
            return null;
          if (partials.length <= 0)
            return null;
          const { shapeIds, selectedIds } = this;
          const prevSelectedIds = select ? selectedIds : void 0;
          const maxShapesReached = partials.length + shapeIds.size > MAX_SHAPES_PER_PAGE;
          if (maxShapesReached) {
            alertMaxShapes(this);
          }
          const partialsToCreate = maxShapesReached ? partials.slice(0, MAX_SHAPES_PER_PAGE - shapeIds.size) : partials;
          if (partialsToCreate.length === 0)
            return null;
          return {
            data: {
              currentPageId: this.currentPageId,
              createdIds: partials.map((p3) => p3.id),
              prevSelectedIds,
              partials: partialsToCreate,
              select
            }
          };
        },
        {
          do: ({ createdIds, partials, select }) => {
            var _a5, _b2, _c, _d;
            const { focusLayerId } = this;
            partials = partials.map((partial) => {
              var _a6, _b3, _c2, _d2, _e;
              if (
                // No parentId provided
                !partial.parentId || // A parentId is proved but the parent is neither a) in the store
                // or b) among the other creating shape partials
                !this.store.get(partial.parentId) && !partials.find((p3) => p3.id === partial.parentId)
              ) {
                partial = __spreadValues({}, partial);
                const parentId = this.getParentIdForNewShapeAtPoint(
                  { x: (_a6 = partial.x) != null ? _a6 : 0, y: (_b3 = partial.y) != null ? _b3 : 0 },
                  partial.type
                );
                partial.parentId = parentId;
                if (isShapeId(parentId)) {
                  const point2 = this.getPointInShapeSpace(this.getShapeById(parentId), {
                    x: (_c2 = partial.x) != null ? _c2 : 0,
                    y: (_d2 = partial.y) != null ? _d2 : 0
                  });
                  partial.x = point2.x;
                  partial.y = point2.y;
                  partial.rotation = -this.getPageRotationById(parentId) + ((_e = partial.rotation) != null ? _e : 0);
                }
                return partial;
              }
              return partial;
            });
            const parentIndices = /* @__PURE__ */ new Map();
            const shapeRecordsToCreate = [];
            for (const partial of partials) {
              const util = this.getShapeUtil(partial);
              let index2 = partial.index;
              if (!index2) {
                const parentId = (_a5 = partial.parentId) != null ? _a5 : focusLayerId;
                if (!parentIndices.has(parentId)) {
                  parentIndices.set(parentId, this.getHighestIndexForParent(parentId));
                }
                index2 = parentIndices.get(parentId);
                parentIndices.set(parentId, getIndexAbove(index2));
              }
              const initialProps = util.defaultProps();
              const { propsForNextShape } = this.instanceState;
              for (const key in initialProps) {
                if (key in propsForNextShape) {
                  if (key === "url")
                    continue;
                  initialProps[key] = propsForNextShape[key];
                }
              }
              let shapeRecordToCreate = this.config.TLShape.create(__spreadProps(__spreadValues({}, partial), {
                index: index2,
                parentId: (_b2 = partial.parentId) != null ? _b2 : focusLayerId,
                props: "props" in partial ? __spreadValues(__spreadValues({}, initialProps), partial.props) : initialProps
              }));
              if (shapeRecordToCreate.index === void 0) {
                throw Error("no index!");
              }
              const next = (_d = (_c = this.getShapeUtil(shapeRecordToCreate)).onBeforeCreate) == null ? void 0 : _d.call(_c, shapeRecordToCreate);
              if (next) {
                shapeRecordToCreate = next;
              }
              shapeRecordsToCreate.push(shapeRecordToCreate);
            }
            this.store.put(shapeRecordsToCreate);
            if (select) {
              this.store.update(this.pageState.id, (state) => __spreadProps(__spreadValues({}, state), {
                selectedIds: createdIds
              }));
            }
          },
          undo: ({ createdIds, prevSelectedIds }) => {
            this.store.remove(createdIds);
            if (prevSelectedIds) {
              this.store.update(this.pageState.id, (state) => __spreadProps(__spreadValues({}, state), {
                selectedIds: prevSelectedIds
              }));
            }
          }
        }
      ));
      __publicField(this, "animatingShapes", /* @__PURE__ */ new Map());
      /** @internal */
      __publicField(this, "_updateShapes", this.history.createCommand(
        "updateShapes",
        (_partials, squashing = false) => {
          if (this.isReadOnly)
            return null;
          const partials = compact(_partials);
          const snapshots = Object.fromEntries(
            compact(partials.map(({ id }) => this.getShapeById(id))).map((shape) => {
              return [shape.id, shape];
            })
          );
          if (partials.length <= 0)
            return null;
          const updated = compact(
            partials.map((partial) => {
              const prev = snapshots[partial.id];
              if (!prev)
                return null;
              let newRecord = null;
              for (const [k2, v3] of Object.entries(partial)) {
                switch (k2) {
                  case "id":
                  case "type":
                  case "typeName": {
                    continue;
                  }
                  default: {
                    if (v3 !== prev[k2]) {
                      if (!newRecord) {
                        newRecord = __spreadValues({}, prev);
                      }
                      if (k2 === "props") {
                        newRecord.props = __spreadValues(__spreadValues({}, prev.props), v3);
                      } else {
                        ;
                        newRecord[k2] = v3;
                      }
                    }
                  }
                }
              }
              return newRecord != null ? newRecord : prev;
            })
          );
          const updates = Object.fromEntries(updated.map((shape) => [shape.id, shape]));
          return { data: { snapshots, updates }, squashing };
        },
        {
          do: ({ updates }) => {
            var _a5, _b2;
            const result = Object.values(updates);
            for (let i3 = 0; i3 < result.length; i3++) {
              const shape = result[i3];
              const current = this.store.get(shape.id);
              if (!current)
                continue;
              const next = (_b2 = (_a5 = this.getShapeUtil(shape)).onBeforeUpdate) == null ? void 0 : _b2.call(_a5, current, shape);
              if (next) {
                result[i3] = next;
              }
            }
            this.store.put(result);
          },
          undo: ({ snapshots }) => {
            this.store.put(Object.values(snapshots));
          },
          squash(prevData, nextData) {
            return {
              // keep the oldest snapshots
              snapshots: __spreadValues(__spreadValues({}, nextData.snapshots), prevData.snapshots),
              // keep the newest updates
              updates: __spreadValues(__spreadValues({}, prevData.updates), nextData.updates)
            };
          }
        }
      ));
      /** @internal */
      __publicField(this, "_deleteShapes", this.history.createCommand(
        "delete_shapes",
        (ids) => {
          if (this.isReadOnly)
            return null;
          if (ids.length === 0)
            return null;
          const prevSelectedIds = [...this.pageState.selectedIds];
          const allIds = new Set(ids);
          for (const id of ids) {
            this.visitDescendants(id, (childId) => {
              allIds.add(childId);
            });
          }
          const deletedIds = [...allIds];
          const arrowBindings = this._arrowBindingsIndex.value;
          const snapshots = compact(
            deletedIds.flatMap((id) => {
              const shape = this.getShapeById(id);
              const bindings = arrowBindings[id];
              if (bindings && bindings.length > 0) {
                return bindings.map(({ arrowId }) => this.getShapeById(arrowId)).concat(shape);
              }
              return shape;
            })
          );
          const postSelectedIds = prevSelectedIds.filter((id) => !allIds.has(id));
          return { data: { deletedIds, snapshots, prevSelectedIds, postSelectedIds } };
        },
        {
          do: ({ deletedIds, postSelectedIds }) => {
            this.store.remove(deletedIds);
            this.store.update(this.pageState.id, (state) => __spreadProps(__spreadValues({}, state), {
              selectedIds: postSelectedIds
            }));
          },
          undo: ({ snapshots, prevSelectedIds }) => {
            this.store.put(snapshots);
            this.store.update(this.pageState.id, (state) => __spreadProps(__spreadValues({}, state), {
              selectedIds: prevSelectedIds
            }));
          }
        }
      ));
      /** @internal */
      __publicField(this, "_updateUserDocumentSettings", this.history.createCommand(
        "updateUserDocumentSettings",
        (partial, ephemeral = false) => {
          const prev = this.userDocumentSettings;
          const next = __spreadValues(__spreadValues({}, prev), partial);
          return { data: { prev, next }, ephemeral };
        },
        {
          do: ({ next }) => {
            this.store.put([next]);
          },
          undo: ({ prev }) => {
            this.store.put([prev]);
          }
        }
      ));
      /** @internal */
      __publicField(this, "_updatePage", this.history.createCommand(
        "updatePage",
        (partial, squashing = false) => {
          if (this.isReadOnly)
            return null;
          const prev = this.getPageById(partial.id);
          if (!prev)
            return null;
          return { data: { prev, partial }, squashing };
        },
        {
          do: ({ partial }) => {
            this.store.update(partial.id, (page) => __spreadValues(__spreadValues({}, page), partial));
          },
          undo: ({ prev, partial }) => {
            this.store.update(partial.id, () => prev);
          },
          squash(prevData, nextData) {
            return {
              prev: __spreadValues(__spreadValues({}, prevData.prev), nextData.prev),
              partial: nextData.partial
            };
          }
        }
      ));
      /** @internal */
      __publicField(this, "_createPage", this.history.createCommand(
        "createPage",
        (title, id = TLPage.createId(), belowPageIndex) => {
          var _a5, _b2, _c;
          if (this.isReadOnly)
            return null;
          if (this.pages.length >= MAX_PAGES)
            return null;
          const pageInfo = this.pages;
          const topIndex = (_b2 = belowPageIndex != null ? belowPageIndex : (_a5 = pageInfo[pageInfo.length - 1]) == null ? void 0 : _a5.index) != null ? _b2 : "a1";
          const bottomIndex = (_c = pageInfo[pageInfo.findIndex((p3) => p3.index === topIndex) + 1]) == null ? void 0 : _c.index;
          const prevPageState = __spreadValues({}, this.pageState);
          const prevInstanceState = __spreadValues({}, this.instanceState);
          title = getIncrementedName(
            title,
            pageInfo.map((p3) => p3.name)
          );
          const newPage = TLPage.create({
            id,
            name: title,
            index: bottomIndex && topIndex !== bottomIndex ? getIndexBetween(topIndex, bottomIndex) : getIndexAbove(topIndex)
          });
          const newCamera = TLCamera.create({});
          const newTabPageState = TLInstancePageState.create({
            pageId: newPage.id,
            instanceId: this.instanceId,
            cameraId: newCamera.id
          });
          return {
            data: {
              prevPageState,
              prevTabState: prevInstanceState,
              newPage,
              newTabPageState,
              newCamera
            }
          };
        },
        {
          do: ({ newPage, newTabPageState, newCamera }) => {
            this.store.put([
              newPage,
              newCamera,
              newTabPageState,
              __spreadProps(__spreadValues({}, this.instanceState), { currentPageId: newPage.id })
            ]);
            this.updateCullingBounds();
          },
          undo: ({ newPage, prevPageState, prevTabState, newTabPageState }) => {
            this.store.put([prevPageState, prevTabState]);
            this.store.remove([newTabPageState.id, newPage.id, newTabPageState.cameraId]);
            this.updateCullingBounds();
          }
        }
      ));
      /** @internal */
      __publicField(this, "_deletePage", this.history.createCommand(
        "delete_page",
        (id) => {
          var _a5;
          if (this.isReadOnly)
            return null;
          const { pages } = this;
          if (pages.length === 1)
            return null;
          const deletedPage = this.getPageById(id);
          const deletedPageStates = this._pageStates.value.filter((s3) => s3.pageId === id);
          if (!deletedPage)
            return null;
          if (id === this.currentPageId) {
            const index2 = pages.findIndex((page) => page.id === id);
            const next = (_a5 = pages[index2 - 1]) != null ? _a5 : pages[index2 + 1];
            this.setCurrentPageId(next.id);
          }
          return { data: { id, deletedPage, deletedPageStates } };
        },
        {
          do: ({ deletedPage, deletedPageStates }) => {
            var _a5;
            const { pages } = this;
            if (pages.length === 1)
              return;
            if (deletedPage.id === this.currentPageId) {
              const index2 = pages.findIndex((page) => page.id === deletedPage.id);
              const next = (_a5 = pages[index2 - 1]) != null ? _a5 : pages[index2 + 1];
              this.setCurrentPageId(next.id);
            }
            this.store.remove(deletedPageStates.map((s3) => s3.id));
            this.store.remove([deletedPage.id]);
            this.updateCullingBounds();
          },
          undo: ({ deletedPage, deletedPageStates }) => {
            this.store.put([deletedPage]);
            this.store.put(deletedPageStates);
            this.updateCullingBounds();
          }
        }
      ));
      /** @internal */
      __publicField(this, "_setInstancePageState", this.history.createCommand(
        "setInstancePageState",
        (partial, ephemeral = false) => {
          var _a5;
          const prev = this.store.get((_a5 = partial.id) != null ? _a5 : this.pageState.id);
          return { data: { prev, partial }, ephemeral };
        },
        {
          do: ({ prev, partial }) => {
            this.store.update(prev.id, (state) => __spreadValues(__spreadValues({}, state), partial));
          },
          undo: ({ prev }) => {
            this.store.update(prev.id, () => prev);
          }
        }
      ));
      // when a user performs any action in the app, we update their presence record
      __publicField(this, "updateUserPresence", ({
        cursor,
        color,
        viewportPageBounds
      } = {}) => {
        const presence = this._currentUserPresence.value;
        if (!presence) {
          console.error("No presence found for current user");
          return;
        }
        this.store.put([
          __spreadProps(__spreadValues({}, presence), {
            cursor: cursor != null ? cursor : presence.cursor,
            color: color != null ? color : presence.color,
            viewportPageBounds: viewportPageBounds != null ? viewportPageBounds : presence.viewportPageBounds,
            lastUsedInstanceId: this.instanceId,
            lastActivityTimestamp: Date.now()
          })
        ]);
      });
      /** @internal */
      __publicField(this, "_setSelectedIds", this.history.createCommand(
        "setSelectedIds",
        (ids, squashing = false) => {
          const prevSelectedIds = this.pageState.selectedIds;
          const prevSet = new Set(this.pageState.selectedIds);
          if (ids.length === prevSet.size && ids.every((id) => prevSet.has(id)))
            return null;
          return { data: { ids, prevSelectedIds }, squashing, preservesRedoStack: true };
        },
        {
          do: ({ ids }) => {
            this.store.update(this.pageState.id, (state) => __spreadProps(__spreadValues({}, state), { selectedIds: ids }));
          },
          undo: ({ prevSelectedIds }) => {
            this.store.update(this.pageState.id, () => __spreadProps(__spreadValues({}, this.pageState), {
              selectedIds: prevSelectedIds
            }));
          },
          squash(prev, next) {
            return { ids: next.ids, prevSelectedIds: prev.prevSelectedIds };
          }
        }
      ));
      /** @internal */
      __publicField(this, "_createAssets", this.history.createCommand(
        "createAssets",
        (assets) => {
          if (this.isReadOnly)
            return null;
          if (assets.length <= 0)
            return null;
          return { data: { assets } };
        },
        {
          do: ({ assets }) => {
            this.store.put(assets);
          },
          undo: ({ assets }) => {
            this.store.remove(assets.map((a3) => a3.id));
          }
        }
      ));
      /** @internal */
      __publicField(this, "_deleteAssets", this.history.createCommand(
        "deleteAssets",
        (ids) => {
          if (this.isReadOnly)
            return;
          if (ids.length <= 0)
            return;
          const prev = compact(ids.map((id) => this.store.get(id)));
          return { data: { ids, prev } };
        },
        {
          do: ({ ids }) => {
            this.store.remove(ids);
          },
          undo: ({ prev }) => {
            this.store.put(prev);
          }
        }
      ));
      /** @internal */
      __publicField(this, "_updateAssets", this.history.createCommand(
        "updateAssets",
        (assets) => {
          if (this.isReadOnly)
            return;
          if (assets.length <= 0)
            return;
          const snapshots = {};
          return { data: { snapshots, assets } };
        },
        {
          do: ({ assets, snapshots }) => {
            this.store.put(
              assets.map((a3) => {
                const asset = this.store.get(a3.id);
                snapshots[a3.id] = asset;
                return __spreadValues(__spreadValues({}, asset), a3);
              })
            );
          },
          undo: ({ snapshots }) => {
            this.store.put(Object.values(snapshots));
          }
        }
      ));
      /** @internal */
      __publicField(this, "_setCurrentPageId", this.history.createCommand(
        "setCurrentPage",
        (pageId, { stopFollowing = true } = {}) => {
          if (!this.store.has(pageId)) {
            console.error("Tried to set the current page id to a page that doesn't exist.");
            return;
          }
          if (stopFollowing && this.instanceState.followingUserId) {
            this.stopFollowingUser();
          }
          return {
            data: { toId: pageId, fromId: this.currentPageId },
            squashing: true,
            preservesRedoStack: true
          };
        },
        {
          do: ({ toId }) => {
            if (!this.getPageStateByPageId(toId)) {
              const camera = TLCamera.create({});
              this.store.put([
                camera,
                TLInstancePageState.create({
                  pageId: toId,
                  instanceId: this.instanceId,
                  cameraId: camera.id
                })
              ]);
            }
            this.store.put([__spreadProps(__spreadValues({}, this.instanceState), { currentPageId: toId })]);
            this.updateUserPresence({
              viewportPageBounds: this.viewportPageBounds.toJson()
            });
            this.updateCullingBounds();
          },
          undo: ({ fromId }) => {
            this.store.put([__spreadProps(__spreadValues({}, this.instanceState), { currentPageId: fromId })]);
            this.updateUserPresence({
              viewportPageBounds: this.viewportPageBounds.toJson()
            });
            this.updateCullingBounds();
          },
          squash: ({ fromId }, { toId }) => {
            return { toId, fromId };
          }
        }
      ));
      /** @internal */
      __publicField(this, "_updateInstanceState", this.history.createCommand(
        "updateTabState",
        (partial, ephemeral = false, squashing = false) => {
          const prev = this.instanceState;
          const next = __spreadValues(__spreadValues({}, prev), partial);
          return {
            data: { prev, next },
            squashing,
            ephemeral
          };
        },
        {
          do: ({ next }) => {
            this.store.put([next]);
          },
          undo: ({ prev }) => {
            this.store.put([prev]);
          },
          squash({ prev }, { next }) {
            return { prev, next };
          }
        }
      ));
      /** @internal */
      __publicField(this, "_willSetInitialBounds", true);
      /** @internal */
      __publicField(this, "_viewportAnimation", null);
      /**
       * Start viewport-following a user.
       *
       * @param userId - The id of the user to follow.
       * @public
       */
      __publicField(this, "startFollowingUser", (userId) => {
        var _a5;
        const leaderPresenceRecord = this.store.query.record("user_presence", () => ({
          userId: { eq: userId }
        }));
        const leaderInstanceRecord = this.store.query.record("instance", () => ({
          userId: { eq: userId }
        }));
        if (!leaderInstanceRecord || !leaderPresenceRecord) {
          throw new Error("Couldn't find user to follow");
        }
        if (((_a5 = leaderInstanceRecord.value) == null ? void 0 : _a5.followingUserId) === this.userId) {
          return;
        }
        transact(() => {
          this.stopFollowingUser();
          this.updateInstanceState({
            followingUserId: userId
          });
        });
        const cancel = () => {
          this.removeListener("tick", moveTowardsUser);
          this.removeListener("stop-following", cancel);
        };
        let isCaughtUp = false;
        const moveTowardsUser = () => {
          const leaderInstance = leaderInstanceRecord.value;
          const leaderPresence = leaderPresenceRecord.value;
          if (!leaderInstance || !leaderPresence) {
            this.stopFollowingUser();
            return;
          }
          const isOnSamePage = leaderInstance.currentPageId === this.currentPageId;
          const chaseProportion = isOnSamePage ? FOLLOW_CHASE_PROPORTION : 1;
          if (!isOnSamePage) {
            this.setCurrentPageId(leaderInstance.currentPageId, { stopFollowing: false });
          }
          const { center, width, height } = this.viewportPageBounds;
          const {
            width: leaderWidth,
            height: leaderHeight,
            center: leaderCenter
          } = Box2d.From(leaderPresence.viewportPageBounds);
          const isFollowingFollower = leaderInstance.followingUserId === this.userId;
          const desiredWidth = width + (leaderWidth - width) * chaseProportion;
          const desiredHeight = height + (leaderHeight - height) * chaseProportion;
          const ratio = !isFollowingFollower ? Math.min(width / desiredWidth, height / desiredHeight) : height / desiredHeight;
          const targetZoom = clamp(this.camera.z * ratio, MIN_ZOOM, MAX_ZOOM);
          const targetWidth = this.viewportScreenBounds.w / targetZoom;
          const targetHeight = this.viewportScreenBounds.h / targetZoom;
          const displacement = leaderCenter.sub(center);
          const targetCenter = Vec2d.Add(center, Vec2d.Mul(displacement, chaseProportion));
          const distance = Vec2d.Sub(targetCenter, center).len();
          const zoomChange = Math.abs(targetZoom - this.camera.z);
          if (distance < FOLLOW_CHASE_PAN_SNAP && zoomChange < FOLLOW_CHASE_ZOOM_SNAP) {
            isCaughtUp = true;
            return;
          }
          if (isCaughtUp && distance < FOLLOW_CHASE_PAN_UNSNAP && zoomChange < FOLLOW_CHASE_ZOOM_UNSNAP) {
            return;
          }
          isCaughtUp = false;
          this.stopCameraAnimation();
          this.setCamera(
            -(targetCenter.x - targetWidth / 2),
            -(targetCenter.y - targetHeight / 2),
            targetZoom,
            { stopFollowing: false }
          );
        };
        this.once("stop-following", cancel);
        this.addListener("tick", moveTowardsUser);
        return this;
      });
      /**
       * Stop viewport-following a user.
       *
       * @public
       */
      __publicField(this, "stopFollowingUser", () => {
        this.updateInstanceState({
          followingUserId: null
        });
        this.emit("stop-following");
        return this;
      });
      /* ---------------- Text Measurement ---------------- */
      /**
       * A helper for measuring text.
       *
       * @public
       */
      __publicField(this, "textMeasure");
      if (store.schema !== config.storeSchema) {
        throw new Error("Store schema does not match schema given to App");
      }
      this.config = config;
      this.store = store;
      this.getContainer = getContainer != null ? getContainer : () => document.body;
      this.textMeasure = new TextManager(this);
      this.shapeUtils = Object.fromEntries(
        config.shapes.map((def) => [
          def.type,
          def.createShapeUtils(this)
        ])
      );
      if (typeof window !== "undefined" && "navigator" in window) {
        this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        this.isIos = !!navigator.userAgent.match(/iPad/i) || !!navigator.userAgent.match(/iPhone/i);
        this.isChromeForIos = /crios.*safari/i.test(navigator.userAgent);
      } else {
        this.isSafari = false;
        this.isIos = false;
        this.isChromeForIos = false;
      }
      this.colors = new Map(_App.styles.color.map((c3) => [c3.id, `var(--palette-${c3.id})`]));
      this.root = new RootState(this);
      if (this.root.children) {
        config.tools.forEach((Ctor) => {
          this.root.children[Ctor.id] = new Ctor(this);
        });
      }
      this.store.onBeforeDelete = (record) => {
        if (record.typeName === "shape") {
          this._shapeWillBeDeleted(record);
        } else if (record.typeName === "page") {
          this._pageWillBeDeleted(record);
        }
      };
      this.store.onAfterChange = (prev, next) => {
        this._updateDepth++;
        if (this._updateDepth > 1e3) {
          console.error("[onAfterChange] Maximum update depth exceeded, bailing out.");
        }
        if (prev.typeName === "shape" && next.typeName === "shape") {
          this._shapeDidChange(prev, next);
        } else if (prev.typeName === "instance_page_state" && next.typeName === "instance_page_state") {
          this._tabStateDidChange(prev, next);
        }
        this._updateDepth--;
      };
      this.store.onAfterCreate = (record) => {
        if (record.typeName === "shape" && TLArrowShapeDef.is(record)) {
          this._arrowDidUpdate(record);
        }
      };
      this._shapeIds = shapeIdsInCurrentPage(this.store, () => this.currentPageId);
      this._parentIdsToChildIds = parentsToChildrenWithIndexes(this.store);
      this.disposables.add(
        this.store.listen((changes) => {
          this.emit("change", changes);
        })
      );
      const container = this.getContainer();
      const focusin = () => {
        this._isFocused.set(true);
      };
      const focusout = () => {
        this._isFocused.set(false);
      };
      container.addEventListener("focusin", focusin);
      container.addEventListener("focus", focusin);
      container.addEventListener("focusout", focusout);
      container.addEventListener("blur", focusout);
      this.disposables.add(() => {
        container.removeEventListener("focusin", focusin);
        container.removeEventListener("focus", focusin);
        container.removeEventListener("focusout", focusout);
        container.removeEventListener("blur", focusout);
      });
      this.store.ensureStoreIsUsable();
      this.setInstancePageState(
        {
          editingId: null,
          hoveredId: null,
          erasingIds: []
        },
        true
      );
      this.root.enter(void 0, "initial");
      if (this.instanceState.followingUserId) {
        this.stopFollowingUser();
      }
      this.updateCullingBounds();
      requestAnimationFrame(() => {
        this._tickManager.start();
      });
    }
    /**
     * Set whether the editor's camera can move.
     *
     * @example
     *
     * ```ts
     * app.canMoveCamera = false
     * ```
     *
     * @param canMove - Whether the camera can move.
     * @public
     */
    get canMoveCamera() {
      return this._canMoveCamera.value;
    }
    set canMoveCamera(canMove) {
      this._canMoveCamera.set(canMove);
    }
    /**
     * Whether or not the editor is focused.
     *
     * @public
     */
    get isFocused() {
      return this._isFocused.value;
    }
    /**
     * The editor's userId (defined in its store.props).
     *
     * @example
     *
     * ```ts
     * const userId = app.userId
     * ```
     *
     * @public
     */
    get userId() {
      return this.store.props.userId;
    }
    /**
     * The editor's instanceId (defined in its store.props).
     *
     * @example
     *
     * ```ts
     * const instanceId = app.instanceId
     * ```
     *
     * @public
     */
    get instanceId() {
      return this.store.props.instanceId;
    }
    /** @internal */
    annotateError(error, {
      origin,
      willCrashApp,
      tags,
      extras
    }) {
      const defaultAnnotations = this.createErrorAnnotations(origin, willCrashApp);
      annotateError(error, {
        tags: __spreadValues(__spreadValues({}, defaultAnnotations.tags), tags),
        extras: __spreadValues(__spreadValues({}, defaultAnnotations.extras), extras)
      });
      if (willCrashApp) {
        this.store.markAsPossiblyCorrupted();
      }
    }
    /** @internal */
    createErrorAnnotations(origin, willCrashApp) {
      try {
        return {
          tags: {
            origin,
            willCrashApp
          },
          extras: {
            activeStateNode: this.root.path.value,
            selectedShapes: this.selectedShapes,
            editingShape: this.editingId ? this.getShapeById(this.editingId) : void 0,
            inputs: this.inputs
          }
        };
      } catch (e2) {
        return {
          tags: {
            origin,
            willCrashApp
          },
          extras: {}
        };
      }
    }
    /**
     * We can't use an `atom` here because there's a chance that when `crashAndReportError` is called,
     * we're in a transaction that's about to be rolled back due to the same error we're currently
     * reporting.
     *
     * Instead, to listen to changes to this value, you need to listen to app's `crash` event.
     *
     * @internal
     */
    get crashingError() {
      return this._crashingError;
    }
    /** @internal */
    crash(error) {
      this._crashingError = error;
      this.store.markAsPossiblyCorrupted();
      this.emit("crash", { error });
    }
    get devicePixelRatio() {
      return this._dprManager.dpr.value;
    }
    get openMenus() {
      return this._openMenus.value;
    }
    get isMenuOpen() {
      return this.openMenus.length > 0;
    }
    /**
     * Whether the user is using a "coarse" pointer, such as on a touch screen.
     *
     * @public
     */
    get isCoarsePointer() {
      return this._isCoarsePointer.value;
    }
    set isCoarsePointer(v3) {
      this._isCoarsePointer.set(v3);
    }
    /**
     * Whether the user is currently changing the style of a shape. This may cause the UI to change.
     *
     * @example
     *
     * ```ts
     * app.isChangingStyle = true
     * ```
     *
     * @public
     */
    get isChangingStyle() {
      return this._isChangingStyle.value;
    }
    set isChangingStyle(v3) {
      this._isChangingStyle.set(v3);
      clearTimeout(this._isChangingStyleTimeout);
      if (v3) {
        this._isChangingStyleTimeout = setTimeout(() => this.isChangingStyle = false, 2e3);
      }
    }
    get _pageTransformCache() {
      return this.store.createComputedCache("pageTransformCache", (shape) => {
        if (TLPage.isId(shape.parentId)) {
          return this.getTransform(shape);
        }
        const parent = this._pageTransformCache.get(shape.parentId);
        return Matrix2d.Compose(parent, this.getTransform(shape));
      });
    }
    get _pageBoundsCache() {
      return this.store.createComputedCache("pageBoundsCache", (shape) => {
        const pageTransform = this._pageTransformCache.get(shape.id);
        if (!pageTransform)
          return new Box2d();
        const result = Box2d.FromPoints(
          Matrix2d.applyToPoints(pageTransform, this.getShapeUtil(shape).outline(shape))
        );
        return result;
      });
    }
    get _pageMaskCache() {
      return this.store.createComputedCache("pageMaskCache", (shape) => {
        if (TLPage.isId(shape.parentId)) {
          return void 0;
        }
        const frameAncestors = this.getAncestorsById(shape.id).filter((s3) => s3.type === "frame");
        if (frameAncestors.length === 0)
          return void 0;
        const pageMask = frameAncestors.map(
          (s3) => (
            // Apply the frame transform to the frame outline to get the frame outline in page space
            Matrix2d.applyToPoints(this._pageTransformCache.get(s3.id), this.getOutline(s3))
          )
        ).reduce((acc, b3) => {
          var _a5;
          return b3 && acc ? (_a5 = intersectPolygonPolygon(acc, b3)) != null ? _a5 : void 0 : void 0;
        });
        return pageMask;
      });
    }
    /**
     * Get the page mask for a shape.
     *
     * @example
     *
     * ```ts
     * const pageMask = app.getPageMaskById(shape.id)
     * ```
     *
     * @param id - The id of the shape to get the page mask for.
     * @returns The page mask for the shape.
     * @public
     */
    getPageMaskById(id) {
      return this._pageMaskCache.get(id);
    }
    get _clipPathCache() {
      return this.store.createComputedCache("clipPathCache", (shape) => {
        const pageMask = this._pageMaskCache.get(shape.id);
        if (!pageMask)
          return void 0;
        const pageTransform = this._pageTransformCache.get(shape.id);
        if (!pageTransform)
          return void 0;
        if (pageMask.length === 0) {
          return `polygon(0px 0px, 0px 0px, 0px 0px)`;
        }
        const localMask = Matrix2d.applyToPoints(Matrix2d.Inverse(pageTransform), pageMask);
        return `polygon(${localMask.map((p3) => `${p3.x}px ${p3.y}px`).join(",")})`;
      });
    }
    /**
     * Get the clip path for a shape.
     *
     * @example
     *
     * ```ts
     * const clipPath = app.getClipPathById(shape.id)
     * ```
     *
     * @param id - The shape id.
     * @returns The clip path or undefined.
     * @public
     */
    getClipPathById(id) {
      return this._clipPathCache.get(id);
    }
    /**
     * Dispose the app.
     *
     * @public
     */
    dispose() {
      this.disposables.forEach((dispose) => dispose());
      this.disposables.clear();
    }
    /**
     * Undo to the last mark.
     *
     * @example
     *
     * ```ts
     * app.undo()
     * ```
     *
     * @public
     */
    undo() {
      return this.history.undo();
    }
    get canUndo() {
      return this.history.numUndos > 0;
    }
    /**
     * Redo to the next mark.
     *
     * @example
     *
     * ```ts
     * app.redo()
     * ```
     *
     * @public
     */
    redo() {
      this.history.redo();
      return this;
    }
    get canRedo() {
      return this.history.numRedos > 0;
    }
    /**
     * Create a new "mark", or stopping point, in the undo redo history. Creating a mark will clear
     * any redos.
     *
     * @example
     *
     * ```ts
     * app.mark()
     * app.mark('flip shapes')
     * ```
     *
     * @param reason - The reason for the mark.
     * @param onUndo - Whether to stop at the mark when undoing.
     * @param onRedo - Whether to stop at the mark when redoing.
     * @public
     */
    mark(reason, onUndo, onRedo) {
      return this.history.mark(reason, onUndo, onRedo);
    }
    /**
     * Clear all marks in the undo stack back to the next mark.
     *
     * @example
     *
     * ```ts
     * app.bail()
     * ```
     *
     * @public
     */
    bail() {
      this.history.bail();
      return this;
    }
    /**
     * Clear all marks in the undo stack back to the mark with the provided mark id.
     *
     * @example
     *
     * ```ts
     * app.bailToMark('creating')
     * ```
     *
     * @public
     */
    bailToMark(id) {
      this.history.bailToMark(id);
      return this;
    }
    /**
     * Run a function in a batch, which will be undone/redone as a single action.
     *
     * @example
     *
     * ```ts
     * app.batch(() => {
     * 	app.selectAll()
     * 	app.deleteShapes()
     * 	app.createShapes(myShapes)
     * 	app.selectNone()
     * })
     *
     * app.undo() // will undo all of the above
     * ```
     *
     * @public
     */
    batch(fn) {
      this.history.batch(fn);
      return this;
    }
    /**
     * Get a shape util for a given shape or shape type.
     *
     * @example
     *
     * ```ts
     * app.getShapeUtil(myBoxShape)
     * ```
     *
     * @param type - The shape type.
     * @public
     */
    getShapeUtil(shape) {
      return this.shapeUtils[shape.type];
    }
    /**
     * Get a shape util by its definition.
     *
     * @example
     *
     * ```ts
     * app.getShapeUtilByDef(TLDrawShapeDef)
     * ```
     *
     * @param def - The shape definition.
     * @public
     */
    getShapeUtilByDef(def) {
      return this.shapeUtils[def.type];
    }
    /**
     * Get an array of all the children of a shape.
     *
     * @example
     *
     * ```ts
     * app.getSortedChildIds('frame1')
     * ```
     *
     * @param parentId - The id of the parent shape.
     * @public
     */
    getSortedChildIds(parentId) {
      const withIndices = this._parentIdsToChildIds.value[parentId];
      if (!withIndices)
        return EMPTY_ARRAY;
      return this._childIdsCache.get(withIndices, () => withIndices.map(([id]) => id));
    }
    /**
     * Run a visitor function for all descendants of a shape.
     *
     * @example
     *
     * ```ts
     * app.visitDescendants('frame1', myCallback)
     * ```
     *
     * @param parentId - The id of the parent shape.
     * @param visitor - The visitor function.
     * @public
     */
    visitDescendants(parentId, visitor) {
      const children = this.getSortedChildIds(parentId);
      for (const id of children) {
        if (visitor(id) === false)
          continue;
        this.visitDescendants(id, visitor);
      }
    }
    get erasingIds() {
      return this.pageState.erasingIds;
    }
    get hintingIds() {
      return this.pageState.hintingIds;
    }
    get erasingIdsSet() {
      return new Set(this.erasingIds);
    }
    /**
     * Get all the current props among the users selected shapes
     *
     * @internal
     */
    _extractSharedProps(shape, sharedProps) {
      if (shape.type === "group") {
        const childIds = this._parentIdsToChildIds.value[shape.id];
        if (!childIds)
          return;
        for (let i3 = 0, n3 = childIds.length; i3 < n3; i3++) {
          this._extractSharedProps(this.getShapeById(childIds[i3][0]), sharedProps);
        }
      } else {
        const props = Object.entries(shape.props);
        let prop;
        for (let i3 = 0, n3 = props.length; i3 < n3; i3++) {
          prop = props[i3];
          if (BLACKLISTED_PROPS.has(prop[0]))
            continue;
          switch (sharedProps[prop[0]]) {
            case void 0: {
              sharedProps[prop[0]] = prop[1];
              break;
            }
            case null:
            case prop[1]: {
              continue;
            }
            default: {
              sharedProps[prop[0]] = null;
            }
          }
        }
      }
    }
    get props() {
      let next;
      if (this.isIn("select") && this.selectedIds.length > 0) {
        next = this._selectionSharedProps.value;
      } else {
        const currentState = this.root.current.value;
        if (currentState.styles.length === 0) {
          next = null;
        } else {
          const { propsForNextShape } = this.instanceState;
          next = Object.fromEntries(
            currentState.styles.map((k2) => {
              return [k2, propsForNextShape[k2]];
            })
          );
        }
      }
      if (JSON.stringify(this._prevProps) === JSON.stringify(next)) {
        return this._prevProps;
      }
      this._prevProps = next;
      return next;
    }
    /**
     * An array of all of the shapes on the current page.
     *
     * @public
     */
    get shapeIds() {
      return this._shapeIds.value;
    }
    /** @internal */
    _complete() {
      var _a5;
      const { lastUpdatedPageId, lastUsedTabId } = this.userDocumentSettings;
      if (lastUsedTabId !== this.instanceId || lastUpdatedPageId !== this.currentPageId) {
        this.store.put([
          __spreadProps(__spreadValues({}, this.userDocumentSettings), {
            lastUsedTabId: this.instanceId,
            lastUpdatedPageId: this.currentPageId
          })
        ]);
      }
      for (const parentId of this._invalidParents) {
        this._invalidParents.delete(parentId);
        const parent = this.getShapeById(parentId);
        if (!parent)
          continue;
        const util = this.getShapeUtil(parent);
        const changes = (_a5 = util.onChildrenChange) == null ? void 0 : _a5.call(util, parent);
        if (changes == null ? void 0 : changes.length) {
          this.updateShapes(changes, true);
        }
      }
      this.updateUserPresence();
      this.emit("update");
    }
    get _arrowBindingsIndex() {
      return arrowBindingsIndex(this.store);
    }
    /** GetArrowsBoundTo */
    getArrowsBoundTo(shapeId) {
      return this._arrowBindingsIndex.value[shapeId] || EMPTY_ARRAY;
    }
    /** @internal */
    _reparentArrow(arrowId) {
      var _a5;
      const arrow2 = this.getShapeById(arrowId);
      if (!arrow2)
        return;
      const { start, end } = arrow2.props;
      const startShape = start.type === "binding" ? this.getShapeById(start.boundShapeId) : void 0;
      const endShape = end.type === "binding" ? this.getShapeById(end.boundShapeId) : void 0;
      const parentPageId = this.getParentPageId(arrow2);
      if (!parentPageId)
        return;
      let nextParentId;
      if (startShape && endShape) {
        nextParentId = (_a5 = this.findCommonAncestor([startShape, endShape])) != null ? _a5 : parentPageId;
      } else if (startShape || endShape) {
        nextParentId = parentPageId;
      } else {
        return;
      }
      if (nextParentId && nextParentId !== arrow2.parentId) {
        this.reparentShapesById([arrowId], nextParentId);
      }
      const reparentedArrow = this.getShapeById(arrowId);
      const startSibling = this.getNearestSiblingShape(reparentedArrow, startShape);
      const endSibling = this.getNearestSiblingShape(reparentedArrow, endShape);
      let highestSibling;
      if (startSibling && endSibling) {
        highestSibling = startSibling.index > endSibling.index ? startSibling : endSibling;
      } else if (startSibling && !endSibling) {
        highestSibling = startSibling;
      } else if (endSibling && !startSibling) {
        highestSibling = endSibling;
      } else {
        return;
      }
      let finalIndex;
      const higherSiblings = this.getSortedChildIds(highestSibling.parentId).map((id) => this.getShapeById(id)).filter((sibling) => sibling.index > highestSibling.index);
      if (higherSiblings.length) {
        const nextHighestNonArrowSibling = higherSiblings.find((sibling) => sibling.type !== "arrow");
        if (
          // ...then, if we're above the last shape we want to be above...
          reparentedArrow.index > highestSibling.index && // ...but below the next non-arrow sibling...
          (!nextHighestNonArrowSibling || reparentedArrow.index < nextHighestNonArrowSibling.index)
        ) {
          return;
        }
        finalIndex = getIndexBetween(highestSibling.index, higherSiblings[0].index);
      } else {
        finalIndex = getIndexAbove(highestSibling.index);
      }
      if (finalIndex !== reparentedArrow.index) {
        this.updateShapes([{ id: arrowId, type: "arrow", index: finalIndex }]);
      }
    }
    /** @internal */
    _unbindArrowTerminal(arrow2, handleId) {
      const { x: x3, y: y3 } = getArrowTerminalsInArrowSpace(this, arrow2)[handleId];
      this.store.put([__spreadProps(__spreadValues({}, arrow2), { props: __spreadProps(__spreadValues({}, arrow2.props), { [handleId]: { type: "point", x: x3, y: y3 } }) })]);
    }
    get _allPageStates() {
      return this.store.query.records("instance_page_state");
    }
    /** @internal */
    _shapeWillBeDeleted(deletedShape) {
      if (deletedShape.parentId && isShapeId(deletedShape.parentId)) {
        this._invalidParents.add(deletedShape.parentId);
      }
      const bindings = this._arrowBindingsIndex.value[deletedShape.id];
      if (bindings == null ? void 0 : bindings.length) {
        for (const { arrowId, handleId } of bindings) {
          const arrow2 = this.getShapeById(arrowId);
          if (!arrow2)
            continue;
          this._unbindArrowTerminal(arrow2, handleId);
        }
      }
      const pageStates = this._allPageStates.value;
      const deletedIds = /* @__PURE__ */ new Set([deletedShape.id]);
      const updates = compact(
        pageStates.map((pageState) => {
          return this._cleanupInstancePageState(pageState, deletedIds);
        })
      );
      if (updates.length) {
        this.store.put(updates);
      }
    }
    /** @internal */
    _arrowDidUpdate(arrow2) {
      for (const handle of ["start", "end"]) {
        const terminal = arrow2.props[handle];
        if (terminal.type !== "binding")
          continue;
        const boundShape = this.getShapeById(terminal.boundShapeId);
        const isShapeInSamePageAsArrow = this.getParentPageId(arrow2) === this.getParentPageId(boundShape);
        if (!boundShape || !isShapeInSamePageAsArrow) {
          this._unbindArrowTerminal(arrow2, handle);
        }
      }
      this._reparentArrow(arrow2.id);
    }
    /** @internal */
    _cleanupInstancePageState(prevPageState, shapesNoLongerInPage) {
      let nextPageState = null;
      const selectedIds = prevPageState.selectedIds.filter((id) => !shapesNoLongerInPage.has(id));
      if (selectedIds.length !== prevPageState.selectedIds.length) {
        if (!nextPageState)
          nextPageState = __spreadValues({}, prevPageState);
        nextPageState.selectedIds = selectedIds;
      }
      const erasingIds = prevPageState.erasingIds.filter((id) => !shapesNoLongerInPage.has(id));
      if (erasingIds.length !== prevPageState.erasingIds.length) {
        if (!nextPageState)
          nextPageState = __spreadValues({}, prevPageState);
        nextPageState.erasingIds = erasingIds;
      }
      if (prevPageState.hoveredId && shapesNoLongerInPage.has(prevPageState.hoveredId)) {
        if (!nextPageState)
          nextPageState = __spreadValues({}, prevPageState);
        nextPageState.hoveredId = null;
      }
      if (prevPageState.editingId && shapesNoLongerInPage.has(prevPageState.editingId)) {
        if (!nextPageState)
          nextPageState = __spreadValues({}, prevPageState);
        nextPageState.editingId = null;
      }
      const hintingIds = prevPageState.hintingIds.filter((id) => !shapesNoLongerInPage.has(id));
      if (hintingIds.length !== prevPageState.hintingIds.length) {
        if (!nextPageState)
          nextPageState = __spreadValues({}, prevPageState);
        nextPageState.hintingIds = hintingIds;
      }
      if (prevPageState.focusLayerId && shapesNoLongerInPage.has(prevPageState.focusLayerId)) {
        if (!nextPageState)
          nextPageState = __spreadValues({}, prevPageState);
        nextPageState.focusLayerId = null;
      }
      return nextPageState;
    }
    /** @internal */
    _shapeDidChange(prev, next) {
      if (TLArrowShapeDef.is(next)) {
        this._arrowDidUpdate(next);
      }
      if (prev.parentId !== next.parentId) {
        const reparentBoundArrows = (id) => {
          const boundArrows = this._arrowBindingsIndex.value[id];
          if (boundArrows == null ? void 0 : boundArrows.length) {
            for (const arrow2 of boundArrows) {
              this._reparentArrow(arrow2.arrowId);
            }
          }
        };
        reparentBoundArrows(next.id);
        this.visitDescendants(next.id, reparentBoundArrows);
      }
      if (prev.parentId !== next.parentId && TLPage.isId(next.parentId)) {
        const allMovingIds = /* @__PURE__ */ new Set([prev.id]);
        this.visitDescendants(prev.id, (id) => {
          allMovingIds.add(id);
        });
        for (const instancePageState of this.store.query.records("instance_page_state").value) {
          if (instancePageState.pageId === next.parentId)
            continue;
          const nextPageState = this._cleanupInstancePageState(instancePageState, allMovingIds);
          if (nextPageState) {
            this.store.put([nextPageState]);
          }
        }
      }
      if (prev.parentId && isShapeId(prev.parentId)) {
        this._invalidParents.add(prev.parentId);
      }
      if (next.parentId !== prev.parentId && isShapeId(next.parentId)) {
        this._invalidParents.add(next.parentId);
      }
    }
    /** @internal */
    _tabStateDidChange(prev, next) {
      if ((prev == null ? void 0 : prev.selectedIds) !== (next == null ? void 0 : next.selectedIds)) {
        const filtered = next.selectedIds.filter((id) => {
          var _a5, _b2;
          let parentId = (_a5 = this.getShapeById(id)) == null ? void 0 : _a5.parentId;
          while (isShapeId(parentId)) {
            if (next.selectedIds.includes(parentId)) {
              return false;
            }
            parentId = (_b2 = this.getShapeById(parentId)) == null ? void 0 : _b2.parentId;
          }
          return true;
        });
        const nextFocusLayerId = filtered.length === 0 ? next == null ? void 0 : next.focusLayerId : this.findCommonAncestor(
          compact(filtered.map((id) => this.getShapeById(id))),
          (shape) => shape.type === "group"
        );
        if (filtered.length !== next.selectedIds.length || nextFocusLayerId != next.focusLayerId) {
          this.store.put([__spreadProps(__spreadValues({}, next), { selectedIds: filtered, focusLayerId: nextFocusLayerId != null ? nextFocusLayerId : null })]);
        }
      }
    }
    /** @internal */
    _pageWillBeDeleted(page) {
      var _a5;
      const instanceStates = this.store.query.exec("instance", { currentPageId: { eq: page.id } });
      if (!instanceStates.length)
        return;
      const backupPageId = (_a5 = this.pages.find((p3) => p3.id !== page.id)) == null ? void 0 : _a5.id;
      if (!backupPageId)
        return;
      this.store.put(instanceStates.map((state) => __spreadProps(__spreadValues({}, state), { currentPageId: backupPageId })));
    }
    get documentSettings() {
      return this.store.get(TLDOCUMENT_ID);
    }
    get gridSize() {
      return this.documentSettings.gridSize;
    }
    /**
     * The user's global settings.
     *
     * @public
     * @readonly
     */
    get userSettings() {
      return this.store.get(this.userId);
    }
    get isSnapMode() {
      return this.userDocumentSettings.isSnapMode;
    }
    setSnapMode(isSnapMode) {
      if (isSnapMode !== this.isSnapMode) {
        this.updateUserDocumentSettings({ isSnapMode }, true);
      }
      return this;
    }
    get isDarkMode() {
      return this.userDocumentSettings.isDarkMode;
    }
    setDarkMode(isDarkMode) {
      if (isDarkMode !== this.isDarkMode) {
        this.updateUserDocumentSettings({ isDarkMode }, true);
      }
      return this;
    }
    get isFocusMode() {
      return this.instanceState.isFocusMode;
    }
    setFocusMode(isFocusMode) {
      if (isFocusMode !== this.isFocusMode) {
        this.updateInstanceState({ isFocusMode }, true);
      }
      return this;
    }
    get isToolLocked() {
      return this.instanceState.isToolLocked;
    }
    setToolLocked(isToolLocked) {
      if (isToolLocked !== this.isToolLocked) {
        this.updateInstanceState({ isToolLocked }, true);
      }
      return this;
    }
    get _userDocumentSettings() {
      return this.store.query.record("user_document", () => ({ userId: { eq: this.userId } }));
    }
    get userDocumentSettings() {
      return this._userDocumentSettings.value;
    }
    get isGridMode() {
      return this.userDocumentSettings.isGridMode;
    }
    setGridMode(isGridMode) {
      if (isGridMode !== this.isGridMode) {
        this.updateUserDocumentSettings({ isGridMode }, true);
      }
      return this;
    }
    /** @internal */
    setReadOnly(isReadOnly) {
      this._isReadOnly.set(isReadOnly);
      if (isReadOnly) {
        this.setSelectedTool("hand");
      }
      return this;
    }
    get isReadOnly() {
      return this._isReadOnly.value;
    }
    get isPenMode() {
      return this._isPenMode.value;
    }
    setPenMode(isPenMode) {
      if (isPenMode)
        this._touchEventsRemainingBeforeExitingPenMode = 3;
      if (isPenMode !== this.isPenMode) {
        this._isPenMode.set(isPenMode);
      }
      return this;
    }
    // User / User App State
    /**
     * The current user state.
     *
     * @public
     */
    get user() {
      return this.store.get(this.userId);
    }
    /** The current tab state */
    get instanceState() {
      return this.store.get(this.instanceId);
    }
    get cursor() {
      return this.instanceState.cursor;
    }
    get brush() {
      return this.instanceState.brush;
    }
    get zoomBrush() {
      return this.instanceState.zoomBrush;
    }
    get scribble() {
      return this.instanceState.scribble;
    }
    get _pageState() {
      return this.store.query.record(
        "instance_page_state",
        () => {
          return {
            pageId: { eq: this.currentPageId },
            instanceId: { eq: this.instanceId }
          };
        },
        "app._pageState"
      );
    }
    /**
     * The current page state.
     *
     * @public
     */
    get pageState() {
      return this._pageState.value;
    }
    get camera() {
      return this.store.get(this.pageState.cameraId);
    }
    get zoomLevel() {
      return this.camera.z;
    }
    get selectedIds() {
      return this.pageState.selectedIds;
    }
    get selectedIdsSet() {
      return new Set(this.selectedIds);
    }
    get _pages() {
      return this.store.query.records("page");
    }
    get pages() {
      return this._pages.value.sort(sortByIndex2);
    }
    /**
     * The current page.
     *
     * @public
     */
    get currentPage() {
      return this.getPageById(this.currentPageId);
    }
    /**
     * The current page id.
     *
     * @public
     */
    get currentPageId() {
      return this.instanceState.currentPageId;
    }
    /**
     * Get a page by its ID.
     *
     * @example
     *
     * ```ts
     * app.getPageById(myPage.id)
     * ```
     *
     * @public
     */
    getPageById(id) {
      return this.store.get(id);
    }
    get _pageStates() {
      return this.store.query.records("instance_page_state", () => ({
        instanceId: { eq: this.instanceId }
      }));
    }
    /**
     * Get a page state by its id.
     *
     * @example
     *
     * ```ts
     * app.getPageStateByPageId('page1')
     * ```
     *
     * @public
     */
    getPageStateByPageId(id) {
      return this._pageStates.value.find((p3) => p3.pageId === id);
    }
    /**
     * Get a page by its ID.
     *
     * @example
     *
     * ```ts
     * app.getPageById(myPage.id)
     * ```
     *
     * @public
     */
    getPageInfoById(id) {
      return this.store.get(id);
    }
    /** Get shapes on a page. */
    getShapesInPage(pageId) {
      const result = this.store.query.exec("shape", { parentId: { eq: pageId } });
      return this.getShapesAndDescendantsInOrder(result.map((s3) => s3.id));
    }
    /* --------------------- Shapes --------------------- */
    /**
     * Get the local transform for a shape as a matrix model. This transform reflects both its
     * translation (x, y) from from either its parent's top left corner, if the shape's parent is
     * another shape, or else from the 0,0 of the page, if the shape's parent is the page; and the
     * shape's rotation.
     *
     * @example
     *
     * ```ts
     * app.getTransform(myShape)
     * ```
     *
     * @param shape - The shape to get the local transform for.
     * @public
     */
    getTransform(shape) {
      const util = this.getShapeUtil(shape);
      return util.transform(shape);
    }
    /**
     * Get the local transform of a shape's parent as a matrix model.
     *
     * @example
     *
     * ```ts
     * app.getParentTransform(myShape)
     * ```
     *
     * @param shape - The shape to get the parent transform for.
     * @public
     */
    getParentTransform(shape) {
      var _a5;
      if (TLPage.isId(shape.parentId)) {
        return Matrix2d.Identity();
      }
      return (_a5 = this._pageTransformCache.get(shape.parentId)) != null ? _a5 : Matrix2d.Identity();
    }
    /**
     * Get the page transform (or absolute transform) of a shape.
     *
     * @example
     *
     * ```ts
     * app.getPageTransform(myShape)
     * ```
     *
     * @param shape - The shape to get the page transform for.
     * @public
     */
    getPageTransform(shape) {
      return this.getPageTransformById(shape.id);
    }
    /**
     * Get the page transform (or absolute transform) of a shape by its id.
     *
     * @example
     *
     * ```ts
     * app.getPageTransformById(myShape)
     * ```
     *
     * @param id - The if of the shape to get the page transform for.
     * @public
     */
    getPageTransformById(id) {
      return this._pageTransformCache.get(id);
    }
    /**
     * Get the page point (or absolute point) of a shape.
     *
     * @example
     *
     * ```ts
     * app.getPagePoint(myShape)
     * ```
     *
     * @param shape - The shape to get the page point for.
     * @public
     */
    getPagePointById(id) {
      const pageTransform = this.getPageTransformById(id);
      if (!pageTransform)
        return;
      return Matrix2d.applyToPoint(pageTransform, new Vec2d());
    }
    /**
     * Get the page point (or absolute point) of a shape.
     *
     * @example
     *
     * ```ts
     * app.getPagePoint(myShape)
     * ```
     *
     * @param shape - The shape to get the page point for.
     * @public
     */
    getPageCenter(shape) {
      const pageTransform = this.getPageTransformById(shape.id);
      if (!pageTransform)
        return null;
      const util = this.getShapeUtil(shape);
      const center = util.center(shape);
      return Matrix2d.applyToPoint(pageTransform, center);
    }
    /**
     * Get the page point (or absolute point) of a shape by its id.
     *
     * @example
     *
     * ```ts
     * app.getPagePoint(myShape)
     * ```
     *
     * @param id - The shape id to get the page point for.
     * @public
     */
    getPageCenterById(id) {
      const shape = this.getShapeById(id);
      return this.getPageCenter(shape);
    }
    /**
     * Get the page rotation (or absolute rotation) of a shape.
     *
     * @example
     *
     * ```ts
     * app.getPageRotation(myShape)
     * ```
     *
     * @param shape - The shape to get the page rotation for.
     * @public
     */
    getPageRotation(shape) {
      return this.getPageRotationById(shape.id);
    }
    /**
     * Get the page rotation (or absolute rotation) of a shape by its id.
     *
     * @param id - The id of the shape to get the page rotation for.
     */
    getPageRotationById(id) {
      const pageTransform = this.getPageTransformById(id);
      if (pageTransform) {
        return Matrix2d.Decompose(pageTransform).rotation;
      }
      return 0;
    }
    /**
     * Get the local bounds of a shape.
     *
     * @example
     *
     * ```ts
     * app.getBounds(myShape)
     * ```
     *
     * @param shape - The shape to get the bounds for.
     * @public
     */
    getBounds(shape) {
      return this.getShapeUtil(shape).bounds(shape);
    }
    /**
     * Get the local bounds of a shape by its id.
     *
     * @example
     *
     * ```ts
     * app.getBoundsById(myShape)
     * ```
     *
     * @param id - The id of the shape to get the bounds for.
     * @public
     */
    getBoundsById(id) {
      const shape = this.getShapeById(id);
      if (!shape)
        return void 0;
      return this.getBounds(shape);
    }
    /**
     * Get the page (or absolute) bounds of a shape.
     *
     * @example
     *
     * ```ts
     * app.getPageBounds(myShape)
     * ```
     *
     * @param shape - The shape to get the bounds for.
     * @public
     */
    getPageBounds(shape) {
      return this.getPageBoundsById(shape.id);
    }
    /**
     * Get the page (or absolute) bounds of a shape by its id.
     *
     * @example
     *
     * ```ts
     * app.getPageBoundsById(myShape)
     * ```
     *
     * @param id - The id of the shape to get the page bounds for.
     * @public
     */
    getPageBoundsById(id) {
      return this._pageBoundsCache.get(id);
    }
    /**
     * Get the page (or absolute) bounds of a shape, incorporating any masks. For example, if the
     * shape were the child of a frame and was half way out of the frame, the bounds would be the half
     * of the shape that was in the frame.
     *
     * @example
     *
     * ```ts
     * app.getMaskedPageBounds(myShape)
     * ```
     *
     * @param shape - The shape to get the masked bounds for.
     * @public
     */
    getMaskedPageBounds(shape) {
      return this.getMaskedPageBoundsById(shape.id);
    }
    /**
     * Get the page (or absolute) bounds of a shape by its id, incorporating any masks. For example,
     * if the shape were the child of a frame and was half way out of the frame, the bounds would be
     * the half of the shape that was in the frame.
     *
     * @example
     *
     * ```ts
     * app.getMaskedPageBoundsById(myShape)
     * ```
     *
     * @param id - The id of the shape to get the masked page bounds for.
     * @public
     */
    getMaskedPageBoundsById(id) {
      const pageBounds = this._pageBoundsCache.get(id);
      if (!pageBounds)
        return;
      const pageMask = this._pageMaskCache.get(id);
      if (pageMask) {
        const intersection = intersectPolygonPolygon(pageMask, pageBounds.corners);
        if (!intersection)
          return;
        return Box2d.FromPoints(intersection);
      }
      return pageBounds;
    }
    /**
     * Get the local outline of a shape.
     *
     * @example
     *
     * ```ts
     * app.getOutline(myShape)
     * ```
     *
     * @param shape - The shape to get the outline for.
     * @public
     */
    getOutline(shape) {
      return this.getShapeUtil(shape).outline(shape);
    }
    /**
     * Get the local outline of a shape.
     *
     * @example
     *
     * ```ts
     * app.getOutlineById(myShape)
     * ```
     *
     * @param id - The shape id to get the outline for.
     * @public
     */
    getOutlineById(id) {
      return this.getOutline(this.getShapeById(id));
    }
    /**
     * Get the ancestors of a shape.
     *
     * @example
     *
     * ```ts
     * const ancestors = app.getAncestors(myShape)
     * ```
     *
     * @param shape - The shape to get the ancestors for.
     * @public
     */
    getAncestors(shape, acc = []) {
      const parentId = shape.parentId;
      if (TLPage.isId(parentId)) {
        acc.reverse();
        return acc;
      }
      const parent = this.store.get(parentId);
      acc.push(parent);
      return this.getAncestors(parent, acc);
    }
    /**
     * Get the ancestors of a shape by its id.
     *
     * @example
     *
     * ```ts
     * const ancestors = app.getAncestorsById(myShape)
     * ```
     *
     * @param id - The id of the shape to get the ancestors for.
     * @public
     */
    getAncestorsById(id, acc = []) {
      const shape = this.getShapeById(id);
      return this.getAncestors(shape, acc);
    }
    /**
     * Find the first ancestor matching the given predicate
     *
     * @example
     *
     * ```ts
     * const ancestor = app.findAncestor(myShape)
     * ```
     *
     * @param shape - The shape to check the ancestors for.
     * @public
     */
    findAncestor(shape, predicate) {
      const parentId = shape.parentId;
      if (TLPage.isId(parentId)) {
        return void 0;
      }
      const parent = this.getShapeById(parentId);
      if (parent) {
        if (predicate(parent)) {
          return parent;
        }
        return this.findAncestor(parent, predicate);
      }
      return void 0;
    }
    /** Returns true if the the given shape has the given ancestor */
    hasAncestor(shape, ancestorId) {
      if (!shape)
        return false;
      if (shape.parentId === ancestorId)
        return true;
      return this.hasAncestor(this.getParentShape(shape), ancestorId);
    }
    /**
     * Get the common ancestor of two or more shapes that matches a predicate.
     *
     * @param shapes - The shapes to check.
     * @param predicate - The predicate to match.
     */
    findCommonAncestor(shapes, predicate) {
      var _a5;
      if (shapes.length === 0) {
        return;
      }
      if (shapes.length === 1) {
        const parentId = shapes[0].parentId;
        if (TLPage.isId(parentId)) {
          return;
        }
        return predicate ? (_a5 = this.findAncestor(shapes[0], predicate)) == null ? void 0 : _a5.id : parentId;
      }
      const [nodeA, ...others] = shapes;
      let ancestor = this.getParentShape(nodeA);
      while (ancestor) {
        if (predicate && !predicate(ancestor)) {
          ancestor = this.getParentShape(ancestor);
          continue;
        }
        if (others.every((shape) => this.hasAncestor(shape, ancestor.id))) {
          return ancestor.id;
        }
        ancestor = this.getParentShape(ancestor);
      }
      return void 0;
    }
    /**
     * Check whether a shape is within the bounds of the current viewport.
     *
     * @param id - The id of the shape to check.
     * @public
     */
    isShapeInViewport(id) {
      const pageBounds = this.getPageBoundsById(id);
      if (!pageBounds)
        return false;
      return this.viewportPageBounds.includes(pageBounds);
    }
    get renderingShapes() {
      const { currentPageId, cullingBounds, cullingBoundsExpanded, erasingIdsSet, editingId } = this;
      const renderingShapes = [];
      const getShapeToDisplay = (id, parentOpacity, isAncestorErasing) => {
        const shape = this.getShapeById(id);
        if (!shape)
          return;
        let opacity = +shape.props.opacity * parentOpacity;
        let isShapeErasing = false;
        if (!isAncestorErasing && erasingIdsSet.has(id)) {
          isShapeErasing = true;
          opacity *= 0.32;
        }
        const bounds = this.getMaskedPageBoundsById(id);
        const isInViewport = bounds ? cullingBounds.includes(bounds) : false;
        const isCulled = bounds ? editingId !== id && !cullingBoundsExpanded.includes(bounds) : true;
        renderingShapes.push({ id, index: renderingShapes.length, opacity, isCulled, isInViewport });
        this.getSortedChildIds(id).forEach((id2) => {
          getShapeToDisplay(id2, opacity, isAncestorErasing || isShapeErasing);
        });
      };
      this.getSortedChildIds(currentPageId).forEach((shapeId) => getShapeToDisplay(shapeId, 1, false));
      return renderingShapes.sort(sortById);
    }
    get allShapesCommonBounds() {
      let commonBounds = null;
      this.shapeIds.forEach((shapeId) => {
        const bounds = this.getMaskedPageBoundsById(shapeId);
        if (bounds) {
          if (commonBounds) {
            commonBounds.expand(bounds);
          } else {
            commonBounds = bounds.clone();
          }
        }
      });
      return commonBounds;
    }
    /**
     * Get the corners of a shape in page space.
     *
     * @example
     *
     * ```ts
     * const corners = app.getPageCorners(myShape)
     * ```
     *
     * @param shape - The shape to get the corners for.
     * @public
     */
    getPageCorners(shape) {
      const ancestors = this.getAncestors(shape);
      const corners = this.getBounds(shape).corners;
      const transform = Matrix2d.Compose(
        ...ancestors.flatMap((s3) => [Matrix2d.Translate(s3.x, s3.y), Matrix2d.Rotate(s3.rotation)]),
        Matrix2d.Translate(shape.x, shape.y),
        Matrix2d.Rotate(shape.rotation, 0, 0)
      );
      return Matrix2d.applyToPoints(transform, corners);
    }
    /**
     * Test whether a point (in page space) will will a shape. This method takes into account masks,
     * such as when a shape is the child of a frame and is partially clipped by the frame.
     *
     * @example
     *
     * ```ts
     * app.isPointInShape({ x: 100, y: 100 }, myShape)
     * ```
     *
     * @param point - The page point to test.
     * @param shape - The shape to test against.
     * @public
     */
    isPointInShape(point2, shape) {
      const util = this.getShapeUtil(shape);
      const pageMask = this._pageMaskCache.get(shape.id);
      if (pageMask) {
        const hit = pointInPolygon(point2, pageMask);
        if (!hit)
          return false;
      }
      return util.hitTestPoint(shape, this.getPointInShapeSpace(shape, point2));
    }
    /**
     * Get the shapes, if any, at a given page point.
     *
     * @example
     *
     * ```ts
     * app.getShapesAtPoint({ x: 100, y: 100 })
     * ```
     *
     * @param point - The page point to test.
     * @public
     */
    getShapesAtPoint(point2) {
      return this.shapesArray.filter((shape) => {
        const pageMask = this._pageMaskCache.get(shape.id);
        if (pageMask) {
          return pointInPolygon(point2, pageMask);
        }
        return this.getShapeUtil(shape).hitTestPoint(shape, this.getPointInShapeSpace(shape, point2));
      });
    }
    /**
     * Convert a point in page space to a point in the local space of a shape. For example, if a
     * shape's page point were `{ x: 100, y: 100 }`, a page point at `{ x: 110, y: 110 }` would be at
     * `{ x: 10, y: 10 }` in the shape's local space.
     *
     * @example
     *
     * ```ts
     * app.getPointInShapeSpace(myShape, { x: 100, y: 100 })
     * ```
     *
     * @param shape - The shape to get the point in the local space of.
     * @param point - The page point to get in the local space of the shape.
     * @public
     */
    getPointInShapeSpace(shape, point2) {
      return Matrix2d.applyToPoint(Matrix2d.Inverse(this.getPageTransform(shape)), point2);
    }
    /**
     * Convert a delta in page space to a point in the local space of a shape. For example, if a
     * shape's page point were `{ x: 100, y: 100 }`, a page point at `{ x: 110, y: 110 }` would be at
     * `{ x: 10, y: 10 }` in the shape's local space.
     *
     * @example
     *
     * ```ts
     * app.getPointInShapeSpace(myShape.id, { x: 100, y: 100 })
     * ```
     *
     * @param shape - The shape to get the point in the local space of.
     * @param point - The page point to get in the local space of the shape.
     * @public
     */
    getPointInParentSpace(shapeId, point2) {
      const shape = this.getShapeById(shapeId);
      if (!shape) {
        return new Vec2d(0, 0);
      }
      if (TLPage.isId(shape.parentId))
        return Vec2d.From(point2);
      const parentTransform = this.getPageTransformById(shape.parentId);
      if (!parentTransform)
        return Vec2d.From(point2);
      return Matrix2d.applyToPoint(Matrix2d.Inverse(parentTransform), point2);
    }
    /**
     * Convert a delta in page space to a delta in the local space of a shape.
     *
     * @example
     *
     * ```ts
     * app.getDeltaInShapeSpace(myShape, { x: 100, y: 100 })
     * ```
     *
     * @param shape - The shape to get the delta in the local space of.
     * @param delta - The page delta to convert.
     * @public
     */
    getDeltaInShapeSpace(shape, delta) {
      const pageTransform = this.getPageTransform(shape);
      if (!pageTransform)
        return Vec2d.From(delta);
      return Vec2d.Rot(delta, -Matrix2d.Decompose(pageTransform).rotation);
    }
    /**
     * Convert a delta in page space to a delta in the parent space of a shape.
     *
     * @example
     *
     * ```ts
     * app.getDeltaInParentSpace(myShape, { x: 100, y: 100 })
     * ```
     *
     * @param shape - The shape to get the delta in the parent space of.
     * @param delta - The page delta to convert.
     * @public
     */
    getDeltaInParentSpace(shape, delta) {
      if (TLPage.isId(shape.parentId))
        return Vec2d.From(delta);
      const parent = this.getShapeById(shape.parentId);
      if (!parent)
        return Vec2d.From(delta);
      return this.getDeltaInShapeSpace(parent, delta);
    }
    /**
     * For a given set of ids, get a map containing the ids of their parents and the children of those
     * parents.
     *
     * @example
     *
     * ```ts
     * app.getParentsMappedToChildren(['id1', 'id2', 'id3'])
     * ```
     *
     * @param ids - The ids to get the parents and children of.
     * @public
     */
    getParentsMappedToChildren(ids) {
      const shapes = ids.map((id) => this.store.get(id));
      const parents = /* @__PURE__ */ new Map();
      shapes.forEach((shape) => {
        var _a5;
        if (!parents.has(shape.parentId)) {
          parents.set(shape.parentId, /* @__PURE__ */ new Set());
        }
        (_a5 = parents.get(shape.parentId)) == null ? void 0 : _a5.add(shape);
      });
      return parents;
    }
    /* -------------------- Viewport -------------------- */
    /**
     * Update the viewport. The viewport will measure the size and screen position of its container
     * element. This should be done whenever the container's position on the screen changes.
     *
     * @example
     *
     * ```ts
     * app.updateViewportScreenBounds()
     * ```
     *
     * @param center - Whether to preserve the viewport page center as the viewport changes.
     *   (optional)
     * @public
     */
    updateViewportScreenBounds(center = false) {
      const container = this.getContainer();
      if (!container)
        return this;
      const rect = container.getBoundingClientRect();
      const screenBounds = new Box2d(0, 0, Math.max(rect.width, 1), Math.max(rect.height, 1));
      const boundsAreEqual = screenBounds.equals(this.viewportScreenBounds);
      const { _willSetInitialBounds } = this;
      if (boundsAreEqual) {
        this._willSetInitialBounds = false;
      } else {
        if (_willSetInitialBounds) {
          this._willSetInitialBounds = false;
          this.updateInstanceState({ screenBounds: screenBounds.toJson() }, true, true);
        } else {
          const { zoomLevel } = this;
          if (center) {
            const before = this.viewportPageCenter;
            this.updateInstanceState({ screenBounds: screenBounds.toJson() }, true, true);
            const after = this.viewportPageCenter;
            if (!this.instanceState.followingUserId) {
              this.pan((after.x - before.x) * zoomLevel, (after.y - before.y) * zoomLevel);
            }
          } else {
            const before = this.screenToPage(0, 0);
            this.updateInstanceState({ screenBounds: screenBounds.toJson() }, true, true);
            const after = this.screenToPage(0, 0);
            if (!this.instanceState.followingUserId) {
              this.pan((after.x - before.x) * zoomLevel, (after.y - before.y) * zoomLevel);
            }
          }
        }
      }
      this._cameraManager.tick();
      this.updateCullingBounds();
      const { editingId } = this;
      if (editingId) {
        this.panZoomIntoView([editingId]);
      }
      return this;
    }
    get viewportScreenBounds() {
      const { x: x3, y: y3, w: w3, h: h3 } = this.instanceState.screenBounds;
      return new Box2d(x3, y3, w3, h3);
    }
    get viewportScreenCenter() {
      return this.viewportScreenBounds.center;
    }
    get viewportPageBounds() {
      const { x: x3, y: y3, w: w3, h: h3 } = this.viewportScreenBounds;
      const tl = this.screenToPage(x3, y3);
      const br = this.screenToPage(x3 + w3, y3 + h3);
      return new Box2d(tl.x, tl.y, br.x - tl.x, br.y - tl.y);
    }
    get cullingBounds() {
      return this._cullingBounds.value;
    }
    get cullingBoundsExpanded() {
      return this._cullingBoundsExpanded.value;
    }
    /**
     * Update the culling bounds. This should be called when the viewport has stopped changing, such
     * as at the end of a pan, zoom, or animation.
     *
     * @example
     *
     * ```ts
     * app.updateCullingBounds()
     * ```
     *
     * @internal
     */
    updateCullingBounds() {
      const { viewportPageBounds } = this;
      if (viewportPageBounds.equals(this._cullingBounds.__unsafe__getWithoutCapture()))
        return this;
      this._cullingBounds.set(viewportPageBounds.clone());
      this._cullingBoundsExpanded.set(viewportPageBounds.clone().expandBy(100 / this.zoomLevel));
      return this;
    }
    get viewportPageCenter() {
      return this.viewportPageBounds.center;
    }
    /**
     * Convert a point in screen space to a point in page space.
     *
     * @example
     *
     * ```ts
     * app.screenToPage(100, 100)
     * ```
     *
     * @param x - The x coordinate of the point in screen space.
     * @param y - The y coordinate of the point in screen space.
     * @param camera - The camera to use. Defaults to the current camera.
     * @public
     */
    screenToPage(x3, y3, z2 = 0.5, camera = this.camera) {
      const { screenBounds } = this.store.unsafeGetWithoutCapture(this.instanceId);
      const { x: cx, y: cy, z: cz = 1 } = camera;
      return {
        x: (x3 - screenBounds.x) / cz - cx,
        y: (y3 - screenBounds.y) / cz - cy,
        z: z2
      };
    }
    /**
     * Convert a point in page space to a point in screen space.
     *
     * @example
     *
     * ```ts
     * app.pageToScreen(100, 100)
     * ```
     *
     * @param x - The x coordinate of the point in screen space.
     * @param y - The y coordinate of the point in screen space.
     * @param camera - The camera to use. Defaults to the current camera.
     * @public
     */
    pageToScreen(x3, y3, z2 = 0.5, camera = this.camera) {
      const { x: cx, y: cy, z: cz = 1 } = camera;
      return {
        x: x3 + cx * cz,
        y: y3 + cy * cz,
        z: z2
      };
    }
    /* Focus Layers */
    get focusLayerId() {
      var _a5;
      return (_a5 = this.pageState.focusLayerId) != null ? _a5 : this.currentPageId;
    }
    get focusLayerShape() {
      const id = this.pageState.focusLayerId;
      if (!id) {
        return;
      }
      return this.getShapeById(id);
    }
    popFocusLayer() {
      var _a5;
      const current = this.pageState.focusLayerId;
      const focusedShape = current && this.getShapeById(current);
      if (focusedShape) {
        const match = this.findAncestor(focusedShape, (s3) => s3.type === "group");
        this.setFocusLayer((_a5 = match == null ? void 0 : match.id) != null ? _a5 : null);
        this.select(focusedShape.id);
      } else {
        this.setFocusLayer(null);
        this.selectNone();
      }
      return this;
    }
    /**
     * Set the focus layer to the given shape id.
     *
     * @param next - The next focus layer id or null to reset the focus layer to the page
     * @public
     */
    setFocusLayer(next) {
      this._setFocusLayer(next);
      return this;
    }
    /**
     * Set the hinted shape ids.
     *
     * @param ids - The ids to set as hinted.
     * @public
     */
    setHintingIds(ids) {
      this.store.update(this.pageState.id, (s3) => __spreadProps(__spreadValues({}, s3), { hintingIds: dedupe(ids) }));
      return this;
    }
    /**
     * The current editing shape's id.
     *
     * @public
     */
    get editingId() {
      return this.pageState.editingId;
    }
    /**
     * The current cropping shape's id.
     *
     * @public
     */
    get croppingId() {
      return this.pageState.croppingId;
    }
    get editingShape() {
      var _a5;
      if (!this.editingId)
        return null;
      return (_a5 = this.getShapeById(this.editingId)) != null ? _a5 : null;
    }
    /**
     * Set the current editing id.
     *
     * @param id - The id of the shape to edit or null to clear the editing id.
     * @public
     */
    setEditingId(id) {
      if (!id) {
        this.setInstancePageState({ editingId: null });
      } else {
        if (id !== this.editingId) {
          const shape = this.getShapeById(id);
          const util = this.getShapeUtil(shape);
          if (shape && util.canEdit(shape)) {
            this.setInstancePageState({ editingId: id, hoveredId: null }, false);
            const { viewportPageBounds } = this;
            const localEditingBounds = util.getEditingBounds(shape);
            const pageTransform = this.getPageTransformById(id);
            const pageEditingBounds = Box2d.FromPoints(
              Matrix2d.applyToPoints(pageTransform, localEditingBounds.corners)
            );
            if (!viewportPageBounds.contains(pageEditingBounds)) {
              if (pageEditingBounds.width > viewportPageBounds.width || pageEditingBounds.height > viewportPageBounds.height) {
                this.zoomToBounds(
                  pageEditingBounds.minX,
                  pageEditingBounds.minY,
                  pageEditingBounds.width,
                  pageEditingBounds.height
                );
              } else {
                this.centerOnPoint(pageEditingBounds.midX, pageEditingBounds.midY);
              }
            }
          }
        }
      }
      return this;
    }
    setCroppingId(id) {
      if (id !== this.croppingId) {
        if (!id) {
          this.setInstancePageState({ croppingId: null });
          if (this.isInAny("select.crop", "select.pointing_crop_handle", "select.cropping")) {
            this.setSelectedTool("select.idle");
          }
        } else {
          const shape = this.getShapeById(id);
          const util = this.getShapeUtil(shape);
          if (shape && util.canCrop(shape)) {
            this.setInstancePageState({ croppingId: id, hoveredId: null });
          }
        }
      }
      return this;
    }
    getParentIdForNewShapeAtPoint(point2, shapeType) {
      const shapes = this.sortedShapesArray;
      for (let i3 = shapes.length - 1; i3 >= 0; i3--) {
        const shape = shapes[i3];
        const util = this.getShapeUtil(shape);
        if (!util.canReceiveNewChildrenOfType(shapeType))
          continue;
        const maskedPageBounds = this.getMaskedPageBoundsById(shape.id);
        if (maskedPageBounds && maskedPageBounds.containsPoint(point2) && util.hitTestPoint(shape, this.getPointInShapeSpace(shape, point2))) {
          return shape.id;
        }
      }
      return this.focusLayerId;
    }
    getDroppingShape(point2, droppingShapes = []) {
      const shapes = this.sortedShapesArray;
      for (let i3 = shapes.length - 1; i3 >= 0; i3--) {
        const shape = shapes[i3];
        if (droppingShapes.find((s3) => s3.id === shape.id || this.hasAncestor(shape, s3.id)))
          continue;
        const util = this.getShapeUtil(shape);
        if (!util.canDropShapes(shape, droppingShapes))
          continue;
        const maskedPageBounds = this.getMaskedPageBoundsById(shape.id);
        if (maskedPageBounds && maskedPageBounds.containsPoint(point2) && util.hitTestPoint(shape, this.getPointInShapeSpace(shape, point2))) {
          return shape;
        }
      }
      return void 0;
    }
    // This returns the node that should be selected when you click on this one, assuming there is nothing
    // already selected. It will not return anything higher than or including the current focus layer.
    getOutermostSelectableShape(shape, filter2) {
      var _a5;
      let match = shape;
      let node = shape;
      while (node) {
        if (node.type === "group" && this.focusLayerId !== node.id && !this.hasAncestor(this.focusLayerShape, node.id) && ((_a5 = filter2 == null ? void 0 : filter2(node)) != null ? _a5 : true)) {
          match = node;
        } else if (this.focusLayerId === node.id) {
          break;
        }
        node = this.getParentShape(node);
      }
      return match;
    }
    get selectedPageBounds() {
      const {
        pageState: { selectedIds }
      } = this;
      if (selectedIds.length === 0)
        return null;
      return Box2d.Common(compact(selectedIds.map((id) => this.getPageBoundsById(id))));
    }
    get selectionRotation() {
      const { selectedIds } = this;
      if (selectedIds.length === 0) {
        return 0;
      }
      if (selectedIds.length === 1) {
        return this.getPageRotationById(this.selectedIds[0]);
      }
      const allRotations = selectedIds.map((id) => this.getPageRotationById(id) % (Math.PI / 2));
      if (allRotations.every((rotation) => Math.abs(rotation - allRotations[0]) < Math.PI / 180)) {
        return this.getPageRotationById(selectedIds[0]);
      }
      return 0;
    }
    get selectionBounds() {
      const { selectedIds } = this;
      if (selectedIds.length === 0) {
        return void 0;
      }
      const { selectionRotation } = this;
      if (selectionRotation === 0) {
        return this.selectedPageBounds;
      }
      if (selectedIds.length === 1) {
        const bounds = this.getBounds(this.getShapeById(selectedIds[0])).clone();
        bounds.point = Matrix2d.applyToPoint(this.getPageTransformById(selectedIds[0]), bounds.point);
        return bounds;
      }
      const allPoints = this.selectedIds.flatMap((id) => {
        const pageTransform = this.getPageTransformById(id);
        if (!pageTransform)
          return [];
        return this.getOutlineById(id).map((point2) => Matrix2d.applyToPoint(pageTransform, point2));
      }).map((p3) => Vec2d.Rot(p3, -selectionRotation));
      const box = Box2d.FromPoints(allPoints);
      box.point = box.point.rot(selectionRotation);
      return box;
    }
    get selectionPageCenter() {
      const { selectionBounds, selectionRotation } = this;
      if (!selectionBounds)
        return null;
      return Vec2d.RotWith(selectionBounds.center, selectionBounds.point, selectionRotation);
    }
    get shapesArray() {
      return Array.from(this.shapeIds).map((id) => this.store.get(id));
    }
    get sortedShapesArray() {
      const shapes = new Set(this.shapesArray.sort(sortByIndex2));
      const results = [];
      function pushShapeWithDescendants(shape) {
        results.push(shape);
        shapes.delete(shape);
        shapes.forEach((otherShape) => {
          if (otherShape.parentId === shape.id) {
            pushShapeWithDescendants(otherShape);
          }
        });
      }
      shapes.forEach((shape) => {
        const parent = this.getShapeById(shape.parentId);
        if (!isShape(parent)) {
          pushShapeWithDescendants(shape);
        }
      });
      return results;
    }
    get selectedShapes() {
      const { selectedIds } = this.pageState;
      return compact(selectedIds.map((id) => this.store.get(id)));
    }
    get onlySelectedShape() {
      const { selectedShapes } = this;
      return selectedShapes.length === 1 ? selectedShapes[0] : null;
    }
    /**
     * Get a shape by its id.
     *
     * @example
     *
     * ```ts
     * app.getShapeById('box1')
     * ```
     *
     * @param id - The id of the shape to get.
     * @public
     */
    getShapeById(id) {
      if (!isShapeId(id))
        return void 0;
      return this.store.get(id);
    }
    /**
     * Get the parent shape for a given shape. Returns undefined if the shape is the direct child of
     * the page.
     *
     * @example
     *
     * ```ts
     * app.getParentShape(myShape)
     * ```
     *
     * @public
     */
    getParentShape(shape) {
      if (shape === void 0 || !isShapeId(shape.parentId))
        return void 0;
      return this.store.get(shape.parentId);
    }
    /**
     * If siblingShape and targetShape are siblings, this returns targetShape. If targetShape has an
     * ancestor who is a sibling of siblingShape, this returns that ancestor. Otherwise, this returns
     * undefined
     */
    getNearestSiblingShape(siblingShape, targetShape) {
      if (!targetShape) {
        return void 0;
      }
      if (targetShape.parentId === siblingShape.parentId) {
        return targetShape;
      }
      const ancestor = this.findAncestor(
        targetShape,
        (ancestor2) => ancestor2.parentId === siblingShape.parentId
      );
      return ancestor;
    }
    /** Get the id of the containing page for a given shape. */
    getParentPageId(shape) {
      if (shape === void 0)
        return void 0;
      if (TLPage.isId(shape.parentId)) {
        return shape.parentId;
      } else {
        return this.getParentPageId(this.getShapeById(shape.parentId));
      }
    }
    /**
     * Get whether the given shape is the descendant of the given page.
     *
     * @example
     *
     * ```ts
     * app.isShapeInPage(myShape)
     * app.isShapeInPage(myShape, 'page1')
     * ```
     *
     * @param shape - The shape to check.
     * @param pageId - The id of the page to check against. Defaults to the current page.
     * @public
     */
    isShapeInPage(shape, pageId = this.currentPageId) {
      let shapeIsInPage = false;
      if (shape.parentId === pageId) {
        shapeIsInPage = true;
      } else {
        let parent = this.getShapeById(shape.parentId);
        isInPageSearch:
          while (parent) {
            if (parent.parentId === pageId) {
              shapeIsInPage = true;
              break isInPageSearch;
            }
            parent = this.getShapeById(parent.parentId);
          }
      }
      return shapeIsInPage;
    }
    /**
     * Get the CSS color value for a given color id.
     *
     * @example
     *
     * ```ts
     * app.getCssColor('red')
     * ```
     *
     * @param id - The id of the color to get.
     * @public
     */
    getCssColor(id) {
      return this.colors.get(id);
    }
    /**
     * Get the stroke width value for a given size id.
     *
     * @example
     *
     * ```ts
     * app.getStrokeWidth('m')
     * ```
     *
     * @param id - The id of the size to get.
     * @public
     */
    getStrokeWidth(id) {
      return this.sizes[id];
    }
    /* ------------------- Statechart ------------------- */
    /**
     * The id of the current selected tool.
     *
     * @public
     */
    get currentToolId() {
      var _a5, _b2;
      const activeTool = this.root.current.value;
      let activeToolId = activeTool == null ? void 0 : activeTool.id;
      if (activeToolId === "select" || activeToolId === "zoom") {
        const currentChildState = activeTool == null ? void 0 : activeTool.current.value;
        activeToolId = (_b2 = (_a5 = currentChildState == null ? void 0 : currentChildState.info) == null ? void 0 : _a5.onInteractionEnd) != null ? _b2 : "select";
      }
      return activeToolId != null ? activeToolId : "select";
    }
    /**
     * Set the selected tool.
     *
     * @example
     *
     * ```ts
     * app.setSelectedTool('hand')
     * app.setSelectedTool('hand', { date: Date.now() })
     * ```
     *
     * @param id - The id of the tool to select.
     * @param info - Arbitrary data to pass along into the transition.
     * @public
     */
    setSelectedTool(id, info = {}) {
      this.root.transition(id, info);
      return this;
    }
    /**
     * Get a descendant by its path.
     *
     * @example
     *
     * ```ts
     * state.getStateDescendant('select')
     * state.getStateDescendant('select.brushing')
     * ```
     *
     * @param path - The descendant's path of state ids, separated by periods.
     * @public
     */
    getStateDescendant(path) {
      var _a5;
      const ids = path.split(".").reverse();
      let state = this.root;
      while (ids.length > 0) {
        const id = ids.pop();
        if (!id)
          return state;
        const childState = (_a5 = state.children) == null ? void 0 : _a5[id];
        if (!childState)
          return void 0;
        state = childState;
      }
      return state;
    }
    /**
     * Get whether a certain tool (or other state node) is currently active.
     *
     * @example
     *
     * ```ts
     * app.isIn('select')
     * app.isIn('select.brushing')
     * ```
     *
     * @param path - The path of active states, separated by periods.
     * @public
     */
    isIn(path) {
      const ids = path.split(".").reverse();
      let state = this.root;
      while (ids.length > 0) {
        const id = ids.pop();
        if (!id)
          return true;
        const current = state.current.value;
        if ((current == null ? void 0 : current.id) === id) {
          if (ids.length === 0)
            return true;
          state = current;
          continue;
        } else
          return false;
      }
      return false;
    }
    /**
     * Get whether the state node is in any of the given active paths.
     *
     * @example
     *
     * ```ts
     * state.isInAny('select', 'erase')
     * state.isInAny('select.brushing', 'erase.idle')
     * ```
     *
     * @public
     */
    isInAny(...paths) {
      return paths.some((path) => this.isIn(path));
    }
    /**
     * Update the input points from a pointer or pinch event.
     *
     * @param info - The event info.
     * @internal
     */
    _updateInputsFromEvent(info) {
      const { previousScreenPoint, previousPagePoint, currentScreenPoint, currentPagePoint } = this.inputs;
      const { screenBounds } = this.store.unsafeGetWithoutCapture(this.instanceId);
      const { x: sx, y: sy, z: sz } = info.point;
      const { x: cx, y: cy, z: cz } = this.camera;
      previousScreenPoint.setTo(currentScreenPoint);
      previousPagePoint.setTo(currentPagePoint);
      const px = (sx - screenBounds.x) / cz - cx;
      const py = (sy - screenBounds.y) / cz - cy;
      currentScreenPoint.set(sx, sy);
      currentPagePoint.set(px, py, sz != null ? sz : 0.5);
      this.inputs.isPen = info.type === "pointer" && info.isPen;
      if (info.name === "pointer_down") {
        this.inputs.pointerVelocity = new Vec2d();
      }
      this.updateUserPresence({ cursor: currentPagePoint.toJson() });
    }
    /**
     * Prevent a double click event from firing the next time the user clicks
     *
     * @public
     */
    cancelDoubleClick() {
      this._clickManager.cancelDoubleClickTimeout();
    }
    replaceStoreContentsWithRecordsForOtherDocument(records) {
      transact(() => {
        this.store.clear();
        const [shapes, nonShapes] = partition(records, (record) => record.typeName === "shape");
        this.store.put(nonShapes, "initialize");
        this.store.ensureStoreIsUsable();
        this.store.put(shapes, "initialize");
        this.history.clear();
        this.updateViewportScreenBounds();
        this.updateCullingBounds();
        const bounds = this.allShapesCommonBounds;
        if (bounds) {
          this.zoomToBounds(bounds.minX, bounds.minY, bounds.width, bounds.height, 1);
        }
      });
    }
    getContent(ids = this.selectedIds) {
      if (!ids)
        return;
      if (ids.length === 0)
        return;
      const pageTransforms = {};
      let shapes = dedupe(
        ids.map((id) => this.getShapeById(id)).sort(sortByIndex2).flatMap((shape) => {
          const allShapes = [shape];
          this.visitDescendants(shape.id, (descendant) => {
            allShapes.push(this.getShapeById(descendant));
          });
          return allShapes;
        })
      );
      shapes = shapes.map((shape) => {
        pageTransforms[shape.id] = this.getPageTransformById(shape.id);
        shape = structuredClone(shape);
        if (TLArrowShapeDef.is(shape)) {
          const startBindingId = shape.props.start.type === "binding" ? shape.props.start.boundShapeId : void 0;
          const endBindingId = shape.props.end.type === "binding" ? shape.props.end.boundShapeId : void 0;
          const info = this.getShapeUtilByDef(TLArrowShapeDef).getArrowInfo(shape);
          if (shape.props.start.type === "binding") {
            if (!shapes.some((s3) => s3.id === startBindingId)) {
              if (info == null ? void 0 : info.isValid) {
                const { x: x3, y: y3 } = info.start.point;
                shape.props.start = {
                  type: "point",
                  x: x3,
                  y: y3
                };
              } else {
                const { start } = getArrowTerminalsInArrowSpace(this, shape);
                shape.props.start = {
                  type: "point",
                  x: start.x,
                  y: start.y
                };
              }
            }
          }
          if (shape.props.end.type === "binding") {
            if (!shapes.some((s3) => s3.id === endBindingId)) {
              if (info == null ? void 0 : info.isValid) {
                const { x: x3, y: y3 } = info.end.point;
                shape.props.end = {
                  type: "point",
                  x: x3,
                  y: y3
                };
              } else {
                const { end } = getArrowTerminalsInArrowSpace(this, shape);
                shape.props.end = {
                  type: "point",
                  x: end.x,
                  y: end.y
                };
              }
            }
          }
          const infoAfter = getIsArrowStraight(shape) ? getStraightArrowInfo(this, shape) : getCurvedArrowInfo(this, shape);
          if ((info == null ? void 0 : info.isValid) && (infoAfter == null ? void 0 : infoAfter.isValid) && !getIsArrowStraight(shape)) {
            const mpA = Vec2d.Med(info.start.handle, info.end.handle);
            const distA = Vec2d.Dist(info.middle, mpA);
            const distB = Vec2d.Dist(infoAfter.middle, mpA);
            if (shape.props.bend < 0) {
              shape.props.bend += distB - distA;
            } else {
              shape.props.bend -= distB - distA;
            }
          }
          return shape;
        }
        return shape;
      });
      const rootShapeIds = [];
      shapes.forEach((shape) => {
        if (shapes.find((s3) => s3.id === shape.parentId) === void 0) {
          const pagePoint = this.getPagePointById(shape.id);
          const pageRotation = this.getPageRotationById(shape.id);
          shape.x = pagePoint.x;
          shape.y = pagePoint.y;
          shape.rotation = pageRotation;
          shape.parentId = this.currentPageId;
          rootShapeIds.push(shape.id);
        }
      });
      const assetsSet = /* @__PURE__ */ new Set();
      shapes.forEach((shape) => {
        if ("assetId" in shape.props) {
          if (shape.props.assetId !== null) {
            assetsSet.add(shape.props.assetId);
          }
        }
      });
      return {
        shapes,
        rootShapeIds,
        schema: this.store.schema.serialize(),
        assets: compact(Array.from(assetsSet).map((id) => this.getAssetById(id)))
      };
    }
    /* --------------------- Commands --------------------- */
    putContent(content, options = {}) {
      if (this.isReadOnly)
        return this;
      if (!content.schema) {
        throw Error("Could not put content: content is missing a schema.");
      }
      const { select = false, preserveIds = false, preservePosition = false } = options;
      let { point: point2 = void 0 } = options;
      const { currentPageId } = this;
      const { assets, shapes, rootShapeIds } = content;
      const idMap = new Map(shapes.map((shape) => [shape.id, createShapeId()]));
      let pasteParentId = this.currentPageId;
      let lowestDepth = Infinity;
      let lowestAncestors = [];
      for (const shape of this.selectedShapes) {
        if (lowestDepth === 0)
          break;
        const ancestors = this.getAncestors(shape);
        if (shape.type === "frame")
          ancestors.push(shape);
        const depth = shape.type === "frame" ? ancestors.length + 1 : ancestors.length;
        if (depth < lowestDepth) {
          lowestDepth = depth;
          lowestAncestors = ancestors;
          pasteParentId = shape.type === "frame" ? shape.id : shape.parentId;
        } else if (depth === lowestDepth) {
          if (lowestAncestors.length !== ancestors.length) {
            throw Error(`Ancestors: ${lowestAncestors.length} !== ${ancestors.length}`);
          }
          if (lowestAncestors.length === 0) {
            pasteParentId = currentPageId;
            break;
          } else {
            pasteParentId = currentPageId;
            for (let i3 = 0; i3 < lowestAncestors.length; i3++) {
              if (ancestors[i3] !== lowestAncestors[i3])
                break;
              pasteParentId = ancestors[i3].id;
            }
          }
        }
      }
      let isDuplicating = false;
      if (!TLPage.isId(pasteParentId)) {
        const parent = this.getShapeById(pasteParentId);
        if (parent) {
          if (!this.viewportPageBounds.includes(this.getPageBounds(parent))) {
            pasteParentId = currentPageId;
          } else {
            if (rootShapeIds.length === 1) {
              const rootShape = shapes.find((s3) => s3.id === rootShapeIds[0]);
              if (TLFrameShapeDef.is(parent) && TLFrameShapeDef.is(rootShape) && rootShape.props.w === (parent == null ? void 0 : parent.props.w) && rootShape.props.h === (parent == null ? void 0 : parent.props.h)) {
                isDuplicating = true;
              }
            }
          }
        } else {
          pasteParentId = currentPageId;
        }
      }
      if (!isDuplicating) {
        isDuplicating = idMap.has(pasteParentId);
      }
      if (isDuplicating) {
        pasteParentId = this.getShapeById(pasteParentId).parentId;
      }
      let index2 = this.getHighestIndexForParent(pasteParentId);
      const rootShapes = [];
      const newShapes = shapes.map((shape) => {
        let newShape;
        if (preserveIds) {
          newShape = deepCopy(shape);
          idMap.set(shape.id, shape.id);
        } else {
          const id = idMap.get(shape.id);
          newShape = deepCopy(__spreadProps(__spreadValues({}, shape), { id }));
        }
        if (rootShapeIds.includes(shape.id)) {
          newShape.parentId = currentPageId;
          rootShapes.push(newShape);
        }
        if (idMap.has(newShape.parentId)) {
          newShape.parentId = idMap.get(shape.parentId);
        } else {
          rootShapeIds.push(newShape.id);
          newShape.index = index2;
          index2 = getIndexAbove(index2);
        }
        if (TLArrowShapeDef.is(newShape)) {
          if (newShape.props.start.type === "binding") {
            const mappedId = idMap.get(newShape.props.start.boundShapeId);
            newShape.props.start = mappedId ? __spreadProps(__spreadValues({}, newShape.props.start), { boundShapeId: mappedId }) : (
              // this shouldn't happen, if you copy an arrow but not it's bound shape it should
              // convert the binding to a point at the time of copying
              { type: "point", x: 0, y: 0 }
            );
          }
          if (newShape.props.end.type === "binding") {
            const mappedId = idMap.get(newShape.props.end.boundShapeId);
            newShape.props.end = mappedId ? __spreadProps(__spreadValues({}, newShape.props.end), { boundShapeId: mappedId }) : (
              // this shouldn't happen, if you copy an arrow but not it's bound shape it should
              // convert the binding to a point at the time of copying
              { type: "point", x: 0, y: 0 }
            );
          }
        }
        return newShape;
      });
      if (newShapes.length + this.shapeIds.size > MAX_SHAPES_PER_PAGE) {
        alertMaxShapes(this);
        return this;
      }
      let assetsToCreate = [];
      if (assets) {
        for (let i3 = 0; i3 < assets.length; i3++) {
          const asset = assets[i3];
          const result = this.store.schema.migratePersistedRecord(asset, content.schema);
          if (result.type === "success") {
            assets[i3] = result.value;
          } else {
            throw Error(
              `Could not put content: could not migrate content for asset:
${JSON.stringify(
                asset,
                null,
                2
              )}`
            );
          }
        }
        const assetsToUpdate = [];
        assetsToCreate = assets.filter((asset) => !this.store.has(asset.id)).map((asset) => {
          var _a5;
          if (asset.type === "image" || asset.type === "video") {
            if (asset.props.src && ((_a5 = asset.props.src) == null ? void 0 : _a5.startsWith("data:image"))) {
              assetsToUpdate.push(structuredClone(asset));
              asset.props.src = null;
            } else {
              assetsToUpdate.push(structuredClone(asset));
            }
          }
          return asset;
        });
        Promise.allSettled(
          assetsToUpdate.map((asset) => __async(this, null, function* () {
            var _a5;
            const file = yield dataUrlToFile(
              asset.props.src,
              asset.props.name,
              (_a5 = asset.props.mimeType) != null ? _a5 : "image/png"
            );
            const newAsset = yield this.onCreateAssetFromFile(file);
            return [asset, newAsset];
          }))
        ).then((assets2) => {
          this.updateAssets(
            compact(
              assets2.map(
                (result) => result.status === "fulfilled" ? __spreadProps(__spreadValues({}, result.value[1]), { id: result.value[0].id }) : void 0
              )
            )
          );
        });
      }
      for (let i3 = 0; i3 < newShapes.length; i3++) {
        const shape = newShapes[i3];
        const result = this.store.schema.migratePersistedRecord(shape, content.schema);
        if (result.type === "success") {
          newShapes[i3] = result.value;
        } else {
          throw Error(
            `Could not put content: could not migrate content for shape:
${JSON.stringify(
              shape,
              null,
              2
            )}`
          );
        }
      }
      this.batch(() => {
        if (assetsToCreate.length > 0) {
          this.createAssets(assetsToCreate);
        }
        this.createShapes(newShapes, select);
        if (pasteParentId !== currentPageId) {
          this.reparentShapesById(
            rootShapes.map((s3) => s3.id),
            pasteParentId
          );
        }
        const newCreatedShapes = newShapes.map((s3) => this.getShapeById(s3.id));
        const bounds = Box2d.Common(newCreatedShapes.map((s3) => this.getPageBounds(s3)));
        if (point2 === void 0) {
          if (!TLPage.isId(pasteParentId)) {
            const shape = this.getShapeById(pasteParentId);
            const util = this.getShapeUtil(shape);
            point2 = util.center(shape);
          } else {
            const { viewportPageBounds } = this;
            if (preservePosition || viewportPageBounds.includes(Box2d.From(bounds))) {
              point2 = bounds.center;
            } else {
              point2 = viewportPageBounds.center;
            }
          }
        }
        if (rootShapes.length === 1) {
          const onlyRoot = rootShapes[0];
          if (onlyRoot.type === "frame") {
            while (this.getShapesAtPoint(point2).some(
              (shape) => TLFrameShapeDef.is(shape) && shape.props.w === onlyRoot.props.w && shape.props.h === onlyRoot.props.h
            )) {
              point2.x += bounds.w + 16;
            }
          }
        }
        this.updateShapes(
          rootShapes.map((s3) => {
            var _a5, _b2;
            const delta = {
              x: ((_a5 = s3.x) != null ? _a5 : 0) - (bounds.x + bounds.w / 2),
              y: ((_b2 = s3.y) != null ? _b2 : 0) - (bounds.y + bounds.h / 2)
            };
            return { id: s3.id, type: s3.type, x: point2.x + delta.x, y: point2.y + delta.y };
          })
        );
      });
      return this;
    }
    /* --------------------- Shapes --------------------- */
    /**
     * Get a unique id for a shape.
     *
     * @example
     *
     * ```ts
     * app.createShapeId()
     * app.createShapeId('box1')
     * ```
     *
     * @param id - The id to use.
     * @public
     */
    createShapeId(id) {
      return id ? createCustomShapeId(id) : createShapeId();
    }
    getHighestIndexForParent(parentId) {
      const children = this._parentIdsToChildIds.value[parentId];
      if (!children || children.length === 0) {
        return "a1";
      }
      return getIndexAbove(children[children.length - 1][1]);
    }
    /**
     * Create shapes.
     *
     * @example
     *
     * ```ts
     * app.createShapes([{ id: 'box1', type: 'box' }])
     * ```
     *
     * @param partials - The shape partials to create.
     * @param select - Whether to select the created shapes. Defaults to false.
     * @public
     */
    createShapes(partials, select = false) {
      this._createShapes(partials, select);
      return this;
    }
    /**
     * Animate shapes.
     *
     * @example
     *
     * ```ts
     * app.animateShapes([{ id: 'box1', type: 'box', x: 100, y: 100 }])
     * ```
     *
     * @param partials - The shape partials to update.
     * @public
     */
    animateShapes(partials, options = {}) {
      const { duration = 500, ease: ease2 = EASINGS.linear } = options;
      const animationId = uniqueId();
      let remaining = duration;
      let t4;
      const animations = [];
      partials.forEach((partial) => {
        if (!partial)
          return;
        const result = {
          partial,
          values: []
        };
        const shape = this.getShapeById(partial.id);
        if (!shape)
          return;
        for (const key of ["x", "y", "rotation"]) {
          if (partial[key] !== void 0 && shape[key] !== partial[key]) {
            result.values.push({ prop: key, from: shape[key], to: partial[key] });
          }
        }
        animations.push(result);
        this.animatingShapes.set(shape.id, animationId);
      });
      let value;
      const handleTick = (elapsed) => {
        remaining -= elapsed;
        if (remaining < 0) {
          const { animatingShapes: animatingShapes2 } = this;
          const partialsToUpdate = partials.filter(
            (p3) => p3 && animatingShapes2.get(p3.id) === animationId
          );
          if (partialsToUpdate.length) {
            this.updateShapes(partialsToUpdate, false);
          }
          this.removeListener("tick", handleTick);
          return;
        }
        t4 = ease2(1 - remaining / duration);
        const { animatingShapes } = this;
        try {
          const tPartials = [];
          for (let i3 = 0; i3 < animations.length; i3++) {
            value = animations[i3];
            if (animatingShapes.get(value.partial.id) === animationId) {
              tPartials.push(__spreadValues({
                id: value.partial.id,
                type: value.partial.type
              }, value.values.reduce((acc, { prop, from, to }) => {
                acc[prop] = from + (to - from) * t4;
                return acc;
              }, {})));
            }
          }
          this._updateShapes(tPartials, true);
        } catch (e2) {
        }
      };
      this.addListener("tick", handleTick);
      return this;
    }
    /**
     * Update shapes.
     *
     * @example
     *
     * ```ts
     * app.updateShapes([{ id: 'box1', type: 'box', x: 100, y: 100 }])
     * ```
     *
     * @param partials - The shape partials to update.
     * @param squashing - Whether the change is ephemeral.
     * @public
     */
    updateShapes(partials, squashing = false) {
      if (this.animatingShapes.size > 0) {
        let partial;
        for (let i3 = 0; i3 < partials.length; i3++) {
          partial = partials[i3];
          if (partial) {
            this.animatingShapes.delete(partial.id);
          }
        }
      }
      this._updateShapes(partials, squashing);
      return this;
    }
    /**
     * Delete shapes.
     *
     * @example
     *
     * ```ts
     * app.deleteShapes()
     * app.deleteShapes(['box1', 'box2'])
     * ```
     *
     * @param ids - The ids of the shapes to delete. Defaults to the selected shapes.
     * @public
     */
    deleteShapes(ids = this.selectedIds) {
      this._deleteShapes(ids);
      return this;
    }
    /**
     * Update user document settings
     *
     * @example
     *
     * ```ts
     * app.updateUserDocumentSettings({ isGridMode: true })
     * ```
     *
     * @public
     */
    updateUserDocumentSettings(partial, ephemeral = false) {
      this._updateUserDocumentSettings(partial, ephemeral);
      return this;
    }
    /**
     * Update a page.
     *
     * @example
     *
     * ```ts
     * app.updatePage({ id: 'page2', name: 'Page 2' })
     * ```
     *
     * @param partial - The partial of the shape to update.
     * @public
     */
    updatePage(partial, squashing = false) {
      this._updatePage(partial, squashing);
      return this;
    }
    /**
     * Create a page.
     *
     * @example
     *
     * ```ts
     * app.createPage('New Page')
     * app.createPage('New Page', 'page1')
     * ```
     *
     * @param id - The new page's id.
     * @param title - The new page's title.
     * @public
     */
    createPage(title, id = TLPage.createId(), belowPageIndex) {
      this._createPage(title, id, belowPageIndex);
      return this;
    }
    duplicatePage(id = this.currentPageId, createId = TLPage.createId()) {
      if (this.pages.length >= MAX_PAGES)
        return;
      const page = this.getPageById(id);
      if (!page)
        return;
      const camera = __spreadValues({}, this.camera);
      const content = this.getContent(this.getSortedChildIds(page.id));
      this.batch(() => {
        this.createPage(page.name + " Copy", createId, page.index);
        this.setCurrentPageId(createId);
        this.setCamera(camera.x, camera.y, camera.z);
        if (content) {
          return this.putContent(content);
        }
      });
    }
    /**
     * Delete a page.
     *
     * @example
     *
     * ```ts
     * app.deletePage('page1')
     * ```
     *
     * @param id - The id of the page to delete.
     * @public
     */
    deletePage(id) {
      this._deletePage(id);
    }
    /**
     * Update a page state.
     *
     * @example
     *
     * ```ts
     * app.setInstancePageState({ id: 'page1', editingId: 'shape:123' })
     * app.setInstancePageState({ id: 'page1', editingId: 'shape:123' }, true)
     * ```
     *
     * @param partial - The partial of the page state object containing the changes.
     * @param ephemeral - Whether the command is ephemeral.
     * @public
     */
    setInstancePageState(partial, ephemeral = false) {
      this._setInstancePageState(partial, ephemeral);
    }
    /**
     * Set user state. Always ephemeral for now.
     *
     * @example
     *
     * ```ts
     * app.updateUser({ color: '#923433' })
     * ```
     *
     * @param partial - The partial of the user state object containing the changes.
     * @public
     */
    updateUser(partial) {
      const next = __spreadValues(__spreadValues({}, this.user), partial);
      this.store.put([next]);
    }
    get _currentUserPresence() {
      return this.store.query.record("user_presence", () => ({ userId: { eq: this.userId } }));
    }
    get userPresence() {
      return this._currentUserPresence.value;
    }
    /**
     * Select one or more shapes.
     *
     * @example
     *
     * ```ts
     * app.setSelectedIds(['id1'])
     * app.setSelectedIds(['id1', 'id2'])
     * ```
     *
     * @param ids - The ids to select.
     * @param squashing - Whether the change should create a new history entry or combine with the
     *   previous (if the previous is the same type).
     * @public
     */
    setSelectedIds(ids, squashing = false) {
      this._setSelectedIds(ids, squashing);
      return this;
    }
    /**
     * Determine whether or not a shape is selected
     *
     * @example
     *
     * ```ts
     * app.isSelected('id1')
     * ```
     *
     * @param id - The id of the shape to check.
     * @public
     */
    isSelected(id) {
      return this.selectedIdsSet.has(id);
    }
    /**
     * Determine whether a not a shape is within the current selection. A shape is within the
     * selection if it or any of its parents is selected.
     *
     * @param id - The id of the shape to check.
     * @public
     */
    isWithinSelection(id) {
      const shape = this.getShapeById(id);
      if (!shape)
        return false;
      if (this.isSelected(id))
        return true;
      return !!this.findAncestor(shape, (parent) => this.isSelected(parent.id));
    }
    get _assets() {
      return this.store.query.records("asset");
    }
    /** Get all assets in the app. */
    get assets() {
      return this._assets.value;
    }
    /**
     * Create one or more assets.
     *
     * @example
     *
     * ```ts
     * app.createAssets([...myAssets])
     * ```
     *
     * @param assets - The assets to create.
     * @public
     */
    createAssets(assets) {
      this._createAssets(assets);
      return this;
    }
    /**
     * Delete one or more assets.
     *
     * @example
     *
     * ```ts
     * app.deleteAssets(['asset1', 'asset2'])
     * ```
     *
     * @param ids - The assets to delete.
     * @public
     */
    deleteAssets(ids) {
      this._deleteAssets(ids);
      return this;
    }
    /**
     * Update one or more assets.
     *
     * @example
     *
     * ```ts
     * app.updateAssets([{ id: 'asset1', name: 'New name' }])
     * ```
     *
     * @param assets - The assets to update.
     * @public
     */
    updateAssets(assets) {
      this._updateAssets(assets);
      return this;
    }
    /**
     * Get an asset by its src property.
     *
     * @example
     *
     * ```ts
     * app.getAssetBySource('https://example.com/image.png')
     * ```
     *
     * @param src - The source value of the asset.
     * @public
     */
    getAssetBySrc(src) {
      return this.assets.find((a3) => a3.props.src === src);
    }
    /**
     * Get an asset by its id.
     *
     * @example
     *
     * ```ts
     * app.getAssetById('asset1')
     * ```
     *
     * @param id - The id of the asset.
     * @public
     */
    getAssetById(id) {
      return this.store.get(id);
    }
    /* ------------------- SubCommands ------------------ */
    getSvg() {
      return __async(this, arguments, function* (ids = this.selectedIds.length ? this.selectedIds : Object.keys(this.shapeIds), opts = {}) {
        var _a5, _b2, _c;
        if (ids.length === 0)
          return;
        if (!window.document)
          throw Error("No document");
        const {
          scale = 1,
          background = false,
          padding = SVG_PADDING,
          darkMode = this.userDocumentSettings.isDarkMode,
          preserveAspectRatio = false
        } = opts;
        const realContainerEl = this.getContainer();
        const realContainerStyle = getComputedStyle(realContainerEl);
        const fakeContainerEl = document.createElement("div");
        fakeContainerEl.className = `tl-container tl-theme__${darkMode ? "dark" : "light"}`;
        document.body.appendChild(fakeContainerEl);
        const containerStyle = getComputedStyle(fakeContainerEl);
        const fontsUsedInExport = /* @__PURE__ */ new Map();
        const colors = {
          fill: Object.fromEntries(
            STYLES.color.map((color) => [
              color.id,
              containerStyle.getPropertyValue(`--palette-${color.id}`)
            ])
          ),
          pattern: Object.fromEntries(
            STYLES.color.map((color) => [
              color.id,
              containerStyle.getPropertyValue(`--palette-${color.id}-pattern`)
            ])
          ),
          semi: Object.fromEntries(
            STYLES.color.map((color) => [
              color.id,
              containerStyle.getPropertyValue(`--palette-${color.id}-semi`)
            ])
          ),
          text: containerStyle.getPropertyValue(`--color-text`),
          background: containerStyle.getPropertyValue(`--color-background`),
          solid: containerStyle.getPropertyValue(`--palette-solid`)
        };
        document.body.removeChild(fakeContainerEl);
        const shapes = this.getShapesAndDescendantsInOrder(ids);
        const bbox = Box2d.FromPoints(
          shapes.map((shape2) => {
            const pageMask = this.getPageMaskById(shape2.id);
            if (pageMask) {
              return pageMask;
            }
            const pageTransform = this.getPageTransform(shape2);
            const pageOutline = Matrix2d.applyToPoints(pageTransform, this.getOutline(shape2));
            return pageOutline;
          }).flat()
        );
        const isSingleFrameShape = ids.length === 1 && shapes[0].type === "frame";
        if (!isSingleFrameShape) {
          bbox.expandBy(padding);
        }
        const w3 = bbox.width * scale;
        const h3 = bbox.height * scale;
        const svg = window.document.createElementNS("http://www.w3.org/2000/svg", "svg");
        if (preserveAspectRatio) {
          svg.setAttribute("preserveAspectRatio", preserveAspectRatio);
        }
        svg.setAttribute("direction", "ltr");
        svg.setAttribute("width", w3 + "");
        svg.setAttribute("height", h3 + "");
        svg.setAttribute("viewBox", `${bbox.minX} ${bbox.minY} ${bbox.width} ${bbox.height}`);
        svg.setAttribute("stroke-linecap", "round");
        svg.setAttribute("stroke-linejoin", "round");
        if (background) {
          if (isSingleFrameShape) {
            svg.style.setProperty("background", colors.solid);
          } else {
            svg.style.setProperty("background-color", colors.background);
          }
        } else {
          svg.style.setProperty("background-color", "transparent");
        }
        const defs = window.document.createElementNS("http://www.w3.org/2000/svg", "defs");
        for (const element of Array.from(exportPatternSvgDefs(colors.solid))) {
          defs.appendChild(element);
        }
        try {
          (_b2 = (_a5 = document.body).focus) == null ? void 0 : _b2.call(_a5);
        } catch (e2) {
        }
        svg.append(defs);
        let shape;
        for (let i3 = 0, n3 = shapes.length; i3 < n3; i3++) {
          shape = shapes[i3];
          if (isSingleFrameShape && i3 === 0)
            continue;
          let font;
          if ("font" in shape.props) {
            if (shape.props.font) {
              if (fontsUsedInExport.has(shape.props.font)) {
                font = fontsUsedInExport.get(shape.props.font);
              } else {
                font = realContainerStyle.getPropertyValue(`--tl-font-${shape.props.font}`);
                fontsUsedInExport.set(shape.props.font, font);
              }
            }
          }
          const util = this.getShapeUtil(shape);
          let utilSvgElement = yield (_c = util.toSvg) == null ? void 0 : _c.call(util, shape, font, colors);
          if (!utilSvgElement) {
            const bounds = this.getPageBounds(shape);
            const elm = window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
            elm.setAttribute("width", bounds.width + "");
            elm.setAttribute("height", bounds.height + "");
            elm.setAttribute("fill", colors.solid);
            elm.setAttribute("stroke", colors.pattern.grey);
            elm.setAttribute("stroke-width", "1");
            utilSvgElement = elm;
          }
          const shapeSvg = utilSvgElement;
          let pageTransform = this.getPageTransform(shape).toCssString();
          if ("scale" in shape.props) {
            if (shape.props.scale !== 1) {
              pageTransform = `${pageTransform} scale(${shape.props.scale}, ${shape.props.scale})`;
            }
          }
          shapeSvg.setAttribute("transform", pageTransform);
          if ("opacity" in shape.props)
            shapeSvg.setAttribute("opacity", shape.props.opacity + "");
          const pageMask = this.getPageMaskById(shape.id);
          if (shapeSvg && pageMask) {
            const clipPathEl = document.createElementNS("http://www.w3.org/2000/svg", "clipPath");
            defs.appendChild(clipPathEl);
            const id = nanoid();
            clipPathEl.id = id;
            const mask = document.createElementNS("http://www.w3.org/2000/svg", "path");
            mask.setAttribute("d", `M${pageMask.map(({ x: x3, y: y3 }) => `${x3},${y3}`).join("L")}Z`);
            clipPathEl.appendChild(mask);
            const outerElement = document.createElementNS("http://www.w3.org/2000/svg", "g");
            outerElement.setAttribute("clip-path", `url(#${id})`);
            outerElement.appendChild(shapeSvg);
            svg.appendChild(outerElement);
          } else {
            svg.appendChild(shapeSvg);
          }
        }
        let styles2 = ``;
        const style = window.document.createElementNS("http://www.w3.org/2000/svg", "style");
        const fontInstances = [];
        if ("fonts" in document) {
          document.fonts.forEach((font) => fontInstances.push(font));
        }
        for (const font of fontInstances) {
          const fileReader = new FileReader();
          let isUsed = false;
          fontsUsedInExport.forEach((fontName) => {
            if (fontName.includes(font.family)) {
              isUsed = true;
            }
          });
          if (!isUsed)
            continue;
          const url = font.$$_url;
          const fontFaceRule = font.$$_fontface;
          if (url) {
            const fontFile = yield (yield fetch(url)).blob();
            const base64Font = yield new Promise((resolve, reject) => {
              fileReader.onload = () => resolve(fileReader.result);
              fileReader.onerror = () => reject(fileReader.error);
              fileReader.readAsDataURL(fontFile);
            });
            const newFontFaceRule = "\n" + fontFaceRule.replaceAll(url, base64Font);
            styles2 += newFontFaceRule;
          }
        }
        style.textContent = styles2;
        defs.append(style);
        return svg;
      });
    }
    /**
     * Rename a page.
     *
     * @example
     *
     * ```ts
     * app.renamePage('page1', 'My Page')
     * ```
     *
     * @param id - The id of the page to rename.
     * @param name - The new name.
     * @public
     */
    renamePage(id, name, squashing = false) {
      if (this.isReadOnly)
        return this;
      this.updatePage({ id, name }, squashing);
      return this;
    }
    /**
     * Move shapes to page.
     *
     * @example
     *
     * ```ts
     * app.moveShapesToPage(['box1', 'box2'], 'page1')
     * ```
     *
     * @param ids - The ids of the shapes to move.
     * @param pageId - The id of the page where the shapes will be moved.
     * @public
     */
    moveShapesToPage(ids, pageId) {
      if (ids.length === 0)
        return this;
      if (this.isReadOnly)
        return this;
      const { currentPageId } = this;
      if (pageId === currentPageId)
        return this;
      if (!this.store.has(pageId))
        return this;
      const content = this.getContent(ids);
      if (!content)
        return this;
      if (this.getShapesInPage(pageId).length + content.shapes.length > MAX_SHAPES_PER_PAGE) {
        alertMaxShapes(this, pageId);
        return this;
      }
      const fromPageZ = this.camera.z;
      this.history.batch(() => {
        this.deleteShapes(ids);
        this.setCurrentPageId(pageId);
        this.setFocusLayer(null);
        this.selectNone();
        this.putContent(content, { select: true, preserveIds: true, preservePosition: true });
        const {
          center: { x: x3, y: y3 }
        } = this.selectionBounds;
        this.setCamera(this.camera.x, this.camera.y, fromPageZ);
        this.centerOnPoint(x3, y3);
      });
      return this;
    }
    lockShapes(_ids = this.pageState.selectedIds) {
      if (this.isReadOnly)
        return this;
      return this;
    }
    /**
     * Reorder shapes.
     *
     * @param operation - The operation to perform.
     * @param ids - The ids to reorder.
     * @public
     */
    reorderShapes(operation, ids) {
      if (this.isReadOnly)
        return this;
      if (ids.length === 0)
        return this;
      const parents = this.getParentsMappedToChildren(ids);
      const changes = [];
      switch (operation) {
        case "toBack": {
          parents.forEach((movingSet, parentId) => {
            const siblings = compact(
              this.getSortedChildIds(parentId).map((id) => this.getShapeById(id))
            );
            if (movingSet.size === siblings.length)
              return;
            let below;
            let above;
            for (const shape of siblings) {
              if (!movingSet.has(shape)) {
                above = shape.index;
                break;
              }
              movingSet.delete(shape);
              below = shape.index;
            }
            if (movingSet.size === 0)
              return;
            const indices = getIndicesBetween(below, above, movingSet.size);
            Array.from(movingSet.values()).sort(sortByIndex2).forEach(
              (node, i3) => changes.push({ id: node.id, type: node.type, index: indices[i3] })
            );
          });
          break;
        }
        case "toFront": {
          parents.forEach((movingSet, parentId) => {
            const siblings = compact(
              this.getSortedChildIds(parentId).map((id) => this.getShapeById(id))
            );
            const len = siblings.length;
            if (movingSet.size === len)
              return;
            let below;
            let above;
            for (let i3 = len - 1; i3 > -1; i3--) {
              const shape = siblings[i3];
              if (!movingSet.has(shape)) {
                below = shape.index;
                break;
              }
              movingSet.delete(shape);
              above = shape.index;
            }
            if (movingSet.size === 0)
              return;
            const indices = getIndicesBetween(below, above, movingSet.size);
            Array.from(movingSet.values()).sort(sortByIndex2).forEach(
              (node, i3) => changes.push({ id: node.id, type: node.type, index: indices[i3] })
            );
          });
          break;
        }
        case "forward": {
          parents.forEach((movingSet, parentId) => {
            var _a5;
            const siblings = compact(
              this.getSortedChildIds(parentId).map((id) => this.getShapeById(id))
            );
            const len = siblings.length;
            if (movingSet.size === len)
              return;
            const movingIndices = new Set(Array.from(movingSet).map((n3) => siblings.indexOf(n3)));
            let selectIndex = -1;
            let isSelecting = false;
            let below;
            let above;
            let count;
            for (let i3 = 0; i3 < len; i3++) {
              const isMoving = movingIndices.has(i3);
              if (!isSelecting && isMoving) {
                isSelecting = true;
                selectIndex = i3;
                above = void 0;
              } else if (isSelecting && !isMoving) {
                isSelecting = false;
                count = i3 - selectIndex;
                below = siblings[i3].index;
                above = (_a5 = siblings[i3 + 1]) == null ? void 0 : _a5.index;
                const indices = getIndicesBetween(below, above, count);
                for (let k2 = 0; k2 < count; k2++) {
                  const node = siblings[selectIndex + k2];
                  changes.push({ id: node.id, type: node.type, index: indices[k2] });
                }
              }
            }
          });
          break;
        }
        case "backward": {
          parents.forEach((movingSet, parentId) => {
            var _a5;
            const siblings = compact(
              this.getSortedChildIds(parentId).map((id) => this.getShapeById(id))
            );
            const len = siblings.length;
            if (movingSet.size === len)
              return;
            const movingIndices = new Set(Array.from(movingSet).map((n3) => siblings.indexOf(n3)));
            let selectIndex = -1;
            let isSelecting = false;
            let count;
            for (let i3 = len - 1; i3 > -1; i3--) {
              const isMoving = movingIndices.has(i3);
              if (!isSelecting && isMoving) {
                isSelecting = true;
                selectIndex = i3;
              } else if (isSelecting && !isMoving) {
                isSelecting = false;
                count = selectIndex - i3;
                const indices = getIndicesBetween((_a5 = siblings[i3 - 1]) == null ? void 0 : _a5.index, siblings[i3].index, count);
                for (let k2 = 0; k2 < count; k2++) {
                  const node = siblings[i3 + k2 + 1];
                  changes.push({ id: node.id, type: node.type, index: indices[k2] });
                }
              }
            }
          });
          break;
        }
      }
      this.updateShapes(changes);
      return this;
    }
    /**
     * Send shapes to the back of the page's object list.
     *
     * @example
     *
     * ```ts
     * app.sendToBack()
     * app.sendToBack(['id1', 'id2'])
     * ```
     *
     * @param ids - The ids of the shapes to move. Defaults to the ids of the selected shapes.
     * @public
     */
    sendToBack(ids = this.pageState.selectedIds) {
      this.reorderShapes("toBack", ids);
      return this;
    }
    /**
     * Send shapes backward in the page's object list.
     *
     * @example
     *
     * ```ts
     * app.sendBackward()
     * app.sendBackward(['id1', 'id2'])
     * ```
     *
     * @param ids - The ids of the shapes to move. Defaults to the ids of the selected shapes.
     * @public
     */
    sendBackward(ids = this.pageState.selectedIds) {
      this.reorderShapes("backward", ids);
      return this;
    }
    /**
     * Bring shapes forward in the page's object list.
     *
     * @example
     *
     * ```ts
     * app.bringForward()
     * app.bringForward(['id1', 'id2'])
     * ```
     *
     * @param ids - The ids of the shapes to move. Defaults to the ids of the selected shapes.
     * @public
     */
    bringForward(ids = this.pageState.selectedIds) {
      this.reorderShapes("forward", ids);
      return this;
    }
    /**
     * Bring shapes to the front of the page's object list.
     *
     * @example
     *
     * ```ts
     * app.bringToFront()
     * app.bringToFront(['id1', 'id2'])
     * ```
     *
     * @param ids - The ids of the shapes to move. Defaults to the ids of the selected shapes.
     * @public
     */
    bringToFront(ids = this.pageState.selectedIds) {
      this.reorderShapes("toFront", ids);
      return this;
    }
    /**
     * Flip shape positions.
     *
     * @example
     *
     * ```ts
     * app.flipShapes('horizontal')
     * app.flipShapes('horizontal', ['box1', 'box2'])
     * ```
     *
     * @param operation - Whether to flip horizontally or vertically.
     * @param ids - The ids of the shapes to flip. Defaults to selected shapes.
     * @public
     */
    flipShapes(operation, ids = this.selectedIds) {
      if (this.isReadOnly)
        return this;
      let shapes = compact(ids.map((id) => this.getShapeById(id)));
      if (!shapes.length)
        return this;
      shapes = shapes.map((shape) => {
        if (shape.type === "group") {
          return this.getSortedChildIds(shape.id).map((id) => this.getShapeById(id));
        }
        return shape;
      }).flat();
      const scaleOriginPage = Box2d.Common(compact(shapes.map((id) => this.getPageBounds(id)))).center;
      this.batch(() => {
        for (const shape of shapes) {
          const util = this.getShapeUtil(shape);
          const bounds = util.bounds(shape);
          const initialPageTransform = this.getPageTransformById(shape.id);
          if (!initialPageTransform)
            continue;
          this.resizeShape(
            shape.id,
            { x: operation === "horizontal" ? -1 : 1, y: operation === "vertical" ? -1 : 1 },
            {
              initialBounds: bounds,
              initialPageTransform,
              initialShape: shape,
              mode: "scale_shape",
              scaleOrigin: scaleOriginPage,
              scaleAxisRotation: 0
            }
          );
        }
      });
      return this;
    }
    /**
     * Stack shape.
     *
     * @example
     *
     * ```ts
     * app.stackShapes('horizontal')
     * app.stackShapes('horizontal', ['box1', 'box2'])
     * app.stackShapes('horizontal', ['box1', 'box2'], 20)
     * ```
     *
     * @param operation - Whether to stack horizontally or vertically.
     * @param ids - The ids of the shapes to stack. Defaults to selected shapes.
     * @param gap - A specific gap to use when stacking.
     * @public
     */
    stackShapes(operation, ids = this.pageState.selectedIds, gap) {
      if (this.isReadOnly)
        return this;
      const shapes = compact(ids.map((id) => this.getShapeById(id))).filter((shape) => {
        if (!shape)
          return false;
        if (TLArrowShapeDef.is(shape)) {
          if (shape.props.start.type === "binding" || shape.props.end.type === "binding") {
            return false;
          }
        }
        return true;
      });
      const len = shapes.length;
      if (gap === void 0 && len < 3 || len < 2)
        return this;
      const pageBounds = Object.fromEntries(
        shapes.map((shape) => [shape.id, this.getPageBounds(shape)])
      );
      let val;
      let min2;
      let max;
      let dim;
      if (operation === "horizontal") {
        val = "x";
        min2 = "minX";
        max = "maxX";
        dim = "width";
      } else {
        val = "y";
        min2 = "minY";
        max = "maxY";
        dim = "height";
      }
      let shapeGap;
      if (gap === void 0) {
        const gaps = [];
        shapes.sort((a3, b3) => pageBounds[a3.id][min2] - pageBounds[b3.id][min2]);
        for (let i3 = 0; i3 < len - 1; i3++) {
          const shape = shapes[i3];
          const nextShape = shapes[i3 + 1];
          const bounds = pageBounds[shape.id];
          const nextBounds = pageBounds[nextShape.id];
          const gap2 = nextBounds[min2] - bounds[max];
          const current = gaps.find((g3) => g3.gap === gap2);
          if (current) {
            current.count++;
          } else {
            gaps.push({ gap: gap2, count: 1 });
          }
        }
        let maxCount = 0;
        gaps.forEach((g3) => {
          if (g3.count > maxCount) {
            maxCount = g3.count;
            shapeGap = g3.gap;
          }
        });
        if (maxCount === 1) {
          shapeGap = Math.max(0, gaps.reduce((a3, c3) => a3 + c3.gap * c3.count, 0) / (len - 1));
        }
      } else {
        shapeGap = gap;
      }
      const changes = [];
      let v3 = pageBounds[shapes[0].id][max];
      shapes.forEach((shape, i3) => {
        var _a5, _b2;
        if (i3 === 0)
          return;
        const delta = { x: 0, y: 0 };
        delta[val] = v3 + shapeGap - pageBounds[shape.id][val];
        const parent = this.getParentShape(shape);
        const localDelta = parent ? Vec2d.Rot(delta, -this.getPageRotation(parent)) : delta;
        const translateStartChanges = (_b2 = (_a5 = this.getShapeUtil(shape)).onTranslateStart) == null ? void 0 : _b2.call(_a5, shape);
        changes.push(
          translateStartChanges ? __spreadProps(__spreadValues({}, translateStartChanges), {
            [val]: shape[val] + localDelta[val]
          }) : {
            id: shape.id,
            type: shape.type,
            [val]: shape[val] + localDelta[val]
          }
        );
        v3 += pageBounds[shape.id][dim] + shapeGap;
      });
      this.updateShapes(changes);
      return this;
    }
    /**
     * Pack shapes into a grid centered on their current position. Based on potpack
     * (https://github.com/mapbox/potpack)
     *
     * @param ids - The ids of the shapes to pack. Defaults to selected shapes.
     * @param padding - The padding to apply to the packed shapes.
     */
    packShapes(ids = this.pageState.selectedIds, padding = 16) {
      var _a5, _b2;
      if (this.isReadOnly)
        return this;
      if (ids.length < 2)
        return this;
      const shapes = compact(
        ids.map((id) => this.getShapeById(id)).filter((shape2) => {
          if (!shape2)
            return false;
          if (TLArrowShapeDef.is(shape2)) {
            if (shape2.props.start.type === "binding" || shape2.props.end.type === "binding") {
              return false;
            }
          }
          return true;
        })
      );
      const shapePageBounds = {};
      const nextShapePageBounds = {};
      let shape, bounds, area = 0;
      for (let i3 = 0; i3 < shapes.length; i3++) {
        shape = shapes[i3];
        bounds = this.getPageBounds(shape);
        shapePageBounds[shape.id] = bounds;
        nextShapePageBounds[shape.id] = bounds.clone();
        area += bounds.width * bounds.height;
      }
      const commonBounds = Box2d.Common(compact(Object.values(shapePageBounds)));
      const maxWidth = commonBounds.width;
      shapes.sort((a3, b3) => shapePageBounds[b3.id].height - shapePageBounds[a3.id].height);
      const startWidth = Math.max(Math.ceil(Math.sqrt(area / 0.95)), maxWidth);
      const spaces = [new Box2d(commonBounds.x, commonBounds.y, startWidth, Infinity)];
      let width = 0;
      let height = 0;
      let space;
      let last2;
      for (let i3 = 0; i3 < shapes.length; i3++) {
        shape = shapes[i3];
        bounds = nextShapePageBounds[shape.id];
        for (let i4 = spaces.length - 1; i4 >= 0; i4--) {
          space = spaces[i4];
          if (bounds.width > space.width || bounds.height > space.height)
            continue;
          bounds.x = space.x;
          bounds.y = space.y;
          height = Math.max(height, bounds.maxY);
          width = Math.max(width, bounds.maxX);
          if (bounds.width === space.width && bounds.height === space.height) {
            last2 = spaces.pop();
            if (i4 < spaces.length)
              spaces[i4] = last2;
          } else if (bounds.height === space.height) {
            space.x += bounds.width + padding;
            space.width -= bounds.width + padding;
          } else if (bounds.width === space.width) {
            space.y += bounds.height + padding;
            space.height -= bounds.height + padding;
          } else {
            spaces.push(
              new Box2d(
                space.x + (bounds.width + padding),
                space.y,
                space.width - (bounds.width + padding),
                bounds.height
              )
            );
            space.y += bounds.height + padding;
            space.height -= bounds.height + padding;
          }
          break;
        }
      }
      const commonAfter = Box2d.Common(Object.values(nextShapePageBounds));
      const centerDelta = Vec2d.Sub(commonBounds.center, commonAfter.center);
      let nextBounds;
      const changes = [];
      for (let i3 = 0; i3 < shapes.length; i3++) {
        shape = shapes[i3];
        bounds = shapePageBounds[shape.id];
        nextBounds = nextShapePageBounds[shape.id];
        const delta = this.getDeltaInParentSpace(
          shape,
          Vec2d.Sub(nextBounds.point, bounds.point).add(centerDelta)
        );
        const change = {
          id: shape.id,
          type: shape.type,
          x: shape.x + delta.x,
          y: shape.y + delta.y
        };
        const translateStartChange = (_b2 = (_a5 = this.getShapeUtil(shape)).onTranslateStart) == null ? void 0 : _b2.call(_a5, __spreadValues(__spreadValues({}, shape), change));
        if (translateStartChange) {
          changes.push(__spreadValues(__spreadValues({}, change), translateStartChange));
        } else {
          changes.push(change);
        }
      }
      if (changes.length) {
        this.updateShapes(changes);
      }
      return this;
    }
    /**
     * Align shape positions.
     *
     * @example
     *
     * ```ts
     * app.alignShapes('left')
     * app.alignShapes('left', ['box1', 'box2'])
     * ```
     *
     * @param operation - The align operation to apply.
     * @param ids - The ids of the shapes to align. Defaults to selected shapes.
     * @public
     */
    alignShapes(operation, ids = this.pageState.selectedIds) {
      if (this.isReadOnly)
        return this;
      if (ids.length < 2)
        return this;
      const shapes = compact(ids.map((id) => this.getShapeById(id)));
      const shapePageBounds = Object.fromEntries(
        shapes.map((shape) => [shape.id, this.getPageBounds(shape)])
      );
      const commonBounds = Box2d.Common(compact(Object.values(shapePageBounds)));
      const changes = [];
      shapes.forEach((shape) => {
        var _a5, _b2;
        const pageBounds = shapePageBounds[shape.id];
        if (!pageBounds)
          return;
        const delta = { x: 0, y: 0 };
        switch (operation) {
          case "top": {
            delta.y = commonBounds.minY - pageBounds.minY;
            break;
          }
          case "center-vertical": {
            delta.y = commonBounds.midY - pageBounds.minY - pageBounds.height / 2;
            break;
          }
          case "bottom": {
            delta.y = commonBounds.maxY - pageBounds.minY - pageBounds.height;
            break;
          }
          case "left": {
            delta.x = commonBounds.minX - pageBounds.minX;
            break;
          }
          case "center-horizontal": {
            delta.x = commonBounds.midX - pageBounds.minX - pageBounds.width / 2;
            break;
          }
          case "right": {
            delta.x = commonBounds.maxX - pageBounds.minX - pageBounds.width;
            break;
          }
        }
        const parent = this.getParentShape(shape);
        const localDelta = parent ? Vec2d.Rot(delta, -this.getPageRotation(parent)) : delta;
        const translateChanges = (_b2 = (_a5 = this.getShapeUtil(shape)).onTranslateStart) == null ? void 0 : _b2.call(_a5, shape);
        changes.push(
          translateChanges ? __spreadProps(__spreadValues({}, translateChanges), {
            x: shape.x + localDelta.x,
            y: shape.y + localDelta.y
          }) : {
            id: shape.id,
            type: shape.type,
            x: shape.x + localDelta.x,
            y: shape.y + localDelta.y
          }
        );
      });
      this.updateShapes(changes);
      return this;
    }
    /**
     * Distribute shape positions.
     *
     * @example
     *
     * ```ts
     * app.distributeShapes('left')
     * app.distributeShapes('left', ['box1', 'box2'])
     * ```
     *
     * @param operation - Whether to distribute shapes horizontally or vertically.
     * @param ids - The ids of the shapes to distribute. Defaults to selected shapes.
     * @public
     */
    distributeShapes(operation, ids = this.pageState.selectedIds) {
      if (this.isReadOnly)
        return this;
      if (ids.length < 3)
        return this;
      const len = ids.length;
      const shapes = compact(ids.map((id) => this.getShapeById(id)));
      const pageBounds = Object.fromEntries(
        shapes.map((shape) => [shape.id, this.getPageBounds(shape)])
      );
      let val;
      let min2;
      let max;
      let mid;
      let dim;
      if (operation === "horizontal") {
        val = "x";
        min2 = "minX";
        max = "maxX";
        mid = "midX";
        dim = "width";
      } else {
        val = "y";
        min2 = "minY";
        max = "maxY";
        mid = "midY";
        dim = "height";
      }
      const changes = [];
      const first = shapes.sort((a3, b3) => pageBounds[a3.id][min2] - pageBounds[b3.id][min2])[0];
      const last2 = shapes.sort((a3, b3) => pageBounds[b3.id][max] - pageBounds[a3.id][max])[0];
      const midFirst = pageBounds[first.id][mid];
      const step = (pageBounds[last2.id][mid] - midFirst) / (len - 1);
      const v3 = midFirst + step;
      shapes.filter((shape) => shape !== first && shape !== last2).sort((a3, b3) => pageBounds[a3.id][mid] - pageBounds[b3.id][mid]).forEach((shape, i3) => {
        var _a5, _b2;
        const delta = { x: 0, y: 0 };
        delta[val] = v3 + step * i3 - pageBounds[shape.id][dim] / 2 - pageBounds[shape.id][val];
        const parent = this.getParentShape(shape);
        const localDelta = parent ? Vec2d.Rot(delta, -this.getPageRotation(parent)) : delta;
        const translateStartChanges = (_b2 = (_a5 = this.getShapeUtil(shape)).onTranslateStart) == null ? void 0 : _b2.call(_a5, shape);
        changes.push(
          translateStartChanges ? __spreadProps(__spreadValues({}, translateStartChanges), {
            [val]: shape[val] + localDelta[val]
          }) : {
            id: shape.id,
            type: shape.type,
            [val]: shape[val] + localDelta[val]
          }
        );
      });
      this.updateShapes(changes);
      return this;
    }
    /** @internal */
    _resizeUnalignedShape(id, scale, options) {
      const { type } = options.initialShape;
      const shapeScale = new Vec2d(scale.x, scale.y);
      if (Math.abs(scale.x) > Math.abs(scale.y)) {
        shapeScale.x = Math.sign(scale.x) * Math.abs(scale.y);
      } else {
        shapeScale.y = Math.sign(scale.y) * Math.abs(scale.x);
      }
      this.resizeShape(id, shapeScale, {
        initialShape: options.initialShape,
        initialBounds: options.initialBounds
      });
      if (Math.sign(scale.x) * Math.sign(scale.y) < 0) {
        let { rotation } = Matrix2d.Decompose(options.initialPageTransform);
        rotation -= 2 * rotation;
        this.updateShapes([{ id, type, rotation }], true);
      }
      const preScaleShapePageCenter = Matrix2d.applyToPoint(
        options.initialPageTransform,
        options.initialBounds.center
      );
      const postScaleShapePageCenter = this._scalePagePoint(
        preScaleShapePageCenter,
        options.scaleOrigin,
        scale,
        options.scaleAxisRotation
      );
      const currentPageCenter = this.getPageCenterById(id);
      const currentPagePoint = this.getPagePointById(id);
      if (!currentPageCenter || !currentPagePoint)
        return this;
      const pageDelta = Vec2d.Sub(postScaleShapePageCenter, currentPageCenter);
      const postScaleShapePagePoint = Vec2d.Add(currentPagePoint, pageDelta);
      const { x: x3, y: y3 } = this.getPointInParentSpace(id, postScaleShapePagePoint);
      this.updateShapes([{ id, type, x: x3, y: y3 }], true);
      return this;
    }
    /** @internal */
    _scalePagePoint(point2, scaleOrigin, scale, scaleAxisRotation) {
      const relativePoint = Vec2d.RotWith(point2, scaleOrigin, -scaleAxisRotation).sub(scaleOrigin);
      const newRelativePagePoint = Vec2d.MulV(relativePoint, scale);
      const destination = Vec2d.Add(newRelativePagePoint, scaleOrigin).rotWith(
        scaleOrigin,
        scaleAxisRotation
      );
      return destination;
    }
    resizeShape(id, scale, options) {
      var _a5, _b2, _c, _d, _e, _f, _g, _h;
      if (this.isReadOnly)
        return this;
      if (!Number.isFinite(scale.x))
        scale = new Vec2d(1, scale.y);
      if (!Number.isFinite(scale.y))
        scale = new Vec2d(scale.x, 1);
      const initialShape = (_a5 = options == null ? void 0 : options.initialShape) != null ? _a5 : this.getShapeById(id);
      if (!initialShape)
        return this;
      const scaleOrigin = (_c = options == null ? void 0 : options.scaleOrigin) != null ? _c : (_b2 = this.getPageBoundsById(id)) == null ? void 0 : _b2.center;
      if (!scaleOrigin)
        return this;
      const pageRotation = this.getPageRotationById(id);
      if (pageRotation == null)
        return this;
      const scaleAxisRotation = (_d = options == null ? void 0 : options.scaleAxisRotation) != null ? _d : pageRotation;
      const pageTransform = (_e = options == null ? void 0 : options.initialPageTransform) != null ? _e : this.getPageTransformById(id);
      if (!pageTransform)
        return this;
      const initialBounds = (_f = options == null ? void 0 : options.initialBounds) != null ? _f : this.getBoundsById(id);
      if (!initialBounds)
        return this;
      if (!areAnglesCompatible(pageRotation, scaleAxisRotation)) {
        return this._resizeUnalignedShape(id, scale, __spreadProps(__spreadValues({}, options), {
          initialBounds,
          scaleOrigin,
          scaleAxisRotation,
          initialPageTransform: pageTransform,
          initialShape
        }));
      }
      const util = this.getShapeUtil(initialShape);
      if (util.isAspectRatioLocked(initialShape)) {
        if (Math.abs(scale.x) > Math.abs(scale.y)) {
          scale = new Vec2d(scale.x, Math.sign(scale.y) * Math.abs(scale.x));
        } else {
          scale = new Vec2d(Math.sign(scale.x) * Math.abs(scale.y), scale.y);
        }
      }
      if (util.onResize && util.canResize(initialShape)) {
        const newPagePoint = this._scalePagePoint(
          Matrix2d.applyToPoint(pageTransform, new Vec2d(0, 0)),
          scaleOrigin,
          scale,
          scaleAxisRotation
        );
        const newLocalPoint = this.getPointInParentSpace(initialShape.id, newPagePoint);
        const myScale = new Vec2d(scale.x, scale.y);
        const areWidthAndHeightAlignedWithCorrectAxis = approximately(
          (pageRotation - scaleAxisRotation) % Math.PI,
          0
        );
        myScale.x = areWidthAndHeightAlignedWithCorrectAxis ? scale.x : scale.y;
        myScale.y = areWidthAndHeightAlignedWithCorrectAxis ? scale.y : scale.x;
        const initialPagePoint = Matrix2d.applyToPoint(pageTransform, new Vec2d());
        const { x: x3, y: y3 } = this.getPointInParentSpace(initialShape.id, initialPagePoint);
        this.updateShapes(
          [
            __spreadValues({
              id,
              type: initialShape.type,
              x: newLocalPoint.x,
              y: newLocalPoint.y
            }, util.onResize(
              __spreadProps(__spreadValues({}, initialShape), { x: x3, y: y3 }),
              {
                newPoint: newLocalPoint,
                handle: (_g = options == null ? void 0 : options.dragHandle) != null ? _g : "bottom_right",
                // don't set isSingle to true for children
                mode: (_h = options == null ? void 0 : options.mode) != null ? _h : "scale_shape",
                scaleX: myScale.x,
                scaleY: myScale.y,
                initialBounds,
                initialShape
              }
            ))
          ],
          true
        );
      } else {
        const initialPageCenter = Matrix2d.applyToPoint(pageTransform, initialBounds.center);
        const newPageCenter = this._scalePagePoint(
          initialPageCenter,
          scaleOrigin,
          scale,
          scaleAxisRotation
        );
        const initialPageCenterInParentSpace = this.getPointInParentSpace(
          initialShape.id,
          initialPageCenter
        );
        const newPageCenterInParentSpace = this.getPointInParentSpace(initialShape.id, newPageCenter);
        const delta = Vec2d.Sub(newPageCenterInParentSpace, initialPageCenterInParentSpace);
        this.updateShapes(
          [
            {
              id,
              type: initialShape.type,
              x: initialShape.x + delta.x,
              y: initialShape.y + delta.y
            }
          ],
          true
        );
      }
      return this;
    }
    /**
     * Stretch shape sizes and positions to fill their common bounding box.
     *
     * @example
     *
     * ```ts
     * app.stretchShapes('horizontal')
     * app.stretchShapes('horizontal', ['box1', 'box2'])
     * ```
     *
     * @param operation - Whether to stretch shapes horizontally or vertically.
     * @param ids - The ids of the shapes to stretch. Defaults to selected shapes.
     * @public
     */
    stretchShapes(operation, ids = this.pageState.selectedIds) {
      if (this.isReadOnly)
        return this;
      if (ids.length < 2)
        return this;
      const shapes = compact(ids.map((id) => this.getShapeById(id)));
      const shapeBounds = Object.fromEntries(shapes.map((shape) => [shape.id, this.getBounds(shape)]));
      const shapePageBounds = Object.fromEntries(
        shapes.map((shape) => [shape.id, this.getPageBounds(shape)])
      );
      const commonBounds = Box2d.Common(compact(Object.values(shapePageBounds)));
      const changes = [];
      switch (operation) {
        case "vertical": {
          this.batch(() => {
            for (const shape of shapes) {
              const pageRotation = this.getPageRotation(shape);
              if (pageRotation % PI2)
                continue;
              const bounds = shapeBounds[shape.id];
              const pageBounds = shapePageBounds[shape.id];
              const localOffset = this.getDeltaInParentSpace(
                shape,
                new Vec2d(0, commonBounds.minY - pageBounds.minY)
              );
              const { x: x3, y: y3 } = Vec2d.Add(localOffset, shape);
              this.updateShapes([{ id: shape.id, type: shape.type, x: x3, y: y3 }], true);
              const scale = new Vec2d(1, commonBounds.height / pageBounds.height);
              this.resizeShape(shape.id, scale, {
                initialBounds: bounds,
                scaleOrigin: new Vec2d(pageBounds.center.x, commonBounds.minY),
                scaleAxisRotation: 0
              });
            }
          });
          break;
        }
        case "horizontal": {
          this.batch(() => {
            for (const shape of shapes) {
              const bounds = shapeBounds[shape.id];
              const pageBounds = shapePageBounds[shape.id];
              const pageRotation = this.getPageRotation(shape);
              if (pageRotation % PI2)
                continue;
              const localOffset = this.getDeltaInParentSpace(
                shape,
                new Vec2d(commonBounds.minX - pageBounds.minX, 0)
              );
              const { x: x3, y: y3 } = Vec2d.Add(localOffset, shape);
              this.updateShapes([{ id: shape.id, type: shape.type, x: x3, y: y3 }], true);
              const scale = new Vec2d(commonBounds.width / pageBounds.width, 1);
              this.resizeShape(shape.id, scale, {
                initialBounds: bounds,
                scaleOrigin: new Vec2d(commonBounds.minX, pageBounds.center.y),
                scaleAxisRotation: 0
              });
            }
          });
          break;
        }
      }
      this.updateShapes(changes);
      return this;
    }
    /**
     * Reparent shapes to a new parent. This operation preserves the shape's current page positions /
     * rotations.
     *
     * @example
     *
     * ```ts
     * app.reparentShapesById(['box1', 'box2'], 'frame1')
     * ```
     *
     * @param ids - The ids of the shapes to reparent.
     * @param parentId - The id of the new parent shape.
     * @param insertIndex - The index to insert the children.
     * @public
     */
    reparentShapesById(ids, parentId, insertIndex) {
      const changes = [];
      const parentTransform = TLPage.isId(parentId) ? Matrix2d.Identity() : this.getPageTransformById(parentId);
      const parentPageRotation = parentTransform.decompose().rotation;
      let indices = [];
      const sibs = compact(this.getSortedChildIds(parentId).map((id2) => this.getShapeById(id2)));
      if (insertIndex) {
        const sibWithInsertIndex = sibs.find((s3) => s3.index === insertIndex);
        if (sibWithInsertIndex) {
          const sibAbove = sibs[sibs.indexOf(sibWithInsertIndex) + 1];
          if (sibAbove) {
            indices = getIndicesBetween(insertIndex, sibAbove.index, ids.length);
          } else {
            indices = getIndicesAbove(insertIndex, ids.length);
          }
        } else {
          const sibAbove = sibs.sort(sortByIndex2).find((s3) => s3.index > insertIndex);
          if (sibAbove) {
            indices = getIndicesBetween(insertIndex, sibAbove.index, ids.length);
          } else {
            indices = getIndicesAbove(insertIndex, ids.length);
          }
        }
      } else {
        const sib = sibs.length && sibs[sibs.length - 1];
        indices = sib ? getIndicesAbove(sib.index, ids.length) : getIndices(ids.length);
      }
      let id;
      for (let i3 = 0; i3 < ids.length; i3++) {
        id = ids[i3];
        const shape = this.getShapeById(id);
        const pagePoint = this.getPagePointById(id);
        if (!shape || !pagePoint)
          continue;
        const newPoint = Matrix2d.applyToPoint(Matrix2d.Inverse(parentTransform), pagePoint);
        const newRotation = this.getPageRotation(shape) - parentPageRotation;
        changes.push({
          id: shape.id,
          type: shape.type,
          parentId,
          x: newPoint.x,
          y: newPoint.y,
          rotation: newRotation,
          index: indices[i3]
        });
      }
      this.updateShapes(changes);
      return this;
    }
    /**
     * Select one or more shapes.
     *
     * @example
     *
     * ```ts
     * app.select('id1')
     * app.select('id1', 'id2')
     * ```
     *
     * @param ids - The ids to select.
     * @public
     */
    select(...ids) {
      this.setSelectedIds(ids);
      return this;
    }
    /**
     * Remove a shpae from the existing set of selected shapes.
     *
     * @example
     *
     * ```ts
     * app.deselect(shape.id)
     * ```
     *
     * @public
     */
    deselect(...ids) {
      const { selectedIds } = this;
      if (selectedIds.length > 0 && ids.length > 0) {
        this.setSelectedIds(selectedIds.filter((id) => !ids.includes(id)));
      }
      return this;
    }
    /**
     * Select all direct children of the current page.
     *
     * @example
     *
     * ```ts
     * app.selectAll()
     * ```
     *
     * @public
     */
    selectAll() {
      const ids = this.getSortedChildIds(this.currentPageId);
      if (ids.length <= 0)
        return this;
      this.setSelectedIds(ids);
      return this;
    }
    getShapesAndDescendantsInOrder(ids) {
      const idsToInclude = [];
      const visitedIds = /* @__PURE__ */ new Set();
      const idsToCheck = [...ids];
      while (idsToCheck.length > 0) {
        const id = idsToCheck.pop();
        if (!id)
          break;
        if (visitedIds.has(id))
          continue;
        idsToInclude.push(id);
        this.getSortedChildIds(id).forEach((id2) => {
          idsToCheck.push(id2);
        });
      }
      const shapes = idsToInclude.map((s3) => this.getShapeById(s3)).filter((s3) => s3.type !== "group");
      const { sortedShapesArray } = this;
      shapes.sort((a3, b3) => sortedShapesArray.indexOf(a3) - sortedShapesArray.indexOf(b3));
      return shapes;
    }
    /**
     * Clear the selection.
     *
     * @example
     *
     * ```ts
     * app.selectNone()
     * ```
     *
     * @public
     */
    selectNone() {
      if (this.selectedIds.length > 0) {
        this.setSelectedIds([]);
      }
      return this;
    }
    /**
     * Set the current page.
     *
     * @example
     *
     * ```ts
     * app.setCurrentPageId('page1')
     * ```
     *
     * @param pageId - The id of the page to set as the current page.
     * @param options - Options for setting the current page.
     * @public
     */
    setCurrentPageId(pageId, { stopFollowing = true } = {}) {
      this._setCurrentPageId(pageId, { stopFollowing });
      return this;
    }
    /** Set the current user tab state */
    updateInstanceState(partial, ephemeral = false, squashing = false) {
      this._updateInstanceState(partial, ephemeral, squashing);
      return this;
    }
    get hoveredId() {
      return this.pageState.hoveredId;
    }
    get hoveredShape() {
      var _a5;
      if (!this.hoveredId)
        return null;
      return (_a5 = this.getShapeById(this.hoveredId)) != null ? _a5 : null;
    }
    /**
     * Set the current hovered shape.
     *
     * @example
     *
     * ```ts
     * app.setHoveredId('box1')
     * app.setHoveredId() // Clears the hovered shape.
     * ```
     *
     * @param id - The id of the page to set as the current page
     * @public
     */
    setHoveredId(id = null) {
      if (id === this.pageState.hoveredId)
        return this;
      this.setInstancePageState({ hoveredId: id }, true);
      return this;
    }
    /**
     * Set the current erasing shapes.
     *
     * @example
     *
     * ```ts
     * app.setErasingIds(['box1', 'box2'])
     * app.setErasingIds() // Clears the erasing set
     * ```
     *
     * @param ids - The ids of shapes to set as erasing.
     * @public
     */
    setErasingIds(ids = []) {
      const erasingIds = this.erasingIdsSet;
      if (ids.length === erasingIds.size && ids.every((id) => erasingIds.has(id)))
        return this;
      this.setInstancePageState({ erasingIds: ids }, true);
      return this;
    }
    /**
     * Set the current cursor.
     *
     * @example
     *
     * ```ts
     * app.setCursor({ type: 'default' })
     * app.setCursor({ type: 'default', rotation: Math.PI / 2, color: 'red' })
     * ```
     *
     * @param cursor - A partial of the cursor object.
     * @public
     */
    setCursor(cursor) {
      const current = this.cursor;
      const next = __spreadValues(__spreadProps(__spreadValues({}, current), {
        rotation: 0
      }), cursor);
      if (!(current.type === next.type && current.rotation === next.rotation && current.color === next.color)) {
        this.updateInstanceState({ cursor: next }, true);
      }
      return this;
    }
    /**
     * Set the current scribble.
     *
     * @example
     *
     * ```ts
     * app.setScribble(nextScribble)
     * app.setScribble() // clears the scribble
     * ```
     *
     * @param scribble - The new scribble object.
     * @public
     */
    setScribble(scribble = null) {
      this.updateInstanceState({ scribble }, true);
      return this;
    }
    /**
     * Set the current brush.
     *
     * @example
     *
     * ```ts
     * app.setBrush({ x: 0, y: 0, w: 100, h: 100 })
     * app.setBrush() // Clears the brush
     * ```
     *
     * @param brush - The brush box model to set, or null for no brush model.
     * @public
     */
    setBrush(brush = null) {
      if (!brush && !this.brush)
        return this;
      this.updateInstanceState({ brush }, true);
      return this;
    }
    /**
     * Set the current zoom brush.
     *
     * @example
     *
     * ```ts
     * app.setZoomBrush({ x: 0, y: 0, w: 100, h: 100 })
     * app.setZoomBrush() // Clears the zoom
     * ```
     *
     * @param zoomBrush - The zoom box model to set, or null for no zoom model.
     * @public
     */
    setZoomBrush(zoomBrush = null) {
      if (!zoomBrush && !this.zoomBrush)
        return this;
      this.updateInstanceState({ zoomBrush }, true);
      return this;
    }
    /**
     * Rotate shapes by a delta in radians.
     *
     * @example
     *
     * ```ts
     * app.rotateShapesBy(['box1', 'box2'], Math.PI)
     * app.rotateShapesBy(['box1', 'box2'], Math.PI / 2)
     * ```
     *
     * @param ids - The ids of the shapes to move.
     * @param delta - The delta in radians to apply to the selection rotation.
     */
    rotateShapesBy(ids, delta) {
      if (ids.length <= 0)
        return this;
      const snapshot = getRotationSnapshot({ app: this });
      applyRotationToSnapshotShapes({ delta, snapshot, app: this, stage: "one-off" });
      return this;
    }
    /**
     * Move shapes by a delta.
     *
     * @example
     *
     * ```ts
     * app.nudgeShapes(['box1', 'box2'], { x: 0, y: 1 })
     * app.nudgeShapes(['box1', 'box2'], { x: 0, y: 1 }, true)
     * ```
     *
     * @param ids - The ids of the shapes to move.
     * @param direction - The direction in which to move the shapes.
     * @param major - Whether this is a major nudge, e.g. a shift + arrow nudge.
     */
    nudgeShapes(ids, direction, major = false, ephemeral = false) {
      var _a5, _b2;
      if (ids.length <= 0)
        return this;
      const step = this.isGridMode ? major ? this.gridSize * GRID_INCREMENT : this.gridSize : major ? MAJOR_NUDGE_FACTOR : MINOR_NUDGE_FACTOR;
      const steppedDelta = Vec2d.Mul(direction, step);
      const changes = [];
      for (const id of ids) {
        const shape = this.getShapeById(id);
        if (!shape) {
          throw Error(`Could not find a shape with the id ${id}.`);
        }
        const localDelta = this.getDeltaInParentSpace(shape, steppedDelta);
        const translateStartChanges = (_b2 = (_a5 = this.getShapeUtil(shape)).onTranslateStart) == null ? void 0 : _b2.call(_a5, shape);
        changes.push(
          translateStartChanges ? __spreadProps(__spreadValues({}, translateStartChanges), {
            x: shape.x + localDelta.x,
            y: shape.y + localDelta.y
          }) : {
            id,
            x: shape.x + localDelta.x,
            y: shape.y + localDelta.y,
            type: shape.type
          }
        );
      }
      this.updateShapes(changes, ephemeral);
      return this;
    }
    /**
     * Duplicate shapes.
     *
     * @example
     *
     * ```ts
     * app.duplicateShapes()
     * app.duplicateShapes(['id1', 'id2'])
     * app.duplicateShapes(['id1', 'id2'], { x: 8, y: 8 })
     * ```
     *
     * @param ids - The ids of the shapes to duplicate. Defaults to the ids of the selected shapes.
     * @param offset - The offset (in pixels) to apply to the duplicated shapes.
     * @public
     */
    duplicateShapes(ids = this.selectedIds, offset) {
      if (ids.length <= 0)
        return this;
      const initialIds = new Set(ids);
      const idsToCreate = [];
      const idsToCheck = [...ids];
      while (idsToCheck.length > 0) {
        const id = idsToCheck.pop();
        if (!id)
          break;
        idsToCreate.push(id);
        this.getSortedChildIds(id).forEach((childId) => idsToCheck.push(childId));
      }
      idsToCreate.reverse();
      const idsMap = new Map(idsToCreate.map((id) => [id, this.createShapeId()]));
      const shapesToCreate = compact(
        idsToCreate.map((id) => {
          var _a5;
          const shape = this.getShapeById(id);
          if (!shape) {
            return null;
          }
          const createId = idsMap.get(id);
          let ox = 0;
          let oy = 0;
          if (offset && initialIds.has(id)) {
            const parentTransform = this.getParentTransform(shape);
            const vec = new Vec2d(offset.x, offset.y).rot(
              -Matrix2d.Decompose(parentTransform).rotation
            );
            ox = vec.x;
            oy = vec.y;
          }
          const parentId = (_a5 = shape.parentId) != null ? _a5 : this.currentPageId;
          const siblings = this.getSortedChildIds(parentId);
          const currentIndex = siblings.indexOf(shape.id);
          const siblingAboveId = siblings[currentIndex + 1];
          const siblingAbove = siblingAboveId ? this.getShapeById(siblingAboveId) : null;
          const index2 = siblingAbove ? getIndexBetween(shape.index, siblingAbove.index) : getIndexAbove(shape.index);
          let newShape = deepCopy(shape);
          if (TLArrowShapeDef.is(shape) && TLArrowShapeDef.is(newShape)) {
            const info = this.getShapeUtilByDef(TLArrowShapeDef).getArrowInfo(shape);
            let newStartShapeId = void 0;
            let newEndShapeId = void 0;
            if (shape.props.start.type === "binding") {
              newStartShapeId = idsMap.get(shape.props.start.boundShapeId);
              if (!newStartShapeId) {
                if (info == null ? void 0 : info.isValid) {
                  const { x: x3, y: y3 } = info.start.point;
                  newShape.props.start = {
                    type: "point",
                    x: x3,
                    y: y3
                  };
                } else {
                  const { start } = getArrowTerminalsInArrowSpace(this, shape);
                  newShape.props.start = {
                    type: "point",
                    x: start.x,
                    y: start.y
                  };
                }
              }
            }
            if (shape.props.end.type === "binding") {
              newEndShapeId = idsMap.get(shape.props.end.boundShapeId);
              if (!newEndShapeId) {
                if (info == null ? void 0 : info.isValid) {
                  const { x: x3, y: y3 } = info.end.point;
                  newShape.props.end = {
                    type: "point",
                    x: x3,
                    y: y3
                  };
                } else {
                  const { end } = getArrowTerminalsInArrowSpace(this, shape);
                  newShape.props.start = {
                    type: "point",
                    x: end.x,
                    y: end.y
                  };
                }
              }
            }
            const infoAfter = getIsArrowStraight(newShape) ? getStraightArrowInfo(this, newShape) : getCurvedArrowInfo(this, newShape);
            if ((info == null ? void 0 : info.isValid) && (infoAfter == null ? void 0 : infoAfter.isValid) && !getIsArrowStraight(shape)) {
              const mpA = Vec2d.Med(info.start.handle, info.end.handle);
              const distA = Vec2d.Dist(info.middle, mpA);
              const distB = Vec2d.Dist(infoAfter.middle, mpA);
              if (newShape.props.bend < 0) {
                newShape.props.bend += distB - distA;
              } else {
                newShape.props.bend -= distB - distA;
              }
            }
            if (newShape.props.start.type === "binding" && newStartShapeId) {
              newShape.props.start.boundShapeId = newStartShapeId;
            }
            if (newShape.props.end.type === "binding" && newEndShapeId) {
              newShape.props.end.boundShapeId = newEndShapeId;
            }
          }
          newShape = __spreadProps(__spreadValues({}, newShape), { id: createId, x: shape.x + ox, y: shape.y + oy, index: index2 });
          return newShape;
        })
      );
      shapesToCreate.forEach((shape) => {
        if (isShapeId(shape.parentId)) {
          if (idsMap.has(shape.parentId)) {
            shape.parentId = idsMap.get(shape.parentId);
          }
        }
      });
      this.history.batch(() => {
        const maxShapesReached = shapesToCreate.length + this.shapeIds.size > MAX_SHAPES_PER_PAGE;
        if (maxShapesReached) {
          alertMaxShapes(this);
        }
        const newShapes = maxShapesReached ? shapesToCreate.slice(0, MAX_SHAPES_PER_PAGE - this.shapeIds.size) : shapesToCreate;
        const ids2 = newShapes.map((s3) => s3.id);
        this.createShapes(newShapes);
        this.setSelectedIds(ids2);
        if (offset !== void 0) {
          const { viewportPageBounds, selectedPageBounds } = this;
          if (selectedPageBounds && !viewportPageBounds.contains(selectedPageBounds)) {
            this.centerOnPoint(selectedPageBounds.center.x, selectedPageBounds.center.y, {
              duration: ANIMATION_MEDIUM_MS
            });
          }
        }
      });
      return this;
    }
    /**
     * Set the current props (generally styles).
     *
     * @example
     *
     * ```ts
     * app.setProp('color', 'red')
     * app.setProp('color', 'red', true)
     * ```
     *
     * @param key - The key to set.
     * @param value - The value to set.
     * @param ephemeral - Whether the style is ephemeral. Defaults to false.
     * @public
     */
    setProp(key, value, ephemeral = false, squashing = false) {
      const children = [];
      const getChildProp = (id) => {
        const childIds = this.getSortedChildIds(id);
        for (const childId of childIds) {
          const childShape = this.getShapeById(childId);
          if ((childShape == null ? void 0 : childShape.type) === "group") {
            getChildProp(childShape.id);
          }
          children.push(childShape);
        }
      };
      this.history.batch(() => {
        this.updateInstanceState(
          {
            propsForNextShape: setPropsForNextShape(this.instanceState.propsForNextShape, {
              [key]: value
            })
          },
          ephemeral,
          squashing
        );
        if (this.isIn("select")) {
          const {
            pageState: { selectedIds }
          } = this;
          if (selectedIds.length > 0) {
            const shapes = compact(
              selectedIds.map((id) => {
                const shape = this.getShapeById(id);
                if ((shape == null ? void 0 : shape.type) === "group") {
                  const childIds = this.getSortedChildIds(shape.id);
                  for (const childId of childIds) {
                    const childShape = this.getShapeById(childId);
                    if ((childShape == null ? void 0 : childShape.type) === "group") {
                      getChildProp(childShape.id);
                    }
                    children.push(childShape);
                  }
                  return children;
                } else {
                  return shape;
                }
              })
            ).flat().filter(
              (shape) => shape.props[key] !== void 0 && (shape == null ? void 0 : shape.type) !== "group"
            );
            this.updateShapes(
              shapes.map((shape) => {
                const props = __spreadProps(__spreadValues({}, shape.props), { [key]: value });
                if (key === "color" && "labelColor" in props) {
                  props.labelColor = "black";
                }
                return {
                  id: shape.id,
                  type: shape.type,
                  props
                };
              }),
              ephemeral
            );
            if (key !== "color" && key !== "opacity") {
              const changes = [];
              for (const shape of shapes) {
                const currentShape = this.getShapeById(shape.id);
                if (!currentShape)
                  continue;
                const util = this.getShapeUtil(currentShape);
                const boundsA = util.bounds(shape);
                const boundsB = util.bounds(currentShape);
                const change = { id: shape.id, type: shape.type };
                let didChange = false;
                if (boundsA.width !== boundsB.width) {
                  didChange = true;
                  if (TLTextShapeDef.is(shape)) {
                    switch (shape.props.align) {
                      case "middle": {
                        change.x = currentShape.x + (boundsA.width - boundsB.width) / 2;
                        break;
                      }
                      case "end": {
                        change.x = currentShape.x + boundsA.width - boundsB.width;
                        break;
                      }
                    }
                  } else {
                    change.x = currentShape.x + (boundsA.width - boundsB.width) / 2;
                  }
                }
                if (boundsA.height !== boundsB.height) {
                  didChange = true;
                  change.y = currentShape.y + (boundsA.height - boundsB.height) / 2;
                }
                if (didChange) {
                  changes.push(change);
                }
              }
              if (changes.length) {
                this.updateShapes(changes, ephemeral);
              }
            }
          }
        }
        this.updateInstanceState(
          {
            propsForNextShape: setPropsForNextShape(this.instanceState.propsForNextShape, {
              [key]: value
            })
          },
          ephemeral,
          squashing
        );
      });
      return this;
    }
    /** @internal */
    _setCamera(x3, y3, z2 = this.camera.z) {
      const currentCamera = this.camera;
      if (currentCamera.x === x3 && currentCamera.y === y3 && currentCamera.z === z2)
        return this;
      const nextCamera = __spreadProps(__spreadValues({}, currentCamera), { x: x3, y: y3, z: z2 });
      this.batch(() => {
        var _a5;
        this.store.put([nextCamera]);
        const { currentScreenPoint } = this.inputs;
        this.dispatch({
          type: "pointer",
          target: "canvas",
          name: "pointer_move",
          point: currentScreenPoint,
          pointerId: 0,
          ctrlKey: this.inputs.ctrlKey,
          altKey: this.inputs.altKey,
          shiftKey: this.inputs.shiftKey,
          button: 0,
          isPen: (_a5 = this.isPenMode) != null ? _a5 : false
        });
        this.updateUserPresence({
          viewportPageBounds: this.viewportPageBounds.toJson()
        });
        this._cameraManager.tick();
      });
      return this;
    }
    /**
     * Set the current camera.
     *
     * @example
     *
     * ```ts
     * app.setCamera(0, 0)
     * app.setCamera(0, 0, 1)
     * ```
     *
     * @param x - The camera's x position.
     * @param y - The camera's y position.
     * @param z - The camera's z position. Defaults to the current zoom.
     * @param options - Options for the camera change.
     * @public
     */
    setCamera(x3, y3, z2 = this.camera.z, { stopFollowing = true } = {}) {
      this.stopCameraAnimation();
      if (stopFollowing && this.instanceState.followingUserId) {
        this.stopFollowingUser();
      }
      x3 = Number.isNaN(x3) ? 0 : x3;
      y3 = Number.isNaN(y3) ? 0 : y3;
      z2 = Number.isNaN(z2) ? 1 : z2;
      this._setCamera(x3, y3, z2);
      return this;
    }
    /**
     * Animate the camera.
     *
     * @example
     *
     * ```ts
     * app.animateCamera(0, 0)
     * app.animateCamera(0, 0, 1)
     * app.animateCamera(0, 0, 1, { duration: 1000, easing: (t) => t * t })
     * ```
     *
     * @param x - The camera's x position.
     * @param y - The camera's y position.
     * @param z - The camera's z position. Defaults to the current zoom.
     * @param opts - Options for the animation.
     * @public
     */
    animateCamera(x3, y3, z2 = this.camera.z, opts = DEFAULT_ANIMATION_OPTIONS) {
      x3 = Number.isNaN(x3) ? 0 : x3;
      y3 = Number.isNaN(y3) ? 0 : y3;
      z2 = Number.isNaN(z2) ? 1 : z2;
      const { width, height } = this.viewportScreenBounds;
      const w3 = width / z2;
      const h3 = height / z2;
      const targetViewport = new Box2d(-x3, -y3, w3, h3);
      return this._animateToViewport(targetViewport, opts);
    }
    /**
     * Center the camera on a point (in page space).
     *
     * @example
     *
     * ```ts
     * app.centerOnPoint(100, 100)
     * ```
     *
     * @param x - The x position of the point.
     * @param y - The y position of the point.
     * @param opts - The options for an animation.
     * @public
     */
    centerOnPoint(x3, y3, opts) {
      if (!this.canMoveCamera)
        return this;
      const {
        viewportPageBounds: { width: pw, height: ph },
        camera
      } = this;
      if (opts == null ? void 0 : opts.duration) {
        this.animateCamera(-(x3 - pw / 2), -(y3 - ph / 2), camera.z, opts);
      } else {
        this.setCamera(-(x3 - pw / 2), -(y3 - ph / 2), camera.z);
      }
      return this;
    }
    /**
     * Move the camera to the nearest content.
     *
     * @public
     */
    zoomToContent() {
      var _a5;
      const bounds = (_a5 = this.selectedPageBounds) != null ? _a5 : this.allShapesCommonBounds;
      if (bounds) {
        this.zoomToBounds(
          bounds.minX,
          bounds.minY,
          bounds.width,
          bounds.height,
          Math.min(1, this.zoomLevel),
          { duration: 220 }
        );
      }
      return this;
    }
    /**
     * Zoom the camera to fit the current page's content in the viewport.
     *
     * @example
     *
     * ```ts
     * app.zoomToFit()
     * ```
     *
     * @public
     */
    zoomToFit(opts) {
      if (!this.canMoveCamera)
        return this;
      const ids = [...this.shapeIds];
      if (ids.length <= 0)
        return this;
      const pageBounds = Box2d.Common(compact(ids.map((id) => this.getPageBoundsById(id))));
      this.zoomToBounds(
        pageBounds.minX,
        pageBounds.minY,
        pageBounds.width,
        pageBounds.height,
        void 0,
        opts
      );
      return this;
    }
    /**
     * Set the zoom back to 100%.
     *
     * @example
     *
     * ```ts
     * app.resetZoom()
     * ```
     *
     * @param opts - The options for an animation.
     * @public
     */
    resetZoom(point2 = this.viewportScreenCenter, opts) {
      if (!this.canMoveCamera)
        return this;
      const { x: cx, y: cy, z: cz } = this.camera;
      const { x: x3, y: y3 } = point2;
      if (opts == null ? void 0 : opts.duration) {
        this.animateCamera(cx + (x3 / 1 - x3) - (x3 / cz - x3), cy + (y3 / 1 - y3) - (y3 / cz - y3), 1, opts);
      } else {
        this.setCamera(cx + (x3 / 1 - x3) - (x3 / cz - x3), cy + (y3 / 1 - y3) - (y3 / cz - y3), 1);
      }
      return this;
    }
    /**
     * Zoom the camera in.
     *
     * @example
     *
     * ```ts
     * app.zoomIn()
     * app.zoomIn(app.viewportScreenCenter, { duration: 120 })
     * app.zoomIn(app.inputs.currentScreenPoint, { duration: 120 })
     * ```
     *
     * @param opts - The options for an animation.
     * @public
     */
    zoomIn(point2 = this.viewportScreenCenter, opts) {
      if (!this.canMoveCamera)
        return this;
      const { x: cx, y: cy, z: cz } = this.camera;
      let zoom = MAX_ZOOM;
      for (let i3 = 1; i3 < ZOOMS.length; i3++) {
        const z1 = ZOOMS[i3 - 1];
        const z2 = ZOOMS[i3];
        if (z2 - cz <= (z2 - z1) / 2)
          continue;
        zoom = z2;
        break;
      }
      const { x: x3, y: y3 } = point2;
      if (opts == null ? void 0 : opts.duration) {
        this.animateCamera(
          cx + (x3 / zoom - x3) - (x3 / cz - x3),
          cy + (y3 / zoom - y3) - (y3 / cz - y3),
          zoom,
          opts
        );
      } else {
        this.setCamera(cx + (x3 / zoom - x3) - (x3 / cz - x3), cy + (y3 / zoom - y3) - (y3 / cz - y3), zoom);
      }
      return this;
    }
    /**
     * Zoom the camera out.
     *
     * @example
     *
     * ```ts
     * app.zoomOut()
     * app.zoomOut(app.viewportScreenCenter, { duration: 120 })
     * app.zoomOut(app.inputs.currentScreenPoint, { duration: 120 })
     * ```
     *
     * @param opts - The options for an animation.
     * @public
     */
    zoomOut(point2 = this.viewportScreenCenter, opts) {
      if (!this.canMoveCamera)
        return this;
      const { x: cx, y: cy, z: cz } = this.camera;
      let zoom = MIN_ZOOM;
      for (let i3 = ZOOMS.length - 1; i3 > 0; i3--) {
        const z1 = ZOOMS[i3 - 1];
        const z2 = ZOOMS[i3];
        if (z2 - cz >= (z2 - z1) / 2)
          continue;
        zoom = z1;
        break;
      }
      const { x: x3, y: y3 } = point2;
      if (opts == null ? void 0 : opts.duration) {
        this.animateCamera(
          cx + (x3 / zoom - x3) - (x3 / cz - x3),
          cy + (y3 / zoom - y3) - (y3 / cz - y3),
          zoom,
          opts
        );
      } else {
        this.setCamera(cx + (x3 / zoom - x3) - (x3 / cz - x3), cy + (y3 / zoom - y3) - (y3 / cz - y3), zoom);
      }
      return this;
    }
    /**
     * Zoom the camera to fit the current selection in the viewport.
     *
     * @example
     *
     * ```ts
     * app.zoomToSelection()
     * ```
     *
     * @param opts - The options for an animation.
     * @public
     */
    zoomToSelection(opts) {
      if (!this.canMoveCamera)
        return this;
      const ids = this.selectedIds;
      if (ids.length <= 0)
        return this;
      const selectedBounds = Box2d.Common(compact(ids.map((id) => this.getPageBoundsById(id))));
      this.zoomToBounds(
        selectedBounds.minX,
        selectedBounds.minY,
        selectedBounds.width,
        selectedBounds.height,
        Math.max(1, this.camera.z),
        opts
      );
      return this;
    }
    /**
     * Pan or pan/zoom the selected ids into view. This method tries to not change the zoom if
     * possible.
     *
     * @param ids - The ids of the shapes to pan and zoom into view.
     * @param opts - The options for an animation.
     * @public
     */
    panZoomIntoView(ids, opts) {
      if (!this.canMoveCamera)
        return this;
      if (ids.length <= 0)
        return this;
      const selectedBounds = Box2d.Common(compact(ids.map((id) => this.getPageBoundsById(id))));
      const { viewportPageBounds } = this;
      if (viewportPageBounds.h < selectedBounds.h || viewportPageBounds.w < selectedBounds.w) {
        this.zoomToBounds(
          selectedBounds.minX,
          selectedBounds.minY,
          selectedBounds.width,
          selectedBounds.height,
          this.camera.z,
          opts
        );
        return this;
      } else {
        const bufferOffsets = this._activeAreaManager.offsets.value;
        const pageTop = viewportPageBounds.y + bufferOffsets.top;
        const pageRight = viewportPageBounds.maxY - bufferOffsets.right;
        const pageBottom = viewportPageBounds.maxY - bufferOffsets.bottom;
        const pageLeft = viewportPageBounds.x + bufferOffsets.left;
        const selectedTop = selectedBounds.y;
        const selectedRight = selectedBounds.maxX;
        const selectedBottom = selectedBounds.maxY;
        const selectedLeft = selectedBounds.x;
        let offsetX = 0;
        let offsetY = 0;
        if (pageBottom < selectedBottom) {
          offsetY = pageBottom - selectedBottom;
        } else if (pageTop > selectedTop) {
          offsetY = pageTop - selectedTop;
        } else {
        }
        if (pageRight < selectedRight) {
          offsetX = pageRight - selectedRight;
        } else if (pageLeft > selectedLeft) {
          offsetX = pageLeft - selectedLeft;
        } else {
        }
        const { camera } = this;
        if (opts == null ? void 0 : opts.duration) {
          this.animateCamera(camera.x + offsetX, camera.y + offsetY, camera.z, opts);
        } else {
          this.setCamera(camera.x + offsetX, camera.y + offsetY, camera.z);
        }
      }
      return this;
    }
    /**
     * Zoom the camera to fit a bounding box (in page space).
     *
     * @example
     *
     * ```ts
     * app.zoomToBounds(0, 0, 100, 100)
     * ```
     *
     * @param x - The bounding box's x position.
     * @param y - The bounding box's y position.
     * @param width - The bounding box's width.
     * @param height - The bounding box's height.
     * @param targetZoom - The desired zoom level. Defaults to 0.1.
     * @public
     */
    zoomToBounds(x3, y3, width, height, targetZoom, opts) {
      if (!this.canMoveCamera)
        return this;
      const { viewportScreenBounds } = this;
      const inset = Math.min(256, viewportScreenBounds.width * 0.28);
      let zoom = clamp(
        Math.min(
          (viewportScreenBounds.width - inset) / width,
          (viewportScreenBounds.height - inset) / height
        ),
        MIN_ZOOM,
        MAX_ZOOM
      );
      if (targetZoom !== void 0) {
        zoom = Math.min(targetZoom, zoom);
      }
      if (opts == null ? void 0 : opts.duration) {
        this.animateCamera(
          -x3 + (viewportScreenBounds.width - width * zoom) / 2 / zoom,
          -y3 + (viewportScreenBounds.height - height * zoom) / 2 / zoom,
          zoom,
          opts
        );
      } else {
        this.setCamera(
          -x3 + (viewportScreenBounds.width - width * zoom) / 2 / zoom,
          -y3 + (viewportScreenBounds.height - height * zoom) / 2 / zoom,
          zoom
        );
      }
      return this;
    }
    /**
     * Pan the camera.
     *
     * @example
     *
     * ```ts
     * app.pan(100, 100)
     * app.pan(100, 100, { duration: 1000 })
     * ```
     *
     * @param dx - The amount to pan on the x axis.
     * @param dy - The amount to pan on the y axis.
     * @param opts - The animation options
     */
    pan(dx, dy, opts) {
      var _a5;
      if (!this.canMoveCamera)
        return this;
      const { camera } = this;
      const { x: cx, y: cy, z: cz } = camera;
      const d3 = new Vec2d(dx, dy).div(cz);
      if ((_a5 = opts == null ? void 0 : opts.duration) != null ? _a5 : 0 > 0) {
        return this.animateCamera(cx + d3.x, cy + d3.y, cz, opts);
      } else {
        this.setCamera(cx + d3.x, cy + d3.y, cz);
      }
      return this;
    }
    /**
     * Stop the current camera animation, if any.
     *
     * @public
     */
    stopCameraAnimation() {
      this.emit("stop-camera-animation");
      return this;
    }
    /** @internal */
    _animateViewport(ms) {
      if (!this._viewportAnimation)
        return;
      const cancel = () => {
        this.removeListener("tick", this._animateViewport);
        this.removeListener("stop-camera-animation", cancel);
        this._viewportAnimation = null;
      };
      this.once("stop-camera-animation", cancel);
      this._viewportAnimation.elapsed += ms;
      const { elapsed, easing, duration, start, end } = this._viewportAnimation;
      if (elapsed > duration) {
        const z3 = this.viewportScreenBounds.width / end.width;
        const x4 = -end.x;
        const y4 = -end.y;
        this._setCamera(x4, y4, z3);
        cancel();
        return;
      }
      const remaining = duration - elapsed;
      const t4 = easing(1 - remaining / duration);
      const left = start.minX + (end.minX - start.minX) * t4;
      const top = start.minY + (end.minY - start.minY) * t4;
      const right = start.maxX + (end.maxX - start.maxX) * t4;
      const bottom = start.maxY + (end.maxY - start.maxY) * t4;
      const easedViewport = new Box2d(left, top, right - left, bottom - top);
      const z2 = this.viewportScreenBounds.width / easedViewport.width;
      const x3 = -easedViewport.x;
      const y3 = -easedViewport.y;
      this._setCamera(x3, y3, z2);
    }
    /** @internal */
    _animateToViewport(targetViewportPage, opts = {}) {
      const { duration = 0, easing = EASINGS.easeInOutCubic } = opts;
      const startViewport = this.viewportPageBounds.clone();
      this.stopCameraAnimation();
      if (this.instanceState.followingUserId) {
        this.stopFollowingUser();
      }
      this._viewportAnimation = {
        elapsed: 0,
        duration,
        easing,
        start: startViewport,
        end: targetViewportPage
      };
      this.addListener("tick", this._animateViewport);
      return this;
    }
    slideCamera(opts = {}) {
      if (!this.canMoveCamera)
        return this;
      const { speed, direction, friction, speedThreshold = 0.01 } = opts;
      let currentSpeed = speed;
      this.stopCameraAnimation();
      const cancel = () => {
        this.removeListener("tick", moveCamera);
        this.removeListener("stop-camera-animation", cancel);
      };
      this.once("stop-camera-animation", cancel);
      const moveCamera = (elapsed) => {
        const { x: cx, y: cy, z: cz } = this.camera;
        const movementVec = direction.clone().mul(currentSpeed * elapsed / cz);
        currentSpeed *= 1 - friction;
        if (currentSpeed < speedThreshold) {
          cancel();
        } else {
          this._setCamera(cx + movementVec.x, cy + movementVec.y, cz);
        }
      };
      this.addListener("tick", moveCamera);
      return this;
    }
    animateToShape(shapeId, opts = DEFAULT_ANIMATION_OPTIONS) {
      if (!this.canMoveCamera)
        return this;
      const activeArea = getActiveAreaScreenSpace(this);
      const viewportAspectRatio = activeArea.width / activeArea.height;
      const shapePageBounds = this.getPageBoundsById(shapeId);
      if (!shapePageBounds)
        return this;
      const shapeAspectRatio = shapePageBounds.width / shapePageBounds.height;
      const targetViewportPage = shapePageBounds.clone();
      const z2 = shapePageBounds.width / activeArea.width;
      targetViewportPage.width += (activeArea.left + activeArea.right) * z2;
      targetViewportPage.height += (activeArea.top + activeArea.bottom) * z2;
      targetViewportPage.x -= activeArea.left * z2;
      targetViewportPage.y -= activeArea.top * z2;
      if (shapeAspectRatio > viewportAspectRatio) {
        targetViewportPage.height = shapePageBounds.width / viewportAspectRatio;
        targetViewportPage.y -= (targetViewportPage.height - shapePageBounds.height) / 2;
      } else {
        targetViewportPage.width = shapePageBounds.height * viewportAspectRatio;
        targetViewportPage.x -= (targetViewportPage.width - shapePageBounds.width) / 2;
      }
      return this._animateToViewport(targetViewportPage, opts);
    }
    /**
     * Blur the app, cancelling any interaction state.
     *
     * @example
     *
     * ```ts
     * app.blur()
     * ```
     *
     * @public
     */
    blur() {
      this.complete();
      this.getContainer().blur();
      this._isFocused.set(false);
      return this;
    }
    /**
     * Focus the app.
     *
     * @example
     *
     * ```ts
     * app.focus()
     * ```
     *
     * @public
     */
    focus() {
      this.getContainer().focus();
      this._isFocused.set(true);
      return this;
    }
    /**
     * Dispatch a cancel event.
     *
     * @example
     *
     * ```ts
     * app.cancel()
     * ```
     *
     * @public
     */
    cancel() {
      this.dispatch({ type: "misc", name: "cancel" });
      return this;
    }
    /**
     * Dispatch an interrupt event.
     *
     * @example
     *
     * ```ts
     * app.interrupt()
     * ```
     *
     * @public
     */
    interrupt() {
      this.dispatch({ type: "misc", name: "interrupt" });
      return this;
    }
    /**
     * Dispatch a complete event.
     *
     * @example
     *
     * ```ts
     * app.complete()
     * ```
     *
     * @public
     */
    complete() {
      this.dispatch({ type: "misc", name: "complete" });
      return this;
    }
    /* -------------------- Callbacks ------------------- */
    /**
     * A callback fired when a file is converted to an asset. This callback should return the asset
     * partial.
     *
     * @example
     *
     * ```ts
     * app.onCreateAssetFromFile(myFile)
     * ```
     *
     * @param file - The file to upload.
     * @public
     */
    onCreateAssetFromFile(file) {
      return __async(this, null, function* () {
        return yield getMediaAssetFromFile(file);
      });
    }
    /**
     * A callback fired when a URL is converted to a bookmark. This callback should return the
     * metadata for the bookmark.
     *
     * @example
     *
     * ```ts
     * app.onCreateBookmarkFromUrl(url, id)
     * ```
     *
     * @param url - The url that was created.
     * @public
     */
    onCreateBookmarkFromUrl(url) {
      return __async(this, null, function* () {
        var _a5, _b2, _c, _d, _e, _f;
        try {
          const resp = yield fetch(url, { method: "GET", mode: "no-cors" });
          const html = yield resp.text();
          const doc = new DOMParser().parseFromString(html, "text/html");
          return {
            image: (_b2 = (_a5 = doc.head.querySelector('meta[property="og:image"]')) == null ? void 0 : _a5.getAttribute("content")) != null ? _b2 : "",
            title: (_d = (_c = doc.head.querySelector('meta[property="og:title"]')) == null ? void 0 : _c.getAttribute("content")) != null ? _d : "",
            description: (_f = (_e = doc.head.querySelector('meta[property="og:description"]')) == null ? void 0 : _e.getAttribute("content")) != null ? _f : ""
          };
        } catch (error) {
          console.error(error);
          return { image: "", title: "", description: "" };
        }
      });
    }
    /* --------------------- Groups --------------------- */
    groupShapes(ids = this.selectedIds, groupId = createShapeId()) {
      var _a5, _b2;
      if (this.isReadOnly)
        return this;
      if (ids.length <= 1)
        return this;
      const shapes = compact(ids.map((id) => this.getShapeById(id)));
      const sortedShapeIds = shapes.sort(sortByIndex2).map((s3) => s3.id);
      const pageBounds = Box2d.Common(compact(shapes.map((id) => this.getPageBounds(id))));
      const { x: x3, y: y3 } = pageBounds.point;
      const parentId = (_a5 = this.findCommonAncestor(shapes)) != null ? _a5 : this.currentPageId;
      if (this.currentToolId !== "select")
        return this;
      if (!this.isIn("select.idle")) {
        this.cancel();
      }
      const shapesWithRootParent = shapes.filter((shape) => shape.parentId === parentId).sort(sortByIndex2);
      const highestIndex = (_b2 = shapesWithRootParent[shapesWithRootParent.length - 1]) == null ? void 0 : _b2.index;
      this.batch(() => {
        this.createShapes([
          {
            id: groupId,
            type: "group",
            parentId,
            index: highestIndex,
            x: x3,
            y: y3,
            props: {
              opacity: "1"
            }
          }
        ]);
        this.reparentShapesById(sortedShapeIds, groupId);
        this.select(groupId);
      });
      return this;
    }
    ungroupShapes(ids = this.selectedIds) {
      if (this.isReadOnly)
        return this;
      if (ids.length === 0)
        return this;
      if (this.currentToolId !== "select")
        return this;
      if (!this.isIn("select.idle")) {
        this.cancel();
      }
      const idsToSelect = /* @__PURE__ */ new Set();
      const shapes = compact(ids.map((id) => this.getShapeById(id)));
      const groups = [];
      shapes.forEach((shape) => {
        if (TLGroupShapeDef.is(shape)) {
          groups.push(shape);
        } else {
          idsToSelect.add(shape.id);
        }
      });
      if (groups.length === 0)
        return this;
      this.batch(() => {
        let group;
        for (let i3 = 0, n3 = groups.length; i3 < n3; i3++) {
          group = groups[i3];
          const childIds = this.getSortedChildIds(group.id);
          for (let j = 0, n4 = childIds.length; j < n4; j++) {
            idsToSelect.add(childIds[j]);
          }
          this.reparentShapesById(childIds, group.parentId, group.index);
        }
        this.deleteShapes(groups.map((group2) => group2.id));
        this.select(...idsToSelect);
      });
      return this;
    }
  };
  var App = _App;
  /* --------------------- Shapes --------------------- */
  /**
   * The app's set of styles.
   *
   * @public
   */
  __publicField(App, "styles", STYLES);
  __decorateClass([
    computed
  ], App.prototype, "openMenus", 1);
  __decorateClass([
    computed
  ], App.prototype, "isMenuOpen", 1);
  __decorateClass([
    computed
  ], App.prototype, "_pageTransformCache", 1);
  __decorateClass([
    computed
  ], App.prototype, "_pageBoundsCache", 1);
  __decorateClass([
    computed
  ], App.prototype, "_pageMaskCache", 1);
  __decorateClass([
    computed
  ], App.prototype, "_clipPathCache", 1);
  __decorateClass([
    computed
  ], App.prototype, "canUndo", 1);
  __decorateClass([
    computed
  ], App.prototype, "canRedo", 1);
  __decorateClass([
    computed
  ], App.prototype, "erasingIds", 1);
  __decorateClass([
    computed
  ], App.prototype, "hintingIds", 1);
  __decorateClass([
    computed
  ], App.prototype, "erasingIdsSet", 1);
  __decorateClass([
    computed
  ], App.prototype, "props", 1);
  __decorateClass([
    computed
  ], App.prototype, "_arrowBindingsIndex", 1);
  __decorateClass([
    computed
  ], App.prototype, "_allPageStates", 1);
  __decorateClass([
    computed
  ], App.prototype, "documentSettings", 1);
  __decorateClass([
    computed
  ], App.prototype, "_userDocumentSettings", 1);
  __decorateClass([
    computed
  ], App.prototype, "_pageState", 1);
  __decorateClass([
    computed
  ], App.prototype, "camera", 1);
  __decorateClass([
    computed
  ], App.prototype, "zoomLevel", 1);
  __decorateClass([
    computed
  ], App.prototype, "selectedIds", 1);
  __decorateClass([
    computed
  ], App.prototype, "selectedIdsSet", 1);
  __decorateClass([
    computed
  ], App.prototype, "_pages", 1);
  __decorateClass([
    computed
  ], App.prototype, "pages", 1);
  __decorateClass([
    computed
  ], App.prototype, "_pageStates", 1);
  __decorateClass([
    computed
  ], App.prototype, "renderingShapes", 1);
  __decorateClass([
    computed
  ], App.prototype, "allShapesCommonBounds", 1);
  __decorateClass([
    computed
  ], App.prototype, "viewportScreenBounds", 1);
  __decorateClass([
    computed
  ], App.prototype, "viewportScreenCenter", 1);
  __decorateClass([
    computed
  ], App.prototype, "viewportPageBounds", 1);
  __decorateClass([
    computed
  ], App.prototype, "cullingBounds", 1);
  __decorateClass([
    computed
  ], App.prototype, "cullingBoundsExpanded", 1);
  __decorateClass([
    computed
  ], App.prototype, "viewportPageCenter", 1);
  __decorateClass([
    computed
  ], App.prototype, "editingShape", 1);
  __decorateClass([
    computed
  ], App.prototype, "selectedPageBounds", 1);
  __decorateClass([
    computed
  ], App.prototype, "selectionRotation", 1);
  __decorateClass([
    computed
  ], App.prototype, "selectionBounds", 1);
  __decorateClass([
    computed
  ], App.prototype, "selectionPageCenter", 1);
  __decorateClass([
    computed
  ], App.prototype, "shapesArray", 1);
  __decorateClass([
    computed
  ], App.prototype, "sortedShapesArray", 1);
  __decorateClass([
    computed
  ], App.prototype, "selectedShapes", 1);
  __decorateClass([
    computed
  ], App.prototype, "onlySelectedShape", 1);
  __decorateClass([
    computed
  ], App.prototype, "_currentUserPresence", 1);
  __decorateClass([
    computed
  ], App.prototype, "_assets", 1);
  __decorateClass([
    computed
  ], App.prototype, "hoveredId", 1);
  __decorateClass([
    computed
  ], App.prototype, "hoveredShape", 1);
  function alertMaxShapes(app, pageId = app.currentPageId) {
    const name = app.getPageById(pageId).name;
    app.emit("max-shapes", { name, pageId, count: MAX_SHAPES_PER_PAGE });
  }

  // ../../../packages/editor/src/lib/assetUrls.ts
  var defaultEditorAssetUrls = {
    fonts: {
      draw: "/fonts/Shantell_Sans-Normal-SemiBold.woff2",
      serif: "/fonts/IBMPlexSerif-Medium.woff2",
      sansSerif: "/fonts/IBMPlexSans-Medium.woff2",
      monospace: "/fonts/IBMPlexMono-Medium.woff2"
    }
  };

  // ../../../packages/editor/src/lib/hooks/useDarkMode.ts
  var import_react37 = __toESM(require_react());
  function useDarkMode() {
    const app = useApp();
    const container = useContainer();
    const isDarkMode = useValue("isDarkMode", () => app.userDocumentSettings.isDarkMode, [app]);
    import_react37.default.useEffect(() => {
      if (isDarkMode) {
        container.setAttribute("data-color-mode", "dark");
        container.classList.remove("tl-theme__light");
        container.classList.add("tl-theme__dark");
        app.setCursor({
          color: "white"
        });
      } else {
        container.setAttribute("data-color-mode", "light");
        container.classList.remove("tl-theme__dark");
        container.classList.add("tl-theme__light");
        app.setCursor({
          color: "black"
        });
      }
    }, [app, container, isDarkMode]);
  }

  // ../../../packages/editor/src/lib/hooks/useEvent.tsx
  var import_react38 = __toESM(require_react());
  function useEvent(handler) {
    const handlerRef = (0, import_react38.useRef)();
    (0, import_react38.useLayoutEffect)(() => {
      handlerRef.current = handler;
    });
    (0, import_react38.useDebugValue)(handler);
    return (0, import_react38.useCallback)((...args) => {
      const fn = handlerRef.current;
      assert(fn, "fn does not exist");
      return fn(...args);
    }, []);
  }

  // ../../../packages/editor/src/lib/hooks/useForceUpdate.ts
  var import_react39 = __toESM(require_react());
  function useForceUpdate() {
    const [_, ss] = (0, import_react39.useState)(0);
    (0, import_react39.useEffect)(() => ss((s3) => s3 + 1), []);
  }

  // ../../../packages/editor/src/lib/hooks/usePreloadAssets.ts
  var import_react40 = __toESM(require_react());
  var usePreloadFont = (id, font) => {
    const [state, setState] = (0, import_react40.useState)(2 /* WAITING */);
    (0, import_react40.useEffect)(() => {
      const {
        url,
        style = "normal",
        weight = "500",
        display,
        featureSettings,
        stretch,
        unicodeRange,
        variant
      } = font;
      let cancelled = false;
      setState(2 /* WAITING */);
      const descriptors = {
        style,
        weight,
        display,
        featureSettings,
        stretch,
        unicodeRange,
        variant
      };
      const fontInstance = new FontFace(id, `url(${url})`, descriptors);
      fontInstance.load().then(() => {
        if (cancelled)
          return;
        document.fonts.add(fontInstance);
        setState(0 /* SUCCESS */);
      }).catch((err) => {
        if (cancelled)
          return;
        console.error(err);
        setState(1 /* FAILED */);
      });
      fontInstance.$$_url = url;
      fontInstance.$$_fontface = `
@font-face {
	font-family: ${fontInstance.family};
	font-stretch: ${fontInstance.stretch};
	font-weight: ${fontInstance.weight};
	font-style: ${fontInstance.style};
	src: url("${url}") format("woff2")
}`;
      return () => {
        document.fonts.delete(fontInstance);
        cancelled = true;
      };
    }, [id, font]);
    return state;
  };
  function getTypefaces(assetUrls) {
    return {
      draw: { url: assetUrls.fonts.draw },
      serif: { url: assetUrls.fonts.serif },
      sansSerif: { url: assetUrls.fonts.sansSerif },
      monospace: { url: assetUrls.fonts.monospace }
    };
  }
  function usePreloadAssets(assetUrls) {
    const typefaces = (0, import_react40.useMemo)(() => getTypefaces(assetUrls), [assetUrls]);
    const results = [
      usePreloadFont("tldraw_draw", typefaces.draw),
      usePreloadFont("tldraw_serif", typefaces.serif),
      usePreloadFont("tldraw_sans", typefaces.sansSerif),
      usePreloadFont("tldraw_mono", typefaces.monospace)
    ];
    return {
      // If any of the results have errored, then preloading has failed
      error: results.some((result) => result === 1 /* FAILED */),
      // If any of the results are waiting, then we're not done yet
      done: !results.some((result) => result === 2 /* WAITING */)
    };
  }

  // ../../../packages/editor/src/lib/hooks/useSafariFocusOutFix.ts
  var React32 = __toESM(require_react());
  var isMobileSafari = false;
  if (typeof window !== "undefined") {
    const ua = window.navigator.userAgent;
    const iOS2 = !!ua.match(/iPad/i) || !!ua.match(/iPhone/i);
    const webkit = !!ua.match(/WebKit/i);
    isMobileSafari = iOS2 && webkit && !ua.match(/CriOS/i);
  }
  function useSafariFocusOutFix() {
    const app = useApp();
    React32.useEffect(() => {
      if (!isMobileSafari)
        return;
      function handleFocusOut(e2) {
        if (e2.target instanceof HTMLInputElement && e2.target.type === "text" || e2.target instanceof HTMLTextAreaElement) {
          app.complete();
        }
      }
      document.addEventListener("focusout", handleFocusOut);
      return () => document.removeEventListener("focusout", handleFocusOut);
    }, [app]);
  }

  // ../../../packages/editor/src/lib/hooks/useZoomCss.ts
  var React33 = __toESM(require_react());
  function useZoomCss() {
    const app = useApp();
    const container = useContainer();
    React33.useEffect(() => {
      const setScale = (s3) => container.style.setProperty("--tl-zoom", s3.toString());
      const setScaleDebounced = debounce(setScale, 100);
      const scheduler = new EffectScheduler("useZoomCss", () => {
        const numShapes = app.shapeIds.size;
        if (numShapes < 300) {
          setScale(app.zoomLevel);
        } else {
          setScaleDebounced(app.zoomLevel);
        }
      });
      scheduler.attach();
      scheduler.execute();
      return () => {
        scheduler.detach();
      };
    }, [app, container]);
  }

  // ../../../packages/editor/src/lib/TldrawEditor.tsx
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  function TldrawEditor(props) {
    const [container, setContainer] = import_react41.default.useState(null);
    const _a5 = props, { components } = _a5, rest = __objRest(_a5, ["components"]);
    const ErrorFallback = (components == null ? void 0 : components.ErrorFallback) === void 0 ? DefaultErrorFallback : components == null ? void 0 : components.ErrorFallback;
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { ref: setContainer, draggable: false, className: "tl-container tl-theme__light", tabIndex: 0, children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
      OptionalErrorBoundary,
      {
        fallback: ErrorFallback ? (error) => /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ErrorFallback, { error }) : null,
        onError: (error) => annotateError(error, { tags: { origin: "react.tldraw-before-app" } }),
        children: container && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ContainerProvider, { container, children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(EditorComponentsProvider, { overrides: components, children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TldrawEditorBeforeLoading, __spreadValues({}, rest)) }) })
      }
    ) });
  }
  function TldrawEditorBeforeLoading(_a5) {
    var _b2 = _a5, {
      config = TldrawEditorConfig.default,
      userId,
      instanceId,
      store
    } = _b2, props = __objRest(_b2, [
      "config",
      "userId",
      "instanceId",
      "store"
    ]);
    var _a6;
    const { done: preloadingComplete, error: preloadingError } = usePreloadAssets(
      (_a6 = props.assetUrls) != null ? _a6 : defaultEditorAssetUrls
    );
    store != null ? store : store = config.createStore({
      userId: userId != null ? userId : TLUser.createId(),
      instanceId: instanceId != null ? instanceId : TLInstance.createId()
    });
    let loadedStore;
    if (!(store instanceof Store)) {
      if (store.error) {
        throw store.error;
      }
      if (!store.store) {
        return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(LoadingScreen, { children: "Connecting..." });
      }
      loadedStore = store.store;
    } else {
      loadedStore = store;
    }
    if (instanceId && loadedStore.props.instanceId !== instanceId) {
      console.error(
        `The store's instanceId (${loadedStore.props.instanceId}) does not match the instanceId prop (${instanceId}). This may cause unexpected behavior.`
      );
    }
    if (userId && loadedStore.props.userId !== userId) {
      console.error(
        `The store's userId (${loadedStore.props.userId}) does not match the userId prop (${userId}). This may cause unexpected behavior.`
      );
    }
    if (preloadingError) {
      return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ErrorScreen, { children: "Could not load assets. Please refresh the page." });
    }
    if (!preloadingComplete) {
      return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(LoadingScreen, { children: "Loading assets..." });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(TldrawEditorAfterLoading, __spreadProps(__spreadValues({}, props), { store: loadedStore, config }));
  }
  function TldrawEditorAfterLoading({
    onMount,
    config,
    isDarkMode,
    children,
    onCreateAssetFromFile,
    onCreateBookmarkFromUrl: onCreateBookmarkFromUrl2,
    store,
    autoFocus
  }) {
    const container = useContainer();
    const [app, setApp] = import_react41.default.useState(null);
    const { ErrorFallback } = useEditorComponents();
    import_react41.default.useLayoutEffect(() => {
      const app2 = new App({
        store,
        getContainer: () => container,
        config
      });
      setApp(app2);
      if (autoFocus) {
        app2.focus();
      }
      ;
      window.app = app2;
      return () => {
        app2.dispose();
        setApp((prevApp) => prevApp === app2 ? null : prevApp);
      };
    }, [container, config, store, autoFocus]);
    import_react41.default.useEffect(() => {
      if (app) {
        if (onCreateAssetFromFile) {
          app.onCreateAssetFromFile = onCreateAssetFromFile;
        }
        if (onCreateBookmarkFromUrl2) {
          app.onCreateBookmarkFromUrl = onCreateBookmarkFromUrl2;
        }
      }
    }, [app, onCreateAssetFromFile, onCreateBookmarkFromUrl2]);
    const onMountEvent = useEvent((app2) => {
      onMount == null ? void 0 : onMount(app2);
      app2.emit("mount");
    });
    import_react41.default.useEffect(() => {
      if (app) {
        if (isDarkMode !== void 0) {
          app.updateUserDocumentSettings({ isDarkMode });
        }
        window.tldrawReady = true;
        onMountEvent(app);
      }
    }, [app, onMountEvent, isDarkMode]);
    const crashingError = (0, import_react41.useSyncExternalStore)(
      (0, import_react41.useCallback)(
        (onStoreChange) => {
          if (app) {
            app.on("crash", onStoreChange);
            return () => app.off("crash", onStoreChange);
          }
          return () => {
          };
        },
        [app]
      ),
      () => {
        var _a5;
        return (_a5 = app == null ? void 0 : app.crashingError) != null ? _a5 : null;
      }
    );
    if (!app) {
      return null;
    }
    return (
      // the top-level tldraw component also renders an error boundary almost
      // identical to this one. the reason we have two is because this one has
      // access to `App`, which means that here we can enrich errors with data
      // from app for reporting, and also still attempt to render the user's
      // document in the event of an error to reassure them that their work is
      // not lost.
      /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(
        OptionalErrorBoundary,
        {
          fallback: ErrorFallback ? (error) => /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ErrorFallback, { error, app }) : null,
          onError: (error) => app.annotateError(error, { origin: "react.tldraw", willCrashApp: true }),
          children: crashingError ? /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Crash, { crashingError }) : /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(AppContext.Provider, { value: app, children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Layout, { children }) })
        }
      )
    );
  }
  function Layout({ children }) {
    useZoomCss();
    useCursor();
    useDarkMode();
    useSafariFocusOutFix();
    useForceUpdate();
    return children;
  }
  function Crash({ crashingError }) {
    throw crashingError;
  }
  function LoadingScreen({ children }) {
    const { Spinner: Spinner2 } = useEditorComponents();
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsxs)("div", { className: "tl-loading", children: [
      Spinner2 ? /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Spinner2, {}) : null,
      children
    ] });
  }
  function ErrorScreen({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("div", { className: "tl-loading", children });
  }

  // ../../../packages/editor/src/lib/hooks/useReactor.ts
  var import_react42 = __toESM(require_react());

  // ../../../packages/editor/src/lib/utils/buildFromV1Document.ts
  var TLDRAW_V1_VERSION = 15.5;
  function buildFromV1Document(app, document2) {
    transact(() => {
      var _a5, _b2, _c;
      document2 = migrate2(document2, TLDRAW_V1_VERSION);
      app.cancel().cancel().cancel().cancel();
      const firstPageId = app.pages[0].id;
      app.setCurrentPageId(firstPageId);
      for (const page of app.pages.slice(1)) {
        app.deletePage(page.id);
      }
      app.selectAll();
      app.deleteShapes();
      const v1AssetIdsToV2AssetIds = /* @__PURE__ */ new Map();
      Object.values((_a5 = document2.assets) != null ? _a5 : {}).forEach((v1Asset) => {
        var _a6, _b3;
        switch (v1Asset.type) {
          case TDAssetType.Image: {
            const assetId = TLAsset.createId();
            v1AssetIdsToV2AssetIds.set(v1Asset.id, assetId);
            const placeholderAsset = {
              id: assetId,
              typeName: "asset",
              type: "image",
              props: {
                w: coerceDimension(v1Asset.size[0]),
                h: coerceDimension(v1Asset.size[1]),
                name: (_a6 = v1Asset.fileName) != null ? _a6 : "Untitled",
                isAnimated: false,
                mimeType: null,
                src: v1Asset.src
              }
            };
            app.createAssets([placeholderAsset]);
            tryMigrateAsset(app, placeholderAsset);
            break;
          }
          case TDAssetType.Video:
            {
              const assetId = TLAsset.createId();
              v1AssetIdsToV2AssetIds.set(v1Asset.id, assetId);
              app.createAssets([
                {
                  id: assetId,
                  typeName: "asset",
                  type: "video",
                  props: {
                    w: coerceDimension(v1Asset.size[0]),
                    h: coerceDimension(v1Asset.size[1]),
                    name: (_b3 = v1Asset.fileName) != null ? _b3 : "Untitled",
                    isAnimated: true,
                    mimeType: null,
                    src: v1Asset.src
                  }
                }
              ]);
            }
            break;
        }
      });
      const v1PageIdsToV2PageIds = /* @__PURE__ */ new Map();
      Object.values((_b2 = document2.pages) != null ? _b2 : {}).sort((a3, b3) => {
        var _a6, _b3;
        return ((_a6 = a3.childIndex) != null ? _a6 : 1) < ((_b3 = b3.childIndex) != null ? _b3 : 1) ? -1 : 1;
      }).forEach((v1Page, i3) => {
        var _a6;
        if (i3 === 0) {
          v1PageIdsToV2PageIds.set(v1Page.id, app.currentPageId);
        } else {
          const pageId = TLPage.createId();
          v1PageIdsToV2PageIds.set(v1Page.id, pageId);
          app.createPage((_a6 = v1Page.name) != null ? _a6 : "Page", pageId);
        }
      });
      Object.values((_c = document2.pages) != null ? _c : {}).sort((a3, b3) => {
        var _a6, _b3;
        return ((_a6 = a3.childIndex) != null ? _a6 : 1) < ((_b3 = b3.childIndex) != null ? _b3 : 1) ? -1 : 1;
      }).forEach((v1Page) => {
        var _a6;
        app.setCurrentPageId(v1PageIdsToV2PageIds.get(v1Page.id));
        const v1ShapeIdsToV2ShapeIds = /* @__PURE__ */ new Map();
        const v1GroupShapeIdsToV1ChildIds = /* @__PURE__ */ new Map();
        const v1Shapes = Object.values((_a6 = v1Page.shapes) != null ? _a6 : {}).sort((a3, b3) => a3.childIndex < b3.childIndex ? -1 : 1).slice(0, MAX_SHAPES_PER_PAGE);
        v1Shapes.forEach((v1Shape) => {
          if (v1Shape.type !== TDShapeType.Group)
            return;
          const shapeId = app.createShapeId();
          v1ShapeIdsToV2ShapeIds.set(v1Shape.id, shapeId);
          v1GroupShapeIdsToV1ChildIds.set(v1Shape.id, []);
        });
        function decideNotToCreateShape(v1Shape) {
          v1ShapeIdsToV2ShapeIds.delete(v1Shape.id);
          const v1GroupParent = v1GroupShapeIdsToV1ChildIds.has(v1Shape.parentId);
          if (v1GroupParent) {
            const ids = v1GroupShapeIdsToV1ChildIds.get(v1Shape.parentId).filter((id) => id !== v1Shape.id);
            v1GroupShapeIdsToV1ChildIds.set(v1Shape.parentId, ids);
          }
        }
        v1Shapes.forEach((v1Shape) => {
          var _a7, _b3, _c2, _d, _e, _f, _g, _h, _i, _j;
          if (v1Shape.type === TDShapeType.Group) {
            return;
          }
          const shapeId = app.createShapeId();
          v1ShapeIdsToV2ShapeIds.set(v1Shape.id, shapeId);
          if (v1Shape.parentId !== v1Page.id) {
            if (v1GroupShapeIdsToV1ChildIds.has(v1Shape.parentId)) {
              v1GroupShapeIdsToV1ChildIds.get(v1Shape.parentId).push(v1Shape.id);
            } else {
              console.warn("parent does not exist", v1Shape);
            }
          }
          const parentId = v1PageIdsToV2PageIds.get(v1Page.id);
          const inCommon = {
            id: shapeId,
            parentId,
            x: coerceNumber(v1Shape.point[0]),
            y: coerceNumber(v1Shape.point[1]),
            rotation: 0,
            isLocked: !!v1Shape.isLocked
          };
          switch (v1Shape.type) {
            case TDShapeType.Sticky: {
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "note",
                props: {
                  text: (_a7 = v1Shape.text) != null ? _a7 : "",
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  align: getV2Align(v1Shape.style.textAlign)
                }
              });
              app.createShapes([partial]);
              break;
            }
            case TDShapeType.Rectangle: {
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "geo",
                props: {
                  geo: "rectangle",
                  w: coerceDimension(v1Shape.size[0]),
                  h: coerceDimension(v1Shape.size[1]),
                  text: (_b3 = v1Shape.label) != null ? _b3 : "",
                  fill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),
                  labelColor: getV2Color(v1Shape.style.color),
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  dash: getV2Dash(v1Shape.style.dash),
                  align: "middle"
                }
              });
              app.createShapes([partial]);
              const pageBoundsBeforeLabel = app.getPageBoundsById(inCommon.id);
              app.updateShapes([
                {
                  id: inCommon.id,
                  type: "geo",
                  props: {
                    text: (_c2 = v1Shape.label) != null ? _c2 : ""
                  }
                }
              ]);
              if (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {
                const shape = app.getShapeById(inCommon.id);
                const { growY } = shape.props;
                const w3 = coerceDimension(shape.props.w);
                const h3 = coerceDimension(shape.props.h);
                const newW = w3 + growY / 2;
                const newH = h3 + growY / 2;
                app.updateShapes([
                  {
                    id: inCommon.id,
                    type: "geo",
                    x: coerceNumber(shape.x) - (newW - w3) / 2,
                    y: coerceNumber(shape.y) - (newH - h3) / 2,
                    props: {
                      w: newW,
                      h: newH
                    }
                  }
                ]);
              }
              break;
            }
            case TDShapeType.Triangle: {
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "geo",
                props: {
                  geo: "triangle",
                  w: coerceDimension(v1Shape.size[0]),
                  h: coerceDimension(v1Shape.size[1]),
                  fill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),
                  labelColor: getV2Color(v1Shape.style.color),
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  dash: getV2Dash(v1Shape.style.dash),
                  align: "middle"
                }
              });
              app.createShapes([partial]);
              const pageBoundsBeforeLabel = app.getPageBoundsById(inCommon.id);
              app.updateShapes([
                {
                  id: inCommon.id,
                  type: "geo",
                  props: {
                    text: (_d = v1Shape.label) != null ? _d : ""
                  }
                }
              ]);
              if (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {
                const shape = app.getShapeById(inCommon.id);
                const { growY } = shape.props;
                const w3 = coerceDimension(shape.props.w);
                const h3 = coerceDimension(shape.props.h);
                const newW = w3 + growY / 2;
                const newH = h3 + growY / 2;
                app.updateShapes([
                  {
                    id: inCommon.id,
                    type: "geo",
                    x: coerceNumber(shape.x) - (newW - w3) / 2,
                    y: coerceNumber(shape.y) - (newH - h3) / 2,
                    props: {
                      w: newW,
                      h: newH
                    }
                  }
                ]);
              }
              break;
            }
            case TDShapeType.Ellipse: {
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "geo",
                props: {
                  geo: "ellipse",
                  w: coerceDimension(v1Shape.radius[0]) * 2,
                  h: coerceDimension(v1Shape.radius[1]) * 2,
                  fill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),
                  labelColor: getV2Color(v1Shape.style.color),
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  dash: getV2Dash(v1Shape.style.dash),
                  align: "middle"
                }
              });
              app.createShapes([partial]);
              const pageBoundsBeforeLabel = app.getPageBoundsById(inCommon.id);
              app.updateShapes([
                {
                  id: inCommon.id,
                  type: "geo",
                  props: {
                    text: (_e = v1Shape.label) != null ? _e : ""
                  }
                }
              ]);
              if (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {
                const shape = app.getShapeById(inCommon.id);
                const { growY } = shape.props;
                const w3 = coerceDimension(shape.props.w);
                const h3 = coerceDimension(shape.props.h);
                const newW = w3 + growY / 2;
                const newH = h3 + growY / 2;
                app.updateShapes([
                  {
                    id: inCommon.id,
                    type: "geo",
                    x: coerceNumber(shape.x) - (newW - w3) / 2,
                    y: coerceNumber(shape.y) - (newH - h3) / 2,
                    props: {
                      w: newW,
                      h: newH
                    }
                  }
                ]);
              }
              break;
            }
            case TDShapeType.Draw: {
              if (v1Shape.points.length === 0) {
                decideNotToCreateShape(v1Shape);
                break;
              }
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "draw",
                props: {
                  fill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),
                  color: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  dash: getV2Dash(v1Shape.style.dash),
                  isPen: false,
                  isComplete: v1Shape.isComplete,
                  segments: [{ type: "free", points: v1Shape.points.map(getV2Point) }]
                }
              });
              app.createShapes([partial]);
              break;
            }
            case TDShapeType.Arrow: {
              const v1Bend = coerceNumber(v1Shape.bend);
              const v1Start = getV2Point(v1Shape.handles.start.point);
              const v1End = getV2Point(v1Shape.handles.end.point);
              const dist = Vec2d.Dist(v1Start, v1End);
              const v2Bend = dist * -v1Bend / 2;
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "arrow",
                props: {
                  text: (_f = v1Shape.label) != null ? _f : "",
                  color: getV2Color(v1Shape.style.color),
                  labelColor: getV2Color(v1Shape.style.color),
                  size: getV2Size(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  dash: getV2Dash(v1Shape.style.dash),
                  arrowheadStart: getV2Arrowhead((_g = v1Shape.decorations) == null ? void 0 : _g.start),
                  arrowheadEnd: getV2Arrowhead((_h = v1Shape.decorations) == null ? void 0 : _h.end),
                  start: {
                    type: "point",
                    x: coerceNumber(v1Shape.handles.start.point[0]),
                    y: coerceNumber(v1Shape.handles.start.point[1])
                  },
                  end: {
                    type: "point",
                    x: coerceNumber(v1Shape.handles.end.point[0]),
                    y: coerceNumber(v1Shape.handles.end.point[1])
                  },
                  bend: v2Bend
                }
              });
              app.createShapes([partial]);
              break;
            }
            case TDShapeType.Text: {
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "text",
                props: {
                  text: (_i = v1Shape.text) != null ? _i : " ",
                  color: getV2Color(v1Shape.style.color),
                  size: getV2TextSize(v1Shape.style.size),
                  font: getV2Font(v1Shape.style.font),
                  align: getV2Align(v1Shape.style.textAlign),
                  scale: (_j = v1Shape.style.scale) != null ? _j : 1
                }
              });
              app.createShapes([partial]);
              break;
            }
            case TDShapeType.Image: {
              const assetId = v1AssetIdsToV2AssetIds.get(v1Shape.assetId);
              if (!assetId) {
                console.warn("Could not find asset id", v1Shape.assetId);
                return;
              }
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "image",
                props: {
                  w: coerceDimension(v1Shape.size[0]),
                  h: coerceDimension(v1Shape.size[1]),
                  assetId
                }
              });
              app.createShapes([partial]);
              break;
            }
            case TDShapeType.Video: {
              const assetId = v1AssetIdsToV2AssetIds.get(v1Shape.assetId);
              if (!assetId) {
                console.warn("Could not find asset id", v1Shape.assetId);
                return;
              }
              const partial = __spreadProps(__spreadValues({}, inCommon), {
                type: "video",
                props: {
                  w: coerceDimension(v1Shape.size[0]),
                  h: coerceDimension(v1Shape.size[1]),
                  assetId
                }
              });
              app.createShapes([partial]);
              break;
            }
          }
          const rotation = coerceNumber(v1Shape.rotation);
          if (rotation !== 0) {
            app.select(shapeId);
            app.rotateShapesBy([shapeId], rotation);
          }
        });
        v1GroupShapeIdsToV1ChildIds.forEach((v1ChildIds, v1GroupId) => {
          const v2ChildShapeIds = v1ChildIds.map((id) => v1ShapeIdsToV2ShapeIds.get(id));
          const v2GroupId = v1ShapeIdsToV2ShapeIds.get(v1GroupId);
          app.groupShapes(v2ChildShapeIds, v2GroupId);
          const v1Group = v1Page.shapes[v1GroupId];
          const rotation = coerceNumber(v1Group.rotation);
          if (rotation !== 0) {
            app.select(v2GroupId);
            app.rotateShapesBy([v2GroupId], rotation);
          }
        });
        v1Shapes.forEach((v1Shape) => {
          var _a7, _b3;
          if (v1Shape.type !== TDShapeType.Arrow) {
            return;
          }
          const v2ShapeId = v1ShapeIdsToV2ShapeIds.get(v1Shape.id);
          const v2ShapeStale = app.getShapeById(v2ShapeId);
          const util = app.getShapeUtil(v2ShapeStale);
          app.inputs.ctrlKey = false;
          for (const handleId of ["start", "end"]) {
            const bindingId = v1Shape.handles[handleId].bindingId;
            if (bindingId) {
              const binding = v1Page.bindings[bindingId];
              if (!binding) {
                continue;
              }
              const targetId = v1ShapeIdsToV2ShapeIds.get(binding.toId);
              const targetShape = app.getShapeById(targetId);
              if (!targetShape)
                continue;
              if (targetId) {
                const bounds2 = app.getPageBoundsById(targetId);
                const v2ShapeFresh = app.getShapeById(v2ShapeId);
                const nx = clamp((coerceNumber(binding.point[0]) + 0.5) / 2, 0.2, 0.8);
                const ny = clamp((coerceNumber(binding.point[1]) + 0.5) / 2, 0.2, 0.8);
                const point2 = app.getPointInShapeSpace(v2ShapeFresh, {
                  x: bounds2.minX + bounds2.width * nx,
                  y: bounds2.minY + bounds2.height * ny
                });
                const handles = util.handles(v2ShapeFresh);
                const change = util.onHandleChange(v2ShapeFresh, {
                  handle: __spreadProps(__spreadValues({}, handles.find((h3) => h3.id === handleId)), {
                    x: point2.x,
                    y: point2.y
                  }),
                  isPrecise: point2.x !== 0.5 || point2.y !== 0.5
                });
                if (change) {
                  if ((_a7 = change.props) == null ? void 0 : _a7[handleId]) {
                    const terminal = (_b3 = change.props) == null ? void 0 : _b3[handleId];
                    if (terminal.type === "binding") {
                      terminal.isExact = binding.distance === 0;
                      if (terminal.boundShapeId !== targetId) {
                        console.warn("Hit the wrong shape!");
                        terminal.boundShapeId = targetId;
                        terminal.normalizedAnchor = { x: 0.5, y: 0.5 };
                      }
                    }
                  }
                  app.updateShapes([change]);
                }
              }
            }
          }
        });
      });
      app.setCurrentPageId(firstPageId);
      app.history.clear();
      app.selectNone();
      app.updateViewportScreenBounds();
      const bounds = app.allShapesCommonBounds;
      if (bounds) {
        app.zoomToBounds(bounds.minX, bounds.minY, bounds.width, bounds.height, 1);
      }
    });
  }
  function coerceNumber(n3) {
    if (typeof n3 !== "number")
      return 0;
    if (Number.isNaN(n3))
      return 0;
    if (!Number.isFinite(n3))
      return 0;
    return n3;
  }
  function coerceDimension(d3) {
    const n3 = coerceNumber(d3);
    if (n3 <= 0)
      return 1;
    return n3;
  }
  function tryMigrateAsset(app, placeholderAsset) {
    return __async(this, null, function* () {
      var _a5, _b2;
      try {
        if (placeholderAsset.type === "bookmark" || !placeholderAsset.props.src)
          return;
        const response = yield fetch(placeholderAsset.props.src);
        if (!response.ok)
          return;
        const file = new File([yield response.blob()], placeholderAsset.props.name, {
          type: (_b2 = (_a5 = response.headers.get("content-type")) != null ? _a5 : placeholderAsset.props.mimeType) != null ? _b2 : void 0
        });
        const newAsset = yield app.onCreateAssetFromFile(file);
        if (newAsset.type === "bookmark")
          return;
        app.updateAssets([
          {
            id: placeholderAsset.id,
            type: placeholderAsset.type,
            props: __spreadProps(__spreadValues({}, newAsset.props), {
              name: placeholderAsset.props.name
            })
          }
        ]);
      } catch (err) {
      }
    });
  }
  function migrate2(document2, newVersion) {
    const { version = 0 } = document2;
    if (!document2.assets) {
      document2.assets = {};
    }
    const assetIdsInUse = /* @__PURE__ */ new Set();
    Object.values(document2.pages).forEach(
      (page) => Object.values(page.shapes).forEach((shape) => {
        const { parentId, children, assetId } = shape;
        if (assetId) {
          assetIdsInUse.add(assetId);
        }
        if (parentId !== page.id && !page.shapes[parentId]) {
          console.warn("Encountered a shape with a missing parent!");
          shape.parentId = page.id;
        }
        if (shape.type === TDShapeType.Group && children) {
          children.forEach((childId) => {
            if (!page.shapes[childId]) {
              console.warn("Encountered a parent with a missing child!", shape.id, childId);
              children == null ? void 0 : children.splice(children.indexOf(childId), 1);
            }
          });
        }
      })
    );
    Object.keys(document2.assets).forEach((assetId) => {
      if (!assetIdsInUse.has(assetId)) {
        delete document2.assets[assetId];
      }
    });
    if (version !== newVersion) {
      if (version < 14) {
        Object.values(document2.pages).forEach((page) => {
          Object.values(page.shapes).filter((shape) => shape.type === TDShapeType.Text).forEach((shape) => {
            if (shape.style.font === void 0) {
              ;
              shape.style.font === FontStyle.Script;
            }
          });
        });
      }
      if (version <= 13) {
        Object.values(document2.pages).forEach((page) => {
          Object.values(page.bindings).forEach((binding) => {
            Object.assign(binding, binding.meta);
          });
          Object.values(page.shapes).forEach((shape) => {
            Object.entries(shape.style).forEach(([id, style]) => {
              if (typeof style === "string") {
                shape.style[id] = style.toLowerCase();
              }
            });
            if (shape.type === TDShapeType.Arrow) {
              if (shape.decorations) {
                Object.entries(shape.decorations).forEach(([id, decoration]) => {
                  if (decoration === "Arrow") {
                    shape.decorations = __spreadProps(__spreadValues({}, shape.decorations), {
                      [id]: Decoration.Arrow
                    });
                  }
                });
              }
            }
          });
        });
      }
      if (version <= 13.1 && document2.name == null) {
        document2.name = "New Document";
      }
      if (version < 15 && document2.assets == null) {
        document2.assets = {};
      }
      Object.values(document2.pages).forEach((page) => {
        Object.values(page.shapes).forEach((shape) => {
          if (version < 15.2) {
            if ((shape.type === TDShapeType.Image || shape.type === TDShapeType.Video) && shape.style.isFilled == null) {
              shape.style.isFilled = true;
            }
          }
          if (version < 15.3) {
            if (shape.type === TDShapeType.Rectangle || shape.type === TDShapeType.Triangle || shape.type === TDShapeType.Ellipse || shape.type === TDShapeType.Arrow) {
              if ("text" in shape && typeof shape.text === "string") {
                shape.label = shape.text;
              }
              if (!shape.label) {
                shape.label = "";
              }
              if (!shape.labelPoint) {
                shape.labelPoint = [0.5, 0.5];
              }
            }
          }
        });
      });
    }
    Object.values(document2.pageStates).forEach((pageState) => {
      pageState.selectedIds = pageState.selectedIds.filter((id) => {
        return document2.pages[pageState.id].shapes[id] !== void 0;
      });
      pageState.bindingId = void 0;
      pageState.editingId = void 0;
      pageState.hoveredId = void 0;
      pageState.pointedId = void 0;
    });
    document2.version = newVersion;
    return document2;
  }
  var TDShapeType = /* @__PURE__ */ ((TDShapeType2) => {
    TDShapeType2["Sticky"] = "sticky";
    TDShapeType2["Ellipse"] = "ellipse";
    TDShapeType2["Rectangle"] = "rectangle";
    TDShapeType2["Triangle"] = "triangle";
    TDShapeType2["Draw"] = "draw";
    TDShapeType2["Arrow"] = "arrow";
    TDShapeType2["Text"] = "text";
    TDShapeType2["Group"] = "group";
    TDShapeType2["Image"] = "image";
    TDShapeType2["Video"] = "video";
    return TDShapeType2;
  })(TDShapeType || {});
  var FontStyle = /* @__PURE__ */ ((FontStyle2) => {
    FontStyle2["Script"] = "script";
    FontStyle2["Sans"] = "sans";
    FontStyle2["Serif"] = "serif";
    FontStyle2["Mono"] = "mono";
    return FontStyle2;
  })(FontStyle || {});
  var Decoration = /* @__PURE__ */ ((Decoration2) => {
    Decoration2["Arrow"] = "arrow";
    return Decoration2;
  })(Decoration || {});
  var TDAssetType = /* @__PURE__ */ ((TDAssetType2) => {
    TDAssetType2["Image"] = "image";
    TDAssetType2["Video"] = "video";
    return TDAssetType2;
  })(TDAssetType || {});
  var v1ColorsToV2Colors = {
    ["white" /* White */]: "black",
    ["black" /* Black */]: "black",
    ["lightGray" /* LightGray */]: "grey",
    ["gray" /* Gray */]: "grey",
    ["green" /* Green */]: "light-green",
    ["cyan" /* Cyan */]: "green",
    ["blue" /* Blue */]: "light-blue",
    ["indigo" /* Indigo */]: "blue",
    ["orange" /* Orange */]: "orange",
    ["yellow" /* Yellow */]: "yellow",
    ["red" /* Red */]: "red",
    ["violet" /* Violet */]: "light-violet"
  };
  var v1FontsToV2Fonts = {
    ["mono" /* Mono */]: "mono",
    ["sans" /* Sans */]: "sans",
    ["script" /* Script */]: "draw",
    ["serif" /* Serif */]: "serif"
  };
  var v1AlignsToV2Aligns = {
    ["start" /* Start */]: "start",
    ["middle" /* Middle */]: "middle",
    ["end" /* End */]: "end",
    ["justify" /* Justify */]: "start"
  };
  var v1TextSizesToV2TextSizes = {
    ["small" /* Small */]: "s",
    ["medium" /* Medium */]: "l",
    ["large" /* Large */]: "xl"
  };
  var v1SizesToV2Sizes = {
    ["small" /* Small */]: "m",
    ["medium" /* Medium */]: "l",
    ["large" /* Large */]: "xl"
  };
  var v1DashesToV2Dashes = {
    ["solid" /* Solid */]: "solid",
    ["dashed" /* Dashed */]: "dashed",
    ["dotted" /* Dotted */]: "dotted",
    ["draw" /* Draw */]: "draw"
  };
  function getV2Color(color) {
    var _a5;
    return color ? (_a5 = v1ColorsToV2Colors[color]) != null ? _a5 : "black" : "black";
  }
  function getV2Font(font) {
    var _a5;
    return font ? (_a5 = v1FontsToV2Fonts[font]) != null ? _a5 : "draw" : "draw";
  }
  function getV2Align(align) {
    var _a5;
    return align ? (_a5 = v1AlignsToV2Aligns[align]) != null ? _a5 : "middle" : "middle";
  }
  function getV2TextSize(size) {
    var _a5;
    return size ? (_a5 = v1TextSizesToV2TextSizes[size]) != null ? _a5 : "m" : "m";
  }
  function getV2Size(size) {
    var _a5;
    return size ? (_a5 = v1SizesToV2Sizes[size]) != null ? _a5 : "l" : "l";
  }
  function getV2Dash(dash) {
    var _a5;
    return dash ? (_a5 = v1DashesToV2Dashes[dash]) != null ? _a5 : "draw" : "draw";
  }
  function getV2Point(point2) {
    return {
      x: coerceNumber(point2[0]),
      y: coerceNumber(point2[1]),
      z: point2[2] == null ? 0.5 : coerceNumber(point2[2])
    };
  }
  function getV2Arrowhead(decoration) {
    return decoration === "arrow" /* Arrow */ ? "arrow" : "none";
  }
  function getV2Fill(isFilled, color) {
    return isFilled ? color === "black" /* Black */ || color === "white" /* White */ ? "semi" : "solid" : "none";
  }

  // ../../../packages/editor/src/lib/utils/export.ts
  function getSvgAsString(svg) {
    const clone = svg.cloneNode(true);
    svg.setAttribute("width", +svg.getAttribute("width") + "");
    svg.setAttribute("height", +svg.getAttribute("height") + "");
    const out = new XMLSerializer().serializeToString(clone).replaceAll("&#10;      ", "").replaceAll(/((\s|")[0-9]*\.[0-9]{2})([0-9]*)(\b|"|\))/g, "$1");
    return out;
  }
  function getSvgAsImage(svg, options) {
    return __async(this, null, function* () {
      const { type, quality, scale } = options;
      const width = +svg.getAttribute("width");
      const height = +svg.getAttribute("height");
      const dataUrl = yield getSvgAsDataUrl(svg);
      const canvas = yield new Promise((resolve) => {
        const image = new Image();
        image.crossOrigin = "anonymous";
        image.onload = () => __async(this, null, function* () {
          yield new Promise((resolve2) => setTimeout(resolve2, 250));
          const canvas2 = document.createElement("canvas");
          const ctx = canvas2.getContext("2d");
          canvas2.width = width * scale;
          canvas2.height = height * scale;
          ctx.imageSmoothingEnabled = true;
          ctx.imageSmoothingQuality = "high";
          ctx.drawImage(image, 0, 0, width * scale, height * scale);
          URL.revokeObjectURL(dataUrl);
          resolve(canvas2);
        });
        image.onerror = () => {
          resolve(null);
        };
        image.src = dataUrl;
      });
      if (!canvas)
        return null;
      const blob = yield new Promise(
        (resolve) => canvas.toBlob(
          (blob2) => {
            if (!blob2 || debugFlags.throwToBlob.value) {
              resolve(null);
            }
            resolve(blob2);
          },
          "image/" + type,
          quality
        )
      );
      if (!blob)
        return null;
      const view = new DataView(yield blob.arrayBuffer());
      return setPhysChunk(view, scale, {
        type: "image/" + type
      });
    });
  }
  function getSvgAsDataUrl(svg) {
    return __async(this, null, function* () {
      const clone = svg.cloneNode(true);
      clone.setAttribute("encoding", 'UTF-8"');
      const fileReader = new FileReader();
      const imgs = Array.from(clone.querySelectorAll("image"));
      for (const img of imgs) {
        const src = img.getAttribute("xlink:href");
        if (src) {
          if (!src.startsWith("data:")) {
            const blob = yield (yield fetch(src)).blob();
            const base64 = yield new Promise((resolve, reject) => {
              fileReader.onload = () => resolve(fileReader.result);
              fileReader.onerror = () => reject(fileReader.error);
              fileReader.readAsDataURL(blob);
            });
            img.setAttribute("xlink:href", base64);
          }
        }
      }
      return getSvgAsDataUrlSync(clone);
    });
  }
  function getSvgAsDataUrlSync(node) {
    const svgStr = new XMLSerializer().serializeToString(node);
    const base64SVG = window.btoa(unescape(encodeURIComponent(svgStr)));
    return `data:image/svg+xml;base64,${base64SVG}`;
  }
  function downloadDataURLAsFile(dataUrl, filename) {
    const link = document.createElement("a");
    link.href = dataUrl;
    link.download = filename;
    link.click();
  }

  // ../../../packages/editor/src/lib/utils/window-open.ts
  function openWindow(url, target = "_blank") {
    runtime.openWindow(url, target);
  }

  // ../../../node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i3 = 1; i3 < arguments.length; i3++) {
        var source = arguments[i3];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // ../../../node_modules/@radix-ui/react-dialog/dist/index.module.js
  var import_react57 = __toESM(require_react());

  // ../../../node_modules/@radix-ui/primitive/dist/index.module.js
  function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
    return function handleEvent(event) {
      originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
      if (checkForDefaultPrevented === false || !event.defaultPrevented)
        return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
    };
  }

  // ../../../node_modules/@radix-ui/react-compose-refs/dist/index.module.js
  var import_react43 = __toESM(require_react());
  function $6ed0406888f73fc4$var$setRef(ref, value) {
    if (typeof ref === "function")
      ref(value);
    else if (ref !== null && ref !== void 0)
      ref.current = value;
  }
  function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
    return (node) => refs.forEach(
      (ref) => $6ed0406888f73fc4$var$setRef(ref, node)
    );
  }
  function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
    return (0, import_react43.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
  }

  // ../../../node_modules/@radix-ui/react-context/dist/index.module.js
  var import_react44 = __toESM(require_react());
  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
    const Context = /* @__PURE__ */ (0, import_react44.createContext)(defaultContext);
    function Provider(props) {
      const _a5 = props, { children } = _a5, context = __objRest(_a5, ["children"]);
      const value = (0, import_react44.useMemo)(
        () => context,
        Object.values(context)
      );
      return /* @__PURE__ */ (0, import_react44.createElement)(Context.Provider, {
        value
      }, children);
    }
    function useContext11(consumerName) {
      const context = (0, import_react44.useContext)(Context);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider.displayName = rootComponentName + "Provider";
    return [
      Provider,
      useContext11
    ];
  }
  function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    function $c512c27ab02ef895$export$fd42f52fd3ae11092(rootComponentName, defaultContext) {
      const BaseContext = /* @__PURE__ */ (0, import_react44.createContext)(defaultContext);
      const index2 = defaultContexts.length;
      defaultContexts = [
        ...defaultContexts,
        defaultContext
      ];
      function Provider(props) {
        const _a5 = props, { scope, children } = _a5, context = __objRest(_a5, ["scope", "children"]);
        const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index2]) || BaseContext;
        const value = (0, import_react44.useMemo)(
          () => context,
          Object.values(context)
        );
        return /* @__PURE__ */ (0, import_react44.createElement)(Context.Provider, {
          value
        }, children);
      }
      function useContext11(consumerName, scope) {
        const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index2]) || BaseContext;
        const context = (0, import_react44.useContext)(Context);
        if (context)
          return context;
        if (defaultContext !== void 0)
          return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      Provider.displayName = rootComponentName + "Provider";
      return [
        Provider,
        useContext11
      ];
    }
    const createScope = () => {
      const scopeContexts = defaultContexts.map((defaultContext) => {
        return /* @__PURE__ */ (0, import_react44.createContext)(defaultContext);
      });
      return function useScope(scope) {
        const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
        return (0, import_react44.useMemo)(
          () => ({
            [`__scope${scopeName}`]: __spreadProps(__spreadValues({}, scope), {
              [scopeName]: contexts
            })
          }),
          [
            scope,
            contexts
          ]
        );
      };
    };
    createScope.scopeName = scopeName;
    return [
      $c512c27ab02ef895$export$fd42f52fd3ae11092,
      $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)
    ];
  }
  function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1)
      return baseScope;
    const createScope1 = () => {
      const scopeHooks = scopes.map(
        (createScope) => ({
          useScope: createScope(),
          scopeName: createScope.scopeName
        })
      );
      return function useComposedScopes(overrideScopes) {
        const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
          const scopeProps = useScope(overrideScopes);
          const currentScope = scopeProps[`__scope${scopeName}`];
          return __spreadValues(__spreadValues({}, nextScopes), currentScope);
        }, {});
        return (0, import_react44.useMemo)(
          () => ({
            [`__scope${baseScope.scopeName}`]: nextScopes1
          }),
          [
            nextScopes1
          ]
        );
      };
    };
    createScope1.scopeName = baseScope.scopeName;
    return createScope1;
  }

  // ../../../node_modules/@radix-ui/react-id/dist/index.module.js
  var $2AODx$react = __toESM(require_react());

  // ../../../node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
  var import_react45 = __toESM(require_react());
  var $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react45.useLayoutEffect : () => {
  };

  // ../../../node_modules/@radix-ui/react-id/dist/index.module.js
  var $1746a345f3d73bb7$var$useReactId = $2AODx$react["useId".toString()] || (() => void 0);
  var $1746a345f3d73bb7$var$count = 0;
  function $1746a345f3d73bb7$export$f680877a34711e37(deterministicId) {
    const [id, setId] = $2AODx$react.useState($1746a345f3d73bb7$var$useReactId());
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (!deterministicId)
        setId(
          (reactId) => reactId !== null && reactId !== void 0 ? reactId : String($1746a345f3d73bb7$var$count++)
        );
    }, [
      deterministicId
    ]);
    return deterministicId || (id ? `radix-${id}` : "");
  }

  // ../../../node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js
  var import_react47 = __toESM(require_react());

  // ../../../node_modules/@radix-ui/react-use-callback-ref/dist/index.module.js
  var import_react46 = __toESM(require_react());
  function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
    const callbackRef = (0, import_react46.useRef)(callback);
    (0, import_react46.useEffect)(() => {
      callbackRef.current = callback;
    });
    return (0, import_react46.useMemo)(
      () => (...args) => {
        var _callbackRef$current;
        return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args);
      },
      []
    );
  }

  // ../../../node_modules/@radix-ui/react-use-controllable-state/dist/index.module.js
  function $71cd76cc60e0454e$export$6f32135080cb4c3({ prop, defaultProp, onChange = () => {
  } }) {
    const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({
      defaultProp,
      onChange
    });
    const isControlled = prop !== void 0;
    const value1 = isControlled ? prop : uncontrolledProp;
    const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
    const setValue = (0, import_react47.useCallback)((nextValue) => {
      if (isControlled) {
        const setter = nextValue;
        const value = typeof nextValue === "function" ? setter(prop) : nextValue;
        if (value !== prop)
          handleChange(value);
      } else
        setUncontrolledProp(nextValue);
    }, [
      isControlled,
      prop,
      setUncontrolledProp,
      handleChange
    ]);
    return [
      value1,
      setValue
    ];
  }
  function $71cd76cc60e0454e$var$useUncontrolledState({ defaultProp, onChange }) {
    const uncontrolledState = (0, import_react47.useState)(defaultProp);
    const [value] = uncontrolledState;
    const prevValueRef = (0, import_react47.useRef)(value);
    const handleChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onChange);
    (0, import_react47.useEffect)(() => {
      if (prevValueRef.current !== value) {
        handleChange(value);
        prevValueRef.current = value;
      }
    }, [
      value,
      prevValueRef,
      handleChange
    ]);
    return uncontrolledState;
  }

  // ../../../node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
  var import_react51 = __toESM(require_react());

  // ../../../node_modules/@radix-ui/react-primitive/dist/index.module.js
  var import_react49 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // ../../../node_modules/@radix-ui/react-slot/dist/index.module.js
  var import_react48 = __toESM(require_react());
  var $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /* @__PURE__ */ (0, import_react48.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { children } = _a5, slotProps = __objRest(_a5, ["children"]);
    const childrenArray = import_react48.Children.toArray(children);
    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
    if (slottable) {
      const newElement = slottable.props.children;
      const newChildren = childrenArray.map((child) => {
        if (child === slottable) {
          if (import_react48.Children.count(newElement) > 1)
            return import_react48.Children.only(null);
          return /* @__PURE__ */ (0, import_react48.isValidElement)(newElement) ? newElement.props.children : null;
        } else
          return child;
      });
      return /* @__PURE__ */ (0, import_react48.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
        ref: forwardedRef
      }), /* @__PURE__ */ (0, import_react48.isValidElement)(newElement) ? /* @__PURE__ */ (0, import_react48.cloneElement)(newElement, void 0, newChildren) : null);
    }
    return /* @__PURE__ */ (0, import_react48.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), children);
  });
  $5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
  var $5e63c961fc1ce211$var$SlotClone = /* @__PURE__ */ (0, import_react48.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { children } = _a5, slotProps = __objRest(_a5, ["children"]);
    if (/* @__PURE__ */ (0, import_react48.isValidElement)(children))
      return /* @__PURE__ */ (0, import_react48.cloneElement)(children, __spreadProps(__spreadValues({}, $5e63c961fc1ce211$var$mergeProps(slotProps, children.props)), {
        ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref)
      }));
    return import_react48.Children.count(children) > 1 ? import_react48.Children.only(null) : null;
  });
  $5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
  var $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => {
    return /* @__PURE__ */ (0, import_react48.createElement)(import_react48.Fragment, null, children);
  };
  function $5e63c961fc1ce211$var$isSlottable(child) {
    return /* @__PURE__ */ (0, import_react48.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
  }
  function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
    const overrideProps = __spreadValues({}, childProps);
    for (const propName in childProps) {
      const slotPropValue = slotProps[propName];
      const childPropValue = childProps[propName];
      const isHandler = /^on[A-Z]/.test(propName);
      if (isHandler) {
        if (slotPropValue && childPropValue)
          overrideProps[propName] = (...args) => {
            childPropValue(...args);
            slotPropValue(...args);
          };
        else if (slotPropValue)
          overrideProps[propName] = slotPropValue;
      } else if (propName === "style")
        overrideProps[propName] = __spreadValues(__spreadValues({}, slotPropValue), childPropValue);
      else if (propName === "className")
        overrideProps[propName] = [
          slotPropValue,
          childPropValue
        ].filter(Boolean).join(" ");
    }
    return __spreadValues(__spreadValues({}, slotProps), overrideProps);
  }

  // ../../../node_modules/@radix-ui/react-primitive/dist/index.module.js
  var $8927f6f2acc4f386$var$NODES = [
    "a",
    "button",
    "div",
    "form",
    "h2",
    "h3",
    "img",
    "input",
    "label",
    "li",
    "nav",
    "ol",
    "p",
    "span",
    "svg",
    "ul"
  ];
  var $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node) => {
    const Node = /* @__PURE__ */ (0, import_react49.forwardRef)((props, forwardedRef) => {
      const _a5 = props, { asChild } = _a5, primitiveProps = __objRest(_a5, ["asChild"]);
      const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node;
      (0, import_react49.useEffect)(() => {
        window[Symbol.for("radix-ui")] = true;
      }, []);
      return /* @__PURE__ */ (0, import_react49.createElement)(Comp, _extends({}, primitiveProps, {
        ref: forwardedRef
      }));
    });
    Node.displayName = `Primitive.${node}`;
    return __spreadProps(__spreadValues({}, primitive), {
      [node]: Node
    });
  }, {});
  function $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event) {
    if (target)
      (0, import_react_dom.flushSync)(
        () => target.dispatchEvent(event)
      );
  }

  // ../../../node_modules/@radix-ui/react-use-escape-keydown/dist/index.module.js
  var import_react50 = __toESM(require_react());
  function $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
    const onEscapeKeyDown = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEscapeKeyDownProp);
    (0, import_react50.useEffect)(() => {
      const handleKeyDown = (event) => {
        if (event.key === "Escape")
          onEscapeKeyDown(event);
      };
      ownerDocument.addEventListener("keydown", handleKeyDown);
      return () => ownerDocument.removeEventListener("keydown", handleKeyDown);
    }, [
      onEscapeKeyDown,
      ownerDocument
    ]);
  }

  // ../../../node_modules/@radix-ui/react-dismissable-layer/dist/index.module.js
  var $5cb92bef7577960e$var$CONTEXT_UPDATE = "dismissableLayer.update";
  var $5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
  var $5cb92bef7577960e$var$FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
  var $5cb92bef7577960e$var$originalBodyPointerEvents;
  var $5cb92bef7577960e$var$DismissableLayerContext = /* @__PURE__ */ (0, import_react51.createContext)({
    layers: /* @__PURE__ */ new Set(),
    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
    branches: /* @__PURE__ */ new Set()
  });
  var $5cb92bef7577960e$export$177fb62ff3ec1f22 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    var _node$ownerDocument;
    const _a5 = props, { disableOutsidePointerEvents = false, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss } = _a5, layerProps = __objRest(_a5, ["disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss"]);
    const context = (0, import_react51.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
    const [node1, setNode] = (0, import_react51.useState)(null);
    const ownerDocument = (_node$ownerDocument = node1 === null || node1 === void 0 ? void 0 : node1.ownerDocument) !== null && _node$ownerDocument !== void 0 ? _node$ownerDocument : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;
    const [, force] = (0, import_react51.useState)({});
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setNode(node)
    );
    const layers = Array.from(context.layers);
    const [highestLayerWithOutsidePointerEventsDisabled] = [
      ...context.layersWithOutsidePointerEventsDisabled
    ].slice(-1);
    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
    const index2 = node1 ? layers.indexOf(node1) : -1;
    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
    const isPointerEventsEnabled = index2 >= highestLayerWithOutsidePointerEventsDisabledIndex;
    const pointerDownOutside = $5cb92bef7577960e$var$usePointerDownOutside((event) => {
      const target = event.target;
      const isPointerDownOnBranch = [
        ...context.branches
      ].some(
        (branch) => branch.contains(target)
      );
      if (!isPointerEventsEnabled || isPointerDownOnBranch)
        return;
      onPointerDownOutside === null || onPointerDownOutside === void 0 || onPointerDownOutside(event);
      onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
      if (!event.defaultPrevented)
        onDismiss === null || onDismiss === void 0 || onDismiss();
    }, ownerDocument);
    const focusOutside = $5cb92bef7577960e$var$useFocusOutside((event) => {
      const target = event.target;
      const isFocusInBranch = [
        ...context.branches
      ].some(
        (branch) => branch.contains(target)
      );
      if (isFocusInBranch)
        return;
      onFocusOutside === null || onFocusOutside === void 0 || onFocusOutside(event);
      onInteractOutside === null || onInteractOutside === void 0 || onInteractOutside(event);
      if (!event.defaultPrevented)
        onDismiss === null || onDismiss === void 0 || onDismiss();
    }, ownerDocument);
    $addc16e1bbe58fd0$export$3a72a57244d6e765((event) => {
      const isHighestLayer = index2 === context.layers.size - 1;
      if (!isHighestLayer)
        return;
      onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event);
      if (!event.defaultPrevented && onDismiss) {
        event.preventDefault();
        onDismiss();
      }
    }, ownerDocument);
    (0, import_react51.useEffect)(() => {
      if (!node1)
        return;
      if (disableOutsidePointerEvents) {
        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
          $5cb92bef7577960e$var$originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
          ownerDocument.body.style.pointerEvents = "none";
        }
        context.layersWithOutsidePointerEventsDisabled.add(node1);
      }
      context.layers.add(node1);
      $5cb92bef7577960e$var$dispatchUpdate();
      return () => {
        if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1)
          ownerDocument.body.style.pointerEvents = $5cb92bef7577960e$var$originalBodyPointerEvents;
      };
    }, [
      node1,
      ownerDocument,
      disableOutsidePointerEvents,
      context
    ]);
    (0, import_react51.useEffect)(() => {
      return () => {
        if (!node1)
          return;
        context.layers.delete(node1);
        context.layersWithOutsidePointerEventsDisabled.delete(node1);
        $5cb92bef7577960e$var$dispatchUpdate();
      };
    }, [
      node1,
      context
    ]);
    (0, import_react51.useEffect)(() => {
      const handleUpdate = () => force({});
      document.addEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
      return () => document.removeEventListener($5cb92bef7577960e$var$CONTEXT_UPDATE, handleUpdate);
    }, []);
    return /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, layerProps, {
      ref: composedRefs,
      style: __spreadValues({
        pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0
      }, props.style),
      onFocusCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusCapture, focusOutside.onFocusCapture),
      onBlurCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlurCapture, focusOutside.onBlurCapture),
      onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownCapture, pointerDownOutside.onPointerDownCapture)
    }));
  });
  var $5cb92bef7577960e$export$4d5eb2109db14228 = /* @__PURE__ */ (0, import_react51.forwardRef)((props, forwardedRef) => {
    const context = (0, import_react51.useContext)($5cb92bef7577960e$var$DismissableLayerContext);
    const ref = (0, import_react51.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    (0, import_react51.useEffect)(() => {
      const node = ref.current;
      if (node) {
        context.branches.add(node);
        return () => {
          context.branches.delete(node);
        };
      }
    }, [
      context.branches
    ]);
    return /* @__PURE__ */ (0, import_react51.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, props, {
      ref: composedRefs
    }));
  });
  function $5cb92bef7577960e$var$usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
    const handlePointerDownOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPointerDownOutside);
    const isPointerInsideReactTreeRef = (0, import_react51.useRef)(false);
    const handleClickRef = (0, import_react51.useRef)(() => {
    });
    (0, import_react51.useEffect)(() => {
      const handlePointerDown = (event) => {
        if (event.target && !isPointerInsideReactTreeRef.current) {
          let handleAndDispatchPointerDownOutsideEvent = function() {
            $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$POINTER_DOWN_OUTSIDE, handlePointerDownOutside, eventDetail, {
              discrete: true
            });
          };
          const eventDetail = {
            originalEvent: event
          };
          if (event.pointerType === "touch") {
            ownerDocument.removeEventListener("click", handleClickRef.current);
            handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;
            ownerDocument.addEventListener("click", handleClickRef.current, {
              once: true
            });
          } else
            handleAndDispatchPointerDownOutsideEvent();
        }
        isPointerInsideReactTreeRef.current = false;
      };
      const timerId = window.setTimeout(() => {
        ownerDocument.addEventListener("pointerdown", handlePointerDown);
      }, 0);
      return () => {
        window.clearTimeout(timerId);
        ownerDocument.removeEventListener("pointerdown", handlePointerDown);
        ownerDocument.removeEventListener("click", handleClickRef.current);
      };
    }, [
      ownerDocument,
      handlePointerDownOutside
    ]);
    return {
      // ensures we check React component tree (not just DOM tree)
      onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
    };
  }
  function $5cb92bef7577960e$var$useFocusOutside(onFocusOutside, ownerDocument = globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) {
    const handleFocusOutside = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onFocusOutside);
    const isFocusInsideReactTreeRef = (0, import_react51.useRef)(false);
    (0, import_react51.useEffect)(() => {
      const handleFocus = (event) => {
        if (event.target && !isFocusInsideReactTreeRef.current) {
          const eventDetail = {
            originalEvent: event
          };
          $5cb92bef7577960e$var$handleAndDispatchCustomEvent($5cb92bef7577960e$var$FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
            discrete: false
          });
        }
      };
      ownerDocument.addEventListener("focusin", handleFocus);
      return () => ownerDocument.removeEventListener("focusin", handleFocus);
    }, [
      ownerDocument,
      handleFocusOutside
    ]);
    return {
      onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
      onBlurCapture: () => isFocusInsideReactTreeRef.current = false
    };
  }
  function $5cb92bef7577960e$var$dispatchUpdate() {
    const event = new CustomEvent($5cb92bef7577960e$var$CONTEXT_UPDATE);
    document.dispatchEvent(event);
  }
  function $5cb92bef7577960e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
    const target = detail.originalEvent.target;
    const event = new CustomEvent(name, {
      bubbles: false,
      cancelable: true,
      detail
    });
    if (handler)
      target.addEventListener(name, handler, {
        once: true
      });
    if (discrete)
      $8927f6f2acc4f386$export$6d1a0317bde7de7f(target, event);
    else
      target.dispatchEvent(event);
  }
  var $5cb92bef7577960e$export$be92b6f5f03c0fe9 = $5cb92bef7577960e$export$177fb62ff3ec1f22;
  var $5cb92bef7577960e$export$aecb2ddcb55c95be = $5cb92bef7577960e$export$4d5eb2109db14228;

  // ../../../node_modules/@radix-ui/react-focus-scope/dist/index.module.js
  var import_react52 = __toESM(require_react());
  var $d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
  var $d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
  var $d3863c46a17e8a28$var$EVENT_OPTIONS = {
    bubbles: false,
    cancelable: true
  };
  var $d3863c46a17e8a28$export$20e40289641fbbb6 = /* @__PURE__ */ (0, import_react52.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { loop = false, trapped = false, onMountAutoFocus: onMountAutoFocusProp, onUnmountAutoFocus: onUnmountAutoFocusProp } = _a5, scopeProps = __objRest(_a5, ["loop", "trapped", "onMountAutoFocus", "onUnmountAutoFocus"]);
    const [container1, setContainer] = (0, import_react52.useState)(null);
    const onMountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onMountAutoFocusProp);
    const onUnmountAutoFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onUnmountAutoFocusProp);
    const lastFocusedElementRef = (0, import_react52.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setContainer(node)
    );
    const focusScope = (0, import_react52.useRef)({
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    }).current;
    (0, import_react52.useEffect)(() => {
      if (trapped) {
        let handleFocusIn = function(event) {
          if (focusScope.paused || !container1)
            return;
          const target = event.target;
          if (container1.contains(target))
            lastFocusedElementRef.current = target;
          else
            $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
              select: true
            });
        }, handleFocusOut = function(event) {
          if (focusScope.paused || !container1)
            return;
          if (!container1.contains(event.relatedTarget))
            $d3863c46a17e8a28$var$focus(lastFocusedElementRef.current, {
              select: true
            });
        };
        document.addEventListener("focusin", handleFocusIn);
        document.addEventListener("focusout", handleFocusOut);
        return () => {
          document.removeEventListener("focusin", handleFocusIn);
          document.removeEventListener("focusout", handleFocusOut);
        };
      }
    }, [
      trapped,
      container1,
      focusScope.paused
    ]);
    (0, import_react52.useEffect)(() => {
      if (container1) {
        $d3863c46a17e8a28$var$focusScopesStack.add(focusScope);
        const previouslyFocusedElement = document.activeElement;
        const hasFocusedCandidate = container1.contains(previouslyFocusedElement);
        if (!hasFocusedCandidate) {
          const mountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
          container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          container1.dispatchEvent(mountEvent);
          if (!mountEvent.defaultPrevented) {
            $d3863c46a17e8a28$var$focusFirst($d3863c46a17e8a28$var$removeLinks($d3863c46a17e8a28$var$getTabbableCandidates(container1)), {
              select: true
            });
            if (document.activeElement === previouslyFocusedElement)
              $d3863c46a17e8a28$var$focus(container1);
          }
        }
        return () => {
          container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          setTimeout(() => {
            const unmountEvent = new CustomEvent($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, $d3863c46a17e8a28$var$EVENT_OPTIONS);
            container1.addEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            container1.dispatchEvent(unmountEvent);
            if (!unmountEvent.defaultPrevented)
              $d3863c46a17e8a28$var$focus(previouslyFocusedElement !== null && previouslyFocusedElement !== void 0 ? previouslyFocusedElement : document.body, {
                select: true
              });
            container1.removeEventListener($d3863c46a17e8a28$var$AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            $d3863c46a17e8a28$var$focusScopesStack.remove(focusScope);
          }, 0);
        };
      }
    }, [
      container1,
      onMountAutoFocus,
      onUnmountAutoFocus,
      focusScope
    ]);
    const handleKeyDown = (0, import_react52.useCallback)((event) => {
      if (!loop && !trapped)
        return;
      if (focusScope.paused)
        return;
      const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
      const focusedElement = document.activeElement;
      if (isTabKey && focusedElement) {
        const container = event.currentTarget;
        const [first, last2] = $d3863c46a17e8a28$var$getTabbableEdges(container);
        const hasTabbableElementsInside = first && last2;
        if (!hasTabbableElementsInside) {
          if (focusedElement === container)
            event.preventDefault();
        } else {
          if (!event.shiftKey && focusedElement === last2) {
            event.preventDefault();
            if (loop)
              $d3863c46a17e8a28$var$focus(first, {
                select: true
              });
          } else if (event.shiftKey && focusedElement === first) {
            event.preventDefault();
            if (loop)
              $d3863c46a17e8a28$var$focus(last2, {
                select: true
              });
          }
        }
      }
    }, [
      loop,
      trapped,
      focusScope.paused
    ]);
    return /* @__PURE__ */ (0, import_react52.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      tabIndex: -1
    }, scopeProps, {
      ref: composedRefs,
      onKeyDown: handleKeyDown
    }));
  });
  function $d3863c46a17e8a28$var$focusFirst(candidates, { select = false } = {}) {
    const previouslyFocusedElement = document.activeElement;
    for (const candidate of candidates) {
      $d3863c46a17e8a28$var$focus(candidate, {
        select
      });
      if (document.activeElement !== previouslyFocusedElement)
        return;
    }
  }
  function $d3863c46a17e8a28$var$getTabbableEdges(container) {
    const candidates = $d3863c46a17e8a28$var$getTabbableCandidates(container);
    const first = $d3863c46a17e8a28$var$findVisible(candidates, container);
    const last2 = $d3863c46a17e8a28$var$findVisible(candidates.reverse(), container);
    return [
      first,
      last2
    ];
  }
  function $d3863c46a17e8a28$var$getTabbableCandidates(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput)
          return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode())
      nodes.push(walker.currentNode);
    return nodes;
  }
  function $d3863c46a17e8a28$var$findVisible(elements, container) {
    for (const element of elements) {
      if (!$d3863c46a17e8a28$var$isHidden(element, {
        upTo: container
      }))
        return element;
    }
  }
  function $d3863c46a17e8a28$var$isHidden(node, { upTo }) {
    if (getComputedStyle(node).visibility === "hidden")
      return true;
    while (node) {
      if (upTo !== void 0 && node === upTo)
        return false;
      if (getComputedStyle(node).display === "none")
        return true;
      node = node.parentElement;
    }
    return false;
  }
  function $d3863c46a17e8a28$var$isSelectableInput(element) {
    return element instanceof HTMLInputElement && "select" in element;
  }
  function $d3863c46a17e8a28$var$focus(element, { select = false } = {}) {
    if (element && element.focus) {
      const previouslyFocusedElement = document.activeElement;
      element.focus({
        preventScroll: true
      });
      if (element !== previouslyFocusedElement && $d3863c46a17e8a28$var$isSelectableInput(element) && select)
        element.select();
    }
  }
  var $d3863c46a17e8a28$var$focusScopesStack = $d3863c46a17e8a28$var$createFocusScopesStack();
  function $d3863c46a17e8a28$var$createFocusScopesStack() {
    let stack3 = [];
    return {
      add(focusScope) {
        const activeFocusScope = stack3[0];
        if (focusScope !== activeFocusScope)
          activeFocusScope === null || activeFocusScope === void 0 || activeFocusScope.pause();
        stack3 = $d3863c46a17e8a28$var$arrayRemove(stack3, focusScope);
        stack3.unshift(focusScope);
      },
      remove(focusScope) {
        var _stack$;
        stack3 = $d3863c46a17e8a28$var$arrayRemove(stack3, focusScope);
        (_stack$ = stack3[0]) === null || _stack$ === void 0 || _stack$.resume();
      }
    };
  }
  function $d3863c46a17e8a28$var$arrayRemove(array2, item) {
    const updatedArray = [
      ...array2
    ];
    const index2 = updatedArray.indexOf(item);
    if (index2 !== -1)
      updatedArray.splice(index2, 1);
    return updatedArray;
  }
  function $d3863c46a17e8a28$var$removeLinks(items) {
    return items.filter(
      (item) => item.tagName !== "A"
    );
  }

  // ../../../node_modules/@radix-ui/react-portal/dist/index.module.js
  var import_react53 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());
  var $f1701beae083dbae$export$602eac185826482c = /* @__PURE__ */ (0, import_react53.forwardRef)((props, forwardedRef) => {
    var _globalThis$document;
    const _a5 = props, { container = globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$document = globalThis.document) === null || _globalThis$document === void 0 ? void 0 : _globalThis$document.body } = _a5, portalProps = __objRest(_a5, ["container"]);
    return container ? /* @__PURE__ */ import_react_dom2.default.createPortal(/* @__PURE__ */ (0, import_react53.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, portalProps, {
      ref: forwardedRef
    })), container) : null;
  });

  // ../../../node_modules/@radix-ui/react-presence/dist/index.module.js
  var import_react54 = __toESM(require_react());
  var import_react_dom3 = __toESM(require_react_dom());
  function $fe963b355347cc68$export$3e6543de14f8614f(initialState2, machine) {
    return (0, import_react54.useReducer)((state, event) => {
      const nextState = machine[state][event];
      return nextState !== null && nextState !== void 0 ? nextState : state;
    }, initialState2);
  }
  var $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props) => {
    const { present, children } = props;
    const presence = $921a889cee6df7e8$var$usePresence(present);
    const child = typeof children === "function" ? children({
      present: presence.isPresent
    }) : import_react54.Children.only(children);
    const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref, child.ref);
    const forceMount = typeof children === "function";
    return forceMount || presence.isPresent ? /* @__PURE__ */ (0, import_react54.cloneElement)(child, {
      ref
    }) : null;
  };
  $921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = "Presence";
  function $921a889cee6df7e8$var$usePresence(present) {
    const [node1, setNode] = (0, import_react54.useState)();
    const stylesRef = (0, import_react54.useRef)({});
    const prevPresentRef = (0, import_react54.useRef)(present);
    const prevAnimationNameRef = (0, import_react54.useRef)("none");
    const initialState2 = present ? "mounted" : "unmounted";
    const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState2, {
      mounted: {
        UNMOUNT: "unmounted",
        ANIMATION_OUT: "unmountSuspended"
      },
      unmountSuspended: {
        MOUNT: "mounted",
        ANIMATION_END: "unmounted"
      },
      unmounted: {
        MOUNT: "mounted"
      }
    });
    (0, import_react54.useEffect)(() => {
      const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
      prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
    }, [
      state
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      const styles2 = stylesRef.current;
      const wasPresent = prevPresentRef.current;
      const hasPresentChanged = wasPresent !== present;
      if (hasPresentChanged) {
        const prevAnimationName = prevAnimationNameRef.current;
        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles2);
        if (present)
          send("MOUNT");
        else if (currentAnimationName === "none" || (styles2 === null || styles2 === void 0 ? void 0 : styles2.display) === "none")
          send("UNMOUNT");
        else {
          const isAnimating = prevAnimationName !== currentAnimationName;
          if (wasPresent && isAnimating)
            send("ANIMATION_OUT");
          else
            send("UNMOUNT");
        }
        prevPresentRef.current = present;
      }
    }, [
      present,
      send
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (node1) {
        const handleAnimationEnd = (event) => {
          const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
          const isCurrentAnimation = currentAnimationName.includes(event.animationName);
          if (event.target === node1 && isCurrentAnimation)
            (0, import_react_dom3.flushSync)(
              () => send("ANIMATION_END")
            );
        };
        const handleAnimationStart = (event) => {
          if (event.target === node1)
            prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
        };
        node1.addEventListener("animationstart", handleAnimationStart);
        node1.addEventListener("animationcancel", handleAnimationEnd);
        node1.addEventListener("animationend", handleAnimationEnd);
        return () => {
          node1.removeEventListener("animationstart", handleAnimationStart);
          node1.removeEventListener("animationcancel", handleAnimationEnd);
          node1.removeEventListener("animationend", handleAnimationEnd);
        };
      } else
        send("ANIMATION_END");
    }, [
      node1,
      send
    ]);
    return {
      isPresent: [
        "mounted",
        "unmountSuspended"
      ].includes(state),
      ref: (0, import_react54.useCallback)((node) => {
        if (node)
          stylesRef.current = getComputedStyle(node);
        setNode(node);
      }, [])
    };
  }
  function $921a889cee6df7e8$var$getAnimationName(styles2) {
    return (styles2 === null || styles2 === void 0 ? void 0 : styles2.animationName) || "none";
  }

  // ../../../node_modules/@radix-ui/react-focus-guards/dist/index.module.js
  var import_react55 = __toESM(require_react());
  var $3db38b7d1fb3fe6a$var$count = 0;
  function $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c() {
    (0, import_react55.useEffect)(() => {
      var _edgeGuards$, _edgeGuards$2;
      const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
      document.body.insertAdjacentElement("afterbegin", (_edgeGuards$ = edgeGuards[0]) !== null && _edgeGuards$ !== void 0 ? _edgeGuards$ : $3db38b7d1fb3fe6a$var$createFocusGuard());
      document.body.insertAdjacentElement("beforeend", (_edgeGuards$2 = edgeGuards[1]) !== null && _edgeGuards$2 !== void 0 ? _edgeGuards$2 : $3db38b7d1fb3fe6a$var$createFocusGuard());
      $3db38b7d1fb3fe6a$var$count++;
      return () => {
        if ($3db38b7d1fb3fe6a$var$count === 1)
          document.querySelectorAll("[data-radix-focus-guard]").forEach(
            (node) => node.remove()
          );
        $3db38b7d1fb3fe6a$var$count--;
      };
    }, []);
  }
  function $3db38b7d1fb3fe6a$var$createFocusGuard() {
    const element = document.createElement("span");
    element.setAttribute("data-radix-focus-guard", "");
    element.tabIndex = 0;
    element.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none";
    return element;
  }

  // ../../../node_modules/tslib/tslib.es6.js
  var __assign = function() {
    __assign = Object.assign || function __assign2(t4) {
      for (var s3, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
        s3 = arguments[i3];
        for (var p3 in s3)
          if (Object.prototype.hasOwnProperty.call(s3, p3))
            t4[p3] = s3[p3];
      }
      return t4;
    };
    return __assign.apply(this, arguments);
  };
  function __rest(s3, e2) {
    var t4 = {};
    for (var p3 in s3)
      if (Object.prototype.hasOwnProperty.call(s3, p3) && e2.indexOf(p3) < 0)
        t4[p3] = s3[p3];
    if (s3 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i3 = 0, p3 = Object.getOwnPropertySymbols(s3); i3 < p3.length; i3++) {
        if (e2.indexOf(p3[i3]) < 0 && Object.prototype.propertyIsEnumerable.call(s3, p3[i3]))
          t4[p3[i3]] = s3[p3[i3]];
      }
    return t4;
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i3 = 0, l3 = from.length, ar; i3 < l3; i3++) {
        if (ar || !(i3 in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i3);
          ar[i3] = from[i3];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }

  // ../../../node_modules/react-remove-scroll/dist/es2015/Combination.js
  var React40 = __toESM(require_react());

  // ../../../node_modules/react-remove-scroll/dist/es2015/UI.js
  var React36 = __toESM(require_react());

  // ../../../node_modules/react-remove-scroll-bar/dist/es2015/constants.js
  var zeroRightClassName = "right-scroll-bar-position";
  var fullWidthClassName = "width-before-scroll-bar";
  var noScrollbarsClassName = "with-scroll-bars-hidden";
  var removedBarSizeVariable = "--removed-body-scroll-bar-size";

  // ../../../node_modules/use-callback-ref/dist/es2015/assignRef.js
  function assignRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
    return ref;
  }

  // ../../../node_modules/use-callback-ref/dist/es2015/useRef.js
  var import_react56 = __toESM(require_react());
  function useCallbackRef(initialValue, callback) {
    var ref = (0, import_react56.useState)(function() {
      return {
        // value
        value: initialValue,
        // last callback
        callback,
        // "memoized" public interface
        facade: {
          get current() {
            return ref.value;
          },
          set current(value) {
            var last2 = ref.value;
            if (last2 !== value) {
              ref.value = value;
              ref.callback(value, last2);
            }
          }
        }
      };
    })[0];
    ref.callback = callback;
    return ref.facade;
  }

  // ../../../node_modules/use-callback-ref/dist/es2015/useMergeRef.js
  function useMergeRefs(refs, defaultValue) {
    return useCallbackRef(defaultValue || null, function(newValue) {
      return refs.forEach(function(ref) {
        return assignRef(ref, newValue);
      });
    });
  }

  // ../../../node_modules/use-sidecar/dist/es2015/medium.js
  function ItoI(a3) {
    return a3;
  }
  function innerCreateMedium(defaults, middleware) {
    if (middleware === void 0) {
      middleware = ItoI;
    }
    var buffer = [];
    var assigned = false;
    var medium = {
      read: function() {
        if (assigned) {
          throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
        }
        if (buffer.length) {
          return buffer[buffer.length - 1];
        }
        return defaults;
      },
      useMedium: function(data) {
        var item = middleware(data, assigned);
        buffer.push(item);
        return function() {
          buffer = buffer.filter(function(x3) {
            return x3 !== item;
          });
        };
      },
      assignSyncMedium: function(cb) {
        assigned = true;
        while (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
        }
        buffer = {
          push: function(x3) {
            return cb(x3);
          },
          filter: function() {
            return buffer;
          }
        };
      },
      assignMedium: function(cb) {
        assigned = true;
        var pendingQueue = [];
        if (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
          pendingQueue = buffer;
        }
        var executeQueue = function() {
          var cbs2 = pendingQueue;
          pendingQueue = [];
          cbs2.forEach(cb);
        };
        var cycle = function() {
          return Promise.resolve().then(executeQueue);
        };
        cycle();
        buffer = {
          push: function(x3) {
            pendingQueue.push(x3);
            cycle();
          },
          filter: function(filter2) {
            pendingQueue = pendingQueue.filter(filter2);
            return buffer;
          }
        };
      }
    };
    return medium;
  }
  function createSidecarMedium(options) {
    if (options === void 0) {
      options = {};
    }
    var medium = innerCreateMedium(null);
    medium.options = __assign({ async: true, ssr: false }, options);
    return medium;
  }

  // ../../../node_modules/use-sidecar/dist/es2015/exports.js
  var React35 = __toESM(require_react());
  var SideCar = function(_a5) {
    var sideCar = _a5.sideCar, rest = __rest(_a5, ["sideCar"]);
    if (!sideCar) {
      throw new Error("Sidecar: please provide `sideCar` property to import the right car");
    }
    var Target = sideCar.read();
    if (!Target) {
      throw new Error("Sidecar medium not found");
    }
    return React35.createElement(Target, __assign({}, rest));
  };
  SideCar.isSideCarExport = true;
  function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
  }

  // ../../../node_modules/react-remove-scroll/dist/es2015/medium.js
  var effectCar = createSidecarMedium();

  // ../../../node_modules/react-remove-scroll/dist/es2015/UI.js
  var nothing = function() {
    return;
  };
  var RemoveScroll = React36.forwardRef(function(props, parentRef) {
    var ref = React36.useRef(null);
    var _a5 = React36.useState({
      onScrollCapture: nothing,
      onWheelCapture: nothing,
      onTouchMoveCapture: nothing
    }), callbacks = _a5[0], setCallbacks = _a5[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b2 = props.as, Container = _b2 === void 0 ? "div" : _b2, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]);
    var SideCar2 = sideCar;
    var containerRef = useMergeRefs([ref, parentRef]);
    var containerProps = __assign(__assign({}, rest), callbacks);
    return React36.createElement(
      React36.Fragment,
      null,
      enabled && React36.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref }),
      forwardProps ? React36.cloneElement(React36.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React36.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children)
    );
  });
  RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
  };
  RemoveScroll.classNames = {
    fullWidth: fullWidthClassName,
    zeroRight: zeroRightClassName
  };

  // ../../../node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var React39 = __toESM(require_react());

  // ../../../node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var React38 = __toESM(require_react());

  // ../../../node_modules/react-style-singleton/dist/es2015/hook.js
  var React37 = __toESM(require_react());

  // ../../../node_modules/get-nonce/dist/es2015/index.js
  var currentNonce;
  var getNonce = function() {
    if (currentNonce) {
      return currentNonce;
    }
    if (typeof __webpack_nonce__ !== "undefined") {
      return __webpack_nonce__;
    }
    return void 0;
  };

  // ../../../node_modules/react-style-singleton/dist/es2015/singleton.js
  function makeStyleTag() {
    if (!document)
      return null;
    var tag = document.createElement("style");
    tag.type = "text/css";
    var nonce = getNonce();
    if (nonce) {
      tag.setAttribute("nonce", nonce);
    }
    return tag;
  }
  function injectStyles(tag, css) {
    if (tag.styleSheet) {
      tag.styleSheet.cssText = css;
    } else {
      tag.appendChild(document.createTextNode(css));
    }
  }
  function insertStyleTag(tag) {
    var head = document.head || document.getElementsByTagName("head")[0];
    head.appendChild(tag);
  }
  var stylesheetSingleton = function() {
    var counter = 0;
    var stylesheet = null;
    return {
      add: function(style) {
        if (counter == 0) {
          if (stylesheet = makeStyleTag()) {
            injectStyles(stylesheet, style);
            insertStyleTag(stylesheet);
          }
        }
        counter++;
      },
      remove: function() {
        counter--;
        if (!counter && stylesheet) {
          stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
          stylesheet = null;
        }
      }
    };
  };

  // ../../../node_modules/react-style-singleton/dist/es2015/hook.js
  var styleHookSingleton = function() {
    var sheet = stylesheetSingleton();
    return function(styles2, isDynamic) {
      React37.useEffect(function() {
        sheet.add(styles2);
        return function() {
          sheet.remove();
        };
      }, [styles2 && isDynamic]);
    };
  };

  // ../../../node_modules/react-style-singleton/dist/es2015/component.js
  var styleSingleton = function() {
    var useStyle = styleHookSingleton();
    var Sheet = function(_a5) {
      var styles2 = _a5.styles, dynamic = _a5.dynamic;
      useStyle(styles2, dynamic);
      return null;
    };
    return Sheet;
  };

  // ../../../node_modules/react-remove-scroll-bar/dist/es2015/utils.js
  var zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
  };
  var parse2 = function(x3) {
    return parseInt(x3 || "", 10) || 0;
  };
  var getOffset = function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
    var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
    var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
    return [parse2(left), parse2(top), parse2(right)];
  };
  var getGapWidth = function(gapMode) {
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    if (typeof window === "undefined") {
      return zeroGap;
    }
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
      left: offsets[0],
      top: offsets[1],
      right: offsets[2],
      gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
  };

  // ../../../node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var Style = styleSingleton();
  var getStyles = function(_a5, allowRelative, gapMode, important) {
    var left = _a5.left, top = _a5.top, right = _a5.right, gap = _a5.gap;
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
      allowRelative && "position: relative ".concat(important, ";"),
      gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
      gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
    ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
  };
  var RemoveScrollBar = function(props) {
    var noRelative = props.noRelative, noImportant = props.noImportant, _a5 = props.gapMode, gapMode = _a5 === void 0 ? "margin" : _a5;
    var gap = React38.useMemo(function() {
      return getGapWidth(gapMode);
    }, [gapMode]);
    return React38.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
  };

  // ../../../node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
  var passiveSupported = false;
  if (typeof window !== "undefined") {
    try {
      options = Object.defineProperty({}, "passive", {
        get: function() {
          passiveSupported = true;
          return true;
        }
      });
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (err) {
      passiveSupported = false;
    }
  }
  var options;
  var nonPassive = passiveSupported ? { passive: false } : false;

  // ../../../node_modules/react-remove-scroll/dist/es2015/handleScroll.js
  var alwaysContainsScroll = function(node) {
    return node.tagName === "TEXTAREA";
  };
  var elementCanBeScrolled = function(node, overflow) {
    var styles2 = window.getComputedStyle(node);
    return (
      // not-not-scrollable
      styles2[overflow] !== "hidden" && // contains scroll inside self
      !(styles2.overflowY === styles2.overflowX && !alwaysContainsScroll(node) && styles2[overflow] === "visible")
    );
  };
  var elementCouldBeVScrolled = function(node) {
    return elementCanBeScrolled(node, "overflowY");
  };
  var elementCouldBeHScrolled = function(node) {
    return elementCanBeScrolled(node, "overflowX");
  };
  var locationCouldBeScrolled = function(axis, node) {
    var current = node;
    do {
      if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
        current = current.host;
      }
      var isScrollable = elementCouldBeScrolled(axis, current);
      if (isScrollable) {
        var _a5 = getScrollVariables(axis, current), s3 = _a5[1], d3 = _a5[2];
        if (s3 > d3) {
          return true;
        }
      }
      current = current.parentNode;
    } while (current && current !== document.body);
    return false;
  };
  var getVScrollVariables = function(_a5) {
    var scrollTop = _a5.scrollTop, scrollHeight = _a5.scrollHeight, clientHeight = _a5.clientHeight;
    return [
      scrollTop,
      scrollHeight,
      clientHeight
    ];
  };
  var getHScrollVariables = function(_a5) {
    var scrollLeft = _a5.scrollLeft, scrollWidth = _a5.scrollWidth, clientWidth = _a5.clientWidth;
    return [
      scrollLeft,
      scrollWidth,
      clientWidth
    ];
  };
  var elementCouldBeScrolled = function(axis, node) {
    return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
  };
  var getScrollVariables = function(axis, node) {
    return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
  };
  var getDirectionFactor = function(axis, direction) {
    return axis === "h" && direction === "rtl" ? -1 : 1;
  };
  var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
    var delta = directionFactor * sourceDelta;
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
      var _a5 = getScrollVariables(axis, target), position = _a5[0], scroll_1 = _a5[1], capacity = _a5[2];
      var elementScroll = scroll_1 - capacity - directionFactor * position;
      if (position || elementScroll) {
        if (elementCouldBeScrolled(axis, target)) {
          availableScroll += elementScroll;
          availableScrollTop += position;
        }
      }
      target = target.parentNode;
    } while (
      // portaled content
      !targetInLock && target !== document.body || // self content
      targetInLock && (endTarget.contains(target) || endTarget === target)
    );
    if (isDeltaPositive && (noOverscroll && availableScroll === 0 || !noOverscroll && delta > availableScroll)) {
      shouldCancelScroll = true;
    } else if (!isDeltaPositive && (noOverscroll && availableScrollTop === 0 || !noOverscroll && -delta > availableScrollTop)) {
      shouldCancelScroll = true;
    }
    return shouldCancelScroll;
  };

  // ../../../node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var getTouchXY = function(event) {
    return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
  };
  var getDeltaXY = function(event) {
    return [event.deltaX, event.deltaY];
  };
  var extractRef = function(ref) {
    return ref && "current" in ref ? ref.current : ref;
  };
  var deltaCompare = function(x3, y3) {
    return x3[0] === y3[0] && x3[1] === y3[1];
  };
  var generateStyle = function(id) {
    return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
  };
  var idCounter = 0;
  var lockStack = [];
  function RemoveScrollSideCar(props) {
    var shouldPreventQueue = React39.useRef([]);
    var touchStartRef = React39.useRef([0, 0]);
    var activeAxis = React39.useRef();
    var id = React39.useState(idCounter++)[0];
    var Style2 = React39.useState(function() {
      return styleSingleton();
    })[0];
    var lastProps = React39.useRef(props);
    React39.useEffect(function() {
      lastProps.current = props;
    }, [props]);
    React39.useEffect(function() {
      if (props.inert) {
        document.body.classList.add("block-interactivity-".concat(id));
        var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
        allow_1.forEach(function(el) {
          return el.classList.add("allow-interactivity-".concat(id));
        });
        return function() {
          document.body.classList.remove("block-interactivity-".concat(id));
          allow_1.forEach(function(el) {
            return el.classList.remove("allow-interactivity-".concat(id));
          });
        };
      }
      return;
    }, [props.inert, props.lockRef.current, props.shards]);
    var shouldCancelEvent = React39.useCallback(function(event, parent) {
      if ("touches" in event && event.touches.length === 2) {
        return !lastProps.current.allowPinchZoom;
      }
      var touch = getTouchXY(event);
      var touchStart = touchStartRef.current;
      var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
      var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
      var currentAxis;
      var target = event.target;
      var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
      if ("touches" in event && moveDirection === "h" && target.type === "range") {
        return false;
      }
      var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      if (!canBeScrolledInMainDirection) {
        return true;
      }
      if (canBeScrolledInMainDirection) {
        currentAxis = moveDirection;
      } else {
        currentAxis = moveDirection === "v" ? "h" : "v";
        canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      }
      if (!canBeScrolledInMainDirection) {
        return false;
      }
      if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
        activeAxis.current = currentAxis;
      }
      if (!currentAxis) {
        return true;
      }
      var cancelingAxis = activeAxis.current || currentAxis;
      return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = React39.useCallback(function(_event) {
      var event = _event;
      if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
        return;
      }
      var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
      var sourceEvent = shouldPreventQueue.current.filter(function(e2) {
        return e2.name === event.type && e2.target === event.target && deltaCompare(e2.delta, delta);
      })[0];
      if (sourceEvent && sourceEvent.should) {
        if (event.cancelable) {
          event.preventDefault();
        }
        return;
      }
      if (!sourceEvent) {
        var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
          return node.contains(event.target);
        });
        var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
        if (shouldStop) {
          if (event.cancelable) {
            event.preventDefault();
          }
        }
      }
    }, []);
    var shouldCancel = React39.useCallback(function(name, delta, target, should) {
      var event = { name, delta, target, should };
      shouldPreventQueue.current.push(event);
      setTimeout(function() {
        shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e2) {
          return e2 !== event;
        });
      }, 1);
    }, []);
    var scrollTouchStart = React39.useCallback(function(event) {
      touchStartRef.current = getTouchXY(event);
      activeAxis.current = void 0;
    }, []);
    var scrollWheel = React39.useCallback(function(event) {
      shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = React39.useCallback(function(event) {
      shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    React39.useEffect(function() {
      lockStack.push(Style2);
      props.setCallbacks({
        onScrollCapture: scrollWheel,
        onWheelCapture: scrollWheel,
        onTouchMoveCapture: scrollTouchMove
      });
      document.addEventListener("wheel", shouldPrevent, nonPassive);
      document.addEventListener("touchmove", shouldPrevent, nonPassive);
      document.addEventListener("touchstart", scrollTouchStart, nonPassive);
      return function() {
        lockStack = lockStack.filter(function(inst) {
          return inst !== Style2;
        });
        document.removeEventListener("wheel", shouldPrevent, nonPassive);
        document.removeEventListener("touchmove", shouldPrevent, nonPassive);
        document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
      };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return React39.createElement(
      React39.Fragment,
      null,
      inert ? React39.createElement(Style2, { styles: generateStyle(id) }) : null,
      removeScrollBar ? React39.createElement(RemoveScrollBar, { gapMode: "margin" }) : null
    );
  }

  // ../../../node_modules/react-remove-scroll/dist/es2015/sidecar.js
  var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

  // ../../../node_modules/react-remove-scroll/dist/es2015/Combination.js
  var ReactRemoveScroll = React40.forwardRef(function(props, ref) {
    return React40.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
  });
  ReactRemoveScroll.classNames = RemoveScroll.classNames;
  var Combination_default = ReactRemoveScroll;

  // ../../../node_modules/aria-hidden/dist/es2015/index.js
  var getDefaultParent = function(originalTarget) {
    if (typeof document === "undefined") {
      return null;
    }
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
  };
  var counterMap = /* @__PURE__ */ new WeakMap();
  var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
  var markerMap = {};
  var lockCount = 0;
  var unwrapHost = function(node) {
    return node && (node.host || unwrapHost(node.parentNode));
  };
  var correctTargets = function(parent, targets) {
    return targets.map(function(target) {
      if (parent.contains(target)) {
        return target;
      }
      var correctedTarget = unwrapHost(target);
      if (correctedTarget && parent.contains(correctedTarget)) {
        return correctedTarget;
      }
      console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
      return null;
    }).filter(function(x3) {
      return Boolean(x3);
    });
  };
  var applyAttributeToOthers = function(originalTarget, parentNode, markerName, controlAttribute) {
    var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    if (!markerMap[markerName]) {
      markerMap[markerName] = /* @__PURE__ */ new WeakMap();
    }
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = /* @__PURE__ */ new Set();
    var elementsToStop = new Set(targets);
    var keep = function(el) {
      if (!el || elementsToKeep.has(el)) {
        return;
      }
      elementsToKeep.add(el);
      keep(el.parentNode);
    };
    targets.forEach(keep);
    var deep = function(parent) {
      if (!parent || elementsToStop.has(parent)) {
        return;
      }
      Array.prototype.forEach.call(parent.children, function(node) {
        if (elementsToKeep.has(node)) {
          deep(node);
        } else {
          var attr = node.getAttribute(controlAttribute);
          var alreadyHidden = attr !== null && attr !== "false";
          var counterValue = (counterMap.get(node) || 0) + 1;
          var markerValue = (markerCounter.get(node) || 0) + 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          hiddenNodes.push(node);
          if (counterValue === 1 && alreadyHidden) {
            uncontrolledNodes.set(node, true);
          }
          if (markerValue === 1) {
            node.setAttribute(markerName, "true");
          }
          if (!alreadyHidden) {
            node.setAttribute(controlAttribute, "true");
          }
        }
      });
    };
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
      hiddenNodes.forEach(function(node) {
        var counterValue = counterMap.get(node) - 1;
        var markerValue = markerCounter.get(node) - 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        if (!counterValue) {
          if (!uncontrolledNodes.has(node)) {
            node.removeAttribute(controlAttribute);
          }
          uncontrolledNodes.delete(node);
        }
        if (!markerValue) {
          node.removeAttribute(markerName);
        }
      });
      lockCount--;
      if (!lockCount) {
        counterMap = /* @__PURE__ */ new WeakMap();
        counterMap = /* @__PURE__ */ new WeakMap();
        uncontrolledNodes = /* @__PURE__ */ new WeakMap();
        markerMap = {};
      }
    };
  };
  var hideOthers = function(originalTarget, parentNode, markerName) {
    if (markerName === void 0) {
      markerName = "data-aria-hidden";
    }
    var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    var activeParentNode = parentNode || getDefaultParent(originalTarget);
    if (!activeParentNode) {
      return function() {
        return null;
      };
    }
    targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
    return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
  };

  // ../../../node_modules/@radix-ui/react-dialog/dist/index.module.js
  var $5d3850c4d0b4e6c7$var$DIALOG_NAME = "Dialog";
  var [$5d3850c4d0b4e6c7$var$createDialogContext, $5d3850c4d0b4e6c7$export$cc702773b8ea3e41] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($5d3850c4d0b4e6c7$var$DIALOG_NAME);
  var [$5d3850c4d0b4e6c7$var$DialogProvider, $5d3850c4d0b4e6c7$var$useDialogContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$DIALOG_NAME);
  var $5d3850c4d0b4e6c7$export$3ddf2d174ce01153 = (props) => {
    const { __scopeDialog, children, open: openProp, defaultOpen, onOpenChange, modal = true } = props;
    const triggerRef = (0, import_react57.useRef)(null);
    const contentRef = (0, import_react57.useRef)(null);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_react57.createElement)($5d3850c4d0b4e6c7$var$DialogProvider, {
      scope: __scopeDialog,
      triggerRef,
      contentRef,
      contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
      titleId: $1746a345f3d73bb7$export$f680877a34711e37(),
      descriptionId: $1746a345f3d73bb7$export$f680877a34711e37(),
      open,
      onOpenChange: setOpen,
      onOpenToggle: (0, import_react57.useCallback)(
        () => setOpen(
          (prevOpen) => !prevOpen
        ),
        [
          setOpen
        ]
      ),
      modal
    }, children);
  };
  var $5d3850c4d0b4e6c7$var$PORTAL_NAME = "DialogPortal";
  var [$5d3850c4d0b4e6c7$var$PortalProvider, $5d3850c4d0b4e6c7$var$usePortalContext] = $5d3850c4d0b4e6c7$var$createDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, {
    forceMount: void 0
  });
  var $5d3850c4d0b4e6c7$export$dad7c95542bacce0 = (props) => {
    const { __scopeDialog, forceMount, children, container } = props;
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$PORTAL_NAME, __scopeDialog);
    return /* @__PURE__ */ (0, import_react57.createElement)($5d3850c4d0b4e6c7$var$PortalProvider, {
      scope: __scopeDialog,
      forceMount
    }, import_react57.Children.map(
      children,
      (child) => /* @__PURE__ */ (0, import_react57.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
        present: forceMount || context.open
      }, /* @__PURE__ */ (0, import_react57.createElement)($f1701beae083dbae$export$602eac185826482c, {
        asChild: true,
        container
      }, child))
    ));
  };
  var $5d3850c4d0b4e6c7$var$OVERLAY_NAME = "DialogOverlay";
  var $5d3850c4d0b4e6c7$export$bd1d06c79be19e17 = /* @__PURE__ */ (0, import_react57.forwardRef)((props, forwardedRef) => {
    const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
    const _a5 = props, { forceMount = portalContext.forceMount } = _a5, overlayProps = __objRest(_a5, ["forceMount"]);
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, props.__scopeDialog);
    return context.modal ? /* @__PURE__ */ (0, import_react57.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, /* @__PURE__ */ (0, import_react57.createElement)($5d3850c4d0b4e6c7$var$DialogOverlayImpl, _extends({}, overlayProps, {
      ref: forwardedRef
    }))) : null;
  });
  var $5d3850c4d0b4e6c7$var$DialogOverlayImpl = /* @__PURE__ */ (0, import_react57.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDialog } = _a5, overlayProps = __objRest(_a5, ["__scopeDialog"]);
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$OVERLAY_NAME, __scopeDialog);
    return (
      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
      // ie. when `Overlay` and `Content` are siblings
      /* @__PURE__ */ (0, import_react57.createElement)(Combination_default, {
        as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
        allowPinchZoom: true,
        shards: [
          context.contentRef
        ]
      }, /* @__PURE__ */ (0, import_react57.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
        "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
      }, overlayProps, {
        ref: forwardedRef,
        style: __spreadValues({
          pointerEvents: "auto"
        }, overlayProps.style)
      })))
    );
  });
  var $5d3850c4d0b4e6c7$var$CONTENT_NAME = "DialogContent";
  var $5d3850c4d0b4e6c7$export$b6d9565de1e068cf = /* @__PURE__ */ (0, import_react57.forwardRef)((props, forwardedRef) => {
    const portalContext = $5d3850c4d0b4e6c7$var$usePortalContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
    const _a5 = props, { forceMount = portalContext.forceMount } = _a5, contentProps = __objRest(_a5, ["forceMount"]);
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
    return /* @__PURE__ */ (0, import_react57.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, context.modal ? /* @__PURE__ */ (0, import_react57.createElement)($5d3850c4d0b4e6c7$var$DialogContentModal, _extends({}, contentProps, {
      ref: forwardedRef
    })) : /* @__PURE__ */ (0, import_react57.createElement)($5d3850c4d0b4e6c7$var$DialogContentNonModal, _extends({}, contentProps, {
      ref: forwardedRef
    })));
  });
  var $5d3850c4d0b4e6c7$var$DialogContentModal = /* @__PURE__ */ (0, import_react57.forwardRef)((props, forwardedRef) => {
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
    const contentRef = (0, import_react57.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.contentRef, contentRef);
    (0, import_react57.useEffect)(() => {
      const content = contentRef.current;
      if (content)
        return hideOthers(content);
    }, []);
    return /* @__PURE__ */ (0, import_react57.createElement)($5d3850c4d0b4e6c7$var$DialogContentImpl, _extends({}, props, {
      ref: composedRefs,
      trapFocus: context.open,
      disableOutsidePointerEvents: true,
      onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
        var _context$triggerRef$c;
        event.preventDefault();
        (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
      }),
      onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownOutside, (event) => {
        const originalEvent = event.detail.originalEvent;
        const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
        if (isRightClick)
          event.preventDefault();
      }),
      onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        props.onFocusOutside,
        (event) => event.preventDefault()
      )
    }));
  });
  var $5d3850c4d0b4e6c7$var$DialogContentNonModal = /* @__PURE__ */ (0, import_react57.forwardRef)((props, forwardedRef) => {
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, props.__scopeDialog);
    const hasInteractedOutsideRef = (0, import_react57.useRef)(false);
    return /* @__PURE__ */ (0, import_react57.createElement)($5d3850c4d0b4e6c7$var$DialogContentImpl, _extends({}, props, {
      ref: forwardedRef,
      trapFocus: false,
      disableOutsidePointerEvents: false,
      onCloseAutoFocus: (event) => {
        var _props$onCloseAutoFoc;
        (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
        if (!event.defaultPrevented) {
          var _context$triggerRef$c2;
          if (!hasInteractedOutsideRef.current)
            (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
          event.preventDefault();
        }
        hasInteractedOutsideRef.current = false;
      },
      onInteractOutside: (event) => {
        var _props$onInteractOuts, _context$triggerRef$c3;
        (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
        if (!event.defaultPrevented)
          hasInteractedOutsideRef.current = true;
        const target = event.target;
        const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
        if (targetIsTrigger)
          event.preventDefault();
      }
    }));
  });
  var $5d3850c4d0b4e6c7$var$DialogContentImpl = /* @__PURE__ */ (0, import_react57.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus } = _a5, contentProps = __objRest(_a5, ["__scopeDialog", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus"]);
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CONTENT_NAME, __scopeDialog);
    const contentRef = (0, import_react57.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef);
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    return /* @__PURE__ */ (0, import_react57.createElement)(import_react57.Fragment, null, /* @__PURE__ */ (0, import_react57.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
      asChild: true,
      loop: true,
      trapped: trapFocus,
      onMountAutoFocus: onOpenAutoFocus,
      onUnmountAutoFocus: onCloseAutoFocus
    }, /* @__PURE__ */ (0, import_react57.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, _extends({
      role: "dialog",
      id: context.contentId,
      "aria-describedby": context.descriptionId,
      "aria-labelledby": context.titleId,
      "data-state": $5d3850c4d0b4e6c7$var$getState(context.open)
    }, contentProps, {
      ref: composedRefs,
      onDismiss: () => context.onOpenChange(false)
    }))), false);
  });
  var $5d3850c4d0b4e6c7$var$TITLE_NAME = "DialogTitle";
  var $5d3850c4d0b4e6c7$export$16f7638e4a34b909 = /* @__PURE__ */ (0, import_react57.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDialog } = _a5, titleProps = __objRest(_a5, ["__scopeDialog"]);
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$TITLE_NAME, __scopeDialog);
    return /* @__PURE__ */ (0, import_react57.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.h2, _extends({
      id: context.titleId
    }, titleProps, {
      ref: forwardedRef
    }));
  });
  var $5d3850c4d0b4e6c7$var$CLOSE_NAME = "DialogClose";
  var $5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac = /* @__PURE__ */ (0, import_react57.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDialog } = _a5, closeProps = __objRest(_a5, ["__scopeDialog"]);
    const context = $5d3850c4d0b4e6c7$var$useDialogContext($5d3850c4d0b4e6c7$var$CLOSE_NAME, __scopeDialog);
    return /* @__PURE__ */ (0, import_react57.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button"
    }, closeProps, {
      ref: forwardedRef,
      onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        props.onClick,
        () => context.onOpenChange(false)
      )
    }));
  });
  function $5d3850c4d0b4e6c7$var$getState(open) {
    return open ? "open" : "closed";
  }
  var $5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME = "DialogTitleWarning";
  var [$5d3850c4d0b4e6c7$export$69b62a49393917d6, $5d3850c4d0b4e6c7$var$useWarningContext] = $c512c27ab02ef895$export$fd42f52fd3ae1109($5d3850c4d0b4e6c7$var$TITLE_WARNING_NAME, {
    contentName: $5d3850c4d0b4e6c7$var$CONTENT_NAME,
    titleName: $5d3850c4d0b4e6c7$var$TITLE_NAME,
    docsSlug: "dialog"
  });
  var $5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9 = $5d3850c4d0b4e6c7$export$3ddf2d174ce01153;
  var $5d3850c4d0b4e6c7$export$602eac185826482c = $5d3850c4d0b4e6c7$export$dad7c95542bacce0;
  var $5d3850c4d0b4e6c7$export$c6fdb837b070b4ff = $5d3850c4d0b4e6c7$export$bd1d06c79be19e17;
  var $5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2 = $5d3850c4d0b4e6c7$export$b6d9565de1e068cf;

  // ../../../packages/ui/src/lib/components/primitives/Dialog.tsx
  var import_classnames13 = __toESM(require_classnames());

  // ../../../packages/ui/src/lib/components/primitives/Button.tsx
  var import_classnames12 = __toESM(require_classnames());
  var React42 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useTranslation/useTranslation.tsx
  var React41 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useAssetUrls.tsx
  var import_react58 = __toESM(require_react());
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var AssetUrlsContext = (0, import_react58.createContext)(null);
  function AssetUrlsProvider({
    assetUrls,
    children
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(AssetUrlsContext.Provider, { value: assetUrls, children });
  }
  function useAssetUrls() {
    const assetUrls = (0, import_react58.useContext)(AssetUrlsContext);
    if (!assetUrls) {
      throw new Error("useAssetUrls must be used within an AssetUrlsProvider");
    }
    return assetUrls;
  }

  // ../../../packages/ui/src/lib/hooks/useTranslation/defaultTranslation.ts
  var DEFAULT_TRANSLATION = {
    "action.convert-to-bookmark": "Convert to Bookmark",
    "action.convert-to-embed": "Convert to Embed",
    "action.open-embed-link": "Open link",
    "action.align-bottom": "Align bottom",
    "action.align-center-horizontal": "Align horizontally",
    "action.align-center-vertical": "Align vertically",
    "action.align-center-horizontal.short": "Align H",
    "action.align-center-vertical.short": "Align V",
    "action.align-left": "Align left",
    "action.align-right": "Align right",
    "action.align-top": "Align top",
    "action.back-to-content": "Back to content",
    "action.bring-forward": "Bring forward",
    "action.bring-to-front": "Bring to front",
    "action.copy-as-json.short": "JSON",
    "action.copy-as-json": "Copy as JSON",
    "action.copy-as-png.short": "PNG",
    "action.copy-as-png": "Copy as PNG",
    "action.copy-as-svg.short": "SVG",
    "action.copy-as-svg": "Copy as SVG",
    "action.copy": "Copy",
    "action.cut": "Cut",
    "action.delete": "Delete",
    "action.distribute-horizontal": "Distribute horizontally",
    "action.distribute-vertical": "Distribute vertically",
    "action.distribute-horizontal.short": "Distribute H",
    "action.distribute-vertical.short": "Distribute V",
    "action.duplicate": "Duplicate",
    "action.edit-link": "Edit link",
    "action.exit-pen-mode": "Exit pen mode",
    "action.export-as-json.short": "JSON",
    "action.export-as-json": "Export as JSON",
    "action.export-as-png.short": "PNG",
    "action.export-as-png": "Export as PNG",
    "action.export-as-svg.short": "SVG",
    "action.export-as-svg": "Export as SVG",
    "action.flip-horizontal": "Flip horizontally",
    "action.flip-vertical": "Flip vertically",
    "action.flip-horizontal.short": "Flip H",
    "action.flip-vertical.short": "Flip V",
    "action.group": "Group",
    "action.insert-embed": "Insert embed",
    "action.insert-media": "Upload media",
    "action.new-project": "New project",
    "action.new-shared-project": "New shared project",
    "action.open-file": "Open file",
    "action.pack": "Pack",
    "action.paste": "Paste",
    "action.print": "Print",
    "action.redo": "Redo",
    "action.rotate-ccw": "Rotate counterclockwise",
    "action.rotate-cw": "Rotate clockwise",
    "action.save-copy": "Save a copy",
    "action.select-all": "Select all",
    "action.select-none": "Select none",
    "action.send-backward": "Send backward",
    "action.send-to-back": "Send to back",
    "action.share-project": "Share this project",
    "action.stack-horizontal": "Stack horizontally",
    "action.stack-vertical": "Stack vertically",
    "action.stack-horizontal.short": "Stack H",
    "action.stack-vertical.short": "Stack V",
    "action.stop-following": "Stop following",
    "action.stretch-horizontal": "Stretch horizontally",
    "action.stretch-vertical": "Stretch vertically",
    "action.stretch-horizontal.short": "Stretch H",
    "action.stretch-vertical.short": "Stretch V",
    "action.toggle-auto-size": "Toggle auto size",
    "action.toggle-dark-mode.menu": "Dark mode",
    "action.toggle-dark-mode": "Toggle dark mode",
    "action.toggle-debug-mode.menu": "Debug mode",
    "action.toggle-debug-mode": "Toggle debug mode",
    "action.toggle-focus-mode.menu": "Focus mode",
    "action.toggle-focus-mode": "Toggle focus mode",
    "action.toggle-grid.menu": "Show grid",
    "action.toggle-grid": "Toggle grid",
    "action.toggle-snap-mode.menu": "Always snap",
    "action.toggle-snap-mode": "Toggle always snap",
    "action.toggle-tool-lock.menu": "Tool lock",
    "action.toggle-tool-lock": "Toggle tool lock",
    "action.toggle-transparent.context-menu": "Transparent",
    "action.toggle-transparent.menu": "Transparent",
    "action.toggle-transparent": "Toggle transparent background",
    "action.undo": "Undo",
    "action.ungroup": "Ungroup",
    "action.zoom-in": "Zoom in",
    "action.zoom-out": "Zoom out",
    "action.zoom-to-100": "Zoom to 100%",
    "action.zoom-to-fit": "Zoom to fit",
    "action.zoom-to-selection": "Zoom to selection",
    "color-style.black": "Black",
    "color-style.blue": "Blue",
    "color-style.green": "Green",
    "color-style.grey": "Grey",
    "color-style.light-blue": "Light blue",
    "color-style.light-green": "Light green",
    "color-style.light-red": "Light red",
    "color-style.light-violet": "Light violet",
    "color-style.orange": "Orange",
    "color-style.red": "Red",
    "color-style.violet": "Violet",
    "color-style.yellow": "Yellow",
    "fill-style.none": "None",
    "fill-style.semi": "Semi",
    "fill-style.solid": "Solid",
    "fill-style.pattern": "Pattern",
    "dash-style.dashed": "Dashed",
    "dash-style.dotted": "Dotted",
    "dash-style.draw": "Draw",
    "dash-style.solid": "Solid",
    "size-style.s": "Small",
    "size-style.m": "Medium",
    "size-style.l": "Large",
    "size-style.xl": "Extra large",
    "opacity-style.0.1": "10%",
    "opacity-style.0.25": "25%",
    "opacity-style.0.5": "50%",
    "opacity-style.0.75": "75%",
    "opacity-style.1": "100%",
    "font-style.draw": "Draw",
    "font-style.sans": "Sans",
    "font-style.serif": "Serif",
    "font-style.mono": "Mono",
    "align-style.start": "Start",
    "align-style.middle": "Middle",
    "align-style.end": "End",
    "align-style.justify": "Justify",
    "geo-style.arrow-down": "Arrow down",
    "geo-style.arrow-left": "Arrow left",
    "geo-style.arrow-right": "Arrow right",
    "geo-style.arrow-up": "Arrow up",
    "geo-style.diamond": "Diamond",
    "geo-style.ellipse": "Ellipse",
    "geo-style.hexagon": "Hexagon",
    "geo-style.octagon": "Octagon",
    "geo-style.oval": "Oval",
    "geo-style.pentagon": "Pentagon",
    "geo-style.rectangle": "Rectangle",
    "geo-style.rhombus-2": "Rhombus 2",
    "geo-style.rhombus": "Rhombus",
    "geo-style.star": "Star",
    "geo-style.trapezoid": "Trapezoid",
    "geo-style.triangle": "Triangle",
    "geo-style.x-box": "X box",
    "geo-style.check-box": "Check box",
    "arrowheadStart-style.none": "None",
    "arrowheadStart-style.arrow": "Arrow",
    "arrowheadStart-style.bar": "Bar",
    "arrowheadStart-style.diamond": "Diamond",
    "arrowheadStart-style.dot": "Dot",
    "arrowheadStart-style.inverted": "Inverted",
    "arrowheadStart-style.pipe": "Pipe",
    "arrowheadStart-style.square": "Square",
    "arrowheadStart-style.triangle": "Triangle",
    "arrowheadEnd-style.none": "None",
    "arrowheadEnd-style.arrow": "Arrow",
    "arrowheadEnd-style.bar": "Bar",
    "arrowheadEnd-style.diamond": "Diamond",
    "arrowheadEnd-style.dot": "Dot",
    "arrowheadEnd-style.inverted": "Inverted",
    "arrowheadEnd-style.pipe": "Pipe",
    "arrowheadEnd-style.square": "Square",
    "arrowheadEnd-style.triangle": "Triangle",
    "spline-style.line": "Line",
    "spline-style.cubic": "Cubic",
    "tool.select": "Select",
    "tool.hand": "Hand",
    "tool.draw": "Draw",
    "tool.eraser": "Eraser",
    "tool.arrow-down": "Arrow down",
    "tool.arrow-left": "Arrow left",
    "tool.arrow-right": "Arrow right",
    "tool.arrow-up": "Arrow up",
    "tool.arrow": "Arrow",
    "tool.diamond": "Diamond",
    "tool.ellipse": "Ellipse",
    "tool.hexagon": "Hexagon",
    "tool.line": "Line",
    "tool.octagon": "Octagon",
    "tool.oval": "Oval",
    "tool.pentagon": "Pentagon",
    "tool.rectangle": "Rectangle",
    "tool.rhombus": "Rhombus",
    "tool.star": "Star",
    "tool.trapezoid": "Trapezoid",
    "tool.triangle": "Triangle",
    "tool.x-box": "X box",
    "tool.check-box": "Check box",
    "tool.asset": "Asset",
    "tool.frame": "Frame",
    "tool.note": "Note",
    "tool.embed": "Embed",
    "tool.text": "Text",
    "menu.title": "Menu",
    "menu.copy-as": "Copy as",
    "menu.edit": "Edit",
    "menu.export-as": "Export as",
    "menu.file": "File",
    "menu.language": "Language",
    "menu.preferences": "Preferences",
    "menu.view": "View",
    "context-menu.arrange": "Arrange",
    "context-menu.copy-as": "Copy as",
    "context-menu.export-as": "Export as",
    "context-menu.move-to-page": "Move to page",
    "context-menu.reorder": "Reorder",
    "page-menu.title": "Pages",
    "page-menu.create-new-page": "Create new page",
    "page-menu.max-page-count-reached": "Max pages reached",
    "page-menu.new-page-initial-name": "Page 1",
    "page-menu.edit-start": "Edit",
    "page-menu.edit-done": "Done",
    "page-menu.go-to-page": "Go to page",
    "page-menu.submenu.rename": "Rename",
    "page-menu.submenu.duplicate-page": "Duplicate",
    "page-menu.submenu.title": "Menu",
    "page-menu.submenu.move-down": "Move down",
    "page-menu.submenu.move-up": "Move up",
    "page-menu.submenu.delete": "Delete",
    "share-menu.title": "Share",
    "share-menu.save-note": "Download this project to your computer as a .tldr file.",
    "share-menu.fork-note": "Create a new shared project based on this snapshot.",
    "share-menu.share-project": "Share this project",
    "share-menu.copy-link": "Copy share link",
    "share-menu.readonly-link": "Read-only",
    "share-menu.create-snapshot-link": "Copy snapshot link",
    "share-menu.snapshot-link-note": "Capture and share this project as a read-only snapshot link.",
    "share-menu.copy-readonly-link": "Copy read-only link",
    "share-menu.offline-note": "Create a new shared project based on your current project.",
    "share-menu.copy-link-note": "Anyone with the link will be able to view and edit this project.",
    "share-menu.copy-readonly-link-note": "Anyone with the link will be able to view (but not edit) this project.",
    "share-menu.project-too-large": "Sorry, this project can't be shared because it's too large. We're working on it!",
    "share-menu.upload-failed": "Sorry, we couldn't upload your project at the moment. Please try again or let us know if the problem persists.",
    "people-menu.title": "People",
    "people-menu.change-name": "Change name",
    "people-menu.change-color": "Change color",
    "people-menu.follow": "Following",
    "people-menu.following": "Following",
    "people-menu.leading": "Following You",
    "people-menu.user": "(You)",
    "people-menu.invite": "Invite others",
    "help-menu.title": "Help and resources",
    "help-menu.about": "About",
    "help-menu.discord": "Discord",
    "help-menu.github": "GitHub",
    "help-menu.keyboard-shortcuts": "Keyboard shortcuts",
    "help-menu.twitter": "Twitter",
    "actions-menu.title": "Actions",
    "edit-link-dialog.title": "Edit link",
    "edit-link-dialog.invalid-url": "A link must be a valid URL.",
    "edit-link-dialog.detail": "Links will open in a new tab.",
    "edit-link-dialog.url": "URL",
    "edit-link-dialog.clear": "Clear",
    "edit-link-dialog.save": "Continue",
    "edit-link-dialog.cancel": "Cancel",
    "embed-dialog.title": "Insert embed",
    "embed-dialog.back": "Back",
    "embed-dialog.create": "Create",
    "embed-dialog.cancel": "Cancel",
    "embed-dialog.url": "URL",
    "embed-dialog.instruction": "Paste in the site's URL to create the embed.",
    "embed-dialog.invalid-url": "We could not create an embed from that URL.",
    "edit-pages-dialog.move-down": "Move down",
    "edit-pages-dialog.move-up": "Move up",
    "shortcuts-dialog.title": "Keyboard shortcuts",
    "shortcuts-dialog.edit": "Edit",
    "shortcuts-dialog.file": "File",
    "shortcuts-dialog.preferences": "Preferences",
    "shortcuts-dialog.tools": "Tools",
    "shortcuts-dialog.transform": "Transform",
    "shortcuts-dialog.view": "View",
    "style-panel.title": "Styles",
    "style-panel.align": "Align",
    "style-panel.position": "Position",
    "style-panel.arrowheads": "Arrowheads",
    "style-panel.arrowhead-start": "Start",
    "style-panel.arrowhead-end": "End",
    "style-panel.color": "Color",
    "style-panel.dash": "Dash",
    "style-panel.fill": "Fill",
    "style-panel.font": "Font",
    "style-panel.geo": "Shape",
    "style-panel.mixed": "Mixed",
    "style-panel.opacity": "Opacity",
    "style-panel.size": "Size",
    "style-panel.spline": "Spline",
    "tool-panel.drawing": "Drawing",
    "tool-panel.shapes": "Shapes",
    "tool-panel.more": "More",
    "debug-panel.more": "More",
    "navigation-zone.toggle-minimap": "Toggle minimap",
    "navigation-zone.zoom": "Zoom",
    "focus-mode.toggle-focus-mode": "Toggle focus mode",
    "toast.close": "Close",
    "file-system.file-open-error.title": "Could not open file",
    "file-system.file-open-error.not-a-tldraw-file": "The file you tried to open doesn't look like a tldraw file.",
    "file-system.file-open-error.file-format-version-too-new": "The file you tried to open is from a newer version of tldraw. Please reload the page and try again.",
    "file-system.file-open-error.generic-corrupted-file": "The file you tried to open is corrupted.",
    "file-system.confirm-open.title": "Overwrite current project?",
    "file-system.confirm-open.description": "Opening a file will replace your current project and any unsaved changes will be lost. Are you sure you want to continue?",
    "file-system.confirm-open.cancel": "Cancel",
    "file-system.confirm-open.open": "Open file",
    "file-system.confirm-open.dont-show-again": "Don't ask again",
    "file-system.confirm-clear.title": "Clear current project?",
    "file-system.confirm-clear.description": "Creating a new project will clear your current project and any unsaved changes will be lost. Are you sure you want to continue?",
    "file-system.confirm-clear.cancel": "Cancel",
    "file-system.confirm-clear.continue": "Continue",
    "file-system.confirm-clear.dont-show-again": "Don't ask again",
    "file-system.shared-document-file-open-error.title": "Could not open file",
    "file-system.shared-document-file-open-error.description": "Opening files from shared projects is not supported.",
    "toast.error.export-fail.title": "Failed export",
    "toast.error.export-fail.desc": "Failed to export image",
    "toast.error.copy-fail.title": "Failed copy",
    "toast.error.copy-fail.desc": "Failed to copy image",
    "context.pages.new-page": "New page",
    "vscode.file-open.desc": "We've updated this document to work with the current version of tldraw. If you'd like to keep the original version (which will work on old.tldraw.com), click below to create a backup.",
    "vscode.file-open.open": "Continue",
    "vscode.file-open.backup": "Backup",
    "vscode.file-open.backup-saved": "Backup saved",
    "vscode.file-open.backup-failed": "Backup failed: this is not a .tldr file.",
    "vscode.file-open.dont-show-again": "Don't ask again"
  };

  // ../../../packages/ui/src/lib/hooks/useTranslation/languages.ts
  var LANGUAGES2 = [
    { locale: "ar", label: "\u0639\u0631\u0628\u064A" },
    { locale: "ca", label: "Catal\xE0" },
    { locale: "da", label: "Danish" },
    { locale: "de", label: "Deutsch" },
    { locale: "en", label: "English" },
    { locale: "es", label: "Espa\xF1ol" },
    { locale: "fa", label: "\u0641\u0627\u0631\u0633\u06CC" },
    { locale: "fi", label: "Suomi" },
    { locale: "fr", label: "Fran\xE7ais" },
    { locale: "gl", label: "Galego" },
    { locale: "he", label: "\u05E2\u05D1\u05E8\u05D9\u05EA" },
    { locale: "it", label: "Italiano" },
    { locale: "ja", label: "\u65E5\u672C\u8A9E" },
    { locale: "ko-kr", label: "\uD55C\uAD6D\uC5B4" },
    { locale: "ku", label: "\u06A9\u0648\u0631\u062F\u06CC" },
    { locale: "hi-in", label: "\u0939\u093F\u0928\u094D\u0926\u0940" },
    { locale: "hu", label: "Magyar" },
    { locale: "my", label: "\u1019\u103C\u1014\u103A\u1019\u102C\u1005\u102C" },
    { locale: "ne", label: "\u0928\u0947\u092A\u093E\u0932\u0940" },
    { locale: "no", label: "Norwegian" },
    { locale: "pl", label: "Polski" },
    { locale: "pt-br", label: "Portugu\xEAs - Brasil" },
    { locale: "pt-pt", label: "Portugu\xEAs - Europeu" },
    { locale: "ro", label: "Rom\xE2n\u0103" },
    { locale: "ru", label: "Russian" },
    { locale: "sv", label: "Svenska" },
    { locale: "te", label: "\u0C24\u0C46\u0C32\u0C41\u0C17\u0C41" },
    { locale: "th", label: "\u0E20\u0E32\u0E29\u0E32\u0E44\u0E17\u0E22" },
    { locale: "tr", label: "T\xFCrk\xE7e" },
    { locale: "uk", label: "Ukrainian" },
    { locale: "vi", label: "Ti\u1EBFng Vi\u1EC7t" },
    { locale: "zh-cn", label: "Chinese - Simplified" },
    { locale: "zh-tw", label: "\u7E41\u9AD4\u4E2D\u6587 (\u53F0\u7063)" }
  ];

  // ../../../packages/ui/src/lib/hooks/useTranslation/translations.ts
  var EN_TRANSLATION = {
    locale: "en",
    label: "English",
    messages: DEFAULT_TRANSLATION
  };
  function fetchTranslation(locale, assetUrls) {
    return __async(this, null, function* () {
      const mainRes = yield fetch(assetUrls.translations.en);
      if (!mainRes.ok) {
        console.warn(`No main translations found.`);
        return EN_TRANSLATION;
      }
      if (locale === "en") {
        return EN_TRANSLATION;
      }
      const language = LANGUAGES2.find((t4) => t4.locale === locale);
      if (!language) {
        console.warn(`No translation found for locale ${locale}`);
        return EN_TRANSLATION;
      }
      const res = yield fetch(assetUrls.translations[language.locale]);
      const messages = yield res.json();
      if (!messages) {
        console.warn(`No messages found for locale ${locale}`);
        return EN_TRANSLATION;
      }
      const missing = [];
      for (const key in EN_TRANSLATION) {
        if (!messages[key]) {
          missing.push(key);
        }
      }
      if (missing.length > 0 && false) {
        console.warn(`Language ${locale}: missing messages for keys:
${missing.join("\n")}`);
      }
      return {
        locale,
        label: language.label,
        messages: __spreadValues(__spreadValues({}, EN_TRANSLATION.messages), messages)
      };
    });
  }
  function getTranslation(locale, assetUrls) {
    return __async(this, null, function* () {
      return yield fetchTranslation(locale, assetUrls);
    });
  }

  // ../../../packages/ui/src/lib/hooks/useTranslation/useTranslation.tsx
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var TranslationsContext = React41.createContext({});
  var useCurrentTranslation = () => React41.useContext(TranslationsContext);
  var TranslationProvider = track(function TranslationProvider2({
    overrides,
    children
  }) {
    const app = useApp();
    const locale = app.userSettings.locale;
    const getAssetUrl = useAssetUrls();
    const [currentTranslation, setCurrentTranslation] = React41.useState(() => {
      if (overrides && overrides["en"]) {
        return {
          locale: "en",
          label: "English",
          messages: __spreadValues(__spreadValues({}, DEFAULT_TRANSLATION), overrides["en"])
        };
      }
      return {
        locale: "en",
        label: "English",
        messages: DEFAULT_TRANSLATION
      };
    });
    React41.useEffect(() => {
      let isCancelled = false;
      function loadTranslation() {
        return __async(this, null, function* () {
          const translation = yield getTranslation(locale, getAssetUrl);
          if (translation && !isCancelled) {
            if (overrides && overrides[locale]) {
              setCurrentTranslation(__spreadProps(__spreadValues({}, translation), {
                messages: __spreadValues(__spreadValues({}, translation.messages), overrides[locale])
              }));
            } else {
              setCurrentTranslation(translation);
            }
          }
        });
      }
      loadTranslation();
      return () => {
        isCancelled = true;
      };
    }, [getAssetUrl, locale, overrides]);
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(TranslationsContext.Provider, { value: currentTranslation, children });
  });
  function useTranslation() {
    const translation = useCurrentTranslation();
    return React41.useCallback(
      function msg2(id) {
        var _a5;
        return (_a5 = translation.messages[id]) != null ? _a5 : id;
      },
      [translation]
    );
  }

  // ../../../packages/ui/src/lib/components/Spinner.tsx
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  function Spinner(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("svg", __spreadProps(__spreadValues({ width: 16, height: 16, viewBox: "0 0 16 16" }, props), { children: /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)("g", { strokeWidth: 2, fill: "none", fillRule: "evenodd", children: [
      /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("circle", { strokeOpacity: 0.25, cx: 8, cy: 8, r: 7, stroke: "currentColor" }),
      /* @__PURE__ */ (0, import_jsx_runtime57.jsx)("path", { strokeLinecap: "round", d: "M15 8c0-4.5-4.5-7-7-7", stroke: "currentColor", children: /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(
        "animateTransform",
        {
          attributeName: "transform",
          type: "rotate",
          from: "0 8 8",
          to: "360 8 8",
          dur: "1s",
          repeatCount: "indefinite"
        }
      ) })
    ] }) }));
  }

  // ../../../packages/ui/src/lib/components/primitives/Icon.tsx
  var import_classnames11 = __toESM(require_classnames());
  var import_react59 = __toESM(require_react());
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var Icon = (0, import_react59.memo)(function Icon2(_a5) {
    var _b2 = _a5, {
      small,
      invertIcon,
      icon,
      color,
      className
    } = _b2, props = __objRest(_b2, [
      "small",
      "invertIcon",
      "icon",
      "color",
      "className"
    ]);
    const assetUrls = useAssetUrls();
    const asset = assetUrls.icons[icon];
    const ref = (0, import_react59.useRef)(null);
    (0, import_react59.useLayoutEffect)(() => {
      if (ref == null ? void 0 : ref.current) {
        ref.current.style.webkitMask = `url(${asset}) center 100% / 100% no-repeat`;
      }
    }, [ref, asset]);
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
      "div",
      __spreadProps(__spreadValues({}, props), {
        ref,
        className: (0, import_classnames11.default)("tlui-icon", { "tlui-icon__small": small }, className),
        style: {
          color,
          mask: `url(${asset}) center 100% / 100% no-repeat`,
          transform: invertIcon ? "scale(-1, 1)" : void 0
        }
      })
    );
  });

  // ../../../packages/ui/src/lib/components/primitives/shared.ts
  var isDarwin = typeof window === "undefined" ? false : window.navigator.userAgent.toLowerCase().indexOf("mac") > -1;
  var cmdKey = isDarwin ? "\u2318" : "Ctrl";
  var altKey = isDarwin ? "\u2325" : "Alt";
  function kbd(str) {
    return str.split(",")[0].split("").map((sub) => {
      const subStr = sub.replace(/\$/g, cmdKey).replace(/\?/g, altKey).replace(/!/g, "\u21E7");
      return subStr[0].toUpperCase() + subStr.slice(1);
    });
  }
  function kbdStr(str) {
    return "\u2014 " + str.split(",")[0].split("").map((sub) => {
      const subStr = sub.replace(/\$/g, cmdKey).replace(/\?/g, altKey).replace(/!/g, "\u21E7");
      return subStr[0].toUpperCase() + subStr.slice(1);
    }).join("\u2009");
  }
  var getBaseUrl = () => {
    if (typeof process === "undefined") {
      return "http://localhost:5420";
    }
    if (false) {
      return "http://localhost:3000";
    }
    if (process.env.NEXT_PUBLIC_VERCEL_ENV === "production") {
      return "https://www.tldraw.com";
    }
    if (process.env.NEXT_PUBLIC_VERCEL_ENV === "preview") {
      return `https://${process.env.NEXT_PUBLIC_VERCEL_URL}`;
    }
    return "http://localhost:3000";
  };
  var BASE_URL = getBaseUrl();

  // ../../../packages/ui/src/lib/components/primitives/Kbd.tsx
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  function Kbd({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("kbd", { className: "tlui-kbd", children: kbd(children).map((k2, i3) => /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { children: k2 }, i3)) });
  }

  // ../../../packages/ui/src/lib/components/primitives/Button.tsx
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var Button = React42.forwardRef(function Button2(_a5, ref) {
    var _b2 = _a5, {
      label,
      icon,
      invertIcon,
      iconLeft,
      smallIcon,
      kbd: kbd2,
      isChecked = false,
      type = "normal",
      children,
      spinner
    } = _b2, props = __objRest(_b2, [
      "label",
      "icon",
      "invertIcon",
      "iconLeft",
      "smallIcon",
      "kbd",
      "isChecked",
      "type",
      "children",
      "spinner"
    ]);
    var _a6;
    const msg2 = useTranslation();
    const labelStr = label ? msg2(label) : "";
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(
      "button",
      __spreadProps(__spreadValues({
        ref,
        draggable: false,
        type: "button"
      }, props), {
        title: (_a6 = props.title) != null ? _a6 : labelStr,
        className: (0, import_classnames12.default)("tlui-button", `tlui-button__${type}`, props.className),
        children: [
          iconLeft && /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Icon, { icon: iconLeft, className: "tlui-icon-left", small: true }),
          children,
          label && /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)("span", { draggable: false, children: [
            labelStr,
            isChecked && /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Icon, { icon: "check" })
          ] }),
          kbd2 && /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Kbd, { children: kbd2 }),
          icon && !spinner && /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Icon, { icon, small: !!label || smallIcon, invertIcon }),
          spinner && /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(Spinner, {})
        ]
      })
    );
  });

  // ../../../packages/ui/src/lib/components/primitives/Dialog.tsx
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  function Header({ className, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: (0, import_classnames13.default)("tlui-dialog__header", className), children });
  }
  function Title({ className, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)($5d3850c4d0b4e6c7$export$16f7638e4a34b909, { dir: "ltr", className: (0, import_classnames13.default)("tlui-dialog__header__title", className), children });
  }
  function CloseButton() {
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "tlui-dialog__header__close", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)($5d3850c4d0b4e6c7$export$fba2fb7cd781b7ac, { "data-wd": "dialog.close", dir: "ltr", asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Button, { "aria-label": "Close", onTouchEnd: (e2) => e2.target.click(), children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(Icon, { small: true, icon: "cross-2" }) }) }) });
  }
  function Body({
    className,
    children,
    style
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: (0, import_classnames13.default)("tlui-dialog__body", className), style, children });
  }
  function Footer({ className, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: (0, import_classnames13.default)("tlui-dialog__footer", className), children });
  }

  // ../../../node_modules/@radix-ui/react-dropdown-menu/dist/index.module.js
  var import_react67 = __toESM(require_react());

  // ../../../node_modules/@radix-ui/react-menu/dist/index.module.js
  var import_react66 = __toESM(require_react());

  // ../../../node_modules/@radix-ui/react-collection/dist/index.module.js
  var import_react60 = __toESM(require_react());
  function $e02a7d9cb1dc128c$export$c74125a8e3af6bb2(name) {
    const PROVIDER_NAME = name + "CollectionProvider";
    const [createCollectionContext, createCollectionScope] = $c512c27ab02ef895$export$50c7b4e9d9f19c1(PROVIDER_NAME);
    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
      collectionRef: {
        current: null
      },
      itemMap: /* @__PURE__ */ new Map()
    });
    const CollectionProvider = (props) => {
      const { scope, children } = props;
      const ref = import_react60.default.useRef(null);
      const itemMap = import_react60.default.useRef(/* @__PURE__ */ new Map()).current;
      return /* @__PURE__ */ import_react60.default.createElement(CollectionProviderImpl, {
        scope,
        itemMap,
        collectionRef: ref
      }, children);
    };
    /* @__PURE__ */ Object.assign(CollectionProvider, {
      displayName: PROVIDER_NAME
    });
    const COLLECTION_SLOT_NAME = name + "CollectionSlot";
    const CollectionSlot = /* @__PURE__ */ import_react60.default.forwardRef((props, forwardedRef) => {
      const { scope, children } = props;
      const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
      const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.collectionRef);
      return /* @__PURE__ */ import_react60.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
        ref: composedRefs
      }, children);
    });
    /* @__PURE__ */ Object.assign(CollectionSlot, {
      displayName: COLLECTION_SLOT_NAME
    });
    const ITEM_SLOT_NAME = name + "CollectionItemSlot";
    const ITEM_DATA_ATTR = "data-radix-collection-item";
    const CollectionItemSlot = /* @__PURE__ */ import_react60.default.forwardRef((props, forwardedRef) => {
      const _a5 = props, { scope, children } = _a5, itemData = __objRest(_a5, ["scope", "children"]);
      const ref = import_react60.default.useRef(null);
      const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
      const context = useCollectionContext(ITEM_SLOT_NAME, scope);
      import_react60.default.useEffect(() => {
        context.itemMap.set(ref, __spreadValues({
          ref
        }, itemData));
        return () => void context.itemMap.delete(ref);
      });
      return /* @__PURE__ */ import_react60.default.createElement($5e63c961fc1ce211$export$8c6ed5c666ac1360, {
        [ITEM_DATA_ATTR]: "",
        ref: composedRefs
      }, children);
    });
    /* @__PURE__ */ Object.assign(CollectionItemSlot, {
      displayName: ITEM_SLOT_NAME
    });
    function useCollection(scope) {
      const context = useCollectionContext(name + "CollectionConsumer", scope);
      const getItems = import_react60.default.useCallback(() => {
        const collectionNode = context.collectionRef.current;
        if (!collectionNode)
          return [];
        const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
        const items = Array.from(context.itemMap.values());
        const orderedItems = items.sort(
          (a3, b3) => orderedNodes.indexOf(a3.ref.current) - orderedNodes.indexOf(b3.ref.current)
        );
        return orderedItems;
      }, [
        context.collectionRef,
        context.itemMap
      ]);
      return getItems;
    }
    return [
      {
        Provider: CollectionProvider,
        Slot: CollectionSlot,
        ItemSlot: CollectionItemSlot
      },
      useCollection,
      createCollectionScope
    ];
  }

  // ../../../node_modules/@radix-ui/react-direction/dist/index.module.js
  var import_react61 = __toESM(require_react());
  var $f631663db3294ace$var$DirectionContext = /* @__PURE__ */ (0, import_react61.createContext)(void 0);
  function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
    const globalDir = (0, import_react61.useContext)($f631663db3294ace$var$DirectionContext);
    return localDir || globalDir || "ltr";
  }

  // ../../../node_modules/@radix-ui/react-popper/dist/index.module.js
  var import_react64 = __toESM(require_react());

  // ../../../node_modules/@floating-ui/core/dist/floating-ui.core.browser.min.mjs
  function t2(t4) {
    return t4.split("-")[0];
  }
  function e(t4) {
    return t4.split("-")[1];
  }
  function n(e2) {
    return ["top", "bottom"].includes(t2(e2)) ? "x" : "y";
  }
  function r(t4) {
    return "y" === t4 ? "height" : "width";
  }
  function i(i3, o3, a3) {
    let { reference: l3, floating: s3 } = i3;
    const c3 = l3.x + l3.width / 2 - s3.width / 2, f3 = l3.y + l3.height / 2 - s3.height / 2, u3 = n(o3), m3 = r(u3), g3 = l3[m3] / 2 - s3[m3] / 2, d3 = "x" === u3;
    let p3;
    switch (t2(o3)) {
      case "top":
        p3 = { x: c3, y: l3.y - s3.height };
        break;
      case "bottom":
        p3 = { x: c3, y: l3.y + l3.height };
        break;
      case "right":
        p3 = { x: l3.x + l3.width, y: f3 };
        break;
      case "left":
        p3 = { x: l3.x - s3.width, y: f3 };
        break;
      default:
        p3 = { x: l3.x, y: l3.y };
    }
    switch (e(o3)) {
      case "start":
        p3[u3] -= g3 * (a3 && d3 ? -1 : 1);
        break;
      case "end":
        p3[u3] += g3 * (a3 && d3 ? -1 : 1);
    }
    return p3;
  }
  var o = (t4, e2, n3) => __async(void 0, null, function* () {
    const { placement: r3 = "bottom", strategy: o3 = "absolute", middleware: a3 = [], platform: l3 } = n3, s3 = yield null == l3.isRTL ? void 0 : l3.isRTL(e2);
    let c3 = yield l3.getElementRects({ reference: t4, floating: e2, strategy: o3 }), { x: f3, y: u3 } = i(c3, r3, s3), m3 = r3, g3 = {}, d3 = 0;
    for (let n4 = 0; n4 < a3.length; n4++) {
      const { name: p3, fn: h3 } = a3[n4], { x: y3, y: x3, data: w3, reset: v3 } = yield h3({ x: f3, y: u3, initialPlacement: r3, placement: m3, strategy: o3, middlewareData: g3, rects: c3, platform: l3, elements: { reference: t4, floating: e2 } });
      f3 = null != y3 ? y3 : f3, u3 = null != x3 ? x3 : u3, g3 = __spreadProps(__spreadValues({}, g3), { [p3]: __spreadValues(__spreadValues({}, g3[p3]), w3) }), v3 && d3 <= 50 && (d3++, "object" == typeof v3 && (v3.placement && (m3 = v3.placement), v3.rects && (c3 = true === v3.rects ? yield l3.getElementRects({ reference: t4, floating: e2, strategy: o3 }) : v3.rects), { x: f3, y: u3 } = i(c3, m3, s3)), n4 = -1);
    }
    return { x: f3, y: u3, placement: m3, strategy: o3, middlewareData: g3 };
  });
  function a(t4) {
    return "number" != typeof t4 ? function(t5) {
      return __spreadValues({ top: 0, right: 0, bottom: 0, left: 0 }, t5);
    }(t4) : { top: t4, right: t4, bottom: t4, left: t4 };
  }
  function l(t4) {
    return __spreadProps(__spreadValues({}, t4), { top: t4.y, left: t4.x, right: t4.x + t4.width, bottom: t4.y + t4.height });
  }
  function s(t4, e2) {
    return __async(this, null, function* () {
      var n3;
      void 0 === e2 && (e2 = {});
      const { x: r3, y: i3, platform: o3, rects: s3, elements: c3, strategy: f3 } = t4, { boundary: u3 = "clippingAncestors", rootBoundary: m3 = "viewport", elementContext: g3 = "floating", altBoundary: d3 = false, padding: p3 = 0 } = e2, h3 = a(p3), y3 = c3[d3 ? "floating" === g3 ? "reference" : "floating" : g3], x3 = l(yield o3.getClippingRect({ element: null == (n3 = yield null == o3.isElement ? void 0 : o3.isElement(y3)) || n3 ? y3 : y3.contextElement || (yield null == o3.getDocumentElement ? void 0 : o3.getDocumentElement(c3.floating)), boundary: u3, rootBoundary: m3, strategy: f3 })), w3 = l(o3.convertOffsetParentRelativeRectToViewportRelativeRect ? yield o3.convertOffsetParentRelativeRectToViewportRelativeRect({ rect: "floating" === g3 ? __spreadProps(__spreadValues({}, s3.floating), { x: r3, y: i3 }) : s3.reference, offsetParent: yield null == o3.getOffsetParent ? void 0 : o3.getOffsetParent(c3.floating), strategy: f3 }) : s3[g3]);
      return { top: x3.top - w3.top + h3.top, bottom: w3.bottom - x3.bottom + h3.bottom, left: x3.left - w3.left + h3.left, right: w3.right - x3.right + h3.right };
    });
  }
  var c = Math.min;
  var f = Math.max;
  function u(t4, e2, n3) {
    return f(t4, c(e2, n3));
  }
  var m = (t4) => ({ name: "arrow", options: t4, fn(i3) {
    return __async(this, null, function* () {
      const { element: o3, padding: l3 = 0 } = null != t4 ? t4 : {}, { x: s3, y: c3, placement: f3, rects: m3, platform: g3 } = i3;
      if (null == o3)
        return {};
      const d3 = a(l3), p3 = { x: s3, y: c3 }, h3 = n(f3), y3 = e(f3), x3 = r(h3), w3 = yield g3.getDimensions(o3), v3 = "y" === h3 ? "top" : "left", b3 = "y" === h3 ? "bottom" : "right", R3 = m3.reference[x3] + m3.reference[h3] - p3[h3] - m3.floating[x3], A2 = p3[h3] - m3.reference[h3], P2 = yield null == g3.getOffsetParent ? void 0 : g3.getOffsetParent(o3);
      let T3 = P2 ? "y" === h3 ? P2.clientHeight || 0 : P2.clientWidth || 0 : 0;
      0 === T3 && (T3 = m3.floating[x3]);
      const O2 = R3 / 2 - A2 / 2, D3 = d3[v3], L3 = T3 - w3[x3] - d3[b3], k2 = T3 / 2 - w3[x3] / 2 + O2, E3 = u(D3, k2, L3), C2 = ("start" === y3 ? d3[v3] : d3[b3]) > 0 && k2 !== E3 && m3.reference[x3] <= m3.floating[x3];
      return { [h3]: p3[h3] - (C2 ? k2 < D3 ? D3 - k2 : L3 - k2 : 0), data: { [h3]: E3, centerOffset: k2 - E3 } };
    });
  } });
  var g = { left: "right", right: "left", bottom: "top", top: "bottom" };
  function d(t4) {
    return t4.replace(/left|right|bottom|top/g, (t5) => g[t5]);
  }
  function p(t4, i3, o3) {
    void 0 === o3 && (o3 = false);
    const a3 = e(t4), l3 = n(t4), s3 = r(l3);
    let c3 = "x" === l3 ? a3 === (o3 ? "end" : "start") ? "right" : "left" : "start" === a3 ? "bottom" : "top";
    return i3.reference[s3] > i3.floating[s3] && (c3 = d(c3)), { main: c3, cross: d(c3) };
  }
  var h = { start: "end", end: "start" };
  function y(t4) {
    return t4.replace(/start|end/g, (t5) => h[t5]);
  }
  var x = ["top", "right", "bottom", "left"];
  var w = x.reduce((t4, e2) => t4.concat(e2, e2 + "-start", e2 + "-end"), []);
  var b = function(e2) {
    return void 0 === e2 && (e2 = {}), { name: "flip", options: e2, fn(n3) {
      return __async(this, null, function* () {
        var r3;
        const { placement: i3, middlewareData: o3, rects: a3, initialPlacement: l3, platform: c3, elements: f3 } = n3, _a6 = e2, { mainAxis: u3 = true, crossAxis: m3 = true, fallbackPlacements: g3, fallbackStrategy: h3 = "bestFit", flipAlignment: x3 = true } = _a6, w3 = __objRest(_a6, ["mainAxis", "crossAxis", "fallbackPlacements", "fallbackStrategy", "flipAlignment"]), v3 = t2(i3), b3 = g3 || (v3 === l3 || !x3 ? [d(l3)] : function(t4) {
          const e3 = d(t4);
          return [y(t4), e3, y(e3)];
        }(l3)), R3 = [l3, ...b3], A2 = yield s(n3, w3), P2 = [];
        let T3 = (null == (r3 = o3.flip) ? void 0 : r3.overflows) || [];
        if (u3 && P2.push(A2[v3]), m3) {
          const { main: t4, cross: e3 } = p(i3, a3, yield null == c3.isRTL ? void 0 : c3.isRTL(f3.floating));
          P2.push(A2[t4], A2[e3]);
        }
        if (T3 = [...T3, { placement: i3, overflows: P2 }], !P2.every((t4) => t4 <= 0)) {
          var O2, D3;
          const t4 = (null != (O2 = null == (D3 = o3.flip) ? void 0 : D3.index) ? O2 : 0) + 1, e3 = R3[t4];
          if (e3)
            return { data: { index: t4, overflows: T3 }, reset: { placement: e3 } };
          let n4 = "bottom";
          switch (h3) {
            case "bestFit": {
              var L3;
              const t5 = null == (L3 = T3.map((t6) => [t6, t6.overflows.filter((t7) => t7 > 0).reduce((t7, e4) => t7 + e4, 0)]).sort((t6, e4) => t6[1] - e4[1])[0]) ? void 0 : L3[0].placement;
              t5 && (n4 = t5);
              break;
            }
            case "initialPlacement":
              n4 = l3;
          }
          if (i3 !== n4)
            return { reset: { placement: n4 } };
        }
        return {};
      });
    } };
  };
  function R(t4, e2) {
    return { top: t4.top - e2.height, right: t4.right - e2.width, bottom: t4.bottom - e2.height, left: t4.left - e2.width };
  }
  function A(t4) {
    return x.some((e2) => t4[e2] >= 0);
  }
  var P = function(t4) {
    let _a5 = void 0 === t4 ? {} : t4, { strategy: e2 = "referenceHidden" } = _a5, n3 = __objRest(_a5, ["strategy"]);
    return { name: "hide", fn(t5) {
      return __async(this, null, function* () {
        const { rects: r3 } = t5;
        switch (e2) {
          case "referenceHidden": {
            const e3 = R(yield s(t5, __spreadProps(__spreadValues({}, n3), { elementContext: "reference" })), r3.reference);
            return { data: { referenceHiddenOffsets: e3, referenceHidden: A(e3) } };
          }
          case "escaped": {
            const e3 = R(yield s(t5, __spreadProps(__spreadValues({}, n3), { altBoundary: true })), r3.floating);
            return { data: { escapedOffsets: e3, escaped: A(e3) } };
          }
          default:
            return {};
        }
      });
    } };
  };
  var T = function(r3) {
    return void 0 === r3 && (r3 = 0), { name: "offset", options: r3, fn(i3) {
      return __async(this, null, function* () {
        const { x: o3, y: a3 } = i3, l3 = yield function(r4, i4) {
          return __async(this, null, function* () {
            const { placement: o4, platform: a4, elements: l4 } = r4, s3 = yield null == a4.isRTL ? void 0 : a4.isRTL(l4.floating), c3 = t2(o4), f3 = e(o4), u3 = "x" === n(o4), m3 = ["left", "top"].includes(c3) ? -1 : 1, g3 = s3 && u3 ? -1 : 1, d3 = "function" == typeof i4 ? i4(r4) : i4;
            let { mainAxis: p3, crossAxis: h3, alignmentAxis: y3 } = "number" == typeof d3 ? { mainAxis: d3, crossAxis: 0, alignmentAxis: null } : __spreadValues({ mainAxis: 0, crossAxis: 0, alignmentAxis: null }, d3);
            return f3 && "number" == typeof y3 && (h3 = "end" === f3 ? -1 * y3 : y3), u3 ? { x: h3 * g3, y: p3 * m3 } : { x: p3 * m3, y: h3 * g3 };
          });
        }(i3, r3);
        return { x: o3 + l3.x, y: a3 + l3.y, data: l3 };
      });
    } };
  };
  function O(t4) {
    return "x" === t4 ? "y" : "x";
  }
  var D = function(e2) {
    return void 0 === e2 && (e2 = {}), { name: "shift", options: e2, fn(r3) {
      return __async(this, null, function* () {
        const { x: i3, y: o3, placement: a3 } = r3, _a6 = e2, { mainAxis: l3 = true, crossAxis: c3 = false, limiter: f3 = { fn: (t4) => {
          let { x: e3, y: n3 } = t4;
          return { x: e3, y: n3 };
        } } } = _a6, m3 = __objRest(_a6, ["mainAxis", "crossAxis", "limiter"]), g3 = { x: i3, y: o3 }, d3 = yield s(r3, m3), p3 = n(t2(a3)), h3 = O(p3);
        let y3 = g3[p3], x3 = g3[h3];
        if (l3) {
          const t4 = "y" === p3 ? "bottom" : "right";
          y3 = u(y3 + d3["y" === p3 ? "top" : "left"], y3, y3 - d3[t4]);
        }
        if (c3) {
          const t4 = "y" === h3 ? "bottom" : "right";
          x3 = u(x3 + d3["y" === h3 ? "top" : "left"], x3, x3 - d3[t4]);
        }
        const w3 = f3.fn(__spreadProps(__spreadValues({}, r3), { [p3]: y3, [h3]: x3 }));
        return __spreadProps(__spreadValues({}, w3), { data: { x: w3.x - i3, y: w3.y - o3 } });
      });
    } };
  };
  var L = function(e2) {
    return void 0 === e2 && (e2 = {}), { options: e2, fn(r3) {
      const { x: i3, y: o3, placement: a3, rects: l3, middlewareData: s3 } = r3, { offset: c3 = 0, mainAxis: f3 = true, crossAxis: u3 = true } = e2, m3 = { x: i3, y: o3 }, g3 = n(a3), d3 = O(g3);
      let p3 = m3[g3], h3 = m3[d3];
      const y3 = "function" == typeof c3 ? c3(__spreadProps(__spreadValues({}, l3), { placement: a3 })) : c3, x3 = "number" == typeof y3 ? { mainAxis: y3, crossAxis: 0 } : __spreadValues({ mainAxis: 0, crossAxis: 0 }, y3);
      if (f3) {
        const t4 = "y" === g3 ? "height" : "width", e3 = l3.reference[g3] - l3.floating[t4] + x3.mainAxis, n3 = l3.reference[g3] + l3.reference[t4] - x3.mainAxis;
        p3 < e3 ? p3 = e3 : p3 > n3 && (p3 = n3);
      }
      if (u3) {
        var w3, v3, b3, R3;
        const e3 = "y" === g3 ? "width" : "height", n3 = ["top", "left"].includes(t2(a3)), r4 = l3.reference[d3] - l3.floating[e3] + (n3 && null != (w3 = null == (v3 = s3.offset) ? void 0 : v3[d3]) ? w3 : 0) + (n3 ? 0 : x3.crossAxis), i4 = l3.reference[d3] + l3.reference[e3] + (n3 ? 0 : null != (b3 = null == (R3 = s3.offset) ? void 0 : R3[d3]) ? b3 : 0) - (n3 ? x3.crossAxis : 0);
        h3 < r4 ? h3 = r4 : h3 > i4 && (h3 = i4);
      }
      return { [g3]: p3, [d3]: h3 };
    } };
  };
  var k = function(n3) {
    return void 0 === n3 && (n3 = {}), { name: "size", options: n3, fn(r3) {
      return __async(this, null, function* () {
        const { placement: i3, rects: o3, platform: a3, elements: l3 } = r3, _a6 = n3, { apply: c3 } = _a6, u3 = __objRest(_a6, ["apply"]), m3 = yield s(r3, u3), g3 = t2(i3), d3 = e(i3);
        let p3, h3;
        "top" === g3 || "bottom" === g3 ? (p3 = g3, h3 = d3 === ((yield null == a3.isRTL ? void 0 : a3.isRTL(l3.floating)) ? "start" : "end") ? "left" : "right") : (h3 = g3, p3 = "end" === d3 ? "top" : "bottom");
        const y3 = f(m3.left, 0), x3 = f(m3.right, 0), w3 = f(m3.top, 0), v3 = f(m3.bottom, 0), b3 = { availableHeight: o3.floating.height - (["left", "right"].includes(i3) ? 2 * (0 !== w3 || 0 !== v3 ? w3 + v3 : f(m3.top, m3.bottom)) : m3[p3]), availableWidth: o3.floating.width - (["top", "bottom"].includes(i3) ? 2 * (0 !== y3 || 0 !== x3 ? y3 + x3 : f(m3.left, m3.right)) : m3[h3]) }, R3 = yield a3.getDimensions(l3.floating);
        null == c3 || c3(__spreadValues(__spreadValues({}, r3), b3));
        const A2 = yield a3.getDimensions(l3.floating);
        return R3.width !== A2.width || R3.height !== A2.height ? { reset: { rects: true } } : {};
      });
    } };
  };

  // ../../../node_modules/@floating-ui/dom/dist/floating-ui.dom.browser.min.mjs
  function n2(t4) {
    return t4 && t4.document && t4.location && t4.alert && t4.setInterval;
  }
  function o2(t4) {
    if (null == t4)
      return window;
    if (!n2(t4)) {
      const e2 = t4.ownerDocument;
      return e2 && e2.defaultView || window;
    }
    return t4;
  }
  function i2(t4) {
    return o2(t4).getComputedStyle(t4);
  }
  function r2(t4) {
    return n2(t4) ? "" : t4 ? (t4.nodeName || "").toLowerCase() : "";
  }
  function l2() {
    const t4 = navigator.userAgentData;
    return null != t4 && t4.brands ? t4.brands.map((t5) => t5.brand + "/" + t5.version).join(" ") : navigator.userAgent;
  }
  function c2(t4) {
    return t4 instanceof o2(t4).HTMLElement;
  }
  function f2(t4) {
    return t4 instanceof o2(t4).Element;
  }
  function s2(t4) {
    if ("undefined" == typeof ShadowRoot)
      return false;
    return t4 instanceof o2(t4).ShadowRoot || t4 instanceof ShadowRoot;
  }
  function u2(t4) {
    const { overflow: e2, overflowX: n3, overflowY: o3 } = i2(t4);
    return /auto|scroll|overlay|hidden/.test(e2 + o3 + n3);
  }
  function d2(t4) {
    return ["table", "td", "th"].includes(r2(t4));
  }
  function h2(t4) {
    const e2 = /firefox/i.test(l2()), n3 = i2(t4);
    return "none" !== n3.transform || "none" !== n3.perspective || "paint" === n3.contain || ["transform", "perspective"].includes(n3.willChange) || e2 && "filter" === n3.willChange || e2 && !!n3.filter && "none" !== n3.filter;
  }
  function a2() {
    return !/^((?!chrome|android).)*safari/i.test(l2());
  }
  var g2 = Math.min;
  var p2 = Math.max;
  var m2 = Math.round;
  function w2(t4, e2, n3) {
    var i3, r3, l3, s3;
    void 0 === e2 && (e2 = false), void 0 === n3 && (n3 = false);
    const u3 = t4.getBoundingClientRect();
    let d3 = 1, h3 = 1;
    e2 && c2(t4) && (d3 = t4.offsetWidth > 0 && m2(u3.width) / t4.offsetWidth || 1, h3 = t4.offsetHeight > 0 && m2(u3.height) / t4.offsetHeight || 1);
    const g3 = f2(t4) ? o2(t4) : window, p3 = !a2() && n3, w3 = (u3.left + (p3 && null != (i3 = null == (r3 = g3.visualViewport) ? void 0 : r3.offsetLeft) ? i3 : 0)) / d3, v3 = (u3.top + (p3 && null != (l3 = null == (s3 = g3.visualViewport) ? void 0 : s3.offsetTop) ? l3 : 0)) / h3, y3 = u3.width / d3, x3 = u3.height / h3;
    return { width: y3, height: x3, top: v3, right: w3 + y3, bottom: v3 + x3, left: w3, x: w3, y: v3 };
  }
  function v2(t4) {
    return (e2 = t4, (e2 instanceof o2(e2).Node ? t4.ownerDocument : t4.document) || window.document).documentElement;
    var e2;
  }
  function y2(t4) {
    return f2(t4) ? { scrollLeft: t4.scrollLeft, scrollTop: t4.scrollTop } : { scrollLeft: t4.pageXOffset, scrollTop: t4.pageYOffset };
  }
  function x2(t4) {
    return w2(v2(t4)).left + y2(t4).scrollLeft;
  }
  function b2(t4, e2, n3) {
    const o3 = c2(e2), i3 = v2(e2), l3 = w2(t4, o3 && function(t5) {
      const e3 = w2(t5);
      return m2(e3.width) !== t5.offsetWidth || m2(e3.height) !== t5.offsetHeight;
    }(e2), "fixed" === n3);
    let f3 = { scrollLeft: 0, scrollTop: 0 };
    const s3 = { x: 0, y: 0 };
    if (o3 || !o3 && "fixed" !== n3)
      if (("body" !== r2(e2) || u2(i3)) && (f3 = y2(e2)), c2(e2)) {
        const t5 = w2(e2, true);
        s3.x = t5.x + e2.clientLeft, s3.y = t5.y + e2.clientTop;
      } else
        i3 && (s3.x = x2(i3));
    return { x: l3.left + f3.scrollLeft - s3.x, y: l3.top + f3.scrollTop - s3.y, width: l3.width, height: l3.height };
  }
  function L2(t4) {
    return "html" === r2(t4) ? t4 : t4.assignedSlot || t4.parentNode || (s2(t4) ? t4.host : null) || v2(t4);
  }
  function R2(t4) {
    return c2(t4) && "fixed" !== getComputedStyle(t4).position ? t4.offsetParent : null;
  }
  function T2(t4) {
    const e2 = o2(t4);
    let n3 = R2(t4);
    for (; n3 && d2(n3) && "static" === getComputedStyle(n3).position; )
      n3 = R2(n3);
    return n3 && ("html" === r2(n3) || "body" === r2(n3) && "static" === getComputedStyle(n3).position && !h2(n3)) ? e2 : n3 || function(t5) {
      let e3 = L2(t5);
      for (s2(e3) && (e3 = e3.host); c2(e3) && !["html", "body"].includes(r2(e3)); ) {
        if (h2(e3))
          return e3;
        e3 = e3.parentNode;
      }
      return null;
    }(t4) || e2;
  }
  function W(t4) {
    if (c2(t4))
      return { width: t4.offsetWidth, height: t4.offsetHeight };
    const e2 = w2(t4);
    return { width: e2.width, height: e2.height };
  }
  function E2(t4) {
    const e2 = L2(t4);
    return ["html", "body", "#document"].includes(r2(e2)) ? t4.ownerDocument.body : c2(e2) && u2(e2) ? e2 : E2(e2);
  }
  function H(t4, e2) {
    var n3;
    void 0 === e2 && (e2 = []);
    const i3 = E2(t4), r3 = i3 === (null == (n3 = t4.ownerDocument) ? void 0 : n3.body), l3 = o2(i3), c3 = r3 ? [l3].concat(l3.visualViewport || [], u2(i3) ? i3 : []) : i3, f3 = e2.concat(c3);
    return r3 ? f3 : f3.concat(H(c3));
  }
  function C(e2, n3, r3) {
    return "viewport" === n3 ? l(function(t4, e3) {
      const n4 = o2(t4), i3 = v2(t4), r4 = n4.visualViewport;
      let l3 = i3.clientWidth, c3 = i3.clientHeight, f3 = 0, s3 = 0;
      if (r4) {
        l3 = r4.width, c3 = r4.height;
        const t5 = a2();
        (t5 || !t5 && "fixed" === e3) && (f3 = r4.offsetLeft, s3 = r4.offsetTop);
      }
      return { width: l3, height: c3, x: f3, y: s3 };
    }(e2, r3)) : f2(n3) ? function(t4, e3) {
      const n4 = w2(t4, false, "fixed" === e3), o3 = n4.top + t4.clientTop, i3 = n4.left + t4.clientLeft;
      return { top: o3, left: i3, x: i3, y: o3, right: i3 + t4.clientWidth, bottom: o3 + t4.clientHeight, width: t4.clientWidth, height: t4.clientHeight };
    }(n3, r3) : l(function(t4) {
      var e3;
      const n4 = v2(t4), o3 = y2(t4), r4 = null == (e3 = t4.ownerDocument) ? void 0 : e3.body, l3 = p2(n4.scrollWidth, n4.clientWidth, r4 ? r4.scrollWidth : 0, r4 ? r4.clientWidth : 0), c3 = p2(n4.scrollHeight, n4.clientHeight, r4 ? r4.scrollHeight : 0, r4 ? r4.clientHeight : 0);
      let f3 = -o3.scrollLeft + x2(t4);
      const s3 = -o3.scrollTop;
      return "rtl" === i2(r4 || n4).direction && (f3 += p2(n4.clientWidth, r4 ? r4.clientWidth : 0) - l3), { width: l3, height: c3, x: f3, y: s3 };
    }(v2(e2)));
  }
  function S(t4) {
    const e2 = H(t4), n3 = ["absolute", "fixed"].includes(i2(t4).position) && c2(t4) ? T2(t4) : t4;
    return f2(n3) ? e2.filter((t5) => f2(t5) && function(t6, e3) {
      const n4 = null == e3.getRootNode ? void 0 : e3.getRootNode();
      if (t6.contains(e3))
        return true;
      if (n4 && s2(n4)) {
        let n5 = e3;
        do {
          if (n5 && t6 === n5)
            return true;
          n5 = n5.parentNode || n5.host;
        } while (n5);
      }
      return false;
    }(t5, n3) && "body" !== r2(t5)) : [];
  }
  var D2 = { getClippingRect: function(t4) {
    let { element: e2, boundary: n3, rootBoundary: o3, strategy: i3 } = t4;
    const r3 = [..."clippingAncestors" === n3 ? S(e2) : [].concat(n3), o3], l3 = r3[0], c3 = r3.reduce((t5, n4) => {
      const o4 = C(e2, n4, i3);
      return t5.top = p2(o4.top, t5.top), t5.right = g2(o4.right, t5.right), t5.bottom = g2(o4.bottom, t5.bottom), t5.left = p2(o4.left, t5.left), t5;
    }, C(e2, l3, i3));
    return { width: c3.right - c3.left, height: c3.bottom - c3.top, x: c3.left, y: c3.top };
  }, convertOffsetParentRelativeRectToViewportRelativeRect: function(t4) {
    let { rect: e2, offsetParent: n3, strategy: o3 } = t4;
    const i3 = c2(n3), l3 = v2(n3);
    if (n3 === l3)
      return e2;
    let f3 = { scrollLeft: 0, scrollTop: 0 };
    const s3 = { x: 0, y: 0 };
    if ((i3 || !i3 && "fixed" !== o3) && (("body" !== r2(n3) || u2(l3)) && (f3 = y2(n3)), c2(n3))) {
      const t5 = w2(n3, true);
      s3.x = t5.x + n3.clientLeft, s3.y = t5.y + n3.clientTop;
    }
    return __spreadProps(__spreadValues({}, e2), { x: e2.x - f3.scrollLeft + s3.x, y: e2.y - f3.scrollTop + s3.y });
  }, isElement: f2, getDimensions: W, getOffsetParent: T2, getDocumentElement: v2, getElementRects: (t4) => {
    let { reference: e2, floating: n3, strategy: o3 } = t4;
    return { reference: b2(e2, T2(n3), o3), floating: __spreadProps(__spreadValues({}, W(n3)), { x: 0, y: 0 }) };
  }, getClientRects: (t4) => Array.from(t4.getClientRects()), isRTL: (t4) => "rtl" === i2(t4).direction };
  function N(t4, e2, n3, o3) {
    void 0 === o3 && (o3 = {});
    const { ancestorScroll: i3 = true, ancestorResize: r3 = true, elementResize: l3 = true, animationFrame: c3 = false } = o3, s3 = i3 && !c3, u3 = r3 && !c3, d3 = s3 || u3 ? [...f2(t4) ? H(t4) : [], ...H(e2)] : [];
    d3.forEach((t5) => {
      s3 && t5.addEventListener("scroll", n3, { passive: true }), u3 && t5.addEventListener("resize", n3);
    });
    let h3, a3 = null;
    if (l3) {
      let o4 = true;
      a3 = new ResizeObserver(() => {
        o4 || n3(), o4 = false;
      }), f2(t4) && !c3 && a3.observe(t4), a3.observe(e2);
    }
    let g3 = c3 ? w2(t4) : null;
    return c3 && function e3() {
      const o4 = w2(t4);
      !g3 || o4.x === g3.x && o4.y === g3.y && o4.width === g3.width && o4.height === g3.height || n3();
      g3 = o4, h3 = requestAnimationFrame(e3);
    }(), n3(), () => {
      var t5;
      d3.forEach((t6) => {
        s3 && t6.removeEventListener("scroll", n3), u3 && t6.removeEventListener("resize", n3);
      }), null == (t5 = a3) || t5.disconnect(), a3 = null, c3 && cancelAnimationFrame(h3);
    };
  }
  var z = (t4, n3, o3) => o(t4, n3, __spreadValues({ platform: D2 }, o3));

  // ../../../node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js
  var React43 = __toESM(require_react());
  var import_react62 = __toESM(require_react());
  var ReactDOM = __toESM(require_react_dom());
  var index = typeof document !== "undefined" ? import_react62.useLayoutEffect : import_react62.useEffect;
  function deepEqual(a3, b3) {
    if (a3 === b3) {
      return true;
    }
    if (typeof a3 !== typeof b3) {
      return false;
    }
    if (typeof a3 === "function" && a3.toString() === b3.toString()) {
      return true;
    }
    let length, i3, keys;
    if (a3 && b3 && typeof a3 == "object") {
      if (Array.isArray(a3)) {
        length = a3.length;
        if (length != b3.length)
          return false;
        for (i3 = length; i3-- !== 0; ) {
          if (!deepEqual(a3[i3], b3[i3])) {
            return false;
          }
        }
        return true;
      }
      keys = Object.keys(a3);
      length = keys.length;
      if (length !== Object.keys(b3).length) {
        return false;
      }
      for (i3 = length; i3-- !== 0; ) {
        if (!Object.prototype.hasOwnProperty.call(b3, keys[i3])) {
          return false;
        }
      }
      for (i3 = length; i3-- !== 0; ) {
        const key = keys[i3];
        if (key === "_owner" && a3.$$typeof) {
          continue;
        }
        if (!deepEqual(a3[key], b3[key])) {
          return false;
        }
      }
      return true;
    }
    return a3 !== a3 && b3 !== b3;
  }
  function useLatestRef(value) {
    const ref = React43.useRef(value);
    index(() => {
      ref.current = value;
    });
    return ref;
  }
  function useFloating(_temp) {
    let {
      middleware,
      placement = "bottom",
      strategy = "absolute",
      whileElementsMounted
    } = _temp === void 0 ? {} : _temp;
    const reference = React43.useRef(null);
    const floating = React43.useRef(null);
    const whileElementsMountedRef = useLatestRef(whileElementsMounted);
    const cleanupRef = React43.useRef(null);
    const [data, setData] = React43.useState({
      // Setting these to `null` will allow the consumer to determine if
      // `computePosition()` has run yet
      x: null,
      y: null,
      strategy,
      placement,
      middlewareData: {}
    });
    const [latestMiddleware, setLatestMiddleware] = React43.useState(middleware);
    if (!deepEqual(latestMiddleware == null ? void 0 : latestMiddleware.map((_ref) => {
      let {
        options
      } = _ref;
      return options;
    }), middleware == null ? void 0 : middleware.map((_ref2) => {
      let {
        options
      } = _ref2;
      return options;
    }))) {
      setLatestMiddleware(middleware);
    }
    const update = React43.useCallback(() => {
      if (!reference.current || !floating.current) {
        return;
      }
      z(reference.current, floating.current, {
        middleware: latestMiddleware,
        placement,
        strategy
      }).then((data2) => {
        if (isMountedRef.current) {
          ReactDOM.flushSync(() => {
            setData(data2);
          });
        }
      });
    }, [latestMiddleware, placement, strategy]);
    index(() => {
      if (isMountedRef.current) {
        update();
      }
    }, [update]);
    const isMountedRef = React43.useRef(false);
    index(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    const runElementMountCallback = React43.useCallback(() => {
      if (typeof cleanupRef.current === "function") {
        cleanupRef.current();
        cleanupRef.current = null;
      }
      if (reference.current && floating.current) {
        if (whileElementsMountedRef.current) {
          const cleanupFn = whileElementsMountedRef.current(reference.current, floating.current, update);
          cleanupRef.current = cleanupFn;
        } else {
          update();
        }
      }
    }, [update, whileElementsMountedRef]);
    const setReference = React43.useCallback((node) => {
      reference.current = node;
      runElementMountCallback();
    }, [runElementMountCallback]);
    const setFloating = React43.useCallback((node) => {
      floating.current = node;
      runElementMountCallback();
    }, [runElementMountCallback]);
    const refs = React43.useMemo(() => ({
      reference,
      floating
    }), []);
    return React43.useMemo(() => __spreadProps(__spreadValues({}, data), {
      update,
      refs,
      reference: setReference,
      floating: setFloating
    }), [data, update, refs, setReference, setFloating]);
  }
  var arrow = (options) => {
    const {
      element,
      padding
    } = options;
    function isRef(value) {
      return Object.prototype.hasOwnProperty.call(value, "current");
    }
    return {
      name: "arrow",
      options,
      fn(args) {
        if (isRef(element)) {
          if (element.current != null) {
            return m({
              element: element.current,
              padding
            }).fn(args);
          }
          return {};
        } else if (element) {
          return m({
            element,
            padding
          }).fn(args);
        }
        return {};
      }
    };
  };

  // ../../../node_modules/@radix-ui/react-use-size/dist/index.module.js
  var import_react63 = __toESM(require_react());
  function $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {
    const [size, setSize] = (0, import_react63.useState)(void 0);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (element) {
        setSize({
          width: element.offsetWidth,
          height: element.offsetHeight
        });
        const resizeObserver = new ResizeObserver((entries) => {
          if (!Array.isArray(entries))
            return;
          if (!entries.length)
            return;
          const entry = entries[0];
          let width;
          let height;
          if ("borderBoxSize" in entry) {
            const borderSizeEntry = entry["borderBoxSize"];
            const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
            width = borderSize["inlineSize"];
            height = borderSize["blockSize"];
          } else {
            width = element.offsetWidth;
            height = element.offsetHeight;
          }
          setSize({
            width,
            height
          });
        });
        resizeObserver.observe(element, {
          box: "border-box"
        });
        return () => resizeObserver.unobserve(element);
      } else
        setSize(void 0);
    }, [
      element
    ]);
    return size;
  }

  // ../../../node_modules/@radix-ui/react-popper/dist/index.module.js
  var $cf1ac5d9fe0e8206$var$POPPER_NAME = "Popper";
  var [$cf1ac5d9fe0e8206$var$createPopperContext, $cf1ac5d9fe0e8206$export$722aac194ae923] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cf1ac5d9fe0e8206$var$POPPER_NAME);
  var [$cf1ac5d9fe0e8206$var$PopperProvider, $cf1ac5d9fe0e8206$var$usePopperContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$POPPER_NAME);
  var $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9 = (props) => {
    const { __scopePopper, children } = props;
    const [anchor, setAnchor] = (0, import_react64.useState)(null);
    return /* @__PURE__ */ (0, import_react64.createElement)($cf1ac5d9fe0e8206$var$PopperProvider, {
      scope: __scopePopper,
      anchor,
      onAnchorChange: setAnchor
    }, children);
  };
  var $cf1ac5d9fe0e8206$var$ANCHOR_NAME = "PopperAnchor";
  var $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d = /* @__PURE__ */ (0, import_react64.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopePopper, virtualRef } = _a5, anchorProps = __objRest(_a5, ["__scopePopper", "virtualRef"]);
    const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$ANCHOR_NAME, __scopePopper);
    const ref = (0, import_react64.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    (0, import_react64.useEffect)(() => {
      context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
    });
    return virtualRef ? null : /* @__PURE__ */ (0, import_react64.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, anchorProps, {
      ref: composedRefs
    }));
  });
  var $cf1ac5d9fe0e8206$var$CONTENT_NAME = "PopperContent";
  var [$cf1ac5d9fe0e8206$var$PopperContentProvider, $cf1ac5d9fe0e8206$var$useContentContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME);
  var [$cf1ac5d9fe0e8206$var$PositionContextProvider, $cf1ac5d9fe0e8206$var$usePositionContext] = $cf1ac5d9fe0e8206$var$createPopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, {
    hasParent: false,
    positionUpdateFns: /* @__PURE__ */ new Set()
  });
  var $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc = /* @__PURE__ */ (0, import_react64.forwardRef)((props, forwardedRef) => {
    var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$hide, _middlewareData$trans, _middlewareData$trans2;
    const _a5 = props, { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, avoidCollisions = true, onPlaced } = _a5, contentProps = __objRest(_a5, ["__scopePopper", "side", "sideOffset", "align", "alignOffset", "arrowPadding", "collisionBoundary", "collisionPadding", "sticky", "hideWhenDetached", "avoidCollisions", "onPlaced"]);
    const context = $cf1ac5d9fe0e8206$var$usePopperContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);
    const [content, setContent] = (0, import_react64.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setContent(node)
    );
    const [arrow2, setArrow] = (0, import_react64.useState)(null);
    const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(arrow2);
    const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
    const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
    const desiredPlacement = side + (align !== "center" ? "-" + align : "");
    const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : __spreadValues({
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, collisionPaddingProp);
    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
      collisionBoundary
    ];
    const hasExplicitBoundaries = boundary.length > 0;
    const detectOverflowOptions = {
      padding: collisionPadding,
      boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull),
      // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
      altBoundary: hasExplicitBoundaries
    };
    const { reference, floating, strategy, x: x3, y: y3, placement, middlewareData, update } = useFloating({
      // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
      strategy: "fixed",
      placement: desiredPlacement,
      whileElementsMounted: N,
      middleware: [
        $cf1ac5d9fe0e8206$var$anchorCssProperties(),
        T({
          mainAxis: sideOffset + arrowHeight,
          alignmentAxis: alignOffset
        }),
        avoidCollisions ? D(__spreadValues({
          mainAxis: true,
          crossAxis: false,
          limiter: sticky === "partial" ? L() : void 0
        }, detectOverflowOptions)) : void 0,
        arrow2 ? arrow({
          element: arrow2,
          padding: arrowPadding
        }) : void 0,
        avoidCollisions ? b(__spreadValues({}, detectOverflowOptions)) : void 0,
        k(__spreadProps(__spreadValues({}, detectOverflowOptions), {
          apply: ({ elements, availableWidth: width, availableHeight: height }) => {
            elements.floating.style.setProperty("--radix-popper-available-width", `${width}px`);
            elements.floating.style.setProperty("--radix-popper-available-height", `${height}px`);
          }
        })),
        $cf1ac5d9fe0e8206$var$transformOrigin({
          arrowWidth,
          arrowHeight
        }),
        hideWhenDetached ? P({
          strategy: "referenceHidden"
        }) : void 0
      ].filter($cf1ac5d9fe0e8206$var$isDefined)
    });
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      reference(context.anchor);
    }, [
      reference,
      context.anchor
    ]);
    const isPlaced = x3 !== null && y3 !== null;
    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
    const handlePlaced = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPlaced);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (isPlaced)
        handlePlaced === null || handlePlaced === void 0 || handlePlaced();
    }, [
      isPlaced,
      handlePlaced
    ]);
    const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
    const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
    const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
    const [contentZIndex, setContentZIndex] = (0, import_react64.useState)();
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (content)
        setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [
      content
    ]);
    const { hasParent, positionUpdateFns } = $cf1ac5d9fe0e8206$var$usePositionContext($cf1ac5d9fe0e8206$var$CONTENT_NAME, __scopePopper);
    const isRoot = !hasParent;
    (0, import_react64.useLayoutEffect)(() => {
      if (!isRoot) {
        positionUpdateFns.add(update);
        return () => {
          positionUpdateFns.delete(update);
        };
      }
    }, [
      isRoot,
      positionUpdateFns,
      update
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (isRoot && isPlaced)
        Array.from(positionUpdateFns).reverse().forEach(
          (fn) => requestAnimationFrame(fn)
        );
    }, [
      isRoot,
      isPlaced,
      positionUpdateFns
    ]);
    const commonProps = __spreadProps(__spreadValues({
      "data-side": placedSide,
      "data-align": placedAlign
    }, contentProps), {
      ref: composedRefs,
      style: __spreadProps(__spreadValues({}, contentProps.style), {
        // if the PopperContent hasn't been placed yet (not all measurements done)
        // we prevent animations so that users's animation don't kick in too early referring wrong sides
        animation: !isPlaced ? "none" : void 0,
        // hide the content if using the hide middleware and should be hidden
        opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
      })
    });
    return /* @__PURE__ */ (0, import_react64.createElement)("div", {
      ref: floating,
      "data-radix-popper-content-wrapper": "",
      style: {
        position: strategy,
        left: 0,
        top: 0,
        transform: isPlaced ? `translate3d(${Math.round(x3)}px, ${Math.round(y3)}px, 0)` : "translate3d(0, -200%, 0)",
        // keep off the page when measuring
        minWidth: "max-content",
        zIndex: contentZIndex,
        ["--radix-popper-transform-origin"]: [
          (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
          (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
        ].join(" ")
      },
      dir: props.dir
    }, /* @__PURE__ */ (0, import_react64.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider, {
      scope: __scopePopper,
      placedSide,
      onArrowChange: setArrow,
      arrowX,
      arrowY,
      shouldHideArrow: cannotCenterArrow
    }, isRoot ? /* @__PURE__ */ (0, import_react64.createElement)($cf1ac5d9fe0e8206$var$PositionContextProvider, {
      scope: __scopePopper,
      hasParent: true,
      positionUpdateFns
    }, /* @__PURE__ */ (0, import_react64.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, commonProps)) : /* @__PURE__ */ (0, import_react64.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, commonProps)));
  });
  function $cf1ac5d9fe0e8206$var$isDefined(value) {
    return value !== void 0;
  }
  function $cf1ac5d9fe0e8206$var$isNotNull(value) {
    return value !== null;
  }
  var $cf1ac5d9fe0e8206$var$anchorCssProperties = () => ({
    name: "anchorCssProperties",
    fn(data) {
      const { rects, elements } = data;
      const { width, height } = rects.reference;
      elements.floating.style.setProperty("--radix-popper-anchor-width", `${width}px`);
      elements.floating.style.setProperty("--radix-popper-anchor-height", `${height}px`);
      return {};
    }
  });
  var $cf1ac5d9fe0e8206$var$transformOrigin = (options) => ({
    name: "transformOrigin",
    options,
    fn(data) {
      var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
      const { placement, rects, middlewareData } = data;
      const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
      const isArrowHidden = cannotCenterArrow;
      const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
      const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
      const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement);
      const noArrowAlign = {
        start: "0%",
        center: "50%",
        end: "100%"
      }[placedAlign];
      const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
      const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
      let x3 = "";
      let y3 = "";
      if (placedSide === "bottom") {
        x3 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
        y3 = `${-arrowHeight}px`;
      } else if (placedSide === "top") {
        x3 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
        y3 = `${rects.floating.height + arrowHeight}px`;
      } else if (placedSide === "right") {
        x3 = `${-arrowHeight}px`;
        y3 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
      } else if (placedSide === "left") {
        x3 = `${rects.floating.width + arrowHeight}px`;
        y3 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
      }
      return {
        data: {
          x: x3,
          y: y3
        }
      };
    }
  });
  function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement(placement) {
    const [side, align = "center"] = placement.split("-");
    return [
      side,
      align
    ];
  }
  var $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf9;
  var $cf1ac5d9fe0e8206$export$b688253958b8dfe7 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d;
  var $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc;

  // ../../../node_modules/@radix-ui/react-roving-focus/dist/index.module.js
  var import_react65 = __toESM(require_react());
  var $d7bdfb9eb0fdf311$var$ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
  var $d7bdfb9eb0fdf311$var$EVENT_OPTIONS = {
    bubbles: false,
    cancelable: true
  };
  var $d7bdfb9eb0fdf311$var$GROUP_NAME = "RovingFocusGroup";
  var [$d7bdfb9eb0fdf311$var$Collection, $d7bdfb9eb0fdf311$var$useCollection, $d7bdfb9eb0fdf311$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($d7bdfb9eb0fdf311$var$GROUP_NAME);
  var [$d7bdfb9eb0fdf311$var$createRovingFocusGroupContext, $d7bdfb9eb0fdf311$export$c7109489551a4f4] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d7bdfb9eb0fdf311$var$GROUP_NAME, [
    $d7bdfb9eb0fdf311$var$createCollectionScope
  ]);
  var [$d7bdfb9eb0fdf311$var$RovingFocusProvider, $d7bdfb9eb0fdf311$var$useRovingFocusContext] = $d7bdfb9eb0fdf311$var$createRovingFocusGroupContext($d7bdfb9eb0fdf311$var$GROUP_NAME);
  var $d7bdfb9eb0fdf311$export$8699f7c8af148338 = /* @__PURE__ */ (0, import_react65.forwardRef)((props, forwardedRef) => {
    return /* @__PURE__ */ (0, import_react65.createElement)($d7bdfb9eb0fdf311$var$Collection.Provider, {
      scope: props.__scopeRovingFocusGroup
    }, /* @__PURE__ */ (0, import_react65.createElement)($d7bdfb9eb0fdf311$var$Collection.Slot, {
      scope: props.__scopeRovingFocusGroup
    }, /* @__PURE__ */ (0, import_react65.createElement)($d7bdfb9eb0fdf311$var$RovingFocusGroupImpl, _extends({}, props, {
      ref: forwardedRef
    }))));
  });
  var $d7bdfb9eb0fdf311$var$RovingFocusGroupImpl = /* @__PURE__ */ (0, import_react65.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeRovingFocusGroup, orientation, loop = false, dir, currentTabStopId: currentTabStopIdProp, defaultCurrentTabStopId, onCurrentTabStopIdChange, onEntryFocus } = _a5, groupProps = __objRest(_a5, ["__scopeRovingFocusGroup", "orientation", "loop", "dir", "currentTabStopId", "defaultCurrentTabStopId", "onCurrentTabStopIdChange", "onEntryFocus"]);
    const ref = (0, import_react65.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
    const [currentTabStopId = null, setCurrentTabStopId] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: currentTabStopIdProp,
      defaultProp: defaultCurrentTabStopId,
      onChange: onCurrentTabStopIdChange
    });
    const [isTabbingBackOut, setIsTabbingBackOut] = (0, import_react65.useState)(false);
    const handleEntryFocus = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onEntryFocus);
    const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
    const isClickFocusRef = (0, import_react65.useRef)(false);
    const [focusableItemsCount, setFocusableItemsCount] = (0, import_react65.useState)(0);
    (0, import_react65.useEffect)(() => {
      const node = ref.current;
      if (node) {
        node.addEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
        return () => node.removeEventListener($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, handleEntryFocus);
      }
    }, [
      handleEntryFocus
    ]);
    return /* @__PURE__ */ (0, import_react65.createElement)($d7bdfb9eb0fdf311$var$RovingFocusProvider, {
      scope: __scopeRovingFocusGroup,
      orientation,
      dir: direction,
      loop,
      currentTabStopId,
      onItemFocus: (0, import_react65.useCallback)(
        (tabStopId) => setCurrentTabStopId(tabStopId),
        [
          setCurrentTabStopId
        ]
      ),
      onItemShiftTab: (0, import_react65.useCallback)(
        () => setIsTabbingBackOut(true),
        []
      ),
      onFocusableItemAdd: (0, import_react65.useCallback)(
        () => setFocusableItemsCount(
          (prevCount) => prevCount + 1
        ),
        []
      ),
      onFocusableItemRemove: (0, import_react65.useCallback)(
        () => setFocusableItemsCount(
          (prevCount) => prevCount - 1
        ),
        []
      )
    }, /* @__PURE__ */ (0, import_react65.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
      "data-orientation": orientation
    }, groupProps, {
      ref: composedRefs,
      style: __spreadValues({
        outline: "none"
      }, props.style),
      onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, () => {
        isClickFocusRef.current = true;
      }),
      onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, (event) => {
        const isKeyboardFocus = !isClickFocusRef.current;
        if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
          const entryFocusEvent = new CustomEvent($d7bdfb9eb0fdf311$var$ENTRY_FOCUS, $d7bdfb9eb0fdf311$var$EVENT_OPTIONS);
          event.currentTarget.dispatchEvent(entryFocusEvent);
          if (!entryFocusEvent.defaultPrevented) {
            const items = getItems().filter(
              (item) => item.focusable
            );
            const activeItem = items.find(
              (item) => item.active
            );
            const currentItem = items.find(
              (item) => item.id === currentTabStopId
            );
            const candidateItems = [
              activeItem,
              currentItem,
              ...items
            ].filter(Boolean);
            const candidateNodes = candidateItems.map(
              (item) => item.ref.current
            );
            $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes);
          }
        }
        isClickFocusRef.current = false;
      }),
      onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        props.onBlur,
        () => setIsTabbingBackOut(false)
      )
    })));
  });
  var $d7bdfb9eb0fdf311$var$ITEM_NAME = "RovingFocusGroupItem";
  var $d7bdfb9eb0fdf311$export$ab9df7c53fe8454 = /* @__PURE__ */ (0, import_react65.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeRovingFocusGroup, focusable = true, active = false, tabStopId } = _a5, itemProps = __objRest(_a5, ["__scopeRovingFocusGroup", "focusable", "active", "tabStopId"]);
    const autoId = $1746a345f3d73bb7$export$f680877a34711e37();
    const id = tabStopId || autoId;
    const context = $d7bdfb9eb0fdf311$var$useRovingFocusContext($d7bdfb9eb0fdf311$var$ITEM_NAME, __scopeRovingFocusGroup);
    const isCurrentTabStop = context.currentTabStopId === id;
    const getItems = $d7bdfb9eb0fdf311$var$useCollection(__scopeRovingFocusGroup);
    const { onFocusableItemAdd, onFocusableItemRemove } = context;
    (0, import_react65.useEffect)(() => {
      if (focusable) {
        onFocusableItemAdd();
        return () => onFocusableItemRemove();
      }
    }, [
      focusable,
      onFocusableItemAdd,
      onFocusableItemRemove
    ]);
    return /* @__PURE__ */ (0, import_react65.createElement)($d7bdfb9eb0fdf311$var$Collection.ItemSlot, {
      scope: __scopeRovingFocusGroup,
      id,
      focusable,
      active
    }, /* @__PURE__ */ (0, import_react65.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
      tabIndex: isCurrentTabStop ? 0 : -1,
      "data-orientation": context.orientation
    }, itemProps, {
      ref: forwardedRef,
      onMouseDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onMouseDown, (event) => {
        if (!focusable)
          event.preventDefault();
        else
          context.onItemFocus(id);
      }),
      onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        props.onFocus,
        () => context.onItemFocus(id)
      ),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
        if (event.key === "Tab" && event.shiftKey) {
          context.onItemShiftTab();
          return;
        }
        if (event.target !== event.currentTarget)
          return;
        const focusIntent = $d7bdfb9eb0fdf311$var$getFocusIntent(event, context.orientation, context.dir);
        if (focusIntent !== void 0) {
          event.preventDefault();
          const items = getItems().filter(
            (item) => item.focusable
          );
          let candidateNodes = items.map(
            (item) => item.ref.current
          );
          if (focusIntent === "last")
            candidateNodes.reverse();
          else if (focusIntent === "prev" || focusIntent === "next") {
            if (focusIntent === "prev")
              candidateNodes.reverse();
            const currentIndex = candidateNodes.indexOf(event.currentTarget);
            candidateNodes = context.loop ? $d7bdfb9eb0fdf311$var$wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
          }
          setTimeout(
            () => $d7bdfb9eb0fdf311$var$focusFirst(candidateNodes)
          );
        }
      })
    })));
  });
  var $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
  };
  function $d7bdfb9eb0fdf311$var$getDirectionAwareKey(key, dir) {
    if (dir !== "rtl")
      return key;
    return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
  }
  function $d7bdfb9eb0fdf311$var$getFocusIntent(event, orientation, dir) {
    const key = $d7bdfb9eb0fdf311$var$getDirectionAwareKey(event.key, dir);
    if (orientation === "vertical" && [
      "ArrowLeft",
      "ArrowRight"
    ].includes(key))
      return void 0;
    if (orientation === "horizontal" && [
      "ArrowUp",
      "ArrowDown"
    ].includes(key))
      return void 0;
    return $d7bdfb9eb0fdf311$var$MAP_KEY_TO_FOCUS_INTENT[key];
  }
  function $d7bdfb9eb0fdf311$var$focusFirst(candidates) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates) {
      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
        return;
      candidate.focus();
      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
        return;
    }
  }
  function $d7bdfb9eb0fdf311$var$wrapArray(array2, startIndex) {
    return array2.map(
      (_, index2) => array2[(startIndex + index2) % array2.length]
    );
  }
  var $d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9 = $d7bdfb9eb0fdf311$export$8699f7c8af148338;
  var $d7bdfb9eb0fdf311$export$6d08773d2e66f8f2 = $d7bdfb9eb0fdf311$export$ab9df7c53fe8454;

  // ../../../node_modules/@radix-ui/react-menu/dist/index.module.js
  var $6cc32821e9371a1c$var$SELECTION_KEYS = [
    "Enter",
    " "
  ];
  var $6cc32821e9371a1c$var$FIRST_KEYS = [
    "ArrowDown",
    "PageUp",
    "Home"
  ];
  var $6cc32821e9371a1c$var$LAST_KEYS = [
    "ArrowUp",
    "PageDown",
    "End"
  ];
  var $6cc32821e9371a1c$var$FIRST_LAST_KEYS = [
    ...$6cc32821e9371a1c$var$FIRST_KEYS,
    ...$6cc32821e9371a1c$var$LAST_KEYS
  ];
  var $6cc32821e9371a1c$var$SUB_OPEN_KEYS = {
    ltr: [
      ...$6cc32821e9371a1c$var$SELECTION_KEYS,
      "ArrowRight"
    ],
    rtl: [
      ...$6cc32821e9371a1c$var$SELECTION_KEYS,
      "ArrowLeft"
    ]
  };
  var $6cc32821e9371a1c$var$SUB_CLOSE_KEYS = {
    ltr: [
      "ArrowLeft"
    ],
    rtl: [
      "ArrowRight"
    ]
  };
  var $6cc32821e9371a1c$var$MENU_NAME = "Menu";
  var [$6cc32821e9371a1c$var$Collection, $6cc32821e9371a1c$var$useCollection, $6cc32821e9371a1c$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($6cc32821e9371a1c$var$MENU_NAME);
  var [$6cc32821e9371a1c$var$createMenuContext, $6cc32821e9371a1c$export$4027731b685e72eb] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($6cc32821e9371a1c$var$MENU_NAME, [
    $6cc32821e9371a1c$var$createCollectionScope,
    $cf1ac5d9fe0e8206$export$722aac194ae923,
    $d7bdfb9eb0fdf311$export$c7109489551a4f4
  ]);
  var $6cc32821e9371a1c$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae923();
  var $6cc32821e9371a1c$var$useRovingFocusGroupScope = $d7bdfb9eb0fdf311$export$c7109489551a4f4();
  var [$6cc32821e9371a1c$var$MenuProvider, $6cc32821e9371a1c$var$useMenuContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME);
  var [$6cc32821e9371a1c$var$MenuRootProvider, $6cc32821e9371a1c$var$useMenuRootContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$MENU_NAME);
  var $6cc32821e9371a1c$export$d9b273488cd8ce6f = (props) => {
    const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    const [content, setContent] = (0, import_react66.useState)(null);
    const isUsingKeyboardRef = (0, import_react66.useRef)(false);
    const handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
    const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
    (0, import_react66.useEffect)(() => {
      const handleKeyDown = () => {
        isUsingKeyboardRef.current = true;
        document.addEventListener("pointerdown", handlePointer, {
          capture: true,
          once: true
        });
        document.addEventListener("pointermove", handlePointer, {
          capture: true,
          once: true
        });
      };
      const handlePointer = () => isUsingKeyboardRef.current = false;
      document.addEventListener("keydown", handleKeyDown, {
        capture: true
      });
      return () => {
        document.removeEventListener("keydown", handleKeyDown, {
          capture: true
        });
        document.removeEventListener("pointerdown", handlePointer, {
          capture: true
        });
        document.removeEventListener("pointermove", handlePointer, {
          capture: true
        });
      };
    }, []);
    return /* @__PURE__ */ (0, import_react66.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuProvider, {
      scope: __scopeMenu,
      open,
      onOpenChange: handleOpenChange,
      content,
      onContentChange: setContent
    }, /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuRootProvider, {
      scope: __scopeMenu,
      onClose: (0, import_react66.useCallback)(
        () => handleOpenChange(false),
        [
          handleOpenChange
        ]
      ),
      isUsingKeyboardRef,
      dir: direction,
      modal
    }, children)));
  };
  var $6cc32821e9371a1c$export$9fa5ebd18bee4d43 = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeMenu } = _a5, anchorProps = __objRest(_a5, ["__scopeMenu"]);
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    return /* @__PURE__ */ (0, import_react66.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe7, _extends({}, popperScope, anchorProps, {
      ref: forwardedRef
    }));
  });
  var $6cc32821e9371a1c$var$PORTAL_NAME = "MenuPortal";
  var [$6cc32821e9371a1c$var$PortalProvider, $6cc32821e9371a1c$var$usePortalContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, {
    forceMount: void 0
  });
  var $6cc32821e9371a1c$export$793392f970497feb = (props) => {
    const { __scopeMenu, forceMount, children, container } = props;
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$PORTAL_NAME, __scopeMenu);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$PortalProvider, {
      scope: __scopeMenu,
      forceMount
    }, /* @__PURE__ */ (0, import_react66.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, /* @__PURE__ */ (0, import_react66.createElement)($f1701beae083dbae$export$602eac185826482c, {
      asChild: true,
      container
    }, children)));
  };
  var $6cc32821e9371a1c$var$CONTENT_NAME = "MenuContent";
  var [$6cc32821e9371a1c$var$MenuContentProvider, $6cc32821e9371a1c$var$useMenuContentContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$CONTENT_NAME);
  var $6cc32821e9371a1c$export$479f0f2f71193efe = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const _a5 = props, { forceMount = portalContext.forceMount } = _a5, contentProps = __objRest(_a5, ["forceMount"]);
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
      scope: props.__scopeMenu
    }, /* @__PURE__ */ (0, import_react66.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
      scope: props.__scopeMenu
    }, rootContext.modal ? /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuRootContentModal, _extends({}, contentProps, {
      ref: forwardedRef
    })) : /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuRootContentNonModal, _extends({}, contentProps, {
      ref: forwardedRef
    })))));
  });
  var $6cc32821e9371a1c$var$MenuRootContentModal = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const ref = (0, import_react66.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    (0, import_react66.useEffect)(() => {
      const content = ref.current;
      if (content)
        return hideOthers(content);
    }, []);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({}, props, {
      ref: composedRefs,
      trapFocus: context.open,
      disableOutsidePointerEvents: context.open,
      disableOutsideScroll: true,
      onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        props.onFocusOutside,
        (event) => event.preventDefault(),
        {
          checkForDefaultPrevented: false
        }
      ),
      onDismiss: () => context.onOpenChange(false)
    }));
  });
  var $6cc32821e9371a1c$var$MenuRootContentNonModal = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({}, props, {
      ref: forwardedRef,
      trapFocus: false,
      disableOutsidePointerEvents: false,
      disableOutsideScroll: false,
      onDismiss: () => context.onOpenChange(false)
    }));
  });
  var $6cc32821e9371a1c$var$MenuContentImpl = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeMenu, loop = false, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEntryFocus, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside, onDismiss, disableOutsideScroll } = _a5, contentProps = __objRest(_a5, ["__scopeMenu", "loop", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus", "disableOutsidePointerEvents", "onEntryFocus", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside", "onDismiss", "disableOutsideScroll"]);
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, __scopeMenu);
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    const rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu);
    const getItems = $6cc32821e9371a1c$var$useCollection(__scopeMenu);
    const [currentItemId, setCurrentItemId] = (0, import_react66.useState)(null);
    const contentRef = (0, import_react66.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef, context.onContentChange);
    const timerRef = (0, import_react66.useRef)(0);
    const searchRef = (0, import_react66.useRef)("");
    const pointerGraceTimerRef = (0, import_react66.useRef)(0);
    const pointerGraceIntentRef = (0, import_react66.useRef)(null);
    const pointerDirRef = (0, import_react66.useRef)("right");
    const lastPointerXRef = (0, import_react66.useRef)(0);
    const ScrollLockWrapper = disableOutsideScroll ? Combination_default : import_react66.Fragment;
    const scrollLockWrapperProps = disableOutsideScroll ? {
      as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
      allowPinchZoom: true
    } : void 0;
    const handleTypeaheadSearch = (key) => {
      var _items$find, _items$find2;
      const search = searchRef.current + key;
      const items = getItems().filter(
        (item) => !item.disabled
      );
      const currentItem = document.activeElement;
      const currentMatch = (_items$find = items.find(
        (item) => item.ref.current === currentItem
      )) === null || _items$find === void 0 ? void 0 : _items$find.textValue;
      const values = items.map(
        (item) => item.textValue
      );
      const nextMatch = $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch);
      const newItem = (_items$find2 = items.find(
        (item) => item.textValue === nextMatch
      )) === null || _items$find2 === void 0 ? void 0 : _items$find2.ref.current;
      (function updateSearch(value) {
        searchRef.current = value;
        window.clearTimeout(timerRef.current);
        if (value !== "")
          timerRef.current = window.setTimeout(
            () => updateSearch(""),
            1e3
          );
      })(search);
      if (newItem)
        setTimeout(
          () => newItem.focus()
        );
    };
    (0, import_react66.useEffect)(() => {
      return () => window.clearTimeout(timerRef.current);
    }, []);
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    const isPointerMovingToSubmenu = (0, import_react66.useCallback)((event) => {
      var _pointerGraceIntentRe, _pointerGraceIntentRe2;
      const isMovingTowards = pointerDirRef.current === ((_pointerGraceIntentRe = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe === void 0 ? void 0 : _pointerGraceIntentRe.side);
      return isMovingTowards && $6cc32821e9371a1c$var$isPointerInGraceArea(event, (_pointerGraceIntentRe2 = pointerGraceIntentRef.current) === null || _pointerGraceIntentRe2 === void 0 ? void 0 : _pointerGraceIntentRe2.area);
    }, []);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuContentProvider, {
      scope: __scopeMenu,
      searchRef,
      onItemEnter: (0, import_react66.useCallback)((event) => {
        if (isPointerMovingToSubmenu(event))
          event.preventDefault();
      }, [
        isPointerMovingToSubmenu
      ]),
      onItemLeave: (0, import_react66.useCallback)((event) => {
        var _contentRef$current;
        if (isPointerMovingToSubmenu(event))
          return;
        (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 || _contentRef$current.focus();
        setCurrentItemId(null);
      }, [
        isPointerMovingToSubmenu
      ]),
      onTriggerLeave: (0, import_react66.useCallback)((event) => {
        if (isPointerMovingToSubmenu(event))
          event.preventDefault();
      }, [
        isPointerMovingToSubmenu
      ]),
      pointerGraceTimerRef,
      onPointerGraceIntentChange: (0, import_react66.useCallback)((intent) => {
        pointerGraceIntentRef.current = intent;
      }, [])
    }, /* @__PURE__ */ (0, import_react66.createElement)(ScrollLockWrapper, scrollLockWrapperProps, /* @__PURE__ */ (0, import_react66.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
      asChild: true,
      trapped: trapFocus,
      onMountAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onOpenAutoFocus, (event) => {
        var _contentRef$current2;
        event.preventDefault();
        (_contentRef$current2 = contentRef.current) === null || _contentRef$current2 === void 0 || _contentRef$current2.focus();
      }),
      onUnmountAutoFocus: onCloseAutoFocus
    }, /* @__PURE__ */ (0, import_react66.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
      asChild: true,
      disableOutsidePointerEvents,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      onDismiss
    }, /* @__PURE__ */ (0, import_react66.createElement)($d7bdfb9eb0fdf311$export$be92b6f5f03c0fe9, _extends({
      asChild: true
    }, rovingFocusGroupScope, {
      dir: rootContext.dir,
      orientation: "vertical",
      loop,
      currentTabStopId: currentItemId,
      onCurrentTabStopIdChange: setCurrentItemId,
      onEntryFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onEntryFocus, (event) => {
        if (!rootContext.isUsingKeyboardRef.current)
          event.preventDefault();
      })
    }), /* @__PURE__ */ (0, import_react66.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d2, _extends({
      role: "menu",
      "aria-orientation": "vertical",
      "data-state": $6cc32821e9371a1c$var$getOpenState(context.open),
      "data-radix-menu-content": "",
      dir: rootContext.dir
    }, popperScope, contentProps, {
      ref: composedRefs,
      style: __spreadValues({
        outline: "none"
      }, contentProps.style),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(contentProps.onKeyDown, (event) => {
        const target = event.target;
        const isKeyDownInside = target.closest("[data-radix-menu-content]") === event.currentTarget;
        const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
        const isCharacterKey = event.key.length === 1;
        if (isKeyDownInside) {
          if (event.key === "Tab")
            event.preventDefault();
          if (!isModifierKey && isCharacterKey)
            handleTypeaheadSearch(event.key);
        }
        const content = contentRef.current;
        if (event.target !== content)
          return;
        if (!$6cc32821e9371a1c$var$FIRST_LAST_KEYS.includes(event.key))
          return;
        event.preventDefault();
        const items = getItems().filter(
          (item) => !item.disabled
        );
        const candidateNodes = items.map(
          (item) => item.ref.current
        );
        if ($6cc32821e9371a1c$var$LAST_KEYS.includes(event.key))
          candidateNodes.reverse();
        $6cc32821e9371a1c$var$focusFirst(candidateNodes);
      }),
      onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onBlur, (event) => {
        if (!event.currentTarget.contains(event.target)) {
          window.clearTimeout(timerRef.current);
          searchRef.current = "";
        }
      }),
      onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
        const target = event.target;
        const pointerXHasChanged = lastPointerXRef.current !== event.clientX;
        if (event.currentTarget.contains(target) && pointerXHasChanged) {
          const newDir = event.clientX > lastPointerXRef.current ? "right" : "left";
          pointerDirRef.current = newDir;
          lastPointerXRef.current = event.clientX;
        }
      }))
    })))))));
  });
  var $6cc32821e9371a1c$export$22a631d1f72787bb = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeMenu } = _a5, groupProps = __objRest(_a5, ["__scopeMenu"]);
    return /* @__PURE__ */ (0, import_react66.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      role: "group"
    }, groupProps, {
      ref: forwardedRef
    }));
  });
  var $6cc32821e9371a1c$var$ITEM_NAME = "MenuItem";
  var $6cc32821e9371a1c$var$ITEM_SELECT = "menu.itemSelect";
  var $6cc32821e9371a1c$export$2ce376c2cc3355c8 = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { disabled = false, onSelect } = _a5, itemProps = __objRest(_a5, ["disabled", "onSelect"]);
    const ref = (0, import_react66.useRef)(null);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu);
    const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, props.__scopeMenu);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const isPointerDownRef = (0, import_react66.useRef)(false);
    const handleSelect = () => {
      const menuItem2 = ref.current;
      if (!disabled && menuItem2) {
        const itemSelectEvent = new CustomEvent($6cc32821e9371a1c$var$ITEM_SELECT, {
          bubbles: true,
          cancelable: true
        });
        menuItem2.addEventListener(
          $6cc32821e9371a1c$var$ITEM_SELECT,
          (event) => onSelect === null || onSelect === void 0 ? void 0 : onSelect(event),
          {
            once: true
          }
        );
        $8927f6f2acc4f386$export$6d1a0317bde7de7f(menuItem2, itemSelectEvent);
        if (itemSelectEvent.defaultPrevented)
          isPointerDownRef.current = false;
        else
          rootContext.onClose();
      }
    };
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuItemImpl, _extends({}, itemProps, {
      ref: composedRefs,
      disabled,
      onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, handleSelect),
      onPointerDown: (event) => {
        var _props$onPointerDown;
        (_props$onPointerDown = props.onPointerDown) === null || _props$onPointerDown === void 0 || _props$onPointerDown.call(props, event);
        isPointerDownRef.current = true;
      },
      onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event) => {
        var _event$currentTarget;
        if (!isPointerDownRef.current)
          (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 || _event$currentTarget.click();
      }),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
        const isTypingAhead = contentContext.searchRef.current !== "";
        if (disabled || isTypingAhead && event.key === " ")
          return;
        if ($6cc32821e9371a1c$var$SELECTION_KEYS.includes(event.key)) {
          event.currentTarget.click();
          event.preventDefault();
        }
      })
    }));
  });
  var $6cc32821e9371a1c$var$MenuItemImpl = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeMenu, disabled = false, textValue } = _a5, itemProps = __objRest(_a5, ["__scopeMenu", "disabled", "textValue"]);
    const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$ITEM_NAME, __scopeMenu);
    const rovingFocusGroupScope = $6cc32821e9371a1c$var$useRovingFocusGroupScope(__scopeMenu);
    const ref = (0, import_react66.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const [isFocused, setIsFocused] = (0, import_react66.useState)(false);
    const [textContent, setTextContent] = (0, import_react66.useState)("");
    (0, import_react66.useEffect)(() => {
      const menuItem2 = ref.current;
      if (menuItem2) {
        var _menuItem$textContent;
        setTextContent(((_menuItem$textContent = menuItem2.textContent) !== null && _menuItem$textContent !== void 0 ? _menuItem$textContent : "").trim());
      }
    }, [
      itemProps.children
    ]);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$Collection.ItemSlot, {
      scope: __scopeMenu,
      disabled,
      textValue: textValue !== null && textValue !== void 0 ? textValue : textContent
    }, /* @__PURE__ */ (0, import_react66.createElement)($d7bdfb9eb0fdf311$export$6d08773d2e66f8f2, _extends({
      asChild: true
    }, rovingFocusGroupScope, {
      focusable: !disabled
    }), /* @__PURE__ */ (0, import_react66.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      role: "menuitem",
      "data-highlighted": isFocused ? "" : void 0,
      "aria-disabled": disabled || void 0,
      "data-disabled": disabled ? "" : void 0
    }, itemProps, {
      ref: composedRefs,
      onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
        if (disabled)
          contentContext.onItemLeave(event);
        else {
          contentContext.onItemEnter(event);
          if (!event.defaultPrevented) {
            const item = event.currentTarget;
            item.focus();
          }
        }
      })),
      onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse(
        (event) => contentContext.onItemLeave(event)
      )),
      onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        props.onFocus,
        () => setIsFocused(true)
      ),
      onBlur: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        props.onBlur,
        () => setIsFocused(false)
      )
    }))));
  });
  var $6cc32821e9371a1c$export$f6f243521332502d = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { checked = false, onCheckedChange } = _a5, checkboxItemProps = __objRest(_a5, ["checked", "onCheckedChange"]);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$ItemIndicatorProvider, {
      scope: props.__scopeMenu,
      checked
    }, /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$export$2ce376c2cc3355c8, _extends({
      role: "menuitemcheckbox",
      "aria-checked": $6cc32821e9371a1c$var$isIndeterminate(checked) ? "mixed" : checked
    }, checkboxItemProps, {
      ref: forwardedRef,
      "data-state": $6cc32821e9371a1c$var$getCheckedState(checked),
      onSelect: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        checkboxItemProps.onSelect,
        () => onCheckedChange === null || onCheckedChange === void 0 ? void 0 : onCheckedChange($6cc32821e9371a1c$var$isIndeterminate(checked) ? true : !checked),
        {
          checkForDefaultPrevented: false
        }
      )
    })));
  });
  var $6cc32821e9371a1c$var$RADIO_GROUP_NAME = "MenuRadioGroup";
  var [$6cc32821e9371a1c$var$RadioGroupProvider, $6cc32821e9371a1c$var$useRadioGroupContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$RADIO_GROUP_NAME, {
    value: void 0,
    onValueChange: () => {
    }
  });
  var $6cc32821e9371a1c$var$ITEM_INDICATOR_NAME = "MenuItemIndicator";
  var [$6cc32821e9371a1c$var$ItemIndicatorProvider, $6cc32821e9371a1c$var$useItemIndicatorContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, {
    checked: false
  });
  var $6cc32821e9371a1c$export$a2593e23056970a3 = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeMenu, forceMount } = _a5, itemIndicatorProps = __objRest(_a5, ["__scopeMenu", "forceMount"]);
    const indicatorContext = $6cc32821e9371a1c$var$useItemIndicatorContext($6cc32821e9371a1c$var$ITEM_INDICATOR_NAME, __scopeMenu);
    return /* @__PURE__ */ (0, import_react66.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || $6cc32821e9371a1c$var$isIndeterminate(indicatorContext.checked) || indicatorContext.checked === true
    }, /* @__PURE__ */ (0, import_react66.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({}, itemIndicatorProps, {
      ref: forwardedRef,
      "data-state": $6cc32821e9371a1c$var$getCheckedState(indicatorContext.checked)
    })));
  });
  var $6cc32821e9371a1c$var$SUB_NAME = "MenuSub";
  var [$6cc32821e9371a1c$var$MenuSubProvider, $6cc32821e9371a1c$var$useMenuSubContext] = $6cc32821e9371a1c$var$createMenuContext($6cc32821e9371a1c$var$SUB_NAME);
  var $6cc32821e9371a1c$export$71bdb9d1e2909932 = (props) => {
    const { __scopeMenu, children, open = false, onOpenChange } = props;
    const parentMenuContext = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$SUB_NAME, __scopeMenu);
    const popperScope = $6cc32821e9371a1c$var$usePopperScope(__scopeMenu);
    const [trigger2, setTrigger] = (0, import_react66.useState)(null);
    const [content, setContent] = (0, import_react66.useState)(null);
    const handleOpenChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
    (0, import_react66.useEffect)(() => {
      if (parentMenuContext.open === false)
        handleOpenChange(false);
      return () => handleOpenChange(false);
    }, [
      parentMenuContext.open,
      handleOpenChange
    ]);
    return /* @__PURE__ */ (0, import_react66.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe9, popperScope, /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuProvider, {
      scope: __scopeMenu,
      open,
      onOpenChange: handleOpenChange,
      content,
      onContentChange: setContent
    }, /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuSubProvider, {
      scope: __scopeMenu,
      contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
      triggerId: $1746a345f3d73bb7$export$f680877a34711e37(),
      trigger: trigger2,
      onTriggerChange: setTrigger
    }, children)));
  };
  var $6cc32821e9371a1c$var$SUB_TRIGGER_NAME = "MenuSubTrigger";
  var $6cc32821e9371a1c$export$5fbbb3ba7297405f = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
    const subContext = $6cc32821e9371a1c$var$useMenuSubContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
    const contentContext = $6cc32821e9371a1c$var$useMenuContentContext($6cc32821e9371a1c$var$SUB_TRIGGER_NAME, props.__scopeMenu);
    const openTimerRef = (0, import_react66.useRef)(null);
    const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;
    const scope = {
      __scopeMenu: props.__scopeMenu
    };
    const clearOpenTimer = (0, import_react66.useCallback)(() => {
      if (openTimerRef.current)
        window.clearTimeout(openTimerRef.current);
      openTimerRef.current = null;
    }, []);
    (0, import_react66.useEffect)(
      () => clearOpenTimer,
      [
        clearOpenTimer
      ]
    );
    (0, import_react66.useEffect)(() => {
      const pointerGraceTimer = pointerGraceTimerRef.current;
      return () => {
        window.clearTimeout(pointerGraceTimer);
        onPointerGraceIntentChange(null);
      };
    }, [
      pointerGraceTimerRef,
      onPointerGraceIntentChange
    ]);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$export$9fa5ebd18bee4d43, _extends({
      asChild: true
    }, scope), /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuItemImpl, _extends({
      id: subContext.triggerId,
      "aria-haspopup": "menu",
      "aria-expanded": context.open,
      "aria-controls": subContext.contentId,
      "data-state": $6cc32821e9371a1c$var$getOpenState(context.open)
    }, props, {
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, subContext.onTriggerChange),
      onClick: (event) => {
        var _props$onClick;
        (_props$onClick = props.onClick) === null || _props$onClick === void 0 || _props$onClick.call(props, event);
        if (props.disabled || event.defaultPrevented)
          return;
        event.currentTarget.focus();
        if (!context.open)
          context.onOpenChange(true);
      },
      onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $6cc32821e9371a1c$var$whenMouse((event) => {
        contentContext.onItemEnter(event);
        if (event.defaultPrevented)
          return;
        if (!props.disabled && !context.open && !openTimerRef.current) {
          contentContext.onPointerGraceIntentChange(null);
          openTimerRef.current = window.setTimeout(() => {
            context.onOpenChange(true);
            clearOpenTimer();
          }, 100);
        }
      })),
      onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerLeave, $6cc32821e9371a1c$var$whenMouse((event) => {
        var _context$content;
        clearOpenTimer();
        const contentRect = (_context$content = context.content) === null || _context$content === void 0 ? void 0 : _context$content.getBoundingClientRect();
        if (contentRect) {
          var _context$content2;
          const side = (_context$content2 = context.content) === null || _context$content2 === void 0 ? void 0 : _context$content2.dataset.side;
          const rightSide = side === "right";
          const bleed = rightSide ? -5 : 5;
          const contentNearEdge = contentRect[rightSide ? "left" : "right"];
          const contentFarEdge = contentRect[rightSide ? "right" : "left"];
          contentContext.onPointerGraceIntentChange({
            area: [
              // consistently within polygon bounds
              {
                x: event.clientX + bleed,
                y: event.clientY
              },
              {
                x: contentNearEdge,
                y: contentRect.top
              },
              {
                x: contentFarEdge,
                y: contentRect.top
              },
              {
                x: contentFarEdge,
                y: contentRect.bottom
              },
              {
                x: contentNearEdge,
                y: contentRect.bottom
              }
            ],
            side
          });
          window.clearTimeout(pointerGraceTimerRef.current);
          pointerGraceTimerRef.current = window.setTimeout(
            () => contentContext.onPointerGraceIntentChange(null),
            300
          );
        } else {
          contentContext.onTriggerLeave(event);
          if (event.defaultPrevented)
            return;
          contentContext.onPointerGraceIntentChange(null);
        }
      })),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
        const isTypingAhead = contentContext.searchRef.current !== "";
        if (props.disabled || isTypingAhead && event.key === " ")
          return;
        if ($6cc32821e9371a1c$var$SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {
          var _context$content3;
          context.onOpenChange(true);
          (_context$content3 = context.content) === null || _context$content3 === void 0 || _context$content3.focus();
          event.preventDefault();
        }
      })
    })));
  });
  var $6cc32821e9371a1c$var$SUB_CONTENT_NAME = "MenuSubContent";
  var $6cc32821e9371a1c$export$e7142ab31822bde6 = /* @__PURE__ */ (0, import_react66.forwardRef)((props, forwardedRef) => {
    const portalContext = $6cc32821e9371a1c$var$usePortalContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const _a5 = props, { forceMount = portalContext.forceMount } = _a5, subContentProps = __objRest(_a5, ["forceMount"]);
    const context = $6cc32821e9371a1c$var$useMenuContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const rootContext = $6cc32821e9371a1c$var$useMenuRootContext($6cc32821e9371a1c$var$CONTENT_NAME, props.__scopeMenu);
    const subContext = $6cc32821e9371a1c$var$useMenuSubContext($6cc32821e9371a1c$var$SUB_CONTENT_NAME, props.__scopeMenu);
    const ref = (0, import_react66.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    return /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$Collection.Provider, {
      scope: props.__scopeMenu
    }, /* @__PURE__ */ (0, import_react66.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$Collection.Slot, {
      scope: props.__scopeMenu
    }, /* @__PURE__ */ (0, import_react66.createElement)($6cc32821e9371a1c$var$MenuContentImpl, _extends({
      id: subContext.contentId,
      "aria-labelledby": subContext.triggerId
    }, subContentProps, {
      ref: composedRefs,
      align: "start",
      side: rootContext.dir === "rtl" ? "left" : "right",
      disableOutsidePointerEvents: false,
      disableOutsideScroll: false,
      trapFocus: false,
      onOpenAutoFocus: (event) => {
        var _ref$current;
        if (rootContext.isUsingKeyboardRef.current)
          (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
        event.preventDefault();
      },
      onCloseAutoFocus: (event) => event.preventDefault(),
      onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocusOutside, (event) => {
        if (event.target !== subContext.trigger)
          context.onOpenChange(false);
      }),
      onEscapeKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onEscapeKeyDown, (event) => {
        rootContext.onClose();
        event.preventDefault();
      }),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
        const isKeyDownInside = event.currentTarget.contains(event.target);
        const isCloseKey = $6cc32821e9371a1c$var$SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);
        if (isKeyDownInside && isCloseKey) {
          var _subContext$trigger;
          context.onOpenChange(false);
          (_subContext$trigger = subContext.trigger) === null || _subContext$trigger === void 0 || _subContext$trigger.focus();
          event.preventDefault();
        }
      })
    })))));
  });
  function $6cc32821e9371a1c$var$getOpenState(open) {
    return open ? "open" : "closed";
  }
  function $6cc32821e9371a1c$var$isIndeterminate(checked) {
    return checked === "indeterminate";
  }
  function $6cc32821e9371a1c$var$getCheckedState(checked) {
    return $6cc32821e9371a1c$var$isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
  }
  function $6cc32821e9371a1c$var$focusFirst(candidates) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates) {
      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
        return;
      candidate.focus();
      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
        return;
    }
  }
  function $6cc32821e9371a1c$var$wrapArray(array2, startIndex) {
    return array2.map(
      (_, index2) => array2[(startIndex + index2) % array2.length]
    );
  }
  function $6cc32821e9371a1c$var$getNextMatch(values, search, currentMatch) {
    const isRepeated = search.length > 1 && Array.from(search).every(
      (char) => char === search[0]
    );
    const normalizedSearch = isRepeated ? search[0] : search;
    const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;
    let wrappedValues = $6cc32821e9371a1c$var$wrapArray(values, Math.max(currentMatchIndex, 0));
    const excludeCurrentMatch = normalizedSearch.length === 1;
    if (excludeCurrentMatch)
      wrappedValues = wrappedValues.filter(
        (v3) => v3 !== currentMatch
      );
    const nextMatch = wrappedValues.find(
      (value) => value.toLowerCase().startsWith(normalizedSearch.toLowerCase())
    );
    return nextMatch !== currentMatch ? nextMatch : void 0;
  }
  function $6cc32821e9371a1c$var$isPointInPolygon(point2, polygon) {
    const { x: x3, y: y3 } = point2;
    let inside = false;
    for (let i3 = 0, j = polygon.length - 1; i3 < polygon.length; j = i3++) {
      const xi = polygon[i3].x;
      const yi = polygon[i3].y;
      const xj = polygon[j].x;
      const yj = polygon[j].y;
      const intersect = yi > y3 !== yj > y3 && x3 < (xj - xi) * (y3 - yi) / (yj - yi) + xi;
      if (intersect)
        inside = !inside;
    }
    return inside;
  }
  function $6cc32821e9371a1c$var$isPointerInGraceArea(event, area) {
    if (!area)
      return false;
    const cursorPos = {
      x: event.clientX,
      y: event.clientY
    };
    return $6cc32821e9371a1c$var$isPointInPolygon(cursorPos, area);
  }
  function $6cc32821e9371a1c$var$whenMouse(handler) {
    return (event) => event.pointerType === "mouse" ? handler(event) : void 0;
  }
  var $6cc32821e9371a1c$export$be92b6f5f03c0fe9 = $6cc32821e9371a1c$export$d9b273488cd8ce6f;
  var $6cc32821e9371a1c$export$b688253958b8dfe7 = $6cc32821e9371a1c$export$9fa5ebd18bee4d43;
  var $6cc32821e9371a1c$export$602eac185826482c = $6cc32821e9371a1c$export$793392f970497feb;
  var $6cc32821e9371a1c$export$7c6e2c02157bb7d2 = $6cc32821e9371a1c$export$479f0f2f71193efe;
  var $6cc32821e9371a1c$export$eb2fcfdbd7ba97d4 = $6cc32821e9371a1c$export$22a631d1f72787bb;
  var $6cc32821e9371a1c$export$6d08773d2e66f8f2 = $6cc32821e9371a1c$export$2ce376c2cc3355c8;
  var $6cc32821e9371a1c$export$16ce288f89fa631c = $6cc32821e9371a1c$export$f6f243521332502d;
  var $6cc32821e9371a1c$export$c3468e2714d175fa = $6cc32821e9371a1c$export$a2593e23056970a3;
  var $6cc32821e9371a1c$export$d7a01e11500dfb6f = $6cc32821e9371a1c$export$71bdb9d1e2909932;
  var $6cc32821e9371a1c$export$2ea8a7a591ac5eac = $6cc32821e9371a1c$export$5fbbb3ba7297405f;
  var $6cc32821e9371a1c$export$6d4de93b380beddf = $6cc32821e9371a1c$export$e7142ab31822bde6;

  // ../../../node_modules/@radix-ui/react-dropdown-menu/dist/index.module.js
  var $d08ef79370b62062$var$DROPDOWN_MENU_NAME = "DropdownMenu";
  var [$d08ef79370b62062$var$createDropdownMenuContext, $d08ef79370b62062$export$c0623cd925aeb687] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($d08ef79370b62062$var$DROPDOWN_MENU_NAME, [
    $6cc32821e9371a1c$export$4027731b685e72eb
  ]);
  var $d08ef79370b62062$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb();
  var [$d08ef79370b62062$var$DropdownMenuProvider, $d08ef79370b62062$var$useDropdownMenuContext] = $d08ef79370b62062$var$createDropdownMenuContext($d08ef79370b62062$var$DROPDOWN_MENU_NAME);
  var $d08ef79370b62062$export$e44a253a59704894 = (props) => {
    const { __scopeDropdownMenu, children, dir, open: openProp, defaultOpen, onOpenChange, modal = true } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    const triggerRef = (0, import_react67.useRef)(null);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_react67.createElement)($d08ef79370b62062$var$DropdownMenuProvider, {
      scope: __scopeDropdownMenu,
      triggerId: $1746a345f3d73bb7$export$f680877a34711e37(),
      triggerRef,
      contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
      open,
      onOpenChange: setOpen,
      onOpenToggle: (0, import_react67.useCallback)(
        () => setOpen(
          (prevOpen) => !prevOpen
        ),
        [
          setOpen
        ]
      ),
      modal
    }, /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, _extends({}, menuScope, {
      open,
      onOpenChange: setOpen,
      dir,
      modal
    }), children));
  };
  var $d08ef79370b62062$var$TRIGGER_NAME = "DropdownMenuTrigger";
  var $d08ef79370b62062$export$d2469213b3befba9 = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDropdownMenu, disabled = false } = _a5, triggerProps = __objRest(_a5, ["__scopeDropdownMenu", "disabled"]);
    const context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$TRIGGER_NAME, __scopeDropdownMenu);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, _extends({
      asChild: true
    }, menuScope), /* @__PURE__ */ (0, import_react67.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button",
      id: context.triggerId,
      "aria-haspopup": "menu",
      "aria-expanded": context.open,
      "aria-controls": context.open ? context.contentId : void 0,
      "data-state": context.open ? "open" : "closed",
      "data-disabled": disabled ? "" : void 0,
      disabled
    }, triggerProps, {
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, context.triggerRef),
      onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
        if (!disabled && event.button === 0 && event.ctrlKey === false) {
          context.onOpenToggle();
          if (!context.open)
            event.preventDefault();
        }
      }),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
        if (disabled)
          return;
        if ([
          "Enter",
          " "
        ].includes(event.key))
          context.onOpenToggle();
        if (event.key === "ArrowDown")
          context.onOpenChange(true);
        if ([
          "Enter",
          " ",
          "ArrowDown"
        ].includes(event.key))
          event.preventDefault();
      })
    })));
  });
  var $d08ef79370b62062$export$cd369b4d4d54efc9 = (props) => {
    const _a5 = props, { __scopeDropdownMenu } = _a5, portalProps = __objRest(_a5, ["__scopeDropdownMenu"]);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$602eac185826482c, _extends({}, menuScope, portalProps));
  };
  var $d08ef79370b62062$var$CONTENT_NAME = "DropdownMenuContent";
  var $d08ef79370b62062$export$6e76d93a37c01248 = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDropdownMenu } = _a5, contentProps = __objRest(_a5, ["__scopeDropdownMenu"]);
    const context = $d08ef79370b62062$var$useDropdownMenuContext($d08ef79370b62062$var$CONTENT_NAME, __scopeDropdownMenu);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    const hasInteractedOutsideRef = (0, import_react67.useRef)(false);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, _extends({
      id: context.contentId,
      "aria-labelledby": context.triggerId
    }, menuScope, contentProps, {
      ref: forwardedRef,
      onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
        var _context$triggerRef$c;
        if (!hasInteractedOutsideRef.current)
          (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
        hasInteractedOutsideRef.current = false;
        event.preventDefault();
      }),
      onInteractOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onInteractOutside, (event) => {
        const originalEvent = event.detail.originalEvent;
        const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
        if (!context.modal || isRightClick)
          hasInteractedOutsideRef.current = true;
      }),
      style: __spreadProps(__spreadValues({}, props.style), {
        "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
        "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
        "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
        "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
        "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
      })
    }));
  });
  var $d08ef79370b62062$export$246bebaba3a2f70e = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDropdownMenu } = _a5, groupProps = __objRest(_a5, ["__scopeDropdownMenu"]);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$eb2fcfdbd7ba97d4, _extends({}, menuScope, groupProps, {
      ref: forwardedRef
    }));
  });
  var $d08ef79370b62062$export$ed97964d1871885d = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDropdownMenu } = _a5, itemProps = __objRest(_a5, ["__scopeDropdownMenu"]);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, _extends({}, menuScope, itemProps, {
      ref: forwardedRef
    }));
  });
  var $d08ef79370b62062$export$53a69729da201fa9 = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDropdownMenu } = _a5, checkboxItemProps = __objRest(_a5, ["__scopeDropdownMenu"]);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$16ce288f89fa631c, _extends({}, menuScope, checkboxItemProps, {
      ref: forwardedRef
    }));
  });
  var $d08ef79370b62062$export$42355ae145153fb6 = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDropdownMenu } = _a5, itemIndicatorProps = __objRest(_a5, ["__scopeDropdownMenu"]);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$c3468e2714d175fa, _extends({}, menuScope, itemIndicatorProps, {
      ref: forwardedRef
    }));
  });
  var $d08ef79370b62062$export$2f307d81a64f5442 = (props) => {
    const { __scopeDropdownMenu, children, open: openProp, onOpenChange, defaultOpen } = props;
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$d7a01e11500dfb6f, _extends({}, menuScope, {
      open,
      onOpenChange: setOpen
    }), children);
  };
  var $d08ef79370b62062$export$21dcb7ec56f874cf = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDropdownMenu } = _a5, subTriggerProps = __objRest(_a5, ["__scopeDropdownMenu"]);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$2ea8a7a591ac5eac, _extends({}, menuScope, subTriggerProps, {
      ref: forwardedRef
    }));
  });
  var $d08ef79370b62062$export$f34ec8bc2482cc5f = /* @__PURE__ */ (0, import_react67.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeDropdownMenu } = _a5, subContentProps = __objRest(_a5, ["__scopeDropdownMenu"]);
    const menuScope = $d08ef79370b62062$var$useMenuScope(__scopeDropdownMenu);
    return /* @__PURE__ */ (0, import_react67.createElement)($6cc32821e9371a1c$export$6d4de93b380beddf, _extends({}, menuScope, subContentProps, {
      ref: forwardedRef,
      style: __spreadProps(__spreadValues({}, props.style), {
        "--radix-dropdown-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
        "--radix-dropdown-menu-content-available-width": "var(--radix-popper-available-width)",
        "--radix-dropdown-menu-content-available-height": "var(--radix-popper-available-height)",
        "--radix-dropdown-menu-trigger-width": "var(--radix-popper-anchor-width)",
        "--radix-dropdown-menu-trigger-height": "var(--radix-popper-anchor-height)"
      })
    }));
  });
  var $d08ef79370b62062$export$be92b6f5f03c0fe9 = $d08ef79370b62062$export$e44a253a59704894;
  var $d08ef79370b62062$export$41fb9f06171c75f4 = $d08ef79370b62062$export$d2469213b3befba9;
  var $d08ef79370b62062$export$602eac185826482c = $d08ef79370b62062$export$cd369b4d4d54efc9;
  var $d08ef79370b62062$export$7c6e2c02157bb7d2 = $d08ef79370b62062$export$6e76d93a37c01248;
  var $d08ef79370b62062$export$eb2fcfdbd7ba97d4 = $d08ef79370b62062$export$246bebaba3a2f70e;
  var $d08ef79370b62062$export$6d08773d2e66f8f2 = $d08ef79370b62062$export$ed97964d1871885d;
  var $d08ef79370b62062$export$16ce288f89fa631c = $d08ef79370b62062$export$53a69729da201fa9;
  var $d08ef79370b62062$export$c3468e2714d175fa = $d08ef79370b62062$export$42355ae145153fb6;
  var $d08ef79370b62062$export$d7a01e11500dfb6f = $d08ef79370b62062$export$2f307d81a64f5442;
  var $d08ef79370b62062$export$2ea8a7a591ac5eac = $d08ef79370b62062$export$21dcb7ec56f874cf;
  var $d08ef79370b62062$export$6d4de93b380beddf = $d08ef79370b62062$export$f34ec8bc2482cc5f;

  // ../../../packages/ui/src/lib/hooks/useMenuIsOpen.ts
  var import_react68 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useEventsProvider.tsx
  var React44 = __toESM(require_react());
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var defaultEventHandler = () => void 0;
  var EventsContext = React44.createContext({});
  function EventsProvider({ onEvent, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(EventsContext.Provider, { value: onEvent != null ? onEvent : defaultEventHandler, children });
  }
  function useEvents() {
    return React44.useContext(EventsContext);
  }

  // ../../../packages/ui/src/lib/hooks/useMenuIsOpen.ts
  function useMenuIsOpen(id, cb) {
    const app = useApp();
    const rIsOpen = (0, import_react68.useRef)(false);
    const trackEvent = useEvents();
    const onOpenChange = (0, import_react68.useCallback)(
      (isOpen2) => {
        rIsOpen.current = isOpen2;
        app.batch(() => {
          if (isOpen2) {
            app.complete();
            app.addOpenMenu(id);
          } else {
            app.deleteOpenMenu(id);
            app.openMenus.forEach((menuId) => {
              if (menuId.startsWith(id)) {
                app.deleteOpenMenu(menuId);
              }
            });
          }
          cb == null ? void 0 : cb(isOpen2);
        });
      },
      [app, id, cb]
    );
    (0, import_react68.useEffect)(() => {
      if (rIsOpen.current) {
        trackEvent("open-menu", { source: "unknown", id });
        app.addOpenMenu(id);
      }
      return () => {
        if (rIsOpen.current) {
          app.deleteOpenMenu(id);
          app.openMenus.forEach((menuId) => {
            if (menuId.startsWith(id)) {
              trackEvent("close-menu", { source: "unknown", id });
              app.deleteOpenMenu(menuId);
            }
          });
          rIsOpen.current = false;
        }
      };
    }, [app, id, trackEvent]);
    const isOpen = useValue("is menu open", () => app.openMenus.includes(id), [app, id]);
    return [isOpen, onOpenChange];
  }

  // ../../../packages/ui/src/lib/components/primitives/DropdownMenu.tsx
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  function Root({
    id,
    children,
    modal = false
  }) {
    const [open, onOpenChange] = useMenuIsOpen(id);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)($d08ef79370b62062$export$be92b6f5f03c0fe9, { open, dir: "ltr", modal, onOpenChange, children });
  }
  function Trigger({ children, "data-wd": dataWd }) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { dir: "ltr", "data-wd": dataWd, asChild: true, children });
  }
  function Content({
    side = "bottom",
    align = "start",
    sideOffset = 8,
    alignOffset = 8,
    children
  }) {
    const container = useContainer();
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)($d08ef79370b62062$export$602eac185826482c, { dir: "ltr", container, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
      $d08ef79370b62062$export$7c6e2c02157bb7d2,
      {
        className: "tlui-menu",
        align,
        sideOffset,
        side,
        alignOffset,
        collisionPadding: 4,
        children
      }
    ) });
  }
  function Sub({ id, children }) {
    const [open, onOpenChange] = useMenuIsOpen(id);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)($d08ef79370b62062$export$d7a01e11500dfb6f, { open, onOpenChange, children });
  }
  function SubTrigger({
    label,
    "data-wd": dataWd,
    "data-direction": dataDirection
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)($d08ef79370b62062$export$2ea8a7a591ac5eac, { dir: "ltr", "data-direction": dataDirection, "data-wd": dataWd, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
      Button,
      {
        className: "tlui-menu__button tlui-menu__submenu__trigger",
        label,
        icon: "chevron-right"
      }
    ) });
  }
  function SubContent({
    alignOffset = 0,
    sideOffset = 5,
    children
  }) {
    const container = useContainer();
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)($d08ef79370b62062$export$602eac185826482c, { container, dir: "ltr", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
      $d08ef79370b62062$export$6d4de93b380beddf,
      {
        className: "tlui-menu tlui-menu__submenu__content",
        alignOffset,
        sideOffset,
        collisionPadding: 4,
        children
      }
    ) });
  }
  function Group({
    children,
    size = "medium"
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)($d08ef79370b62062$export$eb2fcfdbd7ba97d4, { dir: "ltr", className: "tlui-menu__group", "data-size": size, children });
  }
  function Item(_a5) {
    var _b2 = _a5, { noClose } = _b2, props = __objRest(_b2, ["noClose"]);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
      $d08ef79370b62062$export$6d08773d2e66f8f2,
      {
        dir: "ltr",
        asChild: true,
        onClick: noClose || props.isChecked !== void 0 ? preventDefault : void 0,
        children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Button, __spreadValues({ className: "tlui-menu__button" }, props))
      }
    );
  }
  function CheckboxItem(_a5) {
    var _b2 = _a5, { children, onSelect } = _b2, rest = __objRest(_b2, ["children", "onSelect"]);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
      $d08ef79370b62062$export$16ce288f89fa631c,
      __spreadProps(__spreadValues({
        dir: "ltr",
        className: "tlui-button tlui-menu__button tlui-menu__checkbox-item",
        onSelect: (e2) => {
          onSelect == null ? void 0 : onSelect(e2);
          preventDefault(e2);
        }
      }, rest), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(
            "div",
            {
              className: "tlui-menu__checkbox-item__check",
              style: {
                transformOrigin: "75% center",
                transform: `scale(${rest.checked ? 1 : 0.5})`,
                opacity: rest.checked ? 1 : 0.5
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Icon, { small: true, icon: rest.checked ? "check" : "checkbox-empty" })
            }
          ),
          children
        ]
      })
    );
  }
  function RadioItem(_a5) {
    var _b2 = _a5, { children, onSelect } = _b2, rest = __objRest(_b2, ["children", "onSelect"]);
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsxs)(
      $d08ef79370b62062$export$16ce288f89fa631c,
      __spreadProps(__spreadValues({
        dir: "ltr",
        className: "tlui-button tlui-menu__button tlui-menu__checkbox-item",
        onSelect: (e2) => {
          onSelect == null ? void 0 : onSelect(e2);
          preventDefault(e2);
        }
      }, rest), {
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime63.jsx)($d08ef79370b62062$export$c3468e2714d175fa, { dir: "ltr", className: "tlui-menu__checkbox-item__check", children: /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Icon, { icon: "check" }) }),
          children
        ]
      })
    );
  }

  // ../../../node_modules/@radix-ui/react-toast/dist/index.module.js
  var import_react70 = __toESM(require_react());
  var import_react_dom5 = __toESM(require_react_dom());

  // ../../../node_modules/@radix-ui/react-visually-hidden/dist/index.module.js
  var import_react69 = __toESM(require_react());
  var $ea1ef594cf570d83$export$439d29a4e110a164 = /* @__PURE__ */ (0, import_react69.forwardRef)((props, forwardedRef) => {
    return /* @__PURE__ */ (0, import_react69.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({}, props, {
      ref: forwardedRef,
      style: __spreadValues({
        // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss
        position: "absolute",
        border: 0,
        width: 1,
        height: 1,
        padding: 0,
        margin: -1,
        overflow: "hidden",
        clip: "rect(0, 0, 0, 0)",
        whiteSpace: "nowrap",
        wordWrap: "normal"
      }, props.style)
    }));
  });

  // ../../../node_modules/@radix-ui/react-toast/dist/index.module.js
  var $054eb8030ebde76e$var$PROVIDER_NAME = "ToastProvider";
  var [$054eb8030ebde76e$var$Collection, $054eb8030ebde76e$var$useCollection, $054eb8030ebde76e$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2("Toast");
  var [$054eb8030ebde76e$var$createToastContext, $054eb8030ebde76e$export$8a359da18fbc9073] = $c512c27ab02ef895$export$50c7b4e9d9f19c1("Toast", [
    $054eb8030ebde76e$var$createCollectionScope
  ]);
  var [$054eb8030ebde76e$var$ToastProviderProvider, $054eb8030ebde76e$var$useToastProviderContext] = $054eb8030ebde76e$var$createToastContext($054eb8030ebde76e$var$PROVIDER_NAME);
  var $054eb8030ebde76e$export$f5d03d415824e0e = (props) => {
    const { __scopeToast, label = "Notification", duration = 5e3, swipeDirection = "right", swipeThreshold = 50, children } = props;
    const [viewport, setViewport] = (0, import_react70.useState)(null);
    const [toastCount, setToastCount] = (0, import_react70.useState)(0);
    const isFocusedToastEscapeKeyDownRef = (0, import_react70.useRef)(false);
    const isClosePausedRef = (0, import_react70.useRef)(false);
    return /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$Collection.Provider, {
      scope: __scopeToast
    }, /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$ToastProviderProvider, {
      scope: __scopeToast,
      label,
      duration,
      swipeDirection,
      swipeThreshold,
      toastCount,
      viewport,
      onViewportChange: setViewport,
      onToastAdd: (0, import_react70.useCallback)(
        () => setToastCount(
          (prevCount) => prevCount + 1
        ),
        []
      ),
      onToastRemove: (0, import_react70.useCallback)(
        () => setToastCount(
          (prevCount) => prevCount - 1
        ),
        []
      ),
      isFocusedToastEscapeKeyDownRef,
      isClosePausedRef
    }, children));
  };
  $054eb8030ebde76e$export$f5d03d415824e0e.propTypes = {
    label(props) {
      if (props.label && typeof props.label === "string" && !props.label.trim()) {
        const error = `Invalid prop \`label\` supplied to \`${$054eb8030ebde76e$var$PROVIDER_NAME}\`. Expected non-empty \`string\`.`;
        return new Error(error);
      }
      return null;
    }
  };
  var $054eb8030ebde76e$var$VIEWPORT_NAME = "ToastViewport";
  var $054eb8030ebde76e$var$VIEWPORT_DEFAULT_HOTKEY = [
    "F8"
  ];
  var $054eb8030ebde76e$var$VIEWPORT_PAUSE = "toast.viewportPause";
  var $054eb8030ebde76e$var$VIEWPORT_RESUME = "toast.viewportResume";
  var $054eb8030ebde76e$export$6192c2425ecfd989 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeToast, hotkey = $054eb8030ebde76e$var$VIEWPORT_DEFAULT_HOTKEY, label = "Notifications ({hotkey})" } = _a5, viewportProps = __objRest(_a5, ["__scopeToast", "hotkey", "label"]);
    const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$VIEWPORT_NAME, __scopeToast);
    const getItems = $054eb8030ebde76e$var$useCollection(__scopeToast);
    const wrapperRef = (0, import_react70.useRef)(null);
    const headFocusProxyRef = (0, import_react70.useRef)(null);
    const tailFocusProxyRef = (0, import_react70.useRef)(null);
    const ref = (0, import_react70.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref, context.onViewportChange);
    const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
    const hasToasts = context.toastCount > 0;
    (0, import_react70.useEffect)(() => {
      const handleKeyDown = (event) => {
        var _ref$current;
        const isHotkeyPressed = hotkey.every(
          (key) => event[key] || event.code === key
        );
        if (isHotkeyPressed)
          (_ref$current = ref.current) === null || _ref$current === void 0 || _ref$current.focus();
      };
      document.addEventListener("keydown", handleKeyDown);
      return () => document.removeEventListener("keydown", handleKeyDown);
    }, [
      hotkey
    ]);
    (0, import_react70.useEffect)(() => {
      const wrapper = wrapperRef.current;
      const viewport = ref.current;
      if (hasToasts && wrapper && viewport) {
        const handlePause = () => {
          if (!context.isClosePausedRef.current) {
            const pauseEvent = new CustomEvent($054eb8030ebde76e$var$VIEWPORT_PAUSE);
            viewport.dispatchEvent(pauseEvent);
            context.isClosePausedRef.current = true;
          }
        };
        const handleResume = () => {
          if (context.isClosePausedRef.current) {
            const resumeEvent = new CustomEvent($054eb8030ebde76e$var$VIEWPORT_RESUME);
            viewport.dispatchEvent(resumeEvent);
            context.isClosePausedRef.current = false;
          }
        };
        const handleFocusOutResume = (event) => {
          const isFocusMovingOutside = !wrapper.contains(event.relatedTarget);
          if (isFocusMovingOutside)
            handleResume();
        };
        const handlePointerLeaveResume = () => {
          const isFocusInside = wrapper.contains(document.activeElement);
          if (!isFocusInside)
            handleResume();
        };
        wrapper.addEventListener("focusin", handlePause);
        wrapper.addEventListener("focusout", handleFocusOutResume);
        wrapper.addEventListener("pointermove", handlePause);
        wrapper.addEventListener("pointerleave", handlePointerLeaveResume);
        window.addEventListener("blur", handlePause);
        window.addEventListener("focus", handleResume);
        return () => {
          wrapper.removeEventListener("focusin", handlePause);
          wrapper.removeEventListener("focusout", handleFocusOutResume);
          wrapper.removeEventListener("pointermove", handlePause);
          wrapper.removeEventListener("pointerleave", handlePointerLeaveResume);
          window.removeEventListener("blur", handlePause);
          window.removeEventListener("focus", handleResume);
        };
      }
    }, [
      hasToasts,
      context.isClosePausedRef
    ]);
    const getSortedTabbableCandidates = (0, import_react70.useCallback)(({ tabbingDirection }) => {
      const toastItems = getItems();
      const tabbableCandidates = toastItems.map((toastItem) => {
        const toastNode = toastItem.ref.current;
        const toastTabbableCandidates = [
          toastNode,
          ...$054eb8030ebde76e$var$getTabbableCandidates(toastNode)
        ];
        return tabbingDirection === "forwards" ? toastTabbableCandidates : toastTabbableCandidates.reverse();
      });
      return (tabbingDirection === "forwards" ? tabbableCandidates.reverse() : tabbableCandidates).flat();
    }, [
      getItems
    ]);
    (0, import_react70.useEffect)(() => {
      const viewport = ref.current;
      if (viewport) {
        const handleKeyDown = (event) => {
          const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;
          const isTabKey = event.key === "Tab" && !isMetaKey;
          if (isTabKey) {
            const focusedElement = document.activeElement;
            const isTabbingBackwards = event.shiftKey;
            const targetIsViewport = event.target === viewport;
            if (targetIsViewport && isTabbingBackwards) {
              var _headFocusProxyRef$cu;
              (_headFocusProxyRef$cu = headFocusProxyRef.current) === null || _headFocusProxyRef$cu === void 0 || _headFocusProxyRef$cu.focus();
              return;
            }
            const tabbingDirection = isTabbingBackwards ? "backwards" : "forwards";
            const sortedCandidates = getSortedTabbableCandidates({
              tabbingDirection
            });
            const index2 = sortedCandidates.findIndex(
              (candidate) => candidate === focusedElement
            );
            if ($054eb8030ebde76e$var$focusFirst(sortedCandidates.slice(index2 + 1)))
              event.preventDefault();
            else {
              var _headFocusProxyRef$cu2, _tailFocusProxyRef$cu;
              isTabbingBackwards ? (_headFocusProxyRef$cu2 = headFocusProxyRef.current) === null || _headFocusProxyRef$cu2 === void 0 || _headFocusProxyRef$cu2.focus() : (_tailFocusProxyRef$cu = tailFocusProxyRef.current) === null || _tailFocusProxyRef$cu === void 0 || _tailFocusProxyRef$cu.focus();
            }
          }
        };
        viewport.addEventListener("keydown", handleKeyDown);
        return () => viewport.removeEventListener("keydown", handleKeyDown);
      }
    }, [
      getItems,
      getSortedTabbableCandidates
    ]);
    return /* @__PURE__ */ (0, import_react70.createElement)($5cb92bef7577960e$export$aecb2ddcb55c95be, {
      ref: wrapperRef,
      role: "region",
      "aria-label": label.replace("{hotkey}", hotkeyLabel),
      tabIndex: -1,
      style: {
        pointerEvents: hasToasts ? void 0 : "none"
      }
    }, hasToasts && /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$FocusProxy, {
      ref: headFocusProxyRef,
      onFocusFromOutsideViewport: () => {
        const tabbableCandidates = getSortedTabbableCandidates({
          tabbingDirection: "forwards"
        });
        $054eb8030ebde76e$var$focusFirst(tabbableCandidates);
      }
    }), /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$Collection.Slot, {
      scope: __scopeToast
    }, /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.ol, _extends({
      tabIndex: -1
    }, viewportProps, {
      ref: composedRefs
    }))), hasToasts && /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$FocusProxy, {
      ref: tailFocusProxyRef,
      onFocusFromOutsideViewport: () => {
        const tabbableCandidates = getSortedTabbableCandidates({
          tabbingDirection: "backwards"
        });
        $054eb8030ebde76e$var$focusFirst(tabbableCandidates);
      }
    }));
  });
  var $054eb8030ebde76e$var$FOCUS_PROXY_NAME = "ToastFocusProxy";
  var $054eb8030ebde76e$var$FocusProxy = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeToast, onFocusFromOutsideViewport } = _a5, proxyProps = __objRest(_a5, ["__scopeToast", "onFocusFromOutsideViewport"]);
    const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$FOCUS_PROXY_NAME, __scopeToast);
    return /* @__PURE__ */ (0, import_react70.createElement)($ea1ef594cf570d83$export$439d29a4e110a164, _extends({
      "aria-hidden": true,
      tabIndex: 0
    }, proxyProps, {
      ref: forwardedRef,
      style: {
        position: "fixed"
      },
      onFocus: (event) => {
        var _context$viewport;
        const prevFocusedElement = event.relatedTarget;
        const isFocusFromOutsideViewport = !((_context$viewport = context.viewport) !== null && _context$viewport !== void 0 && _context$viewport.contains(prevFocusedElement));
        if (isFocusFromOutsideViewport)
          onFocusFromOutsideViewport();
      }
    }));
  });
  var $054eb8030ebde76e$var$TOAST_NAME = "Toast";
  var $054eb8030ebde76e$var$TOAST_SWIPE_START = "toast.swipeStart";
  var $054eb8030ebde76e$var$TOAST_SWIPE_MOVE = "toast.swipeMove";
  var $054eb8030ebde76e$var$TOAST_SWIPE_CANCEL = "toast.swipeCancel";
  var $054eb8030ebde76e$var$TOAST_SWIPE_END = "toast.swipeEnd";
  var $054eb8030ebde76e$export$8d8dc7d5f743331b = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { forceMount, open: openProp, defaultOpen, onOpenChange } = _a5, toastProps = __objRest(_a5, ["forceMount", "open", "defaultOpen", "onOpenChange"]);
    const [open = true, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_react70.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || open
    }, /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$ToastImpl, _extends({
      open
    }, toastProps, {
      ref: forwardedRef,
      onClose: () => setOpen(false),
      onPause: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(props.onPause),
      onResume: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(props.onResume),
      onSwipeStart: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeStart, (event) => {
        event.currentTarget.setAttribute("data-swipe", "start");
      }),
      onSwipeMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeMove, (event) => {
        const { x: x3, y: y3 } = event.detail.delta;
        event.currentTarget.setAttribute("data-swipe", "move");
        event.currentTarget.style.setProperty("--radix-toast-swipe-move-x", `${x3}px`);
        event.currentTarget.style.setProperty("--radix-toast-swipe-move-y", `${y3}px`);
      }),
      onSwipeCancel: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeCancel, (event) => {
        event.currentTarget.setAttribute("data-swipe", "cancel");
        event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
        event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
        event.currentTarget.style.removeProperty("--radix-toast-swipe-end-x");
        event.currentTarget.style.removeProperty("--radix-toast-swipe-end-y");
      }),
      onSwipeEnd: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onSwipeEnd, (event) => {
        const { x: x3, y: y3 } = event.detail.delta;
        event.currentTarget.setAttribute("data-swipe", "end");
        event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
        event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
        event.currentTarget.style.setProperty("--radix-toast-swipe-end-x", `${x3}px`);
        event.currentTarget.style.setProperty("--radix-toast-swipe-end-y", `${y3}px`);
        setOpen(false);
      })
    })));
  });
  var [$054eb8030ebde76e$var$ToastInteractiveProvider, $054eb8030ebde76e$var$useToastInteractiveContext] = $054eb8030ebde76e$var$createToastContext($054eb8030ebde76e$var$TOAST_NAME, {
    onClose() {
    }
  });
  var $054eb8030ebde76e$var$ToastImpl = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeToast, type = "foreground", duration: durationProp, open, onClose, onEscapeKeyDown, onPause, onResume, onSwipeStart, onSwipeMove, onSwipeCancel, onSwipeEnd } = _a5, toastProps = __objRest(_a5, ["__scopeToast", "type", "duration", "open", "onClose", "onEscapeKeyDown", "onPause", "onResume", "onSwipeStart", "onSwipeMove", "onSwipeCancel", "onSwipeEnd"]);
    const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$TOAST_NAME, __scopeToast);
    const [node1, setNode] = (0, import_react70.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setNode(node)
    );
    const pointerStartRef = (0, import_react70.useRef)(null);
    const swipeDeltaRef = (0, import_react70.useRef)(null);
    const duration1 = durationProp || context.duration;
    const closeTimerStartTimeRef = (0, import_react70.useRef)(0);
    const closeTimerRemainingTimeRef = (0, import_react70.useRef)(duration1);
    const closeTimerRef = (0, import_react70.useRef)(0);
    const { onToastAdd, onToastRemove } = context;
    const handleClose = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(() => {
      var _context$viewport2;
      const isFocusInToast = node1 === null || node1 === void 0 ? void 0 : node1.contains(document.activeElement);
      if (isFocusInToast)
        (_context$viewport2 = context.viewport) === null || _context$viewport2 === void 0 || _context$viewport2.focus();
      onClose();
    });
    const startTimer = (0, import_react70.useCallback)((duration) => {
      if (!duration || duration === Infinity)
        return;
      window.clearTimeout(closeTimerRef.current);
      closeTimerStartTimeRef.current = new Date().getTime();
      closeTimerRef.current = window.setTimeout(handleClose, duration);
    }, [
      handleClose
    ]);
    (0, import_react70.useEffect)(() => {
      const viewport = context.viewport;
      if (viewport) {
        const handleResume = () => {
          startTimer(closeTimerRemainingTimeRef.current);
          onResume === null || onResume === void 0 || onResume();
        };
        const handlePause = () => {
          const elapsedTime = new Date().getTime() - closeTimerStartTimeRef.current;
          closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;
          window.clearTimeout(closeTimerRef.current);
          onPause === null || onPause === void 0 || onPause();
        };
        viewport.addEventListener($054eb8030ebde76e$var$VIEWPORT_PAUSE, handlePause);
        viewport.addEventListener($054eb8030ebde76e$var$VIEWPORT_RESUME, handleResume);
        return () => {
          viewport.removeEventListener($054eb8030ebde76e$var$VIEWPORT_PAUSE, handlePause);
          viewport.removeEventListener($054eb8030ebde76e$var$VIEWPORT_RESUME, handleResume);
        };
      }
    }, [
      context.viewport,
      duration1,
      onPause,
      onResume,
      startTimer
    ]);
    (0, import_react70.useEffect)(() => {
      if (open && !context.isClosePausedRef.current)
        startTimer(duration1);
    }, [
      open,
      duration1,
      context.isClosePausedRef,
      startTimer
    ]);
    (0, import_react70.useEffect)(() => {
      onToastAdd();
      return () => onToastRemove();
    }, [
      onToastAdd,
      onToastRemove
    ]);
    const announceTextContent = (0, import_react70.useMemo)(() => {
      return node1 ? $054eb8030ebde76e$var$getAnnounceTextContent(node1) : null;
    }, [
      node1
    ]);
    if (!context.viewport)
      return null;
    return /* @__PURE__ */ (0, import_react70.createElement)(import_react70.Fragment, null, announceTextContent && /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$ToastAnnounce, {
      __scopeToast,
      role: "status",
      "aria-live": type === "foreground" ? "assertive" : "polite",
      "aria-atomic": true
    }, announceTextContent), /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$ToastInteractiveProvider, {
      scope: __scopeToast,
      onClose: handleClose
    }, /* @__PURE__ */ (0, import_react_dom5.createPortal)(/* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$Collection.ItemSlot, {
      scope: __scopeToast
    }, /* @__PURE__ */ (0, import_react70.createElement)($5cb92bef7577960e$export$be92b6f5f03c0fe9, {
      asChild: true,
      onEscapeKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(onEscapeKeyDown, () => {
        if (!context.isFocusedToastEscapeKeyDownRef.current)
          handleClose();
        context.isFocusedToastEscapeKeyDownRef.current = false;
      })
    }, /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.li, _extends({
      // Ensure toasts are announced as status list or status when focused
      role: "status",
      "aria-live": "off",
      "aria-atomic": true,
      tabIndex: 0,
      "data-state": open ? "open" : "closed",
      "data-swipe-direction": context.swipeDirection
    }, toastProps, {
      ref: composedRefs,
      style: __spreadValues({
        userSelect: "none",
        touchAction: "none"
      }, props.style),
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
        if (event.key !== "Escape")
          return;
        onEscapeKeyDown === null || onEscapeKeyDown === void 0 || onEscapeKeyDown(event.nativeEvent);
        if (!event.nativeEvent.defaultPrevented) {
          context.isFocusedToastEscapeKeyDownRef.current = true;
          handleClose();
        }
      }),
      onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
        if (event.button !== 0)
          return;
        pointerStartRef.current = {
          x: event.clientX,
          y: event.clientY
        };
      }),
      onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, (event) => {
        if (!pointerStartRef.current)
          return;
        const x3 = event.clientX - pointerStartRef.current.x;
        const y3 = event.clientY - pointerStartRef.current.y;
        const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);
        const isHorizontalSwipe = [
          "left",
          "right"
        ].includes(context.swipeDirection);
        const clamp3 = [
          "left",
          "up"
        ].includes(context.swipeDirection) ? Math.min : Math.max;
        const clampedX = isHorizontalSwipe ? clamp3(0, x3) : 0;
        const clampedY = !isHorizontalSwipe ? clamp3(0, y3) : 0;
        const moveStartBuffer = event.pointerType === "touch" ? 10 : 2;
        const delta = {
          x: clampedX,
          y: clampedY
        };
        const eventDetail = {
          originalEvent: event,
          delta
        };
        if (hasSwipeMoveStarted) {
          swipeDeltaRef.current = delta;
          $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {
            discrete: false
          });
        } else if ($054eb8030ebde76e$var$isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {
          swipeDeltaRef.current = delta;
          $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_START, onSwipeStart, eventDetail, {
            discrete: false
          });
          event.target.setPointerCapture(event.pointerId);
        } else if (Math.abs(x3) > moveStartBuffer || Math.abs(y3) > moveStartBuffer)
          pointerStartRef.current = null;
      }),
      onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event1) => {
        const delta = swipeDeltaRef.current;
        const target = event1.target;
        if (target.hasPointerCapture(event1.pointerId))
          target.releasePointerCapture(event1.pointerId);
        swipeDeltaRef.current = null;
        pointerStartRef.current = null;
        if (delta) {
          const toast = event1.currentTarget;
          const eventDetail = {
            originalEvent: event1,
            delta
          };
          if ($054eb8030ebde76e$var$isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold))
            $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_END, onSwipeEnd, eventDetail, {
              discrete: true
            });
          else
            $054eb8030ebde76e$var$handleAndDispatchCustomEvent($054eb8030ebde76e$var$TOAST_SWIPE_CANCEL, onSwipeCancel, eventDetail, {
              discrete: true
            });
          toast.addEventListener(
            "click",
            (event) => event.preventDefault(),
            {
              once: true
            }
          );
        }
      })
    })))), context.viewport)));
  });
  $054eb8030ebde76e$var$ToastImpl.propTypes = {
    type(props) {
      if (props.type && ![
        "foreground",
        "background"
      ].includes(props.type)) {
        const error = `Invalid prop \`type\` supplied to \`${$054eb8030ebde76e$var$TOAST_NAME}\`. Expected \`foreground | background\`.`;
        return new Error(error);
      }
      return null;
    }
  };
  var $054eb8030ebde76e$var$ToastAnnounce = (props) => {
    const _a5 = props, { __scopeToast, children } = _a5, announceProps = __objRest(_a5, ["__scopeToast", "children"]);
    const context = $054eb8030ebde76e$var$useToastProviderContext($054eb8030ebde76e$var$TOAST_NAME, __scopeToast);
    const [renderAnnounceText, setRenderAnnounceText] = (0, import_react70.useState)(false);
    const [isAnnounced, setIsAnnounced] = (0, import_react70.useState)(false);
    $054eb8030ebde76e$var$useNextFrame(
      () => setRenderAnnounceText(true)
    );
    (0, import_react70.useEffect)(() => {
      const timer = window.setTimeout(
        () => setIsAnnounced(true),
        1e3
      );
      return () => window.clearTimeout(timer);
    }, []);
    return isAnnounced ? null : /* @__PURE__ */ (0, import_react70.createElement)($f1701beae083dbae$export$602eac185826482c, {
      asChild: true
    }, /* @__PURE__ */ (0, import_react70.createElement)($ea1ef594cf570d83$export$439d29a4e110a164, announceProps, renderAnnounceText && /* @__PURE__ */ (0, import_react70.createElement)(import_react70.Fragment, null, context.label, " ", children)));
  };
  var $054eb8030ebde76e$export$16d42d7c29b95a4 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeToast } = _a5, titleProps = __objRest(_a5, ["__scopeToast"]);
    return /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, titleProps, {
      ref: forwardedRef
    }));
  });
  var $054eb8030ebde76e$export$ecddd96c53621d9a = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeToast } = _a5, descriptionProps = __objRest(_a5, ["__scopeToast"]);
    return /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, descriptionProps, {
      ref: forwardedRef
    }));
  });
  var $054eb8030ebde76e$var$ACTION_NAME = "ToastAction";
  var $054eb8030ebde76e$export$3019feecfda683d2 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { altText } = _a5, actionProps = __objRest(_a5, ["altText"]);
    if (!altText)
      return null;
    return /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$ToastAnnounceExclude, {
      altText,
      asChild: true
    }, /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$export$811e70f61c205839, _extends({}, actionProps, {
      ref: forwardedRef
    })));
  });
  $054eb8030ebde76e$export$3019feecfda683d2.propTypes = {
    altText(props) {
      if (!props.altText)
        return new Error(`Missing prop \`altText\` expected on \`${$054eb8030ebde76e$var$ACTION_NAME}\``);
      return null;
    }
  };
  var $054eb8030ebde76e$var$CLOSE_NAME = "ToastClose";
  var $054eb8030ebde76e$export$811e70f61c205839 = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeToast } = _a5, closeProps = __objRest(_a5, ["__scopeToast"]);
    const interactiveContext = $054eb8030ebde76e$var$useToastInteractiveContext($054eb8030ebde76e$var$CLOSE_NAME, __scopeToast);
    return /* @__PURE__ */ (0, import_react70.createElement)($054eb8030ebde76e$var$ToastAnnounceExclude, {
      asChild: true
    }, /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button"
    }, closeProps, {
      ref: forwardedRef,
      onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, interactiveContext.onClose)
    })));
  });
  var $054eb8030ebde76e$var$ToastAnnounceExclude = /* @__PURE__ */ (0, import_react70.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeToast, altText } = _a5, announceExcludeProps = __objRest(_a5, ["__scopeToast", "altText"]);
    return /* @__PURE__ */ (0, import_react70.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
      "data-radix-toast-announce-exclude": "",
      "data-radix-toast-announce-alt": altText || void 0
    }, announceExcludeProps, {
      ref: forwardedRef
    }));
  });
  function $054eb8030ebde76e$var$getAnnounceTextContent(container) {
    const textContent = [];
    const childNodes = Array.from(container.childNodes);
    childNodes.forEach((node) => {
      if (node.nodeType === node.TEXT_NODE && node.textContent)
        textContent.push(node.textContent);
      if ($054eb8030ebde76e$var$isHTMLElement(node)) {
        const isHidden = node.ariaHidden || node.hidden || node.style.display === "none";
        const isExcluded = node.dataset.radixToastAnnounceExclude === "";
        if (!isHidden) {
          if (isExcluded) {
            const altText = node.dataset.radixToastAnnounceAlt;
            if (altText)
              textContent.push(altText);
          } else
            textContent.push(...$054eb8030ebde76e$var$getAnnounceTextContent(node));
        }
      }
    });
    return textContent;
  }
  function $054eb8030ebde76e$var$handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
    const currentTarget = detail.originalEvent.currentTarget;
    const event = new CustomEvent(name, {
      bubbles: true,
      cancelable: true,
      detail
    });
    if (handler)
      currentTarget.addEventListener(name, handler, {
        once: true
      });
    if (discrete)
      $8927f6f2acc4f386$export$6d1a0317bde7de7f(currentTarget, event);
    else
      currentTarget.dispatchEvent(event);
  }
  var $054eb8030ebde76e$var$isDeltaInDirection = (delta, direction, threshold = 0) => {
    const deltaX = Math.abs(delta.x);
    const deltaY = Math.abs(delta.y);
    const isDeltaX = deltaX > deltaY;
    if (direction === "left" || direction === "right")
      return isDeltaX && deltaX > threshold;
    else
      return !isDeltaX && deltaY > threshold;
  };
  function $054eb8030ebde76e$var$useNextFrame(callback = () => {
  }) {
    const fn = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      let raf1 = 0;
      let raf2 = 0;
      raf1 = window.requestAnimationFrame(
        () => raf2 = window.requestAnimationFrame(fn)
      );
      return () => {
        window.cancelAnimationFrame(raf1);
        window.cancelAnimationFrame(raf2);
      };
    }, [
      fn
    ]);
  }
  function $054eb8030ebde76e$var$isHTMLElement(node) {
    return node.nodeType === node.ELEMENT_NODE;
  }
  function $054eb8030ebde76e$var$getTabbableCandidates(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      acceptNode: (node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput)
          return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }
    });
    while (walker.nextNode())
      nodes.push(walker.currentNode);
    return nodes;
  }
  function $054eb8030ebde76e$var$focusFirst(candidates) {
    const previouslyFocusedElement = document.activeElement;
    return candidates.some((candidate) => {
      if (candidate === previouslyFocusedElement)
        return true;
      candidate.focus();
      return document.activeElement !== previouslyFocusedElement;
    });
  }
  var $054eb8030ebde76e$export$be92b6f5f03c0fe9 = $054eb8030ebde76e$export$8d8dc7d5f743331b;
  var $054eb8030ebde76e$export$f99233281efd08a0 = $054eb8030ebde76e$export$16d42d7c29b95a4;
  var $054eb8030ebde76e$export$393edc798c47379d = $054eb8030ebde76e$export$ecddd96c53621d9a;
  var $054eb8030ebde76e$export$e19cd5f9376f8cee = $054eb8030ebde76e$export$3019feecfda683d2;
  var $054eb8030ebde76e$export$f39c2d165cd861fe = $054eb8030ebde76e$export$811e70f61c205839;

  // ../../../packages/ui/src/lib/TldrawUi.tsx
  var import_classnames20 = __toESM(require_classnames());
  var import_react109 = __toESM(require_react());

  // ../../../packages/ui/src/lib/icon-types.ts
  var TLUiIconTypes = [
    "align-bottom-center",
    "align-bottom-left",
    "align-bottom-right",
    "align-bottom",
    "align-center-center",
    "align-center-horizontal",
    "align-center-left",
    "align-center-right",
    "align-center-vertical",
    "align-left",
    "align-right",
    "align-top-center",
    "align-top-left",
    "align-top-right",
    "align-top",
    "arrow-left",
    "arrowhead-arrow",
    "arrowhead-bar",
    "arrowhead-diamond",
    "arrowhead-dot",
    "arrowhead-none",
    "arrowhead-square",
    "arrowhead-triangle-inverted",
    "arrowhead-triangle",
    "aspect-ratio",
    "avatar",
    "blob",
    "bring-forward",
    "bring-to-front",
    "check",
    "checkbox-checked",
    "checkbox-empty",
    "chevron-down",
    "chevron-left",
    "chevron-right",
    "chevron-up",
    "chevrons-ne",
    "chevrons-sw",
    "clipboard-copied",
    "clipboard-copy",
    "code",
    "collab",
    "color",
    "comment",
    "cross-2",
    "cross",
    "dash-dashed",
    "dash-dotted",
    "dash-draw",
    "dash-solid",
    "discord",
    "distribute-horizontal",
    "distribute-vertical",
    "dot",
    "dots-horizontal",
    "dots-vertical",
    "drag-handle-dots",
    "duplicate",
    "edit",
    "external-link",
    "file",
    "fill-none",
    "fill-pattern",
    "fill-semi",
    "fill-solid",
    "follow",
    "following",
    "font-draw",
    "font-mono",
    "font-sans",
    "font-serif",
    "geo-arrow-down",
    "geo-arrow-left",
    "geo-arrow-right",
    "geo-arrow-up",
    "geo-check-box",
    "geo-diamond",
    "geo-ellipse",
    "geo-hexagon",
    "geo-octagon",
    "geo-oval",
    "geo-pentagon",
    "geo-rectangle",
    "geo-rhombus-2",
    "geo-rhombus",
    "geo-star",
    "geo-trapezoid",
    "geo-triangle",
    "geo-x-box",
    "github",
    "group",
    "hidden",
    "image",
    "info-circle",
    "leading",
    "link",
    "lock-small",
    "lock",
    "menu",
    "minus",
    "mixed",
    "pack",
    "page",
    "plus",
    "question-mark-circle",
    "question-mark",
    "redo",
    "reset-zoom",
    "rotate-ccw",
    "rotate-cw",
    "ruler",
    "search",
    "send-backward",
    "send-to-back",
    "settings-horizontal",
    "settings-vertical-1",
    "settings-vertical",
    "share-1",
    "share-2",
    "size-extra-large",
    "size-large",
    "size-medium",
    "size-small",
    "spline-cubic",
    "spline-line",
    "stack-horizontal",
    "stack-vertical",
    "stretch-horizontal",
    "stretch-vertical",
    "text-align-center",
    "text-align-justify",
    "text-align-left",
    "text-align-right",
    "tool-arrow",
    "tool-embed",
    "tool-eraser",
    "tool-frame",
    "tool-hand",
    "tool-highlighter",
    "tool-line",
    "tool-media",
    "tool-note",
    "tool-pencil",
    "tool-pointer",
    "tool-text",
    "trash",
    "triangle-down",
    "triangle-up",
    "twitter",
    "undo",
    "ungroup",
    "unlock-small",
    "unlock",
    "visible",
    "warning-triangle",
    "zoom-in",
    "zoom-out"
  ];

  // ../../../packages/ui/src/lib/assetUrls.ts
  var defaultUiAssetUrls = __spreadProps(__spreadValues({}, defaultEditorAssetUrls), {
    icons: Object.fromEntries(
      TLUiIconTypes.map((name) => [name, `/icons/icon/${name}.svg`])
    ),
    translations: Object.fromEntries(
      LANGUAGES2.map((lang) => [lang.locale, `/translations/${lang.locale}.json`])
    ),
    embedIcons: Object.fromEntries(
      EMBED_DEFINITIONS.map((def) => [def.type, `/embed-icons/${def.type}.png`])
    )
  });

  // ../../../packages/ui/src/lib/hooks/useActions.tsx
  var React46 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/EditLinkDialog.tsx
  var import_react71 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/primitives/Input.tsx
  var import_classnames14 = __toESM(require_classnames());
  var React45 = __toESM(require_react());
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var Input = React45.forwardRef(function Input2({
    className,
    label,
    icon,
    iconLeft,
    autoselect = false,
    autofocus = false,
    defaultValue,
    placeholder,
    onComplete,
    onValueChange,
    onCancel,
    shouldManuallyMaintainScrollPositionWhenFocused = false,
    children,
    value
  }, ref) {
    const rInputRef = React45.useRef(null);
    React45.useImperativeHandle(ref, () => rInputRef.current);
    const msg2 = useTranslation();
    const rInitialValue = React45.useRef(defaultValue != null ? defaultValue : "");
    const rCurrentValue = React45.useRef(defaultValue != null ? defaultValue : "");
    const [isFocused, setIsFocused] = React45.useState(false);
    const handleFocus = React45.useCallback(
      (e2) => {
        setIsFocused(true);
        const elm = e2.currentTarget;
        rCurrentValue.current = elm.value;
        requestAnimationFrame(() => {
          if (autoselect) {
            elm.select();
          }
        });
      },
      [autoselect]
    );
    const handleChange = React45.useCallback(
      (e2) => {
        const value2 = e2.currentTarget.value;
        rCurrentValue.current = value2;
        onValueChange == null ? void 0 : onValueChange(value2);
      },
      [onValueChange]
    );
    const handleKeyUp = React45.useCallback(
      (e2) => {
        switch (e2.key) {
          case "Enter": {
            e2.currentTarget.blur();
            e2.stopPropagation();
            onComplete == null ? void 0 : onComplete(e2.currentTarget.value);
            break;
          }
          case "Escape": {
            e2.currentTarget.value = rInitialValue.current;
            e2.currentTarget.blur();
            e2.stopPropagation();
            onCancel == null ? void 0 : onCancel(e2.currentTarget.value);
            break;
          }
        }
      },
      [onComplete, onCancel]
    );
    const handleBlur = React45.useCallback(() => setIsFocused(false), []);
    React45.useEffect(() => {
      const visualViewport = window.visualViewport;
      if (isFocused && shouldManuallyMaintainScrollPositionWhenFocused && visualViewport) {
        const onViewportChange = () => {
          var _a5;
          (_a5 = rInputRef.current) == null ? void 0 : _a5.scrollIntoView({ block: "center" });
        };
        visualViewport.addEventListener("resize", onViewportChange);
        visualViewport.addEventListener("scroll", onViewportChange);
        requestAnimationFrame(() => {
          var _a5;
          (_a5 = rInputRef.current) == null ? void 0 : _a5.scrollIntoView({ block: "center" });
        });
        return () => {
          visualViewport.removeEventListener("resize", onViewportChange);
          visualViewport.removeEventListener("scroll", onViewportChange);
        };
      }
    }, [isFocused, shouldManuallyMaintainScrollPositionWhenFocused]);
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)("div", { draggable: false, className: "tlui-input__wrapper", children: [
      children,
      label && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("label", { children: msg2(label) }),
      iconLeft && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Icon, { icon: iconLeft, className: "tlui-icon-left", small: true }),
      /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
        "input",
        {
          ref: rInputRef,
          className: (0, import_classnames14.default)("tlui-input", className),
          type: "text",
          defaultValue,
          onKeyUp: handleKeyUp,
          onChange: handleChange,
          onFocus: handleFocus,
          onBlur: handleBlur,
          autoFocus: autofocus,
          placeholder,
          value
        }
      ),
      icon && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Icon, { icon, small: !!label })
    ] });
  });

  // ../../../packages/ui/src/lib/components/EditLinkDialog.tsx
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var validUrlRegex = new RegExp(
    /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i
  );
  function valiateUrl(url) {
    if (validUrlRegex.test(url))
      return true;
    if (validUrlRegex.test("https://" + url))
      return "needs protocol";
    return false;
  }
  var EditLinkDialog = track(function EditLink({ onClose }) {
    const app = useApp();
    const msg2 = useTranslation();
    const selectedShape = app.onlySelectedShape;
    const [validState, setValid] = (0, import_react71.useState)(valiateUrl(selectedShape == null ? void 0 : selectedShape.props.url));
    const rInitialValue = (0, import_react71.useRef)(selectedShape == null ? void 0 : selectedShape.props.url);
    const rValue = (0, import_react71.useRef)(selectedShape == null ? void 0 : selectedShape.props.url);
    const [urlValue, setUrlValue] = (0, import_react71.useState)(
      validState ? validState === "needs protocol" ? "https://" + (selectedShape == null ? void 0 : selectedShape.props.url) : selectedShape == null ? void 0 : selectedShape.props.url : "https://"
    );
    const handleChange = (0, import_react71.useCallback)((rawValue) => {
      const value = rawValue.replace(/https?:\/\/(https?:\/\/)/, (_match, arg1) => {
        return arg1;
      });
      setUrlValue(value);
      const validStateUrl = valiateUrl(value.trim());
      setValid((s3) => s3 === validStateUrl ? s3 : validStateUrl);
      if (validStateUrl) {
        rValue.current = value;
      }
    }, []);
    const handleClear = (0, import_react71.useCallback)(() => {
      app.setProp("url", "", false);
      onClose();
    }, [app, onClose]);
    const handleComplete = (0, import_react71.useCallback)(
      (value) => {
        value = value.trim();
        const validState2 = valiateUrl(value);
        const shape = app.selectedShapes[0];
        if (shape) {
          const current = shape.props.url;
          const next = validState2 ? validState2 === "needs protocol" ? "https://" + value : value : shape.type === "bookmark" ? rInitialValue.current : "";
          if (current !== void 0 && current !== next) {
            app.setProp("url", next, false);
          }
        }
        onClose();
      },
      [app, onClose]
    );
    const handleCancel = (0, import_react71.useCallback)(() => {
      onClose();
    }, [onClose]);
    if (!selectedShape) {
      onClose();
      return null;
    }
    const isRemoving = rInitialValue.current && !validState;
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(import_jsx_runtime65.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(Header, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Title, { children: msg2("edit-link-dialog.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(CloseButton, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Body, { children: /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)("div", { className: "tlui-edit-link-dialog", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          Input,
          {
            className: "tlui-edit-link-dialog__input",
            label: "edit-link-dialog.url",
            autofocus: true,
            value: urlValue,
            onValueChange: handleChange,
            onComplete: handleComplete,
            onCancel: handleCancel
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { children: validState ? msg2("edit-link-dialog.detail") : msg2("edit-link-dialog.invalid-url") })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(Footer, { className: "tlui-dialog__footer__actions", children: [
        /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Button, { onClick: handleCancel, onTouchEnd: handleCancel, children: msg2("edit-link-dialog.cancel") }),
        isRemoving ? /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(Button, { type: "danger", onTouchEnd: handleClear, onClick: handleClear, children: msg2("edit-link-dialog.clear") }) : /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(
          Button,
          {
            type: "primary",
            disabled: !validState,
            onTouchEnd: () => handleComplete(rValue.current),
            onClick: () => handleComplete(rValue.current),
            children: msg2("edit-link-dialog.save")
          }
        )
      ] })
    ] });
  });

  // ../../../packages/ui/src/lib/components/EmbedDialog.tsx
  var import_react72 = __toESM(require_react());
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  var EmbedDialog = track(function EmbedDialog2({ onClose }) {
    const app = useApp();
    const msg2 = useTranslation();
    const assetUrls = useAssetUrls();
    const [embedDefinition, setEmbedDefinition] = (0, import_react72.useState)(null);
    const [url, setUrl] = (0, import_react72.useState)("");
    const [embedInfoForUrl, setEmbedInfoForUrl] = (0, import_react72.useState)(null);
    const [showError, setShowError] = (0, import_react72.useState)(false);
    const rShowErrorTimeout = (0, import_react72.useRef)(-1);
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Header, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(Title, { children: embedDefinition ? `${msg2("embed-dialog.title")} \u2014 ${embedDefinition.title}` : msg2("embed-dialog.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(CloseButton, {})
      ] }),
      embedDefinition ? /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Body, { className: "tlui-embed-dialog__enter", children: [
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
            Input,
            {
              className: "tlui-embed-dialog__input",
              label: "embed-dialog.url",
              placeholder: "http://example.com",
              autofocus: true,
              onValueChange: (value) => {
                setUrl(value);
                const embedInfo = getEmbedInfo(value);
                setEmbedInfoForUrl(
                  embedInfo && embedInfo.definition.type === embedDefinition.type ? embedInfo : null
                );
                setShowError(false);
                clearTimeout(rShowErrorTimeout.current);
                rShowErrorTimeout.current = setTimeout(() => setShowError(!embedInfo), 320);
              }
            }
          ),
          url === "" ? /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)("div", { className: "tlui-embed-dialog__instruction", children: [
            /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("span", { children: msg2("embed-dialog.instruction") }),
            " ",
            embedDefinition.instructionLink && /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(
              "a",
              {
                target: "_blank",
                rel: "noopener noreferrer",
                href: embedDefinition.instructionLink,
                className: "tlui-embed-dialog__instruction__link",
                children: [
                  "Learn more.",
                  /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(Icon, { icon: "external-link", small: true })
                ]
              }
            )
          ] }) : /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "tlui-embed-dialog__warning", children: showError ? msg2("embed-dialog.invalid-url") : "\xA0" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(Footer, { className: "tlui-dialog__footer__actions", children: [
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
            Button,
            {
              onClick: () => {
                setEmbedDefinition(null);
                setEmbedInfoForUrl(null);
                setUrl("");
              },
              label: "embed-dialog.back"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "tlui-embed__spacer" }),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(Button, { label: "embed-dialog.cancel", onClick: onClose }),
          /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
            Button,
            {
              type: "primary",
              disabled: !embedInfoForUrl,
              label: "embed-dialog.create",
              onClick: () => {
                if (!embedInfoForUrl)
                  return;
                createEmbedShapeAtPoint(app, url, app.viewportPageCenter, {
                  width: embedInfoForUrl.definition.width,
                  height: embedInfoForUrl.definition.height,
                  doesResize: embedInfoForUrl.definition.doesResize
                });
                onClose();
              }
            }
          )
        ] })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime66.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(Body, { className: "tlui-embed-dialog__list", children: EMBED_DEFINITIONS.map((def) => {
          return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(
            "button",
            {
              className: "tlui-embed-dialog__item",
              onClick: () => setEmbedDefinition(def),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "tlui-embed-dialog__item__image", children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
                  "div",
                  {
                    className: "tlui-embed-dialog__item__image__img",
                    style: {
                      backgroundImage: `url(${assetUrls.embedIcons[def.type]})`
                    }
                  }
                ) }),
                /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "tlui-embed-dialog__item__title", children: def.title })
              ]
            },
            def.type
          );
        }) }),
        /* @__PURE__ */ (0, import_jsx_runtime66.jsx)("div", { className: "tlui-dialog__scrim" })
      ] })
    ] });
  });

  // ../../../packages/ui/src/lib/hooks/useClipboardEvents.ts
  var import_lz_string = __toESM(require_lz_string());
  var import_react73 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/clipboard/pasteExcalidrawContent.ts
  function pasteExcalidrawContent(app, clipboard, point2) {
    return __async(this, null, function* () {
      var _a5, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
      const { elements, files } = clipboard;
      const tldrawContent = {
        shapes: [],
        rootShapeIds: [],
        assets: [],
        schema: app.store.schema.serialize()
      };
      const groupShapeIdToChildren = /* @__PURE__ */ new Map();
      const rotatedElements = /* @__PURE__ */ new Map();
      const { currentPageId } = app;
      const excElementIdsToTldrawShapeIds = /* @__PURE__ */ new Map();
      const rootShapeIds = [];
      const skipIds = /* @__PURE__ */ new Set();
      elements.forEach((element) => {
        excElementIdsToTldrawShapeIds.set(element.id, app.createShapeId());
        if (element.boundElements !== null) {
          for (const boundElement of element.boundElements) {
            if (boundElement.type === "text") {
              skipIds.add(boundElement.id);
            }
          }
        }
      });
      let index2 = "a1";
      for (const element of elements) {
        if (skipIds.has(element.id)) {
          continue;
        }
        const id = excElementIdsToTldrawShapeIds.get(element.id);
        const base = {
          id,
          typeName: "shape",
          parentId: currentPageId,
          index: index2,
          x: element.x,
          y: element.y,
          rotation: 0,
          isLocked: element.locked
        };
        if (element.angle !== 0) {
          rotatedElements.set(id, element.angle);
        }
        if (element.groupIds && element.groupIds.length > 0) {
          if (groupShapeIdToChildren.has(element.groupIds[0])) {
            (_a5 = groupShapeIdToChildren.get(element.groupIds[0])) == null ? void 0 : _a5.push(id);
          } else {
            groupShapeIdToChildren.set(element.groupIds[0], [id]);
          }
        } else {
          rootShapeIds.push(id);
        }
        switch (element.type) {
          case "rectangle":
          case "ellipse":
          case "diamond": {
            let text = "";
            let align = "middle";
            if (element.boundElements !== null) {
              for (const boundElement of element.boundElements) {
                if (boundElement.type === "text") {
                  const labelElement = elements.find((elm) => elm.id === boundElement.id);
                  if (labelElement) {
                    text = labelElement.text;
                    align = textAlignToAlignTypes[labelElement.textAlign];
                  }
                }
              }
            }
            const colorToUse = element.backgroundColor === "transparent" ? element.strokeColor : element.backgroundColor;
            tldrawContent.shapes.push(__spreadProps(__spreadValues({}, base), {
              type: "geo",
              props: {
                geo: element.type,
                opacity: getOpacity(element.opacity),
                url: (_b2 = element.link) != null ? _b2 : "",
                w: element.width,
                h: element.height,
                size: (_c = strokeWidthsToSizes[element.strokeWidth]) != null ? _c : "draw",
                color: (_d = colorsToColors[colorToUse]) != null ? _d : "black",
                text,
                align,
                dash: getDash(element),
                fill: getFill(element)
              }
            }));
            break;
          }
          case "freedraw": {
            tldrawContent.shapes.push(__spreadProps(__spreadValues({}, base), {
              type: "draw",
              props: {
                dash: getDash(element),
                size: strokeWidthsToSizes[element.strokeWidth],
                opacity: getOpacity(element.opacity),
                color: (_e = colorsToColors[element.strokeColor]) != null ? _e : "black",
                segments: [
                  {
                    type: "free",
                    points: element.points.map(([x3, y3, z2 = 0.5]) => ({
                      x: x3,
                      y: y3,
                      z: z2
                    }))
                  }
                ]
              }
            }));
            break;
          }
          case "line": {
            const start = element.points[0];
            const end = element.points[element.points.length - 1];
            const indices = getIndices(element.points.length);
            tldrawContent.shapes.push(__spreadProps(__spreadValues({}, base), {
              type: "line",
              props: {
                dash: getDash(element),
                size: strokeWidthsToSizes[element.strokeWidth],
                opacity: getOpacity(element.opacity),
                color: (_f = colorsToColors[element.strokeColor]) != null ? _f : "black",
                spline: element.roundness ? "cubic" : "line",
                handles: __spreadValues({
                  start: {
                    id: "start",
                    type: "vertex",
                    index: indices[0],
                    x: start[0],
                    y: start[1]
                  },
                  end: {
                    id: "end",
                    type: "vertex",
                    index: indices[indices.length - 1],
                    x: end[0],
                    y: end[1]
                  }
                }, Object.fromEntries(
                  element.points.slice(1, -1).map(([x3, y3], i3) => {
                    const id2 = uniqueId();
                    return [
                      id2,
                      {
                        id: id2,
                        type: "vertex",
                        index: indices[i3 + 1],
                        x: x3,
                        y: y3
                      }
                    ];
                  })
                ))
              }
            }));
            break;
          }
          case "arrow": {
            let text = "";
            if (element.boundElements !== null) {
              for (const boundElement of element.boundElements) {
                if (boundElement.type === "text") {
                  const labelElement = elements.find((elm) => elm.id === boundElement.id);
                  if (labelElement) {
                    text = labelElement.text;
                  }
                }
              }
            }
            const start = element.points[0];
            const end = element.points[element.points.length - 1];
            const startTargetId = excElementIdsToTldrawShapeIds.get((_g = element.startBinding) == null ? void 0 : _g.elementId);
            const endTargetId = excElementIdsToTldrawShapeIds.get((_h = element.endBinding) == null ? void 0 : _h.elementId);
            tldrawContent.shapes.push(__spreadProps(__spreadValues({}, base), {
              type: "arrow",
              props: {
                text,
                bend: getBend(element, start, end),
                dash: getDash(element),
                opacity: getOpacity(element.opacity),
                size: (_i = strokeWidthsToSizes[element.strokeWidth]) != null ? _i : "m",
                color: (_j = colorsToColors[element.strokeColor]) != null ? _j : "black",
                start: startTargetId ? {
                  type: "binding",
                  boundShapeId: startTargetId,
                  normalizedAnchor: { x: 0.5, y: 0.5 },
                  isExact: false
                } : {
                  type: "point",
                  x: start[0],
                  y: start[1]
                },
                end: endTargetId ? {
                  type: "binding",
                  boundShapeId: endTargetId,
                  normalizedAnchor: { x: 0.5, y: 0.5 },
                  isExact: false
                } : {
                  type: "point",
                  x: end[0],
                  y: end[1]
                },
                arrowheadEnd: (_k = arrowheadsToArrowheadTypes[element.endArrowhead]) != null ? _k : "none",
                arrowheadStart: (_l = arrowheadsToArrowheadTypes[element.startArrowhead]) != null ? _l : "none"
              }
            }));
            break;
          }
          case "text": {
            const { size, scale } = getFontSizeAndScale(element.fontSize);
            tldrawContent.shapes.push(__spreadProps(__spreadValues({}, base), {
              type: "text",
              props: {
                size,
                scale,
                font: (_m = fontFamilyToFontType[element.fontFamily]) != null ? _m : "draw",
                opacity: getOpacity(element.opacity),
                color: (_n = colorsToColors[element.strokeColor]) != null ? _n : "black",
                text: element.text,
                align: textAlignToAlignTypes[element.textAlign]
              }
            }));
            break;
          }
          case "image": {
            const file = files[element.fileId];
            if (!file)
              break;
            const assetId = TLAsset.createId();
            tldrawContent.assets.push({
              id: assetId,
              typeName: "asset",
              type: "image",
              props: {
                w: element.width,
                h: element.height,
                name: (_o = element.id) != null ? _o : "Untitled",
                isAnimated: false,
                mimeType: file.mimeType,
                src: file.dataURL
              }
            });
            tldrawContent.shapes.push(__spreadProps(__spreadValues({}, base), {
              type: "image",
              props: {
                opacity: getOpacity(element.opacity),
                w: element.width,
                h: element.height,
                assetId
              }
            }));
          }
        }
        index2 = getIndexAbove(index2);
      }
      const p3 = point2 != null ? point2 : app.inputs.shiftKey ? app.inputs.currentPagePoint : void 0;
      app.mark("paste");
      app.putContent(tldrawContent, {
        point: p3,
        select: false,
        preserveIds: true
      });
      for (const groupedShapeIds of groupShapeIdToChildren.values()) {
        if (groupedShapeIds.length > 1) {
          app.groupShapes(groupedShapeIds);
          const groupShape = app.getShapeById(groupedShapeIds[0]);
          if ((groupShape == null ? void 0 : groupShape.parentId) && isShapeId(groupShape.parentId)) {
            rootShapeIds.push(groupShape.parentId);
          }
        }
      }
      for (const [id, angle] of rotatedElements) {
        app.select(id);
        app.rotateShapesBy([id], angle);
      }
      const rootShapes = compact(rootShapeIds.map((id) => app.getShapeById(id)));
      const bounds = Box2d.Common(rootShapes.map((s3) => app.getPageBounds(s3)));
      const viewPortCenter = app.viewportPageBounds.center;
      app.updateShapes(
        rootShapes.map((s3) => {
          var _a6, _b3;
          const delta = {
            x: ((_a6 = s3.x) != null ? _a6 : 0) - (bounds.x + bounds.w / 2),
            y: ((_b3 = s3.y) != null ? _b3 : 0) - (bounds.y + bounds.h / 2)
          };
          return {
            id: s3.id,
            type: s3.type,
            x: viewPortCenter.x + delta.x,
            y: viewPortCenter.y + delta.y
          };
        })
      );
      app.setSelectedIds(rootShapeIds);
    });
  }
  var getOpacity = (opacity) => {
    const t4 = opacity / 100;
    if (t4 < 0.2) {
      return "0.1";
    } else if (t4 < 0.4) {
      return "0.25";
    } else if (t4 < 0.6) {
      return "0.5";
    } else if (t4 < 0.8) {
      return "0.75";
    }
    return "1";
  };
  var strokeWidthsToSizes = {
    1: "s",
    2: "m",
    3: "l",
    4: "xl"
  };
  var fontSizesToSizes = {
    16: "s",
    20: "m",
    28: "l",
    36: "xl"
  };
  function getFontSizeAndScale(fontSize) {
    const size = fontSizesToSizes[fontSize];
    if (size) {
      return { size, scale: 1 };
    }
    if (fontSize < 16) {
      return { size: "s", scale: fontSize / 16 };
    }
    if (fontSize > 36) {
      return { size: "xl", scale: fontSize / 36 };
    }
    return { size: "m", scale: 1 };
  }
  var fontFamilyToFontType = {
    1: "draw",
    2: "sans",
    3: "mono"
  };
  var colorsToColors = {
    "#ffffff": "grey",
    // Strokes
    "#000000": "black",
    "#343a40": "black",
    "#495057": "grey",
    "#c92a2a": "red",
    "#a61e4d": "light-red",
    "#862e9c": "violet",
    "#5f3dc4": "light-violet",
    "#364fc7": "blue",
    "#1864ab": "light-blue",
    "#0b7285": "light-green",
    "#087f5b": "light-green",
    "#2b8a3e": "green",
    "#5c940d": "light-green",
    "#e67700": "yellow",
    "#d9480f": "orange",
    // Backgrounds
    "#ced4da": "grey",
    "#868e96": "grey",
    "#fa5252": "light-red",
    "#e64980": "red",
    "#be4bdb": "light-violet",
    "#7950f2": "violet",
    "#4c6ef5": "blue",
    "#228be6": "light-blue",
    "#15aabf": "light-green",
    "#12b886": "green",
    "#40c057": "green",
    "#82c91e": "light-green",
    "#fab005": "yellow",
    "#fd7e14": "orange",
    "#212529": "grey"
  };
  var strokeStylesToStrokeTypes = {
    solid: "draw",
    dashed: "dashed",
    dotted: "dotted"
  };
  var fillStylesToFillType = {
    "cross-hatch": "pattern",
    hachure: "pattern",
    solid: "solid"
  };
  var textAlignToAlignTypes = {
    left: "start",
    center: "middle",
    right: "end"
  };
  var arrowheadsToArrowheadTypes = {
    arrow: "arrow",
    dot: "dot",
    triangle: "triangle",
    bar: "pipe"
  };
  function getBend(element, startPoint, endPoint) {
    let bend = 0;
    if (element.points.length > 2) {
      const start = new Vec2d(startPoint[0], startPoint[1]);
      const end = new Vec2d(endPoint[0], endPoint[1]);
      const handle = new Vec2d(element.points[1][0], element.points[1][1]);
      const delta = Vec2d.Sub(end, start);
      const v3 = Vec2d.Per(delta);
      const med = Vec2d.Med(end, start);
      const A2 = Vec2d.Sub(med, v3);
      const B = Vec2d.Add(med, v3);
      const point2 = Vec2d.NearestPointOnLineSegment(A2, B, handle, false);
      bend = Vec2d.Dist(point2, med);
      if (Vec2d.Clockwise(point2, end, med))
        bend *= -1;
    }
    return bend;
  }
  var getDash = (element) => {
    var _a5;
    let dash = (_a5 = strokeStylesToStrokeTypes[element.strokeStyle]) != null ? _a5 : "draw";
    if (dash === "draw" && element.roughness === 0) {
      dash = "solid";
    }
    return dash;
  };
  var getFill = (element) => {
    var _a5;
    if (element.backgroundColor === "transparent") {
      return "none";
    }
    return (_a5 = fillStylesToFillType[element.fillStyle]) != null ? _a5 : "solid";
  };

  // ../../../packages/ui/src/lib/hooks/clipboard/pasteFiles.ts
  function pasteFiles(app, urls, point2) {
    return __async(this, null, function* () {
      const p3 = point2 != null ? point2 : app.inputs.shiftKey ? app.inputs.currentPagePoint : app.viewportPageCenter;
      const blobs = yield Promise.all(urls.map((url) => __async(this, null, function* () {
        return yield (yield fetch(url)).blob();
      })));
      const files = blobs.map(
        (blob) => new File([blob], "tldrawFile", {
          type: blob.type
        })
      );
      app.mark("paste");
      yield createShapesFromFiles(app, files, p3, false);
      urls.forEach((url) => URL.revokeObjectURL(url));
    });
  }

  // ../../../packages/ui/src/lib/hooks/clipboard/pastePlainText.ts
  var rtlRegex = /[\u0590-\u05FF\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/;
  function replaceTabsWithSpaces(text) {
    return text.replace(/\t/g, INDENT);
  }
  function stripCommonMinimumIndentation(text) {
    const lines = text.split("\n");
    while (lines[0].trim().length === 0) {
      lines.shift();
    }
    let minIndentation = Infinity;
    for (const line of lines) {
      if (line.trim().length > 0) {
        const indentation = line.length - line.trimStart().length;
        minIndentation = Math.min(minIndentation, indentation);
      }
    }
    return lines.map((line) => line.slice(minIndentation)).join("\n");
  }
  function stripTrailingWhitespace(text) {
    return text.replace(/[ \t]+$/gm, "").replace(/\n+$/, "");
  }
  function pastePlainText(app, text, point2) {
    return __async(this, null, function* () {
      const p3 = point2 != null ? point2 : app.inputs.shiftKey ? app.inputs.currentPagePoint : app.viewportPageCenter;
      const defaultProps = app.getShapeUtilByDef(TLTextShapeDef).defaultProps();
      const textToPaste = stripTrailingWhitespace(
        stripCommonMinimumIndentation(replaceTabsWithSpaces(text))
      );
      let w3;
      let h3;
      let autoSize;
      let align = "middle";
      const isMultiLine = textToPaste.split("\n").length > 1;
      const isRtl = rtlRegex.test(textToPaste);
      if (isMultiLine) {
        align = isMultiLine ? isRtl ? "end" : "start" : "middle";
      }
      const rawSize = app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
        text: textToPaste,
        fontFamily: FONT_FAMILIES[defaultProps.font],
        fontSize: FONT_SIZES[defaultProps.size],
        width: "fit-content"
      }));
      const minWidth = Math.min(
        isMultiLine ? app.viewportPageBounds.width * 0.9 : 920,
        Math.max(200, app.viewportPageBounds.width * 0.9)
      );
      if (rawSize.w > minWidth) {
        const shrunkSize = app.textMeasure.measureText(__spreadProps(__spreadValues({}, TEXT_PROPS), {
          text: textToPaste,
          fontFamily: FONT_FAMILIES[defaultProps.font],
          fontSize: FONT_SIZES[defaultProps.size],
          width: minWidth + "px"
        }));
        w3 = shrunkSize.w;
        h3 = shrunkSize.h;
        autoSize = false;
        align = isRtl ? "end" : "start";
      } else {
        w3 = rawSize.w;
        h3 = rawSize.h;
        autoSize = true;
      }
      if (p3.y - h3 / 2 < app.viewportPageBounds.minY + 40) {
        p3.y = app.viewportPageBounds.minY + 40 + h3 / 2;
      }
      app.mark("paste");
      app.createShapes([
        {
          id: createShapeId(),
          type: "text",
          x: p3.x - w3 / 2,
          y: p3.y - h3 / 2,
          props: {
            text: textToPaste,
            // if the text has more than one line, align it to the left
            align,
            autoSize,
            w: w3
          }
        }
      ]);
    });
  }

  // ../../../packages/ui/src/lib/hooks/clipboard/pasteSvgText.ts
  function pasteSvgText(app, text, point2) {
    return __async(this, null, function* () {
      const p3 = point2 != null ? point2 : app.inputs.shiftKey ? app.inputs.currentPagePoint : app.viewportPageCenter;
      app.mark("paste");
      return yield createAssetShapeAtPoint(app, text, p3);
    });
  }

  // ../../../packages/ui/src/lib/hooks/clipboard/pasteTldrawContent.ts
  function pasteTldrawContent(app, clipboard, point2) {
    const p3 = point2 != null ? point2 : app.inputs.shiftKey ? app.inputs.currentPagePoint : void 0;
    app.mark("paste");
    app.putContent(clipboard, {
      point: p3,
      select: true
    });
  }

  // ../../../packages/ui/src/lib/hooks/clipboard/pasteUrl.ts
  function pasteUrl(app, url, point2) {
    return __async(this, null, function* () {
      var _a5;
      const p3 = point2 != null ? point2 : app.inputs.shiftKey ? app.inputs.currentPagePoint : app.viewportPageCenter;
      try {
        const resp = yield fetch(url);
        if ((_a5 = resp.headers.get("content-type")) == null ? void 0 : _a5.match(/^image\//)) {
          app.mark("paste");
          pasteFiles(app, [url]);
          return;
        }
      } catch (err) {
        if (err.message !== "Failed to fetch") {
          console.error(err);
        }
      }
      app.mark("paste");
      const embedInfo = getEmbedInfo(url);
      if (embedInfo) {
        return yield createEmbedShapeAtPoint(app, embedInfo.url, p3, embedInfo.definition);
      }
      return yield createBookmarkShapeAtPoint(app, url, p3);
    });
  }

  // ../../../packages/ui/src/lib/hooks/useAppIsFocused.ts
  function useAppIsFocused() {
    const app = useApp();
    return useValue("app.isFocused", () => app.isFocused, [app]);
  }

  // ../../../packages/ui/src/lib/hooks/useClipboardEvents.ts
  var INPUTS2 = ["input", "select", "textarea"];
  function disallowClipboardEvents(app) {
    const { activeElement } = document;
    return app.isMenuOpen || activeElement && (activeElement.getAttribute("contenteditable") || INPUTS2.indexOf(activeElement.tagName.toLowerCase()) > -1);
  }
  function blobAsString2(blob) {
    return __async(this, null, function* () {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.addEventListener("loadend", () => {
          const text = reader.result;
          resolve(text);
        });
        reader.addEventListener("error", () => {
          reject(reader.error);
        });
        reader.readAsText(blob);
      });
    });
  }
  function stripHtml(html) {
    const doc = document.implementation.createHTMLDocument("");
    doc.documentElement.innerHTML = html.trim();
    return doc.body.textContent || doc.body.innerText || "";
  }
  var isFile = (item) => {
    return item.types.find((i3) => i3.match(/^image\//));
  };
  var handleText = (app, data, point2) => {
    const validUrlList = getValidHttpURLList(data);
    if (validUrlList) {
      for (const url of validUrlList) {
        pasteUrl(app, url, point2);
      }
    } else if (isValidHttpURL(data)) {
      pasteUrl(app, data, point2);
    } else if (isSvgText(data)) {
      pasteSvgText(app, data, point2);
    } else {
      pastePlainText(app, data, point2);
    }
  };
  var handlePasteFromEventClipboardData = (app, clipboardData, point2) => __async(void 0, null, function* () {
    if (app.editingId !== null)
      return;
    if (!clipboardData) {
      throw Error("No clipboard data");
    }
    const things = [];
    for (const item of Object.values(clipboardData.items)) {
      switch (item.kind) {
        case "file": {
          things.push({
            type: "file",
            source: new Promise((r3) => r3(item.getAsFile()))
          });
          break;
        }
        case "string": {
          if (item.type === "text/html") {
            things.push({
              type: "html",
              source: new Promise((r3) => item.getAsString(r3))
            });
          } else if (item.type === "text/plain") {
            things.push({
              type: "text",
              source: new Promise((r3) => item.getAsString(r3))
            });
          } else {
            things.push({ type: item.type, source: new Promise((r3) => item.getAsString(r3)) });
          }
          break;
        }
      }
    }
    handleClipboardThings(app, things, point2);
  });
  var handlePasteFromClipboardApi = (app, clipboardItems, point2) => __async(void 0, null, function* () {
    const things = [];
    for (const item of clipboardItems) {
      if (isFile(item)) {
        for (const type of item.types) {
          if (type.match(/^image\//)) {
            things.push({ type: "blob", source: item.getType(type) });
          }
        }
      }
      if (item.types.includes("text/html")) {
        things.push({
          type: "html",
          source: new Promise(
            (r3) => item.getType("text/html").then((blob) => blobAsString2(blob).then(r3))
          )
        });
      }
      if (item.types.includes("text/uri-list")) {
        things.push({
          type: "url",
          source: new Promise(
            (r3) => item.getType("text/uri-list").then((blob) => blobAsString2(blob).then(r3))
          )
        });
      }
      if (item.types.includes("text/plain")) {
        things.push({
          type: "text",
          source: new Promise(
            (r3) => item.getType("text/plain").then((blob) => blobAsString2(blob).then(r3))
          )
        });
      }
    }
    return yield handleClipboardThings(app, things, point2);
  });
  function handleClipboardThings(app, things, point2) {
    return __async(this, null, function* () {
      const files = things.filter(
        (t4) => (t4.type === "file" || t4.type === "blob") && t4.source !== null
      );
      if (files.length) {
        const fileBlobs = yield Promise.all(files.map((t4) => t4.source));
        const urls = fileBlobs.filter(Boolean).map(
          (blob) => URL.createObjectURL(blob)
        );
        return yield pasteFiles(app, urls, point2);
      }
      const results = yield Promise.all(
        things.filter((t4) => t4.type !== "file").map(
          (t4) => new Promise((r3) => {
            const thing = t4;
            if (thing.type === "file") {
              r3({ type: "error", data: null, reason: "unexpected file" });
              return;
            }
            thing.source.then((text) => {
              var _a5;
              const tldrawHtmlComment = (_a5 = text.match(/<tldraw[^>]*>(.*)<\/tldraw>/)) == null ? void 0 : _a5[1];
              if (tldrawHtmlComment) {
                try {
                  const jsonComment = (0, import_lz_string.decompressFromBase64)(tldrawHtmlComment);
                  if (jsonComment === null) {
                    r3({
                      type: "error",
                      data: jsonComment,
                      reason: `found tldraw data comment but could not parse base64`
                    });
                    return;
                  } else {
                    const json = JSON.parse(jsonComment);
                    if (json.type !== "application/tldraw") {
                      r3({
                        type: "error",
                        data: json,
                        reason: `found tldraw data comment but JSON was of a different type: ${json.type}`
                      });
                    }
                    if (typeof json.data === "string") {
                      r3({
                        type: "error",
                        data: json,
                        reason: "found tldraw json but data was a string instead of a TLClipboardModel object"
                      });
                      return;
                    }
                    r3({ type: "tldraw", data: json.data });
                    return;
                  }
                } catch (e2) {
                  r3({
                    type: "error",
                    data: tldrawHtmlComment,
                    reason: "found tldraw json but data was a string instead of a TLClipboardModel object"
                  });
                  return;
                }
              } else {
                if (thing.type === "html") {
                  r3({ type: "text", data: text, subtype: "html" });
                  return;
                }
                if (thing.type === "url") {
                  r3({ type: "text", data: text, subtype: "url" });
                  return;
                }
                try {
                  const json = JSON.parse(text);
                  if (json.type === "excalidraw/clipboard") {
                    r3({ type: "excalidraw", data: json });
                    return;
                  } else {
                    r3({ type: "text", data: text, subtype: "json" });
                    return;
                  }
                } catch (e2) {
                  r3({ type: "text", data: text, subtype: "text" });
                  return;
                }
              }
              r3({ type: "error", data: text, reason: "unhandled case" });
            });
          })
        )
      );
      for (const result of results) {
        if (result.type === "tldraw") {
          pasteTldrawContent(app, result.data, point2);
          return;
        }
      }
      for (const result of results) {
        if (result.type === "excalidraw") {
          pasteExcalidrawContent(app, result.data, point2);
          return;
        }
      }
      for (const result of results) {
        if (result.type === "text" && result.subtype === "html") {
          const rootNode = new DOMParser().parseFromString(result.data, "text/html");
          const bodyNode = rootNode.querySelector("body");
          const isHtmlSingleLink = bodyNode && Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 && bodyNode.firstElementChild && bodyNode.firstElementChild.tagName === "A" && bodyNode.firstElementChild.hasAttribute("href") && bodyNode.firstElementChild.getAttribute("href") !== "";
          if (isHtmlSingleLink) {
            const href = bodyNode.firstElementChild.getAttribute("href");
            handleText(app, href, point2);
            return;
          }
          if (!results.some((r3) => r3.type === "text" && r3.subtype !== "html") && result.data.trim()) {
            handleText(app, stripHtml(result.data), point2);
            return;
          }
        }
      }
      for (const result of results) {
        if (result.type === "text" && result.subtype === "url") {
          pasteUrl(app, result.data, point2);
          return;
        }
      }
      for (const result of results) {
        if (result.type === "text" && result.subtype === "text" && result.data.trim()) {
          handleText(app, result.data, point2);
          return;
        }
      }
    });
  }
  var handleNativeOrMenuCopy = (app) => {
    var _a5;
    const content = app.getContent();
    if (!content) {
      window.navigator.clipboard.writeText("");
      return;
    }
    const stringifiedClipboard = (0, import_lz_string.compressToBase64)(
      JSON.stringify({
        type: "application/tldraw",
        kind: "content",
        data: content
      })
    );
    if (typeof (window == null ? void 0 : window.navigator) !== "undefined") {
      const textItems = content.shapes.map((shape) => {
        if (TLTextShapeDef.is(shape) || TLGeoShapeDef.is(shape) || TLArrowShapeDef.is(shape)) {
          return shape.props.text;
        }
        if (TLBookmarkShapeDef.is(shape) || TLEmbedShapeDef.is(shape)) {
          return shape.props.url;
        }
        return null;
      }).filter(isNonNull);
      if ((_a5 = navigator.clipboard) == null ? void 0 : _a5.write) {
        const htmlBlob = new Blob([`<tldraw>${stringifiedClipboard}</tldraw>`], {
          type: "text/html"
        });
        let textContent = textItems.join(" ");
        if (textContent === "") {
          textContent = " ";
        }
        navigator.clipboard.write([
          new ClipboardItem({
            "text/html": htmlBlob,
            // What is this second blob used for?
            "text/plain": new Blob([textContent], { type: "text/plain" })
          })
        ]);
      } else if (navigator.clipboard.writeText) {
        navigator.clipboard.writeText(`<tldraw>${stringifiedClipboard}</tldraw>`);
      }
    }
  };
  function useMenuClipboardEvents(source) {
    const app = useApp();
    const trackEvent = useEvents();
    const copy = (0, import_react73.useCallback)(
      function onCopy() {
        if (app.selectedIds.length === 0)
          return;
        handleNativeOrMenuCopy(app);
        trackEvent("copy", { source });
      },
      [app, trackEvent, source]
    );
    const cut = (0, import_react73.useCallback)(
      function onCut() {
        if (app.selectedIds.length === 0)
          return;
        handleNativeOrMenuCopy(app);
        app.deleteShapes();
        trackEvent("cut", { source });
      },
      [app, trackEvent, source]
    );
    const paste = (0, import_react73.useCallback)(
      function onPaste(data, point2) {
        return __async(this, null, function* () {
          if (app.editingId !== null || disallowClipboardEvents(app))
            return;
          if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
            handlePasteFromClipboardApi(app, data, point2);
            trackEvent("paste", { source: "menu" });
          } else {
            navigator.clipboard.read().then((clipboardItems) => {
              paste(clipboardItems, app.inputs.currentPagePoint);
            });
          }
        });
      },
      [app, trackEvent]
    );
    return {
      copy,
      cut,
      paste
    };
  }
  function useNativeClipboardEvents() {
    const app = useApp();
    const trackEvent = useEvents();
    const appIsFocused = useAppIsFocused();
    (0, import_react73.useEffect)(() => {
      if (!appIsFocused)
        return;
      const copy = () => {
        if (app.selectedIds.length === 0 || app.editingId !== null || disallowClipboardEvents(app))
          return;
        handleNativeOrMenuCopy(app);
        trackEvent("copy", { source: "kbd" });
      };
      function cut() {
        if (app.selectedIds.length === 0 || app.editingId !== null || disallowClipboardEvents(app))
          return;
        handleNativeOrMenuCopy(app);
        app.deleteShapes();
        trackEvent("cut", { source: "kbd" });
      }
      let disablingMiddleClickPaste = false;
      const pointerUpHandler = (e2) => {
        if (e2.button === 1) {
          disablingMiddleClickPaste = true;
          requestAnimationFrame(() => {
            disablingMiddleClickPaste = false;
          });
        }
      };
      const paste = (event) => {
        if (disablingMiddleClickPaste) {
          event.stopPropagation();
          return;
        }
        if (app.editingId !== null || disallowClipboardEvents(app))
          return;
        if (event.clipboardData && !app.inputs.shiftKey) {
          handlePasteFromEventClipboardData(app, event.clipboardData);
        } else {
          navigator.clipboard.read().then((clipboardItems) => {
            if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
              handlePasteFromClipboardApi(app, clipboardItems, app.inputs.currentPagePoint);
            }
          });
        }
        trackEvent("paste", { source: "kbd" });
      };
      document.addEventListener("copy", copy);
      document.addEventListener("cut", cut);
      document.addEventListener("paste", paste);
      document.addEventListener("pointerup", pointerUpHandler);
      return () => {
        document.removeEventListener("copy", copy);
        document.removeEventListener("cut", cut);
        document.removeEventListener("paste", paste);
        document.removeEventListener("pointerup", pointerUpHandler);
      };
    }, [app, trackEvent, appIsFocused]);
  }

  // ../../../packages/ui/src/lib/hooks/useCopyAs.ts
  var import_react75 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useToastsProvider.tsx
  var import_react74 = __toESM(require_react());
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var ToastsContext = (0, import_react74.createContext)({});
  function ToastsProvider({ children }) {
    const [toasts, setToasts] = (0, import_react74.useState)([]);
    const addToast = (0, import_react74.useCallback)((toast) => {
      var _a5;
      const id = (_a5 = toast.id) != null ? _a5 : uniqueId();
      setToasts((d3) => [...d3.filter((m3) => m3.id !== toast.id), __spreadProps(__spreadValues({}, toast), { id })]);
      return id;
    }, []);
    const removeToast = (0, import_react74.useCallback)((id) => {
      setToasts((d3) => d3.filter((m3) => m3.id !== id));
      return id;
    }, []);
    const clearToasts = (0, import_react74.useCallback)(() => {
      setToasts(() => []);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(ToastsContext.Provider, { value: { toasts, addToast, removeToast, clearToasts }, children });
  }
  function useToasts() {
    const ctx = (0, import_react74.useContext)(ToastsContext);
    if (!ctx) {
      throw new Error("useToasts must be used within a ToastsProvider");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/hooks/useCopyAs.ts
  function useCopyAs() {
    const app = useApp();
    const { addToast } = useToasts();
    const msg2 = useTranslation();
    return (0, import_react75.useCallback)(
      // it's important that this function itself isn't async - we need to
      // create the relevant `ClipboardItem`s synchronously to make sure
      // safari knows that the user _wants_ to copy:
      // https://bugs.webkit.org/show_bug.cgi?id=222262
      //
      // this is fine for navigator.clipboard.write, but for fallbacks it's a
      // little awkward.
      function copyAs(ids = app.selectedIds, format = "svg") {
        if (ids.length === 0) {
          ids = [...app.shapeIds];
        }
        if (ids.length === 0) {
          return;
        }
        switch (format) {
          case "svg": {
            if (window.navigator.clipboard) {
              if (window.navigator.clipboard.write) {
                window.navigator.clipboard.write([
                  new ClipboardItem({
                    "text/plain": getExportedSvgBlob(app, ids)
                  })
                ]);
              } else {
                fallbackWriteTextAsync(
                  () => __async(this, null, function* () {
                    return getSvgAsString(yield getExportSvgElement(app, ids));
                  })
                );
              }
            }
            break;
          }
          case "jpeg":
          case "png": {
            const mimeType = format === "jpeg" ? "image/jpeg" : "image/png";
            const blobPromise = getExportedImageBlob(app, ids, format).then((blob) => {
              if (blob) {
                if (window.navigator.clipboard) {
                  return blob;
                }
                throw new Error("Copy not supported");
              } else {
                addToast({
                  id: "copy-fail",
                  icon: "warning-triangle",
                  title: msg2("toast.error.copy-fail.title"),
                  description: msg2("toast.error.copy-fail.desc")
                });
                throw new Error("Copy not possible");
              }
            });
            window.navigator.clipboard.write([
              new ClipboardItem({
                // Note: This needs to use the promise based approach for safari/ios to not bail on a permissions error.
                [mimeType]: blobPromise
              })
            ]).catch((err) => {
              if (!err.toString().match(/^TypeError: DOMString not supported/)) {
                console.error(err);
              }
              blobPromise.then((blob) => {
                window.navigator.clipboard.write([
                  new ClipboardItem({
                    // Note: This needs to use the promise based approach for safari/ios to not bail on a permissions error.
                    [mimeType]: blob
                  })
                ]);
              });
            });
            break;
          }
          case "json": {
            const data = app.getContent(ids);
            if (window.navigator.clipboard) {
              const jsonStr = JSON.stringify(data);
              if (window.navigator.clipboard.write) {
                window.navigator.clipboard.write([
                  new ClipboardItem({
                    "text/plain": new Blob([jsonStr], { type: "text/plain" })
                  })
                ]);
              } else {
                fallbackWriteTextAsync(() => __async(this, null, function* () {
                  return jsonStr;
                }));
              }
            }
            break;
          }
          default:
            throw new Error(`Copy type ${format} not supported.`);
        }
      },
      [app, addToast, msg2]
    );
  }
  function getExportSvgElement(app, ids) {
    return __async(this, null, function* () {
      const svg = yield app.getSvg(ids, {
        scale: 1,
        background: app.instanceState.exportBackground
      });
      if (!svg)
        throw new Error("Could not construct SVG.");
      return svg;
    });
  }
  function getExportedSvgBlob(app, ids) {
    return __async(this, null, function* () {
      return new Blob([getSvgAsString(yield getExportSvgElement(app, ids))], {
        type: "text/plain"
      });
    });
  }
  function getExportedImageBlob(app, ids, format) {
    return __async(this, null, function* () {
      return yield getSvgAsImage(yield getExportSvgElement(app, ids), {
        type: format,
        quality: 1,
        scale: 2
      });
    });
  }
  function fallbackWriteTextAsync(getText) {
    return __async(this, null, function* () {
      navigator.clipboard.writeText(yield getText());
    });
  }

  // ../../../packages/ui/src/lib/hooks/useDialogsProvider.tsx
  var import_react76 = __toESM(require_react());
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var DialogsContext = (0, import_react76.createContext)({});
  function DialogsProvider({ children }) {
    const app = useApp();
    const trackEvent = useEvents();
    const [dialogs, setDialogs] = (0, import_react76.useState)([]);
    const addDialog = (0, import_react76.useCallback)(
      (dialog) => {
        var _a5;
        const id = (_a5 = dialog.id) != null ? _a5 : uniqueId();
        setDialogs((d3) => {
          return [...d3.filter((m3) => m3.id !== dialog.id), __spreadProps(__spreadValues({}, dialog), { id })];
        });
        trackEvent("open-menu", { source: "dialog", id });
        app.addOpenMenu(id);
        return id;
      },
      [app, trackEvent]
    );
    const updateDialog = (0, import_react76.useCallback)(
      (id, newDialogData) => {
        setDialogs(
          (d3) => d3.map((m3) => {
            if (m3.id === id) {
              return __spreadValues(__spreadValues({}, m3), newDialogData);
            }
            return m3;
          })
        );
        trackEvent("open-menu", { source: "dialog", id });
        app.addOpenMenu(id);
        return id;
      },
      [app, trackEvent]
    );
    const removeDialog = (0, import_react76.useCallback)(
      (id) => {
        setDialogs(
          (d3) => d3.filter((m3) => {
            var _a5;
            if (m3.id === id) {
              (_a5 = m3.onClose) == null ? void 0 : _a5.call(m3);
              return false;
            }
            return true;
          })
        );
        trackEvent("close-menu", { source: "dialog", id });
        app.deleteOpenMenu(id);
        return id;
      },
      [app, trackEvent]
    );
    const clearDialogs = (0, import_react76.useCallback)(() => {
      setDialogs((d3) => {
        d3.forEach((m3) => {
          var _a5;
          (_a5 = m3.onClose) == null ? void 0 : _a5.call(m3);
          trackEvent("close-menu", { source: "dialog", id: m3.id });
          app.deleteOpenMenu(m3.id);
        });
        return [];
      });
    }, [app, trackEvent]);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
      DialogsContext.Provider,
      {
        value: { dialogs, addDialog, removeDialog, clearDialogs, updateDialog },
        children
      }
    );
  }
  function useDialogs() {
    const ctx = (0, import_react76.useContext)(DialogsContext);
    if (!ctx) {
      throw new Error("useDialogs must be used within a DialogsProvider");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/hooks/useExportAs.ts
  var import_react77 = __toESM(require_react());
  function useExportAs() {
    const app = useApp();
    const { addToast } = useToasts();
    const msg2 = useTranslation();
    return (0, import_react77.useCallback)(
      function exportAs() {
        return __async(this, arguments, function* (ids = app.selectedIds, format = "png") {
          var _a5;
          if (ids.length === 0) {
            ids = [...app.shapeIds];
          }
          if (ids.length === 0) {
            return;
          }
          const svg = yield app.getSvg(ids, {
            scale: 1,
            background: app.instanceState.exportBackground
          });
          if (!svg)
            throw new Error("Could not construct SVG.");
          let name = "shapes";
          if (ids.length === 1) {
            const first = app.getShapeById(ids[0]);
            if (first.type === "frame") {
              name = (_a5 = first.props.name) != null ? _a5 : "frame";
            } else {
              name = first.id.replace(/:/, "_");
            }
          }
          switch (format) {
            case "svg": {
              const dataURL = yield getSvgAsDataUrl(svg);
              downloadDataURLAsFile(dataURL, `${name || "shapes"}.svg`);
              return;
            }
            case "webp":
            case "png": {
              const image = yield getSvgAsImage(svg, {
                type: format,
                quality: 1,
                scale: 2
              });
              if (!image) {
                addToast({
                  id: "export-fail",
                  // icon: 'error',
                  title: msg2("toast.error.export-fail.title"),
                  description: msg2("toast.error.export-fail.desc")
                });
                return;
              }
              const dataURL = URL.createObjectURL(image);
              downloadDataURLAsFile(dataURL, `${name || "shapes"}.${format}`);
              URL.revokeObjectURL(dataURL);
              return;
            }
            case "json": {
              const data = app.getContent(ids);
              const dataURL = URL.createObjectURL(
                new Blob([JSON.stringify(data, null, 4)], { type: "application/json" })
              );
              downloadDataURLAsFile(dataURL, `${name || "shapes"}.json`);
              URL.revokeObjectURL(dataURL);
              return;
            }
            default:
              throw new Error(`Export type ${format} not supported.`);
          }
        });
      },
      [app, addToast, msg2]
    );
  }

  // ../../../packages/ui/src/lib/hooks/useInsertMedia.ts
  var import_react78 = __toESM(require_react());
  function useInsertMedia() {
    const app = useApp();
    const inputRef = (0, import_react78.useRef)();
    (0, import_react78.useEffect)(() => {
      const input = window.document.createElement("input");
      input.type = "file";
      input.accept = ACCEPTED_ASSET_TYPE;
      input.multiple = true;
      inputRef.current = input;
      function onchange(e2) {
        return __async(this, null, function* () {
          const fileList = e2.target.files;
          if (!fileList || fileList.length === 0)
            return;
          yield createShapesFromFiles(app, Array.from(fileList), app.viewportPageBounds.center, false);
          input.value = "";
        });
      }
      input.addEventListener("change", onchange);
      return () => {
        inputRef.current = void 0;
        input.removeEventListener("change", onchange);
      };
    }, [app]);
    return (0, import_react78.useCallback)(() => {
      var _a5;
      (_a5 = inputRef.current) == null ? void 0 : _a5.click();
    }, [inputRef]);
  }

  // ../../../packages/ui/src/lib/hooks/usePrint.ts
  var import_react79 = __toESM(require_react());
  function usePrint() {
    const app = useApp();
    const prevPrintEl = (0, import_react79.useRef)(null);
    const prevStyleEl = (0, import_react79.useRef)(null);
    return (0, import_react79.useCallback)(
      function printSelectionOrPages() {
        return __async(this, null, function* () {
          const el = document.createElement("div");
          const style = document.createElement("style");
          const clearElements = (printEl, styleEl) => {
            if (printEl)
              printEl.innerHTML = "";
            if (styleEl && document.head.contains(styleEl))
              document.head.removeChild(styleEl);
            if (printEl && document.body.contains(printEl)) {
              document.body.removeChild(printEl);
            }
          };
          clearElements(prevPrintEl.current, prevStyleEl.current);
          prevPrintEl.current = el;
          prevStyleEl.current = style;
          const className = `tl-print-surface-${uniqueId()}`;
          el.className = className;
          const enableMargins = false;
          const allowAllPages = false;
          style.innerHTML = `
			.${className} {
				display: none;
			}

			.${className} svg {
				max-width: 100%;
				height: 100%;
				display: block;
			}

			@media print {				  
				html, body {
					min-height: 100%;
					height: 100%;
					margin: 0;
				}

				body {
					position: relative;
				}

				body > * {
					display: none;
				}

				.${className} {
					display: block !important;
					background: white;
					min-height: 100%;
					height: 100%;
					max-width: 100%;
				}

				.${className}__item {
					padding: 10mm;
					display: flex;
					min-height: 100%;
					flex-direction: column;
					page-break-after: always;
					position: relative;
					overflow: hidden;
					height: 100%;
				}

				.${className}__item__main {
					flex: 1;
					display: flex;
					align-items: center;
					justify-content: center;
					max-height: 100%;
				}

				.${className}__item__header {
					display: none;
				}

				.${className}__item__footer {
					display: none;
					text-align: right;
				}

				.${className}__item__footer__hide {
					display: none;
				}

				${!enableMargins ? "" : `
					/**
					 * Note: Safari doesn't support removing the page margins to remove them all!
					 */
					@page {
						margin:0;
					}

					.${className} .${className}__item__header {
						display: block;
					}

					.${className} .${className}__item__footer {
						display: block;
					}
				`}
			}

		`;
          const beforePrintHandler = () => {
            document.head.appendChild(style);
            document.body.appendChild(el);
          };
          const afterPrintHandler = () => {
            app.once("change-history", () => {
              clearElements(el, style);
            });
          };
          window.addEventListener("beforeprint", beforePrintHandler);
          window.addEventListener("afterprint", afterPrintHandler);
          function addPageToPrint(title, footer, svg) {
            try {
              el.innerHTML += `<div class="${className}__item">
        <div class="${className}__item__header">
          ${title.replace(/</g, "&lt;").replace(/>/g, "&gt;")}
        </div>
        <div class="${className}__item__main">
          ${svg.outerHTML}
        </div>
        <div class="${className}__item__footer ${className}__item__footer__${footer ? "" : "hide"}">
          ${footer != null ? footer : ""}
        </div>
      </div>`;
            } catch (e2) {
              console.error(e2);
            }
          }
          function triggerPrint() {
            if (app.isChromeForIos) {
              beforePrintHandler();
              window.print();
            } else if (app.isSafari) {
              beforePrintHandler();
              document.execCommand("print", false);
            } else {
              window.print();
            }
          }
          const { pages, currentPageId, selectedIds } = app;
          const preserveAspectRatio = "xMidYMid meet";
          const svgOpts = {
            scale: 1,
            background: false,
            darkMode: false,
            preserveAspectRatio
          };
          if (app.selectedIds.length > 0) {
            const svg = yield app.getSvg(selectedIds, svgOpts);
            if (svg) {
              const page = pages.find((p3) => p3.id === currentPageId);
              addPageToPrint(`tldraw \u2014 ${page == null ? void 0 : page.name}`, null, svg);
              triggerPrint();
            }
          } else {
            if (allowAllPages) {
              for (let i3 = 0; i3 < pages.length; i3++) {
                const page = pages[i3];
                const svg = yield app.getSvg(app.getSortedChildIds(page.id), svgOpts);
                if (svg) {
                  addPageToPrint(`tldraw \u2014 ${page.name}`, `${i3}/${pages.length}`, svg);
                }
              }
              triggerPrint();
            } else {
              const page = app.currentPage;
              const svg = yield app.getSvg(app.getSortedChildIds(page.id), svgOpts);
              if (svg) {
                addPageToPrint(`tldraw \u2014 ${page.name}`, null, svg);
                triggerPrint();
              }
            }
          }
          window.removeEventListener("beforeprint", beforePrintHandler);
          window.removeEventListener("afterprint", afterPrintHandler);
        });
      },
      [app]
    );
  }

  // ../../../packages/ui/src/lib/hooks/useActions.tsx
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var ActionsContext = React46.createContext({});
  function makeActions(actions) {
    return Object.fromEntries(actions.map((action) => [action.id, action]));
  }
  function ActionsProvider({ overrides, children }) {
    const app = useApp();
    const { addDialog, clearDialogs } = useDialogs();
    const { clearToasts } = useToasts();
    const insertMedia = useInsertMedia();
    const printSelectionOrPages = usePrint();
    const { cut, copy } = useMenuClipboardEvents("unknown");
    const copyAs = useCopyAs();
    const exportAs = useExportAs();
    const trackEvent = useEvents();
    const actions = React46.useMemo(() => {
      const actions2 = makeActions([
        {
          id: "edit-link",
          label: "action.edit-link",
          icon: "link",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("edit-link", { source });
            app.mark("edit-link");
            addDialog({ component: EditLinkDialog });
          }
        },
        {
          id: "insert-embed",
          label: "action.insert-embed",
          readonlyOk: false,
          kbd: "$i",
          onSelect(source) {
            trackEvent("insert-embed", { source });
            addDialog({ component: EmbedDialog });
          }
        },
        {
          id: "insert-media",
          label: "action.insert-media",
          kbd: "$u",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("insert-media", { source });
            insertMedia();
          }
        },
        {
          id: "undo",
          label: "action.undo",
          icon: "undo",
          kbd: "$z",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("undo", { source });
            app.undo();
          }
        },
        {
          id: "redo",
          label: "action.redo",
          icon: "redo",
          kbd: "$!z",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("redo", { source });
            app.redo();
          }
        },
        {
          id: "export-as-svg",
          label: "action.export-as-svg",
          menuLabel: "action.export-as-svg.short",
          contextMenuLabel: "action.export-as-svg.short",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("export-as", { format: "svg", source });
            exportAs(app.selectedIds, "svg");
          }
        },
        {
          id: "export-as-png",
          label: "action.export-as-png",
          menuLabel: "action.export-as-png.short",
          contextMenuLabel: "action.export-as-png.short",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("export-as", { format: "png", source });
            exportAs(app.selectedIds, "png");
          }
        },
        {
          id: "export-as-json",
          label: "action.export-as-json",
          menuLabel: "action.export-as-json.short",
          contextMenuLabel: "action.export-as-json.short",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("export-as", { format: "json", source });
            exportAs(app.selectedIds, "json");
          }
        },
        {
          id: "copy-as-svg",
          label: "action.copy-as-svg",
          menuLabel: "action.copy-as-svg.short",
          contextMenuLabel: "action.copy-as-svg.short",
          kbd: "$!c",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("copy-as", { format: "svg", source });
            copyAs(app.selectedIds, "svg");
          }
        },
        {
          id: "copy-as-png",
          label: "action.copy-as-png",
          menuLabel: "action.copy-as-png.short",
          contextMenuLabel: "action.copy-as-png.short",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("copy-as", { format: "png", source });
            copyAs(app.selectedIds, "png");
          }
        },
        {
          id: "copy-as-json",
          label: "action.copy-as-json",
          menuLabel: "action.copy-as-json.short",
          contextMenuLabel: "action.copy-as-json.short",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("copy-as", { format: "json", source });
            copyAs(app.selectedIds, "json");
          }
        },
        {
          id: "toggle-auto-size",
          label: "action.toggle-auto-size",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("toggle-auto-size", { source });
            app.mark();
            app.updateShapes(
              app.selectedShapes.filter((shape) => shape && shape.type === "text" && shape.props.autoSize === false).map((shape) => {
                return {
                  id: shape.id,
                  type: shape.type,
                  props: __spreadProps(__spreadValues({}, shape.props), {
                    w: 8,
                    autoSize: true
                  })
                };
              })
            );
          }
        },
        {
          id: "open-embed-link",
          label: "action.open-embed-link",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("open-embed-link", { source });
            const ids = app.selectedIds;
            const warnMsg = "No embed shapes selected";
            if (ids.length !== 1) {
              console.error(warnMsg);
              return;
            }
            const shape = app.getShapeById(ids[0]);
            if (!shape || !TLEmbedShapeDef.is(shape)) {
              console.error(warnMsg);
              return;
            }
            openWindow(shape.props.url, "_blank");
          }
        },
        {
          id: "convert-to-bookmark",
          label: "action.convert-to-bookmark",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("convert-to-bookmark", { source });
            const ids = app.selectedIds;
            const shapes = ids.map((id) => app.getShapeById(id));
            const createList = [];
            const deleteList = [];
            for (const shape of shapes) {
              if (!shape || !TLEmbedShapeDef.is(shape) || !shape.props.url)
                continue;
              const newPos = new Vec2d(shape.x, shape.y);
              newPos.rot(-shape.rotation);
              newPos.add(
                new Vec2d(
                  shape.props.w / 2 - DEFAULT_BOOKMARK_WIDTH / 2,
                  shape.props.h / 2 - DEFAULT_BOOKMARK_HEIGHT / 2
                )
              );
              newPos.rot(shape.rotation);
              createList.push({
                id: app.createShapeId(),
                type: "bookmark",
                rotation: shape.rotation,
                x: newPos.x,
                y: newPos.y,
                props: {
                  url: shape.props.url,
                  opacity: "1"
                }
              });
              deleteList.push(shape.id);
            }
            app.mark("convert shapes to bookmark");
            app.deleteShapes(deleteList);
            app.createShapes(createList);
          }
        },
        {
          id: "convert-to-embed",
          label: "action.convert-to-embed",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("convert-to-embed", { source });
            const ids = app.selectedIds;
            const shapes = compact(ids.map((id) => app.getShapeById(id)));
            const createList = [];
            const deleteList = [];
            for (const shape of shapes) {
              if (!TLBookmarkShapeDef.is(shape))
                continue;
              const { url } = shape.props;
              const embedInfo = getEmbedInfo(shape.props.url);
              if (!embedInfo)
                continue;
              if (!embedInfo.definition)
                continue;
              const { width, height, doesResize } = embedInfo.definition;
              const newPos = new Vec2d(shape.x, shape.y);
              newPos.rot(-shape.rotation);
              newPos.add(new Vec2d(shape.props.w / 2 - width / 2, shape.props.h / 2 - height / 2));
              newPos.rot(shape.rotation);
              createList.push({
                id: app.createShapeId(),
                type: "embed",
                x: newPos.x,
                y: newPos.y,
                rotation: shape.rotation,
                props: {
                  url,
                  w: width,
                  h: height,
                  doesResize
                }
              });
              deleteList.push(shape.id);
            }
            app.mark("convert shapes to embed");
            app.deleteShapes(deleteList);
            app.createShapes(createList);
          }
        },
        {
          id: "duplicate",
          kbd: "$d",
          label: "action.duplicate",
          icon: "duplicate",
          readonlyOk: false,
          onSelect(source) {
            if (app.currentToolId !== "select")
              return;
            trackEvent("duplicate-shapes", { source });
            const ids = app.selectedIds;
            const commonBounds = Box2d.Common(compact(ids.map((id) => app.getPageBoundsById(id))));
            const offset = app.canMoveCamera ? {
              x: commonBounds.width + 10,
              y: 0
            } : {
              x: 16 / app.zoomLevel,
              y: 16 / app.zoomLevel
            };
            app.mark("duplicate shapes");
            app.duplicateShapes(ids, offset);
          }
        },
        {
          id: "ungroup",
          label: "action.ungroup",
          kbd: "$!g",
          icon: "ungroup",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("ungroup-shapes", { source });
            app.mark("ungroup");
            app.ungroupShapes(app.selectedIds);
          }
        },
        {
          id: "group",
          label: "action.group",
          kbd: "$g",
          icon: "group",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("group-shapes", { source });
            if (app.selectedShapes.length === 1 && app.selectedShapes[0].type === "group") {
              app.mark("ungroup");
              app.ungroupShapes(app.selectedIds);
            } else {
              app.mark("group");
              app.groupShapes(app.selectedIds);
            }
          }
        },
        {
          id: "align-left",
          label: "action.align-left",
          kbd: "?A",
          icon: "align-left",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("align-shapes", { operation: "left", source });
            app.mark("align left");
            app.alignShapes("left", app.selectedIds);
          }
        },
        {
          id: "align-center-horizontal",
          label: "action.align-center-horizontal",
          contextMenuLabel: "action.align-center-horizontal.short",
          kbd: "?H",
          icon: "align-center-horizontal",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("align-shapes", { operation: "center-horizontal", source });
            app.mark("align center horizontal");
            app.alignShapes("center-horizontal", app.selectedIds);
          }
        },
        {
          id: "align-right",
          label: "action.align-right",
          kbd: "?D",
          icon: "align-right",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("align-shapes", { operation: "right", source });
            app.mark("align right");
            app.alignShapes("right", app.selectedIds);
          }
        },
        {
          id: "align-center-vertical",
          label: "action.align-center-vertical",
          contextMenuLabel: "action.align-center-vertical.short",
          kbd: "?V",
          icon: "align-center-vertical",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("align-shapes", { operation: "center-vertical", source });
            app.mark("align center vertical");
            app.alignShapes("center-vertical", app.selectedIds);
          }
        },
        {
          id: "align-top",
          label: "action.align-top",
          icon: "align-top",
          kbd: "?W",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("align-shapes", { operation: "top", source });
            app.mark("align top");
            app.alignShapes("top", app.selectedIds);
          }
        },
        {
          id: "align-bottom",
          label: "action.align-bottom",
          icon: "align-bottom",
          kbd: "?S",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("align-shapes", { operation: "bottom", source });
            app.mark("align bottom");
            app.alignShapes("bottom", app.selectedIds);
          }
        },
        {
          id: "distribute-horizontal",
          label: "action.distribute-horizontal",
          contextMenuLabel: "action.distribute-horizontal.short",
          icon: "distribute-horizontal",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("distribute-shapes", { operation: "horizontal", source });
            app.mark("distribute horizontal");
            app.distributeShapes("horizontal", app.selectedIds);
          }
        },
        {
          id: "distribute-vertical",
          label: "action.distribute-vertical",
          contextMenuLabel: "action.distribute-vertical.short",
          icon: "distribute-vertical",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("distribute-shapes", { operation: "vertical", source });
            app.mark("distribute vertical");
            app.distributeShapes("vertical", app.selectedIds);
          }
        },
        {
          id: "stretch-horizontal",
          label: "action.stretch-horizontal",
          contextMenuLabel: "action.stretch-horizontal.short",
          icon: "stretch-horizontal",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("stretch-shapes", { operation: "horizontal", source });
            app.mark("stretch horizontal");
            app.stretchShapes("horizontal", app.selectedIds);
          }
        },
        {
          id: "stretch-vertical",
          label: "action.stretch-vertical",
          contextMenuLabel: "action.stretch-vertical.short",
          icon: "stretch-vertical",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("stretch-shapes", { operation: "vertical", source });
            app.mark("stretch vertical");
            app.stretchShapes("vertical", app.selectedIds);
          }
        },
        {
          id: "flip-horizontal",
          label: "action.flip-horizontal",
          contextMenuLabel: "action.flip-horizontal.short",
          kbd: "!h",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("flip-shapes", { operation: "horizontal", source });
            app.mark("flip horizontal");
            app.flipShapes("horizontal", app.selectedIds);
          }
        },
        {
          id: "flip-vertical",
          label: "action.flip-vertical",
          contextMenuLabel: "action.flip-vertical.short",
          kbd: "!v",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("flip-shapes", { operation: "vertical", source });
            app.mark("flip vertical");
            app.flipShapes("vertical", app.selectedIds);
          }
        },
        {
          id: "pack",
          label: "action.pack",
          icon: "pack",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("pack-shapes", { source });
            app.mark("pack");
            app.packShapes(app.selectedIds);
          }
        },
        {
          id: "stack-vertical",
          label: "action.stack-vertical",
          contextMenuLabel: "action.stack-vertical.short",
          icon: "stack-vertical",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("stack-shapes", { operation: "vertical", source });
            app.mark("stack-vertical");
            app.stackShapes("vertical", app.selectedIds);
          }
        },
        {
          id: "stack-horizontal",
          label: "action.stack-horizontal",
          contextMenuLabel: "action.stack-horizontal.short",
          icon: "stack-horizontal",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("stack-shapes", { operation: "horizontal", source });
            app.mark("stack-horizontal");
            app.stackShapes("horizontal", app.selectedIds);
          }
        },
        {
          id: "bring-to-front",
          label: "action.bring-to-front",
          kbd: "]",
          icon: "bring-to-front",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("reorder-shapes", { operation: "toFront", source });
            app.mark("bring to front");
            app.bringToFront();
          }
        },
        {
          id: "bring-forward",
          label: "action.bring-forward",
          icon: "bring-forward",
          kbd: "?]",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("reorder-shapes", { operation: "forward", source });
            app.mark("bring forward");
            app.bringForward();
          }
        },
        {
          id: "send-backward",
          label: "action.send-backward",
          icon: "send-backward",
          kbd: "?[",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("reorder-shapes", { operation: "backward", source });
            app.mark("send backward");
            app.sendBackward();
          }
        },
        {
          id: "send-to-back",
          label: "action.send-to-back",
          icon: "send-to-back",
          kbd: "[",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("reorder-shapes", { operation: "toBack", source });
            app.mark("send to back");
            app.sendToBack();
          }
        },
        {
          id: "cut",
          label: "action.cut",
          kbd: "$x",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("cut", { source });
            app.mark("cut");
            cut();
          }
        },
        {
          id: "copy",
          label: "action.copy",
          kbd: "$c",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("copy", { source });
            copy();
          }
        },
        {
          id: "paste",
          label: "action.paste",
          kbd: "$v",
          readonlyOk: false,
          onSelect() {
          }
        },
        {
          id: "select-all",
          label: "action.select-all",
          kbd: "$a",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("select-all-shapes", { source });
            if (app.currentToolId !== "select") {
              app.cancel();
              app.setSelectedTool("select");
            }
            app.mark("select all kbd");
            app.selectAll();
          }
        },
        {
          id: "select-none",
          label: "action.select-none",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("select-none-shapes", { source });
            app.mark("select none");
            app.selectNone();
          }
        },
        {
          id: "delete",
          label: "action.delete",
          kbd: "\u232B",
          icon: "trash",
          readonlyOk: false,
          onSelect(source) {
            if (app.currentToolId !== "select")
              return;
            trackEvent("delete-shapes", { source });
            app.mark("delete");
            app.deleteShapes();
          }
        },
        {
          id: "rotate-cw",
          label: "action.rotate-cw",
          icon: "rotate-cw",
          readonlyOk: false,
          onSelect(source) {
            if (app.selectedIds.length === 0)
              return;
            trackEvent("rotate-cw", { source });
            app.mark("rotate-cw");
            const offset = app.selectionRotation % (TAU / 2);
            const dontUseOffset = approximately(offset, 0) || approximately(offset, TAU / 2);
            app.rotateShapesBy(app.selectedIds, TAU / 2 - (dontUseOffset ? 0 : offset));
          }
        },
        {
          id: "rotate-ccw",
          label: "action.rotate-ccw",
          icon: "rotate-ccw",
          readonlyOk: false,
          onSelect(source) {
            if (app.selectedIds.length === 0)
              return;
            trackEvent("rotate-ccw", { source });
            app.mark("rotate-ccw");
            const offset = app.selectionRotation % (TAU / 2);
            const offsetCloseToZero = approximately(offset, 0);
            app.rotateShapesBy(app.selectedIds, offsetCloseToZero ? -(TAU / 2) : -offset);
          }
        },
        {
          id: "zoom-in",
          label: "action.zoom-in",
          kbd: "$=",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-in", { source });
            app.zoomIn(app.viewportScreenCenter, { duration: ANIMATION_MEDIUM_MS });
          }
        },
        {
          id: "zoom-out",
          label: "action.zoom-out",
          kbd: "$-",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-out", { source });
            app.zoomOut(app.viewportScreenCenter, { duration: ANIMATION_MEDIUM_MS });
          }
        },
        {
          id: "zoom-to-100",
          label: "action.zoom-to-100",
          icon: "reset-zoom",
          kbd: "!0",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("reset-zoom", { source });
            app.resetZoom(app.viewportScreenCenter, { duration: ANIMATION_MEDIUM_MS });
          }
        },
        {
          id: "zoom-to-fit",
          label: "action.zoom-to-fit",
          kbd: "!1",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-to-fit", { source });
            app.zoomToFit({ duration: ANIMATION_MEDIUM_MS });
          }
        },
        {
          id: "zoom-to-selection",
          label: "action.zoom-to-selection",
          kbd: "!2",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-to-selection", { source });
            app.zoomToSelection({ duration: ANIMATION_MEDIUM_MS });
          }
        },
        {
          id: "toggle-snap-mode",
          label: "action.toggle-snap-mode",
          menuLabel: "action.toggle-snap-mode.menu",
          readonlyOk: false,
          onSelect(source) {
            trackEvent("toggle-snap-mode", { source });
            app.setSnapMode(!app.isSnapMode);
          },
          checkbox: true
        },
        {
          id: "toggle-dark-mode",
          label: "action.toggle-dark-mode",
          menuLabel: "action.toggle-dark-mode.menu",
          kbd: "$/",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("toggle-dark-mode", { source });
            app.setDarkMode(!app.isDarkMode);
          },
          checkbox: true
        },
        {
          id: "toggle-transparent",
          label: "action.toggle-transparent",
          menuLabel: "action.toggle-transparent.menu",
          contextMenuLabel: "action.toggle-transparent.context-menu",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("toggle-transparent", { source });
            app.updateInstanceState(
              {
                exportBackground: !app.instanceState.exportBackground
              },
              true
            );
          },
          checkbox: true
        },
        {
          id: "toggle-tool-lock",
          label: "action.toggle-tool-lock",
          menuLabel: "action.toggle-tool-lock.menu",
          readonlyOk: false,
          kbd: "q",
          onSelect(source) {
            trackEvent("toggle-tool-lock", { source });
            app.setToolLocked(!app.isToolLocked);
          },
          checkbox: true
        },
        {
          id: "toggle-focus-mode",
          label: "action.toggle-focus-mode",
          menuLabel: "action.toggle-focus-mode.menu",
          readonlyOk: true,
          kbd: "$.",
          checkbox: true,
          onSelect(source) {
            requestAnimationFrame(() => {
              app.batch(() => {
                trackEvent("toggle-focus-mode", { source });
                clearDialogs();
                clearToasts();
                app.setFocusMode(!app.isFocusMode);
              });
            });
          }
        },
        {
          id: "toggle-grid",
          label: "action.toggle-grid",
          menuLabel: "action.toggle-grid.menu",
          readonlyOk: true,
          kbd: "$'",
          onSelect(source) {
            trackEvent("toggle-grid-mode", { source });
            app.setGridMode(!app.isGridMode);
          },
          checkbox: true
        },
        {
          id: "toggle-debug-mode",
          label: "action.toggle-debug-mode",
          menuLabel: "action.toggle-debug-mode.menu",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("toggle-debug-mode", { source });
            app.updateInstanceState(
              {
                isDebugMode: !app.instanceState.isDebugMode
              },
              true
            );
          },
          checkbox: true
        },
        {
          id: "print",
          label: "action.print",
          kbd: "$p",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("print", { source });
            printSelectionOrPages();
          }
        },
        {
          id: "exit-pen-mode",
          label: "action.exit-pen-mode",
          icon: "cross-2",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("exit-pen-mode", { source });
            app.setPenMode(false);
          }
        },
        {
          id: "stop-following",
          label: "action.stop-following",
          icon: "cross-2",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("stop-following", { source });
            app.stopFollowingUser();
          }
        },
        {
          id: "back-to-content",
          label: "action.back-to-content",
          icon: "arrow-left",
          readonlyOk: true,
          onSelect(source) {
            trackEvent("zoom-to-content", { source });
            app.zoomToContent();
          }
        }
      ]);
      if (overrides) {
        return overrides(app, actions2, void 0);
      }
      return actions2;
    }, [
      trackEvent,
      overrides,
      app,
      addDialog,
      insertMedia,
      exportAs,
      copyAs,
      cut,
      copy,
      clearDialogs,
      clearToasts,
      printSelectionOrPages
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(ActionsContext.Provider, { value: asActions(actions), children });
  }
  function useActions() {
    const ctx = React46.useContext(ActionsContext);
    if (!ctx) {
      throw new Error("useTools must be used within a ToolProvider");
    }
    return ctx;
  }
  function asActions(actions) {
    return actions;
  }

  // ../../../packages/ui/src/lib/hooks/useActionsMenuSchema.tsx
  var import_react81 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/menuHelpers.ts
  function compactMenuItems(arr) {
    return arr.filter((i3) => i3 !== void 0 && i3 !== null && i3 !== false);
  }
  function menuGroup(id, ...children) {
    const childItems = compactMenuItems(children);
    if (childItems.length === 0)
      return null;
    return {
      id,
      type: "group",
      checkbox: childItems.every((child) => child.type === "item" && child.actionItem.checkbox),
      disabled: childItems.every((child) => child.disabled),
      readonlyOk: childItems.some((child) => child.readonlyOk),
      children: childItems
    };
  }
  function menuSubmenu(id, label, ...children) {
    const childItems = compactMenuItems(children);
    if (childItems.length === 0)
      return null;
    return {
      id,
      type: "submenu",
      label,
      children: childItems,
      disabled: childItems.every((child) => child.disabled),
      readonlyOk: childItems.some((child) => child.readonlyOk)
    };
  }
  function menuCustom(id, opts = {}) {
    const { readonlyOk = true, disabled = false } = opts;
    return {
      id,
      type: "custom",
      disabled,
      readonlyOk
    };
  }
  function menuItem(actionItem, opts = {}) {
    if (!actionItem) {
      throw Error("No action item provided to menuItem");
    }
    if (!actionItem.label) {
      throw Error("Trying to create menu item for action item that doesn't have a label");
    }
    const { checked = false, disabled = false } = opts;
    return {
      id: actionItem.id,
      type: "item",
      actionItem,
      disabled,
      checked,
      readonlyOk: actionItem.readonlyOk
    };
  }
  function shapesWithUnboundArrows(app) {
    const { selectedIds } = app;
    const selectedShapes = selectedIds.map((id) => {
      return app.getShapeById(id);
    });
    return selectedShapes.filter((shape) => {
      if (!shape)
        return false;
      if (TLArrowShapeDef.is(shape) && shape.props.start.type === "binding") {
        return false;
      }
      if (TLArrowShapeDef.is(shape) && shape.props.end.type === "binding") {
        return false;
      }
      return true;
    });
  }
  var useThreeStackableItems = () => {
    const app = useApp();
    return useValue("threeStackableItems", () => shapesWithUnboundArrows(app).length > 2, [app]);
  };
  var useAllowGroup = () => {
    const app = useApp();
    return useValue("allowGroup", () => shapesWithUnboundArrows(app).length > 1, [app]);
  };
  var useAllowUngroup = () => {
    const app = useApp();
    return useValue(
      "allowUngroup",
      () => app.selectedIds.some((id) => {
        var _a5;
        return ((_a5 = app.getShapeById(id)) == null ? void 0 : _a5.type) === "group";
      }),
      []
    );
  };
  var showMenuPaste = typeof window !== "undefined" && "navigator" in window && Boolean(navigator.clipboard) && Boolean(navigator.clipboard.read);

  // ../../../packages/ui/src/lib/hooks/useBreakpoint.tsx
  var import_react80 = __toESM(require_react());

  // ../../../packages/ui/src/lib/constants.ts
  var PORTRAIT_BREAKPOINTS = [0, 380, 420, 460, 580, 640, 840, 1023];

  // ../../../packages/ui/src/lib/hooks/useBreakpoint.tsx
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var BreakpointContext = import_react80.default.createContext(0);
  function BreakPointProvider({ children }) {
    const app = useApp();
    const breakpoint = useValue(
      "breakpoint",
      () => {
        const { width } = app.viewportScreenBounds;
        const breakpoints = PORTRAIT_BREAKPOINTS;
        for (let i3 = 0; i3 < breakpoints.length - 1; i3++) {
          if (width > breakpoints[i3] && width <= breakpoints[i3 + 1]) {
            return i3;
          }
        }
        return breakpoints.length;
      },
      [app]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(BreakpointContext.Provider, { value: breakpoint, children });
  }
  function useBreakpoint() {
    let breakpoint = (0, import_react80.useContext)(BreakpointContext);
    const layoutQuery = new URL(window.location.href).searchParams.get("layout");
    if (layoutQuery === "desktop") {
      breakpoint = 7;
    } else if (layoutQuery === "mobile") {
      breakpoint = 1;
    }
    return breakpoint;
  }

  // ../../../packages/ui/src/lib/hooks/useHasLinkShapeSelected.ts
  function useHasLinkShapeSelected() {
    const app = useApp();
    return useValue(
      "hasLinkShapeSelected",
      () => {
        const { selectedShapes } = app;
        return selectedShapes.length === 1 && "url" in selectedShapes[0].props && selectedShapes[0].type !== "embed";
      },
      [app]
    );
  }

  // ../../../packages/ui/src/lib/hooks/useActionsMenuSchema.tsx
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var ActionsMenuSchemaContext = import_react81.default.createContext({});
  var ActionsMenuSchemaProvider = track(function ActionsMenuSchemaProvider2({
    overrides,
    children
  }) {
    const app = useApp();
    const actions = useActions();
    const selectedCount = app.selectedIds.length;
    const oneSelected = selectedCount > 0;
    const twoSelected = selectedCount > 1;
    const threeSelected = selectedCount > 2;
    const threeStackableItems = useThreeStackableItems();
    const allowGroup = useAllowGroup();
    const allowUngroup = useAllowUngroup();
    const showEditLink = useHasLinkShapeSelected();
    const breakpoint = useBreakpoint();
    const isZoomedTo100 = app.zoomLevel === 1;
    const actionMenuSchema = (0, import_react81.useMemo)(() => {
      const results = [
        menuItem(actions["align-left"], { disabled: !twoSelected }),
        menuItem(actions["align-center-horizontal"], { disabled: !twoSelected }),
        menuItem(actions["align-right"], { disabled: !twoSelected }),
        menuItem(actions["stretch-horizontal"], { disabled: !twoSelected }),
        menuItem(actions["align-top"], { disabled: !twoSelected }),
        menuItem(actions["align-center-vertical"], { disabled: !twoSelected }),
        menuItem(actions["align-bottom"], { disabled: !twoSelected }),
        menuItem(actions["stretch-vertical"], { disabled: !twoSelected }),
        menuItem(actions["distribute-horizontal"], { disabled: !threeSelected }),
        menuItem(actions["distribute-vertical"], { disabled: !threeSelected }),
        menuItem(actions["stack-horizontal"], { disabled: !threeStackableItems }),
        menuItem(actions["stack-vertical"], { disabled: !threeStackableItems }),
        menuItem(actions["send-to-back"], { disabled: !oneSelected }),
        menuItem(actions["send-backward"], { disabled: !oneSelected }),
        menuItem(actions["bring-forward"], { disabled: !oneSelected }),
        menuItem(actions["bring-to-front"], { disabled: !oneSelected }),
        breakpoint < 5 ? menuItem(actions["zoom-to-100"], { disabled: !!isZoomedTo100 }) : menuItem(actions["rotate-ccw"], { disabled: !oneSelected }),
        menuItem(actions["rotate-cw"], { disabled: !oneSelected }),
        menuItem(actions["edit-link"], { disabled: !showEditLink }),
        allowGroup ? menuItem(actions["group"], { disabled: !twoSelected }) : allowUngroup ? menuItem(actions["ungroup"]) : menuItem(actions["group"], { disabled: !twoSelected })
      ];
      if (overrides) {
        return overrides(app, results, { actions, oneSelected, twoSelected, threeSelected });
      }
      return results;
    }, [
      app,
      isZoomedTo100,
      allowGroup,
      overrides,
      actions,
      oneSelected,
      twoSelected,
      threeSelected,
      threeStackableItems,
      allowUngroup,
      showEditLink,
      breakpoint
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(ActionsMenuSchemaContext.Provider, { value: actionMenuSchema, children });
  });
  function useActionsMenuSchema() {
    const ctx = import_react81.default.useContext(ActionsMenuSchemaContext);
    if (!ctx) {
      throw new Error("useActionsMenuSchema must be used inside of a ActionsMenuSchemaProvider.");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/hooks/useContextMenuSchema.tsx
  var import_react82 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useOnlyFlippableShape.ts
  function useOnlyFlippableShape() {
    const app = useApp();
    return useValue(
      "onlyFlippableShape",
      () => {
        const { selectedShapes } = app;
        return selectedShapes.length === 1 && selectedShapes.every((shape) => shape.type === "group" || isShapeWithHandles(shape));
      },
      [app]
    );
  }

  // ../../../packages/ui/src/lib/hooks/useShowAutoSizeToggle.ts
  function useShowAutoSizeToggle() {
    const app = useApp();
    return useValue(
      "showAutoSizeToggle",
      () => {
        const { selectedShapes } = app;
        return selectedShapes.length === 1 && selectedShapes[0].type === "text" && selectedShapes[0].props.autoSize === false;
      },
      [app]
    );
  }

  // ../../../packages/ui/src/lib/hooks/useContextMenuSchema.tsx
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  var ContextMenuSchemaContext = import_react82.default.createContext({});
  var ContextMenuSchemaProvider = track(function ContextMenuSchemaProvider2({
    overrides,
    children
  }) {
    var _a5;
    const app = useApp();
    const actions = useActions();
    const showAutoSizeToggle = useShowAutoSizeToggle();
    const onlyFlippableShapeSelected = useOnlyFlippableShape();
    const selectedCount = app.selectedIds.length;
    const oneSelected = selectedCount > 0;
    const oneEmbedSelected = useValue(
      "oneEmbedSelected",
      () => {
        if (app.selectedIds.length !== 1)
          return false;
        return app.selectedIds.some((selectedId) => {
          const shape = app.getShapeById(selectedId);
          return shape && TLEmbedShapeDef.is(shape) && shape.props.url;
        });
      },
      []
    );
    const oneEmbeddableBookmarkSelected = useValue(
      "oneEmbeddableBookmarkSelected",
      () => {
        if (app.selectedIds.length !== 1)
          return false;
        return app.selectedIds.some((selectedId) => {
          const shape = app.getShapeById(selectedId);
          return shape && TLBookmarkShapeDef.is(shape) && getEmbedInfo(shape.props.url);
        });
      },
      []
    );
    const twoSelected = selectedCount > 1;
    const threeSelected = selectedCount > 2;
    const threeStackableItems = useThreeStackableItems();
    const atLeastOneShapeOnPage = useValue("atLeastOneShapeOnPage", () => app.shapeIds.size > 0, []);
    const isTransparentBg = useValue("isTransparentBg", () => app.instanceState.exportBackground, []);
    const allowGroup = useAllowGroup();
    const allowUngroup = useAllowUngroup();
    const hasClipboardWrite = Boolean((_a5 = window.navigator.clipboard) == null ? void 0 : _a5.write);
    const showEditLink = useHasLinkShapeSelected();
    const contextMenuSchema = (0, import_react82.useMemo)(() => {
      let contextMenuSchema2 = compactMenuItems([
        menuGroup(
          "selection",
          oneEmbedSelected && menuItem(actions["open-embed-link"]),
          oneEmbedSelected && menuItem(actions["convert-to-bookmark"]),
          oneEmbeddableBookmarkSelected && menuItem(actions["convert-to-embed"]),
          showAutoSizeToggle && menuItem(actions["toggle-auto-size"]),
          showEditLink && menuItem(actions["edit-link"]),
          oneSelected && menuItem(actions["duplicate"]),
          allowGroup && menuItem(actions["group"]),
          allowUngroup && menuItem(actions["ungroup"])
        ),
        menuGroup(
          "modify",
          (twoSelected || onlyFlippableShapeSelected) && menuSubmenu(
            "arrange",
            "context-menu.arrange",
            twoSelected && menuGroup(
              "align",
              menuItem(actions["align-left"]),
              menuItem(actions["align-center-horizontal"]),
              menuItem(actions["align-right"]),
              menuItem(actions["align-top"]),
              menuItem(actions["align-center-vertical"]),
              menuItem(actions["align-bottom"])
            ),
            threeSelected && menuGroup(
              "distribute",
              menuItem(actions["distribute-horizontal"]),
              menuItem(actions["distribute-vertical"])
            ),
            twoSelected && menuGroup(
              "stretch",
              menuItem(actions["stretch-horizontal"]),
              menuItem(actions["stretch-vertical"])
            ),
            onlyFlippableShapeSelected && menuGroup(
              "flip",
              menuItem(actions["flip-horizontal"]),
              menuItem(actions["flip-vertical"])
            ),
            twoSelected && menuGroup(
              "order",
              menuItem(actions["pack"], { disabled: !twoSelected }),
              threeStackableItems && menuItem(actions["stack-vertical"]),
              threeStackableItems && menuItem(actions["stack-horizontal"])
            )
          ),
          oneSelected && menuSubmenu(
            "reorder",
            "context-menu.reorder",
            menuGroup(
              "reorder",
              menuItem(actions["bring-to-front"]),
              menuItem(actions["bring-forward"]),
              menuItem(actions["send-backward"]),
              menuItem(actions["send-to-back"])
            )
          ),
          oneSelected && menuCustom("MOVE_TO_PAGE_MENU", { readonlyOk: false })
        ),
        menuGroup(
          "clipboard-group",
          oneSelected && menuItem(actions["cut"]),
          oneSelected && menuItem(actions["copy"]),
          showMenuPaste && menuCustom("MENU_PASTE", { readonlyOk: false })
        ),
        atLeastOneShapeOnPage && menuGroup(
          "conversions",
          menuSubmenu(
            "copy-as",
            "context-menu.copy-as",
            menuGroup(
              "copy-as-group",
              menuItem(actions["copy-as-svg"]),
              hasClipboardWrite && menuItem(actions["copy-as-png"]),
              menuItem(actions["copy-as-json"])
            ),
            menuGroup(
              "export-bg",
              menuItem(actions["toggle-transparent"], { checked: !isTransparentBg })
            )
          ),
          menuSubmenu(
            "export-as",
            "context-menu.export-as",
            menuGroup(
              "export-as-group",
              menuItem(actions["export-as-svg"]),
              menuItem(actions["export-as-png"]),
              menuItem(actions["export-as-json"])
            ),
            menuGroup(
              "export-bg,",
              menuItem(actions["toggle-transparent"], { checked: !isTransparentBg })
            )
          )
        ),
        atLeastOneShapeOnPage && menuGroup(
          "set-selection-group",
          menuItem(actions["select-all"]),
          oneSelected && menuItem(actions["select-none"])
        ),
        oneSelected && menuGroup("delete-group", menuItem(actions["delete"]))
      ]);
      if (overrides) {
        contextMenuSchema2 = overrides(app, contextMenuSchema2, {
          actions,
          oneSelected,
          twoSelected,
          threeSelected,
          showAutoSizeToggle,
          showUngroup: allowUngroup,
          onlyFlippableShapeSelected
        });
      }
      return contextMenuSchema2;
    }, [
      app,
      overrides,
      actions,
      oneSelected,
      twoSelected,
      threeSelected,
      showAutoSizeToggle,
      onlyFlippableShapeSelected,
      atLeastOneShapeOnPage,
      threeStackableItems,
      allowGroup,
      allowUngroup,
      hasClipboardWrite,
      showEditLink,
      oneEmbedSelected,
      oneEmbeddableBookmarkSelected,
      isTransparentBg
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(ContextMenuSchemaContext.Provider, { value: contextMenuSchema, children });
  });
  function useContextMenuSchema() {
    const ctx = import_react82.default.useContext(ContextMenuSchemaContext);
    if (!ctx) {
      throw new Error("useContextMenuSchema must be used inside of a ContextMenuSchemaProvider.");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/hooks/useHelpMenuSchema.tsx
  var import_react84 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useKeyboardShortcutsSchema.tsx
  var import_react83 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useTools.tsx
  var React50 = __toESM(require_react());
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var ToolsContext = React50.createContext({});
  function ToolsProvider({ overrides, children }) {
    const app = useApp();
    const trackEvent = useEvents();
    const { addDialog } = useDialogs();
    const insertMedia = useInsertMedia();
    const tools = React50.useMemo(() => {
      const tools2 = makeTools([
        {
          id: "select",
          label: "tool.select",
          icon: "tool-pointer",
          kbd: "v",
          readonlyOk: true,
          onSelect(source) {
            app.setSelectedTool("select");
            trackEvent("select-tool", { source, id: "select" });
          }
        },
        {
          id: "hand",
          label: "tool.hand",
          icon: "tool-hand",
          kbd: "h",
          readonlyOk: true,
          onSelect(source) {
            app.setSelectedTool("hand");
            trackEvent("select-tool", { source, id: "hand" });
          }
        },
        {
          id: "eraser",
          label: "tool.eraser",
          icon: "tool-eraser",
          kbd: "e",
          readonlyOk: false,
          onSelect(source) {
            app.setSelectedTool("eraser");
            trackEvent("select-tool", { source, id: "eraser" });
          }
        },
        {
          id: "draw",
          label: "tool.draw",
          readonlyOk: false,
          icon: "tool-pencil",
          kbd: "d,b,x",
          onSelect(source) {
            app.setSelectedTool("draw");
            trackEvent("select-tool", { source, id: "draw" });
          }
        },
        ...[...TL_GEO_TYPES].map((id) => ({
          id,
          label: `tool.${id}`,
          readonlyOk: false,
          meta: {
            geo: id
          },
          kbd: id === "rectangle" ? "r" : id === "ellipse" ? "o" : void 0,
          icon: "geo-" + id,
          onSelect(source) {
            app.batch(() => {
              app.updateInstanceState(
                { propsForNextShape: __spreadProps(__spreadValues({}, app.instanceState.propsForNextShape), { geo: id }) },
                true
              );
              app.setSelectedTool("geo");
              trackEvent("select-tool", { source, id: `geo-${id}` });
            });
          }
        })),
        {
          id: "arrow",
          label: "tool.arrow",
          readonlyOk: false,
          icon: "tool-arrow",
          kbd: "a",
          onSelect(source) {
            app.setSelectedTool("arrow");
            trackEvent("select-tool", { source, id: "arrow" });
          }
        },
        {
          id: "line",
          label: "tool.line",
          readonlyOk: false,
          icon: "tool-line",
          kbd: "l",
          onSelect(source) {
            app.setSelectedTool("line");
            trackEvent("select-tool", { source, id: "line" });
          }
        },
        {
          id: "frame",
          label: "tool.frame",
          readonlyOk: false,
          icon: "tool-frame",
          kbd: "f",
          onSelect(source) {
            app.setSelectedTool("frame");
            trackEvent("select-tool", { source, id: "frame" });
          }
        },
        {
          id: "text",
          label: "tool.text",
          readonlyOk: false,
          icon: "tool-text",
          kbd: "t",
          onSelect(source) {
            app.setSelectedTool("text");
            trackEvent("select-tool", { source, id: "text" });
          }
        },
        {
          id: "asset",
          label: "tool.asset",
          readonlyOk: false,
          icon: "tool-media",
          kbd: "$u",
          onSelect(source) {
            insertMedia();
            trackEvent("select-tool", { source, id: "media" });
          }
        },
        {
          id: "note",
          label: "tool.note",
          readonlyOk: false,
          icon: "tool-note",
          kbd: "n",
          onSelect(source) {
            app.setSelectedTool("note");
            trackEvent("select-tool", { source, id: "note" });
          }
        },
        {
          id: "embed",
          label: "tool.embed",
          readonlyOk: false,
          icon: "tool-embed",
          onSelect(source) {
            addDialog({ component: EmbedDialog });
            trackEvent("select-tool", { source, id: "embed" });
          }
        }
      ]);
      if (overrides) {
        return overrides(app, tools2, { insertMedia });
      }
      return tools2;
    }, [app, trackEvent, overrides, insertMedia, addDialog]);
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(ToolsContext.Provider, { value: tools, children });
  }
  function makeTools(tools) {
    return Object.fromEntries(tools.map((t4) => [t4.id, t4]));
  }
  function useTools() {
    const ctx = React50.useContext(ToolsContext);
    if (!ctx) {
      throw new Error("useTools must be used within a ToolProvider");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/hooks/useKeyboardShortcutsSchema.tsx
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var KeyboardShortcutsSchemaContext = import_react83.default.createContext(
    {}
  );
  var KeyboardShortcutsSchemaProvider = track(function KeyboardShortcutsSchemaProvider2({
    overrides,
    children
  }) {
    const app = useApp();
    const tools = useTools();
    const actions = useActions();
    const keyboardShortcutsSchema = (0, import_react83.useMemo)(() => {
      const keyboardShortcutsSchema2 = compact([
        menuGroup(
          "shortcuts-dialog.tools",
          menuItem(actions["toggle-tool-lock"]),
          menuItem(tools["select"]),
          menuItem(tools["draw"]),
          menuItem(tools["eraser"]),
          menuItem(tools["hand"]),
          menuItem(tools["rectangle"]),
          menuItem(tools["ellipse"]),
          menuItem(tools["arrow"]),
          menuItem(tools["line"]),
          menuItem(tools["text"]),
          menuItem(tools["frame"]),
          menuItem(tools["note"])
        ),
        menuGroup(
          "shortcuts-dialog.file",
          menuItem(actions["insert-media"]),
          menuItem(actions["print"])
        ),
        menuGroup(
          "shortcuts-dialog.preferences",
          menuItem(actions["toggle-dark-mode"]),
          menuItem(actions["toggle-focus-mode"]),
          menuItem(actions["toggle-grid"])
        ),
        menuGroup(
          "shortcuts-dialog.edit",
          menuItem(actions["undo"]),
          menuItem(actions["redo"]),
          menuItem(actions["cut"]),
          menuItem(actions["copy"]),
          menuItem(actions["paste"]),
          menuItem(actions["select-all"]),
          menuItem(actions["delete"]),
          menuItem(actions["duplicate"]),
          menuItem(actions["export-as-svg"]),
          menuItem(actions["export-as-png"])
        ),
        menuGroup(
          "shortcuts-dialog.view",
          menuItem(actions["zoom-in"]),
          menuItem(actions["zoom-out"]),
          menuItem(actions["zoom-to-100"]),
          menuItem(actions["zoom-to-fit"]),
          menuItem(actions["zoom-to-selection"])
        ),
        menuGroup(
          "shortcuts-dialog.transform",
          menuItem(actions["bring-to-front"]),
          menuItem(actions["bring-forward"]),
          menuItem(actions["send-backward"]),
          menuItem(actions["send-to-back"]),
          menuItem(actions["group"]),
          menuItem(actions["ungroup"]),
          menuItem(actions["flip-horizontal"]),
          menuItem(actions["flip-vertical"]),
          menuItem(actions["align-top"]),
          menuItem(actions["align-center-vertical"]),
          menuItem(actions["align-bottom"]),
          menuItem(actions["align-left"]),
          menuItem(actions["align-center-horizontal"]),
          menuItem(actions["align-right"])
        )
      ]);
      if (overrides) {
        return overrides(app, keyboardShortcutsSchema2, { tools, actions });
      }
      return keyboardShortcutsSchema2;
    }, [app, overrides, actions, tools]);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(KeyboardShortcutsSchemaContext.Provider, { value: keyboardShortcutsSchema, children });
  });
  function useKeyboardShortcutsSchema() {
    const ctx = import_react83.default.useContext(KeyboardShortcutsSchemaContext);
    if (!ctx) {
      throw new Error("Shortcuts must be used inside of a ShortcutsProvider.");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/hooks/useReadonly.ts
  function useReadonly() {
    const app = useApp();
    return useValue("isReadOnlyMode", () => app.isReadOnly, [app]);
  }

  // ../../../packages/ui/src/lib/components/KeyboardShortcutsDialog.tsx
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var KeyboardShortcutsDialog = () => {
    const msg2 = useTranslation();
    const isReadonly = useReadonly();
    const shortcutsItems = useKeyboardShortcutsSchema();
    function getKeyboardShortcutItem(item) {
      if (isReadonly && !item.readonlyOk)
        return null;
      switch (item.type) {
        case "group": {
          return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "tlui-shortcuts-dialog__group", children: [
            /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("h2", { className: "tlui-shortcuts-dialog__group__title", children: msg2(item.id) }),
            /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "tlui-shortcuts-dialog__group__content", children: item.children.filter((item2) => item2.type === "item" && item2.actionItem.kbd).map(getKeyboardShortcutItem) })
          ] }, item.id);
        }
        case "item": {
          const { id, label, shortcutsLabel, kbd: kbd2 } = item.actionItem;
          return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)("div", { className: "tlui-shortcuts-dialog__key-pair", children: [
            /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "tlui-shortcuts-dialog__key-pair__key", children: msg2(shortcutsLabel != null ? shortcutsLabel : label) }),
            /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "tlui-shortcuts-dialog__key-pair__value", children: /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Kbd, { children: kbd2 }) })
          ] }, id);
        }
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(import_jsx_runtime75.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(Header, { className: "tlui-shortcuts-dialog__header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Title, { children: msg2("shortcuts-dialog.title") }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(CloseButton, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(Body, { className: "tlui-shortcuts-dialog__body", children: shortcutsItems.map(getKeyboardShortcutItem) }),
      /* @__PURE__ */ (0, import_jsx_runtime75.jsx)("div", { className: "tlui-dialog__scrim" })
    ] });
  };

  // ../../../packages/ui/src/lib/hooks/useTranslation/useLanguages.tsx
  function useLanguages() {
    const app = useApp();
    return { languages: LANGUAGES2, currentLanguage: app.user.locale };
  }

  // ../../../packages/ui/src/lib/hooks/useHelpMenuSchema.tsx
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var HelpMenuSchemaContext = import_react84.default.createContext({});
  var HelpMenuSchemaProvider = track(function HelpMenuSchemaProvider2({
    overrides,
    children
  }) {
    const app = useApp();
    const actions = useActions();
    const selectedCount = app.selectedIds.length;
    const oneSelected = selectedCount > 0;
    const twoSelected = selectedCount > 1;
    const threeSelected = selectedCount > 2;
    const { languages, currentLanguage } = useLanguages();
    const { addDialog } = useDialogs();
    const helpMenuSchema = (0, import_react84.useMemo)(() => {
      const helpMenuSchema2 = compact([
        menuGroup(
          "top",
          menuCustom("LANGUAGE_MENU", { readonlyOk: true }),
          menuItem({
            id: "keyboard-shortcuts",
            label: "help-menu.keyboard-shortcuts",
            readonlyOk: true,
            onSelect() {
              addDialog({ component: KeyboardShortcutsDialog });
            }
          })
        )
      ]);
      if (overrides) {
        return overrides(app, helpMenuSchema2, {
          actions,
          currentLanguage,
          languages,
          oneSelected,
          twoSelected,
          threeSelected
        });
      }
      return helpMenuSchema2;
    }, [
      app,
      overrides,
      languages,
      actions,
      oneSelected,
      twoSelected,
      threeSelected,
      currentLanguage,
      addDialog
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(HelpMenuSchemaContext.Provider, { value: helpMenuSchema, children });
  });
  function useHelpMenuSchema() {
    const ctx = import_react84.default.useContext(HelpMenuSchemaContext);
    if (!ctx) {
      throw new Error("useHelpMenuSchema must be used inside of a helpMenuSchemaProvider.");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/hooks/useMenuSchema.tsx
  var import_react85 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useCanRedo.ts
  function useCanRedo() {
    const app = useApp();
    return useValue("useCanRedo", () => app.canRedo, [app]);
  }

  // ../../../packages/ui/src/lib/hooks/useCanUndo.ts
  function useCanUndo() {
    const app = useApp();
    return useValue("useCanUndo", () => app.canUndo, [app]);
  }

  // ../../../packages/ui/src/lib/hooks/useMenuSchema.tsx
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var MenuSchemaContext = import_react85.default.createContext({});
  function MenuSchemaProvider({ overrides, children }) {
    var _a5;
    const app = useApp();
    const actions = useActions();
    const breakpoint = useBreakpoint();
    const isMobile = breakpoint < 5;
    const isDarkMode = useValue("isDarkMode", () => app.userDocumentSettings.isDarkMode, [app]);
    const isGridMode = useValue("isGridMode", () => app.userDocumentSettings.isGridMode, [app]);
    const isSnapMode = useValue("isSnapMode", () => app.userDocumentSettings.isSnapMode, [app]);
    const isToolLock = useValue("isToolLock", () => app.instanceState.isToolLocked, [app]);
    const isFocusMode = useValue("isFocusMode", () => app.instanceState.isFocusMode, [app]);
    const isDebugMode = useValue("isDebugMode", () => app.instanceState.isDebugMode, [app]);
    const exportBackground = useValue("exportBackground", () => app.instanceState.exportBackground, [
      app
    ]);
    const emptyPage = useValue("emptyPage", () => app.shapeIds.size === 0, [app]);
    const selectedCount = useValue("selectedCount", () => app.selectedIds.length, [app]);
    const noneSelected = selectedCount === 0;
    const oneSelected = selectedCount > 0;
    const twoSelected = selectedCount > 1;
    const threeSelected = selectedCount > 2;
    const hasClipboardWrite = Boolean((_a5 = window.navigator.clipboard) == null ? void 0 : _a5.write);
    const showEditLink = useHasLinkShapeSelected();
    const showAutoSizeToggle = useShowAutoSizeToggle();
    const allowGroup = useAllowGroup();
    const allowUngroup = useAllowUngroup();
    const canUndo = useCanUndo();
    const canRedo = useCanRedo();
    const isZoomedTo100 = useValue("isZoomedTo100", () => app.zoomLevel === 1, [app]);
    const menuSchema = (0, import_react85.useMemo)(() => {
      const menuSchema2 = compact([
        menuGroup(
          "menu",
          menuSubmenu(
            "file",
            "menu.file",
            menuGroup("print", menuItem(actions["print"], { disabled: emptyPage }))
          ),
          menuSubmenu(
            "edit",
            "menu.edit",
            menuGroup(
              "undo-actions",
              menuItem(actions["undo"], { disabled: !canUndo }),
              menuItem(actions["redo"], { disabled: !canRedo })
            ),
            menuGroup(
              "clipboard-actions",
              menuItem(actions["cut"], { disabled: noneSelected }),
              menuItem(actions["copy"], { disabled: noneSelected }),
              {
                id: "MENU_PASTE",
                type: "custom",
                disabled: !showMenuPaste,
                readonlyOk: false
              }
            ),
            menuGroup(
              "conversions",
              menuSubmenu(
                "copy-as",
                "menu.copy-as",
                menuGroup(
                  "copy-as-group",
                  menuItem(actions["copy-as-svg"], { disabled: emptyPage }),
                  menuItem(actions["copy-as-png"], { disabled: emptyPage || !hasClipboardWrite }),
                  menuItem(actions["copy-as-json"], { disabled: emptyPage })
                ),
                menuGroup(
                  "export-bg",
                  menuItem(actions["toggle-transparent"], { checked: !exportBackground })
                )
              ),
              menuSubmenu(
                "export-as",
                "menu.export-as",
                menuGroup(
                  "export-as-group",
                  menuItem(actions["export-as-svg"], { disabled: emptyPage }),
                  menuItem(actions["export-as-png"], { disabled: emptyPage }),
                  menuItem(actions["export-as-json"], { disabled: emptyPage })
                ),
                menuGroup(
                  "export-bg",
                  menuItem(actions["toggle-transparent"], { checked: !exportBackground })
                )
              )
            ),
            menuGroup(
              "set-selection-group",
              menuItem(actions["select-all"], { disabled: emptyPage }),
              menuItem(actions["select-none"], { disabled: !oneSelected })
            ),
            menuGroup(
              "selection",
              showAutoSizeToggle && menuItem(actions["toggle-auto-size"]),
              showEditLink && menuItem(actions["edit-link"]),
              menuItem(actions["duplicate"], { disabled: !oneSelected }),
              allowGroup && menuItem(actions["group"]),
              allowUngroup && menuItem(actions["ungroup"])
            ),
            menuGroup("delete-group", menuItem(actions["delete"], { disabled: !oneSelected }))
          ),
          menuSubmenu(
            "view",
            "menu.view",
            menuGroup(
              "view-actions",
              menuItem(actions["zoom-in"]),
              menuItem(actions["zoom-out"]),
              menuItem(actions["zoom-to-100"], { disabled: isZoomedTo100 }),
              menuItem(actions["zoom-to-fit"], { disabled: emptyPage }),
              menuItem(actions["zoom-to-selection"], { disabled: emptyPage || !oneSelected })
            )
          )
        ),
        menuGroup("extras", menuItem(actions["insert-embed"]), menuItem(actions["insert-media"])),
        menuGroup(
          "preferences",
          menuSubmenu(
            "preferences",
            "menu.preferences",
            menuGroup(
              "preferences-actions",
              menuItem(actions["toggle-snap-mode"], { checked: isSnapMode }),
              menuItem(actions["toggle-tool-lock"], { checked: isToolLock }),
              menuItem(actions["toggle-grid"], { checked: isGridMode }),
              menuItem(actions["toggle-dark-mode"], { checked: isDarkMode }),
              menuItem(actions["toggle-focus-mode"], { checked: isFocusMode }),
              menuItem(actions["toggle-debug-mode"], { checked: isDebugMode })
            )
          ),
          isMobile && menuCustom("LANGUAGE_MENU", { readonlyOk: true })
        )
      ]);
      if (overrides) {
        return overrides(app, menuSchema2, {
          actions,
          noneSelected,
          oneSelected,
          twoSelected,
          threeSelected
        });
      }
      return menuSchema2;
    }, [
      app,
      overrides,
      actions,
      oneSelected,
      twoSelected,
      threeSelected,
      emptyPage,
      isMobile,
      allowGroup,
      allowUngroup,
      showEditLink,
      hasClipboardWrite,
      showAutoSizeToggle,
      noneSelected,
      canUndo,
      canRedo,
      isDarkMode,
      isGridMode,
      isSnapMode,
      isToolLock,
      isFocusMode,
      exportBackground,
      isDebugMode,
      isZoomedTo100
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(MenuSchemaContext.Provider, { value: menuSchema, children });
  }
  function useMenuSchema() {
    const ctx = import_react85.default.useContext(MenuSchemaContext);
    if (!ctx) {
      throw new Error("useMenuSchema must be used inside of a MenuSchemaProvider.");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/hooks/useToolbarSchema.tsx
  var import_react86 = __toESM(require_react());
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  function toolbarItem(toolItem) {
    return {
      id: toolItem.id,
      type: "item",
      readonlyOk: toolItem.readonlyOk,
      toolItem
    };
  }
  var ToolbarSchemaContext = import_react86.default.createContext([]);
  function ToolbarSchemaProvider({ overrides, children }) {
    const app = useApp();
    const tools = useTools();
    const toolbarSchema = import_react86.default.useMemo(() => {
      const schema = [
        toolbarItem(tools.select),
        toolbarItem(tools.hand),
        toolbarItem(tools.draw),
        toolbarItem(tools.eraser),
        toolbarItem(tools.arrow),
        toolbarItem(tools.text),
        toolbarItem(tools.note),
        toolbarItem(tools.asset),
        toolbarItem(tools["rectangle"]),
        toolbarItem(tools["ellipse"]),
        toolbarItem(tools["diamond"]),
        toolbarItem(tools["triangle"]),
        toolbarItem(tools["trapezoid"]),
        toolbarItem(tools["rhombus"]),
        toolbarItem(tools["pentagon"]),
        toolbarItem(tools["hexagon"]),
        toolbarItem(tools["octagon"]),
        toolbarItem(tools["star"]),
        toolbarItem(tools["oval"]),
        toolbarItem(tools["x-box"]),
        toolbarItem(tools["arrow-right"]),
        toolbarItem(tools["arrow-left"]),
        toolbarItem(tools["arrow-up"]),
        toolbarItem(tools["arrow-down"]),
        toolbarItem(tools.line),
        toolbarItem(tools.frame),
        toolbarItem(tools.embed)
      ];
      if (overrides) {
        return overrides(app, schema, { tools });
      }
      return schema;
    }, [app, overrides, tools]);
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(ToolbarSchemaContext.Provider, { value: toolbarSchema, children });
  }
  function useToolbarSchema() {
    const ctx = import_react86.default.useContext(ToolbarSchemaContext);
    if (!ctx) {
      throw new Error("useToolbarSchema must be used within a ToolbarSchemaProvider");
    }
    return ctx;
  }

  // ../../../packages/ui/src/lib/overrides.ts
  var import_react87 = __toESM(require_react());
  function useDefaultHelpers() {
    const { addToast, removeToast, clearToasts } = useToasts();
    const { addDialog, clearDialogs, removeDialog, updateDialog } = useDialogs();
    const breakpoint = useBreakpoint();
    const isMobile = breakpoint < 5;
    const msg2 = useTranslation();
    return (0, import_react87.useMemo)(
      () => ({
        addToast,
        removeToast,
        clearToasts,
        addDialog,
        clearDialogs,
        removeDialog,
        updateDialog,
        msg: msg2,
        isMobile
      }),
      [
        addDialog,
        addToast,
        clearDialogs,
        clearToasts,
        msg2,
        removeDialog,
        removeToast,
        updateDialog,
        isMobile
      ]
    );
  }
  function mergeOverrides(overrides, defaultHelpers) {
    const mergedTranslations = {};
    for (const override of overrides) {
      if (override.translations) {
        for (const [key, value] of objectMapEntries(override.translations)) {
          let strings = mergedTranslations[key];
          if (!strings) {
            strings = mergedTranslations[key] = {};
          }
          Object.assign(strings, value);
        }
      }
    }
    return {
      actionsMenu: (app, schema, helpers) => {
        for (const override of overrides) {
          if (override.actionsMenu) {
            schema = override.actionsMenu(app, schema, __spreadValues(__spreadValues({}, defaultHelpers), helpers));
          }
        }
        return schema;
      },
      actions: (app, schema) => {
        for (const override of overrides) {
          if (override.actions) {
            schema = override.actions(app, schema, defaultHelpers);
          }
        }
        return schema;
      },
      contextMenu: (app, schema, helpers) => {
        for (const override of overrides) {
          if (override.contextMenu) {
            schema = override.contextMenu(app, schema, __spreadValues(__spreadValues({}, defaultHelpers), helpers));
          }
        }
        return schema;
      },
      helpMenu: (app, schema, helpers) => {
        for (const override of overrides) {
          if (override.helpMenu) {
            schema = override.helpMenu(app, schema, __spreadValues(__spreadValues({}, defaultHelpers), helpers));
          }
        }
        return schema;
      },
      menu: (app, schema, helpers) => {
        for (const override of overrides) {
          if (override.menu) {
            schema = override.menu(app, schema, __spreadValues(__spreadValues({}, defaultHelpers), helpers));
          }
        }
        return schema;
      },
      toolbar: (app, schema, helpers) => {
        for (const override of overrides) {
          if (override.toolbar) {
            schema = override.toolbar(app, schema, __spreadValues(__spreadValues({}, defaultHelpers), helpers));
          }
        }
        return schema;
      },
      keyboardShortcutsMenu: (app, schema, helpers) => {
        for (const override of overrides) {
          if (override.keyboardShortcutsMenu) {
            schema = override.keyboardShortcutsMenu(app, schema, __spreadValues(__spreadValues({}, defaultHelpers), helpers));
          }
        }
        return schema;
      },
      tools: (app, schema, helpers) => {
        for (const override of overrides) {
          if (override.tools) {
            schema = override.tools(app, schema, __spreadValues(__spreadValues({}, defaultHelpers), helpers));
          }
        }
        return schema;
      },
      translations: mergedTranslations
    };
  }
  function useShallowArrayEquality(array2) {
    return (0, import_react87.useMemo)(() => array2, array2);
  }
  function useMergedTranslationOverrides(overrides) {
    const overridesArray = useShallowArrayEquality(
      overrides == null ? [] : Array.isArray(overrides) ? overrides : [overrides]
    );
    return (0, import_react87.useMemo)(() => {
      const mergedTranslations = {};
      for (const override of overridesArray) {
        if (override.translations) {
          for (const [key, value] of objectMapEntries(override.translations)) {
            let strings = mergedTranslations[key];
            if (!strings) {
              strings = mergedTranslations[key] = {};
            }
            Object.assign(strings, value);
          }
        }
      }
      return mergedTranslations;
    }, [overridesArray]);
  }
  function useMergedOverrides(overrides) {
    const defaultHelpers = useDefaultHelpers();
    const overridesArray = useShallowArrayEquality(
      overrides == null ? [] : Array.isArray(overrides) ? overrides : [overrides]
    );
    return (0, import_react87.useMemo)(
      () => mergeOverrides(overridesArray, defaultHelpers),
      [overridesArray, defaultHelpers]
    );
  }

  // ../../../packages/ui/src/lib/TldrawUiContextProvider.tsx
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  function TldrawUiContextProvider({
    overrides,
    assetUrls,
    onUiEvent,
    children
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(AssetUrlsProvider, { assetUrls: assetUrls != null ? assetUrls : defaultUiAssetUrls, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(TranslationProvider, { overrides: useMergedTranslationOverrides(overrides), children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(EventsProvider, { onEvent: onUiEvent, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ToastsProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(DialogsProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(BreakPointProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(InternalProviders, { overrides, children }) }) }) }) }) }) });
  }
  function InternalProviders({
    overrides,
    children
  }) {
    const mergedOverrides = useMergedOverrides(overrides);
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ActionsProvider, { overrides: mergedOverrides.actions, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ToolsProvider, { overrides: mergedOverrides.tools, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ToolbarSchemaProvider, { overrides: mergedOverrides.toolbar, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ActionsMenuSchemaProvider, { overrides: mergedOverrides.actionsMenu, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(KeyboardShortcutsSchemaProvider, { overrides: mergedOverrides.keyboardShortcutsMenu, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(ContextMenuSchemaProvider, { overrides: mergedOverrides.contextMenu, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(HelpMenuSchemaProvider, { overrides: mergedOverrides.helpMenu, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(MenuSchemaProvider, { overrides: mergedOverrides.menu, children }) }) }) }) }) }) }) });
  }

  // ../../../packages/ui/src/lib/components/BackToContent.tsx
  var import_react88 = __toESM(require_react());
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  function BackToContent() {
    const app = useApp();
    const actions = useActions();
    const action = actions["back-to-content"];
    const [showBackToContent, setShowBackToContent] = (0, import_react88.useState)(false);
    (0, import_react88.useEffect)(() => {
      let showBackToContentPrev = false;
      const interval = setInterval(() => {
        const { renderingShapes } = app;
        const visibleShapes = renderingShapes.filter((s3) => s3.isInViewport);
        const showBackToContentNow = visibleShapes.length === 0 && app.shapesArray.length > 0;
        if (showBackToContentPrev !== showBackToContentNow) {
          setShowBackToContent(showBackToContentNow);
          showBackToContentPrev = showBackToContentNow;
        }
      }, 1e3);
      return () => {
        clearInterval(interval);
      };
    }, [app]);
    if (!showBackToContent)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(
      Button,
      {
        iconLeft: action.icon,
        label: action.label,
        onClick: () => {
          action.onSelect("helper-buttons");
          setShowBackToContent(false);
        }
      }
    );
  }

  // ../../../packages/ui/src/lib/components/DebugPanel.tsx
  var React55 = __toESM(require_react());
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  var t3 = 0;
  function createNShapes(app, n3) {
    const shapesToCreate = Array(n3);
    const cols = Math.floor(Math.sqrt(n3));
    for (let i3 = 0; i3 < n3; i3++) {
      t3++;
      shapesToCreate[i3] = {
        id: app.createShapeId("box" + t3),
        type: "geo",
        x: i3 % cols * 132,
        y: Math.floor(i3 / cols) * 132
      };
    }
    app.batch(() => {
      app.createShapes(shapesToCreate).setSelectedIds(shapesToCreate.map((s3) => s3.id));
    });
  }
  var DebugPanel = React55.memo(function DebugPanel2({
    renderDebugMenuItems
  }) {
    const msg2 = useTranslation();
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { className: "tlui-debug-panel", children: [
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(CurrentState, {}),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(ShapeCount, {}),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(Root, { id: "debug", children: [
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Button, { icon: "dots-horizontal", title: msg2("debug-panel.more") }) }),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Content, { side: "top", align: "end", alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(DebugMenuContent, { renderDebugMenuItems }) })
      ] })
    ] });
  });
  var CurrentState = track(function CurrentState2() {
    const app = useApp();
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("div", { className: "tlui-debug-panel__current-state", children: app.root.path.value });
  });
  var ShapeCount = function ShapeCount2() {
    const app = useApp();
    const count = useValue("rendering shapes count", () => app.renderingShapes.length, [app]);
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)("div", { children: [
      count,
      " Shapes"
    ] });
  };
  function DebugMenuContent({
    renderDebugMenuItems
  }) {
    const app = useApp();
    const { addToast } = useToasts();
    const { addDialog } = useDialogs();
    const [error, setError] = React55.useState(false);
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(import_jsx_runtime81.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(Group, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          Item,
          {
            onClick: () => {
              addToast({
                id: uniqueId(),
                title: "Something happened",
                description: "Hey, attend to this thing over here. It might be important!"
                // icon?: string
                // title?: string
                // description?: string
                // actions?: TLToastAction[]
              });
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Show toast" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          Item,
          {
            onClick: () => {
              addDialog({
                component: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
                  ExampleDialog,
                  {
                    displayDontShowAgain: true,
                    onCancel: () => {
                      onClose();
                    },
                    onContinue: () => {
                      onClose();
                    }
                  }
                ),
                onClose: () => {
                }
              });
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Show dialog" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Item, { onClick: () => createNShapes(app, 100), children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Create 100 shapes" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          Item,
          {
            onClick: () => {
              function countDescendants({ children }) {
                let count = 0;
                if (!children.length)
                  return 0;
                for (const el of [...children]) {
                  count++;
                  count += countDescendants(el);
                }
                return count;
              }
              const { selectedShapes } = app;
              const shapes = selectedShapes.length === 0 ? app.renderingShapes : selectedShapes;
              const elms = shapes.map(
                (shape) => document.getElementById(shape.id).parentElement
              );
              let descendants = elms.length;
              for (const elm of elms) {
                descendants += countDescendants(elm);
              }
              window.alert(`Shapes ${shapes.length}, DOM nodes:${descendants}`);
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Count shapes and nodes" })
          }
        ),
        (() => {
          if (error)
            throw Error("oh no!");
        })(),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          Item,
          {
            onClick: () => {
              setError(true);
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Throw error" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          Item,
          {
            onClick: () => {
              hardResetApp();
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Hard reset" })
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(Group, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          Item,
          {
            onClick: () => {
              debugFlags.peopleMenu.set(!debugFlags.peopleMenu.value);
              window.location.reload();
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Toggle people menu" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          Item,
          {
            onClick: () => {
              app.setReadOnly(!app.isReadOnly);
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime81.jsx)("span", { children: "Toggle read-only" })
          }
        )
      ] }),
      renderDebugMenuItems == null ? void 0 : renderDebugMenuItems()
    ] });
  }
  function ExampleDialog({
    title = "title",
    body = "hello hello hello",
    cancel = "Cancel",
    confirm = "Continue",
    displayDontShowAgain = false,
    onCancel,
    onContinue
  }) {
    const [dontShowAgain, setDontShowAgain] = React55.useState(false);
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(import_jsx_runtime81.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(Header, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Title, { children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(CloseButton, {})
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Body, { style: { maxWidth: 350 }, children: body }),
      /* @__PURE__ */ (0, import_jsx_runtime81.jsxs)(Footer, { className: "tlui-dialog__footer__actions", children: [
        displayDontShowAgain && /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
          Button,
          {
            onClick: () => setDontShowAgain(!dontShowAgain),
            iconLeft: dontShowAgain ? "checkbox-checked" : "checkbox-empty",
            style: { marginRight: "auto" },
            children: `Don't show again`
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Button, { onClick: onCancel, children: cancel }),
        /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(Button, { type: "primary", onClick: () => __async(this, null, function* () {
          return onContinue();
        }), children: confirm })
      ] })
    ] });
  }

  // ../../../packages/ui/src/lib/components/Dialogs.tsx
  var import_react89 = __toESM(require_react());
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  var Dialog = ({ id, component: ModalContent, onClose }) => {
    const { removeDialog } = useDialogs();
    const container = useContainer();
    const handleOpenChange = (0, import_react89.useCallback)(
      (isOpen) => {
        if (!isOpen) {
          if (onClose) {
            try {
              onClose();
            } catch (err) {
              console.warn(err);
            }
          }
          removeDialog(id);
        }
      },
      [id, onClose, removeDialog]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)($5d3850c4d0b4e6c7$export$be92b6f5f03c0fe9, { onOpenChange: handleOpenChange, defaultOpen: true, children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)($5d3850c4d0b4e6c7$export$602eac185826482c, { container, children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)($5d3850c4d0b4e6c7$export$c6fdb837b070b4ff, { dir: "ltr", className: "tlui-dialog__overlay", children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)($5d3850c4d0b4e6c7$export$7c6e2c02157bb7d2, { dir: "ltr", className: "tlui-dialog__content", children: /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(ModalContent, { onClose: () => handleOpenChange(false) }) }) }) }) });
  };
  function _Dialogs() {
    const { dialogs } = useDialogs();
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(import_jsx_runtime82.Fragment, { children: dialogs.map((dialog) => /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Dialog, __spreadValues({}, dialog), dialog.id)) });
  }
  var Dialogs = import_react89.default.memo(_Dialogs);

  // ../../../packages/ui/src/lib/components/HelpMenu.tsx
  var React57 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/LanguageMenu.tsx
  var import_react90 = __toESM(require_react());
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  function LanguageMenu() {
    const app = useApp();
    const { languages, currentLanguage } = useLanguages();
    const handleLanguageSelect = (0, import_react90.useCallback)(
      (locale) => {
        app.updateUser({ locale });
      },
      [app]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(Sub, { id: "help menu language", children: [
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(SubTrigger, { label: "menu.language", "data-direction": "left" }),
      /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(SubContent, { sideOffset: -4, children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Group, { children: languages.map(({ locale, label }) => /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
        RadioItem,
        {
          title: locale,
          checked: locale === currentLanguage,
          onSelect: () => handleLanguageSelect(locale),
          children: /* @__PURE__ */ (0, import_jsx_runtime83.jsx)("span", { children: label })
        },
        locale
      )) }) })
    ] });
  }

  // ../../../packages/ui/src/lib/components/HelpMenu.tsx
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var HelpMenu = React57.memo(function HelpMenu2() {
    const container = useContainer();
    const msg2 = useTranslation();
    const [isOpen, onOpenChange] = useMenuIsOpen("help menu");
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", { className: "tlui-help-menu", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)($d08ef79370b62062$export$be92b6f5f03c0fe9, { dir: "ltr", open: isOpen, onOpenChange, modal: false, children: [
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
        $d08ef79370b62062$export$41fb9f06171c75f4,
        {
          className: "tlui-button tlui-help-menu__button",
          dir: "ltr",
          title: msg2("help-menu.title"),
          children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Icon, { icon: "question-mark" })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime84.jsx)($d08ef79370b62062$export$602eac185826482c, { container, dir: "ltr", children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
        $d08ef79370b62062$export$7c6e2c02157bb7d2,
        {
          className: "tlui-menu",
          side: "top",
          sideOffset: 8,
          align: "end",
          alignOffset: 0,
          collisionPadding: 4,
          children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(HelpMenuContent, {})
        }
      ) })
    ] }) });
  });
  function HelpMenuContent() {
    const menuSchema = useHelpMenuSchema();
    const isReadonly = useReadonly();
    function getHelpMenuItem(item) {
      if (isReadonly && !item.readonlyOk)
        return null;
      switch (item.type) {
        case "custom": {
          if (item.id === "LANGUAGE_MENU") {
            return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(LanguageMenu, {}, "item");
          }
          break;
        }
        case "group": {
          return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(Group, { size: "small", children: item.children.map(getHelpMenuItem) }, item.id);
        }
        case "submenu": {
          return /* @__PURE__ */ (0, import_jsx_runtime84.jsxs)(Sub, { id: `help menu ${item.id}`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(SubTrigger, { label: item.label }),
            /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(SubContent, { children: item.children.map(getHelpMenuItem) })
          ] }, item.id);
        }
        case "item": {
          const { id, kbd: kbd2, label, onSelect, icon } = item.actionItem;
          return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
            Item,
            {
              kbd: kbd2,
              label,
              onClick: () => onSelect("help-menu"),
              iconLeft: icon
            },
            id
          );
        }
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(import_jsx_runtime84.Fragment, { children: menuSchema.map(getHelpMenuItem) });
  }

  // ../../../node_modules/@radix-ui/react-popover/dist/index.module.js
  var import_react92 = __toESM(require_react());

  // ../../../node_modules/@radix-ui/react-popover/node_modules/@radix-ui/react-popper/dist/index.module.js
  var import_react91 = __toESM(require_react());
  var $cf1ac5d9fe0e8206$var$POPPER_NAME2 = "Popper";
  var [$cf1ac5d9fe0e8206$var$createPopperContext2, $cf1ac5d9fe0e8206$export$722aac194ae9232] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cf1ac5d9fe0e8206$var$POPPER_NAME2);
  var [$cf1ac5d9fe0e8206$var$PopperProvider2, $cf1ac5d9fe0e8206$var$usePopperContext2] = $cf1ac5d9fe0e8206$var$createPopperContext2($cf1ac5d9fe0e8206$var$POPPER_NAME2);
  var $cf1ac5d9fe0e8206$export$badac9ada3a0bdf92 = (props) => {
    const { __scopePopper, children } = props;
    const [anchor, setAnchor] = (0, import_react91.useState)(null);
    return /* @__PURE__ */ (0, import_react91.createElement)($cf1ac5d9fe0e8206$var$PopperProvider2, {
      scope: __scopePopper,
      anchor,
      onAnchorChange: setAnchor
    }, children);
  };
  var $cf1ac5d9fe0e8206$var$ANCHOR_NAME2 = "PopperAnchor";
  var $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d2 = /* @__PURE__ */ (0, import_react91.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopePopper, virtualRef } = _a5, anchorProps = __objRest(_a5, ["__scopePopper", "virtualRef"]);
    const context = $cf1ac5d9fe0e8206$var$usePopperContext2($cf1ac5d9fe0e8206$var$ANCHOR_NAME2, __scopePopper);
    const ref = (0, import_react91.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    (0, import_react91.useEffect)(() => {
      context.onAnchorChange((virtualRef === null || virtualRef === void 0 ? void 0 : virtualRef.current) || ref.current);
    });
    return virtualRef ? null : /* @__PURE__ */ (0, import_react91.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, anchorProps, {
      ref: composedRefs
    }));
  });
  var $cf1ac5d9fe0e8206$var$CONTENT_NAME2 = "PopperContent";
  var [$cf1ac5d9fe0e8206$var$PopperContentProvider2, $cf1ac5d9fe0e8206$var$useContentContext2] = $cf1ac5d9fe0e8206$var$createPopperContext2($cf1ac5d9fe0e8206$var$CONTENT_NAME2);
  var [$cf1ac5d9fe0e8206$var$PositionContextProvider2, $cf1ac5d9fe0e8206$var$usePositionContext2] = $cf1ac5d9fe0e8206$var$createPopperContext2($cf1ac5d9fe0e8206$var$CONTENT_NAME2, {
    hasParent: false,
    positionUpdateFns: /* @__PURE__ */ new Set()
  });
  var $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc2 = /* @__PURE__ */ (0, import_react91.forwardRef)((props, forwardedRef) => {
    var _arrowSize$width, _arrowSize$height, _middlewareData$arrow, _middlewareData$arrow2, _middlewareData$arrow3, _middlewareData$hide, _middlewareData$trans, _middlewareData$trans2;
    const _a5 = props, { __scopePopper, side = "bottom", sideOffset = 0, align = "center", alignOffset = 0, arrowPadding = 0, collisionBoundary = [], collisionPadding: collisionPaddingProp = 0, sticky = "partial", hideWhenDetached = false, avoidCollisions = true, onPlaced } = _a5, contentProps = __objRest(_a5, ["__scopePopper", "side", "sideOffset", "align", "alignOffset", "arrowPadding", "collisionBoundary", "collisionPadding", "sticky", "hideWhenDetached", "avoidCollisions", "onPlaced"]);
    const context = $cf1ac5d9fe0e8206$var$usePopperContext2($cf1ac5d9fe0e8206$var$CONTENT_NAME2, __scopePopper);
    const [content, setContent] = (0, import_react91.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setContent(node)
    );
    const [arrow2, setArrow] = (0, import_react91.useState)(null);
    const arrowSize = $db6c3485150b8e66$export$1ab7ae714698c4b8(arrow2);
    const arrowWidth = (_arrowSize$width = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.width) !== null && _arrowSize$width !== void 0 ? _arrowSize$width : 0;
    const arrowHeight = (_arrowSize$height = arrowSize === null || arrowSize === void 0 ? void 0 : arrowSize.height) !== null && _arrowSize$height !== void 0 ? _arrowSize$height : 0;
    const desiredPlacement = side + (align !== "center" ? "-" + align : "");
    const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : __spreadValues({
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, collisionPaddingProp);
    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [
      collisionBoundary
    ];
    const hasExplicitBoundaries = boundary.length > 0;
    const detectOverflowOptions = {
      padding: collisionPadding,
      boundary: boundary.filter($cf1ac5d9fe0e8206$var$isNotNull2),
      // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
      altBoundary: hasExplicitBoundaries
    };
    const { reference, floating, strategy, x: x3, y: y3, placement, middlewareData, update } = useFloating({
      // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
      strategy: "fixed",
      placement: desiredPlacement,
      whileElementsMounted: N,
      middleware: [
        T({
          mainAxis: sideOffset + arrowHeight,
          alignmentAxis: alignOffset
        }),
        avoidCollisions ? D(__spreadValues({
          mainAxis: true,
          crossAxis: false,
          limiter: sticky === "partial" ? L() : void 0
        }, detectOverflowOptions)) : void 0,
        avoidCollisions ? b(__spreadValues({}, detectOverflowOptions)) : void 0,
        k(__spreadProps(__spreadValues({}, detectOverflowOptions), {
          apply: ({ elements, rects, availableWidth, availableHeight }) => {
            const { width: anchorWidth, height: anchorHeight } = rects.reference;
            const contentStyle = elements.floating.style;
            contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
            contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
            contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
            contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
          }
        })),
        arrow2 ? arrow({
          element: arrow2,
          padding: arrowPadding
        }) : void 0,
        $cf1ac5d9fe0e8206$var$transformOrigin2({
          arrowWidth,
          arrowHeight
        }),
        hideWhenDetached ? P({
          strategy: "referenceHidden"
        }) : void 0
      ].filter($cf1ac5d9fe0e8206$var$isDefined2)
    });
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      reference(context.anchor);
    }, [
      reference,
      context.anchor
    ]);
    const isPlaced = x3 !== null && y3 !== null;
    const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement2(placement);
    const handlePlaced = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onPlaced);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (isPlaced)
        handlePlaced === null || handlePlaced === void 0 || handlePlaced();
    }, [
      isPlaced,
      handlePlaced
    ]);
    const arrowX = (_middlewareData$arrow = middlewareData.arrow) === null || _middlewareData$arrow === void 0 ? void 0 : _middlewareData$arrow.x;
    const arrowY = (_middlewareData$arrow2 = middlewareData.arrow) === null || _middlewareData$arrow2 === void 0 ? void 0 : _middlewareData$arrow2.y;
    const cannotCenterArrow = ((_middlewareData$arrow3 = middlewareData.arrow) === null || _middlewareData$arrow3 === void 0 ? void 0 : _middlewareData$arrow3.centerOffset) !== 0;
    const [contentZIndex, setContentZIndex] = (0, import_react91.useState)();
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (content)
        setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [
      content
    ]);
    const { hasParent, positionUpdateFns } = $cf1ac5d9fe0e8206$var$usePositionContext2($cf1ac5d9fe0e8206$var$CONTENT_NAME2, __scopePopper);
    const isRoot = !hasParent;
    (0, import_react91.useLayoutEffect)(() => {
      if (!isRoot) {
        positionUpdateFns.add(update);
        return () => {
          positionUpdateFns.delete(update);
        };
      }
    }, [
      isRoot,
      positionUpdateFns,
      update
    ]);
    $9f79659886946c16$export$e5c5a5f917a5871c(() => {
      if (isRoot && isPlaced)
        Array.from(positionUpdateFns).reverse().forEach(
          (fn) => requestAnimationFrame(fn)
        );
    }, [
      isRoot,
      isPlaced,
      positionUpdateFns
    ]);
    const commonProps = __spreadProps(__spreadValues({
      "data-side": placedSide,
      "data-align": placedAlign
    }, contentProps), {
      ref: composedRefs,
      style: __spreadProps(__spreadValues({}, contentProps.style), {
        // if the PopperContent hasn't been placed yet (not all measurements done)
        // we prevent animations so that users's animation don't kick in too early referring wrong sides
        animation: !isPlaced ? "none" : void 0,
        // hide the content if using the hide middleware and should be hidden
        opacity: (_middlewareData$hide = middlewareData.hide) !== null && _middlewareData$hide !== void 0 && _middlewareData$hide.referenceHidden ? 0 : void 0
      })
    });
    return /* @__PURE__ */ (0, import_react91.createElement)("div", {
      ref: floating,
      "data-radix-popper-content-wrapper": "",
      style: {
        position: strategy,
        left: 0,
        top: 0,
        transform: isPlaced ? `translate3d(${Math.round(x3)}px, ${Math.round(y3)}px, 0)` : "translate3d(0, -200%, 0)",
        // keep off the page when measuring
        minWidth: "max-content",
        zIndex: contentZIndex,
        ["--radix-popper-transform-origin"]: [
          (_middlewareData$trans = middlewareData.transformOrigin) === null || _middlewareData$trans === void 0 ? void 0 : _middlewareData$trans.x,
          (_middlewareData$trans2 = middlewareData.transformOrigin) === null || _middlewareData$trans2 === void 0 ? void 0 : _middlewareData$trans2.y
        ].join(" ")
      },
      dir: props.dir
    }, /* @__PURE__ */ (0, import_react91.createElement)($cf1ac5d9fe0e8206$var$PopperContentProvider2, {
      scope: __scopePopper,
      placedSide,
      onArrowChange: setArrow,
      arrowX,
      arrowY,
      shouldHideArrow: cannotCenterArrow
    }, isRoot ? /* @__PURE__ */ (0, import_react91.createElement)($cf1ac5d9fe0e8206$var$PositionContextProvider2, {
      scope: __scopePopper,
      hasParent: true,
      positionUpdateFns
    }, /* @__PURE__ */ (0, import_react91.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, commonProps)) : /* @__PURE__ */ (0, import_react91.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, commonProps)));
  });
  function $cf1ac5d9fe0e8206$var$isDefined2(value) {
    return value !== void 0;
  }
  function $cf1ac5d9fe0e8206$var$isNotNull2(value) {
    return value !== null;
  }
  var $cf1ac5d9fe0e8206$var$transformOrigin2 = (options) => ({
    name: "transformOrigin",
    options,
    fn(data) {
      var _middlewareData$arrow4, _middlewareData$arrow5, _middlewareData$arrow6, _middlewareData$arrow7, _middlewareData$arrow8;
      const { placement, rects, middlewareData } = data;
      const cannotCenterArrow = ((_middlewareData$arrow4 = middlewareData.arrow) === null || _middlewareData$arrow4 === void 0 ? void 0 : _middlewareData$arrow4.centerOffset) !== 0;
      const isArrowHidden = cannotCenterArrow;
      const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
      const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
      const [placedSide, placedAlign] = $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement2(placement);
      const noArrowAlign = {
        start: "0%",
        center: "50%",
        end: "100%"
      }[placedAlign];
      const arrowXCenter = ((_middlewareData$arrow5 = (_middlewareData$arrow6 = middlewareData.arrow) === null || _middlewareData$arrow6 === void 0 ? void 0 : _middlewareData$arrow6.x) !== null && _middlewareData$arrow5 !== void 0 ? _middlewareData$arrow5 : 0) + arrowWidth / 2;
      const arrowYCenter = ((_middlewareData$arrow7 = (_middlewareData$arrow8 = middlewareData.arrow) === null || _middlewareData$arrow8 === void 0 ? void 0 : _middlewareData$arrow8.y) !== null && _middlewareData$arrow7 !== void 0 ? _middlewareData$arrow7 : 0) + arrowHeight / 2;
      let x3 = "";
      let y3 = "";
      if (placedSide === "bottom") {
        x3 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
        y3 = `${-arrowHeight}px`;
      } else if (placedSide === "top") {
        x3 = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
        y3 = `${rects.floating.height + arrowHeight}px`;
      } else if (placedSide === "right") {
        x3 = `${-arrowHeight}px`;
        y3 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
      } else if (placedSide === "left") {
        x3 = `${rects.floating.width + arrowHeight}px`;
        y3 = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
      }
      return {
        data: {
          x: x3,
          y: y3
        }
      };
    }
  });
  function $cf1ac5d9fe0e8206$var$getSideAndAlignFromPlacement2(placement) {
    const [side, align = "center"] = placement.split("-");
    return [
      side,
      align
    ];
  }
  var $cf1ac5d9fe0e8206$export$be92b6f5f03c0fe92 = $cf1ac5d9fe0e8206$export$badac9ada3a0bdf92;
  var $cf1ac5d9fe0e8206$export$b688253958b8dfe72 = $cf1ac5d9fe0e8206$export$ecd4e1ccab6ed6d2;
  var $cf1ac5d9fe0e8206$export$7c6e2c02157bb7d22 = $cf1ac5d9fe0e8206$export$bc4ae5855d3c4fc2;

  // ../../../node_modules/@radix-ui/react-popover/dist/index.module.js
  var $cb5cc270b50c6fcd$var$POPOVER_NAME = "Popover";
  var [$cb5cc270b50c6fcd$var$createPopoverContext, $cb5cc270b50c6fcd$export$c8393c9e73286932] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($cb5cc270b50c6fcd$var$POPOVER_NAME, [
    $cf1ac5d9fe0e8206$export$722aac194ae9232
  ]);
  var $cb5cc270b50c6fcd$var$usePopperScope = $cf1ac5d9fe0e8206$export$722aac194ae9232();
  var [$cb5cc270b50c6fcd$var$PopoverProvider, $cb5cc270b50c6fcd$var$usePopoverContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$POPOVER_NAME);
  var $cb5cc270b50c6fcd$export$5b6b19405a83ff9d = (props) => {
    const { __scopePopover, children, open: openProp, defaultOpen, onOpenChange, modal = false } = props;
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    const triggerRef = (0, import_react92.useRef)(null);
    const [hasCustomAnchor, setHasCustomAnchor] = (0, import_react92.useState)(false);
    const [open = false, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_react92.createElement)($cf1ac5d9fe0e8206$export$be92b6f5f03c0fe92, popperScope, /* @__PURE__ */ (0, import_react92.createElement)($cb5cc270b50c6fcd$var$PopoverProvider, {
      scope: __scopePopover,
      contentId: $1746a345f3d73bb7$export$f680877a34711e37(),
      triggerRef,
      open,
      onOpenChange: setOpen,
      onOpenToggle: (0, import_react92.useCallback)(
        () => setOpen(
          (prevOpen) => !prevOpen
        ),
        [
          setOpen
        ]
      ),
      hasCustomAnchor,
      onCustomAnchorAdd: (0, import_react92.useCallback)(
        () => setHasCustomAnchor(true),
        []
      ),
      onCustomAnchorRemove: (0, import_react92.useCallback)(
        () => setHasCustomAnchor(false),
        []
      ),
      modal
    }, children));
  };
  var $cb5cc270b50c6fcd$var$TRIGGER_NAME = "PopoverTrigger";
  var $cb5cc270b50c6fcd$export$7dacb05d26466c3 = /* @__PURE__ */ (0, import_react92.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopePopover } = _a5, triggerProps = __objRest(_a5, ["__scopePopover"]);
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$TRIGGER_NAME, __scopePopover);
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    const composedTriggerRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, context.triggerRef);
    const trigger2 = /* @__PURE__ */ (0, import_react92.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.button, _extends({
      type: "button",
      "aria-haspopup": "dialog",
      "aria-expanded": context.open,
      "aria-controls": context.contentId,
      "data-state": $cb5cc270b50c6fcd$var$getState(context.open)
    }, triggerProps, {
      ref: composedTriggerRef,
      onClick: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onClick, context.onOpenToggle)
    }));
    return context.hasCustomAnchor ? trigger2 : /* @__PURE__ */ (0, import_react92.createElement)($cf1ac5d9fe0e8206$export$b688253958b8dfe72, _extends({
      asChild: true
    }, popperScope), trigger2);
  });
  var $cb5cc270b50c6fcd$var$PORTAL_NAME = "PopoverPortal";
  var [$cb5cc270b50c6fcd$var$PortalProvider, $cb5cc270b50c6fcd$var$usePortalContext] = $cb5cc270b50c6fcd$var$createPopoverContext($cb5cc270b50c6fcd$var$PORTAL_NAME, {
    forceMount: void 0
  });
  var $cb5cc270b50c6fcd$export$dd679ffb4362d2d4 = (props) => {
    const { __scopePopover, forceMount, children, container } = props;
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$PORTAL_NAME, __scopePopover);
    return /* @__PURE__ */ (0, import_react92.createElement)($cb5cc270b50c6fcd$var$PortalProvider, {
      scope: __scopePopover,
      forceMount
    }, /* @__PURE__ */ (0, import_react92.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, /* @__PURE__ */ (0, import_react92.createElement)($f1701beae083dbae$export$602eac185826482c, {
      asChild: true,
      container
    }, children)));
  };
  var $cb5cc270b50c6fcd$var$CONTENT_NAME = "PopoverContent";
  var $cb5cc270b50c6fcd$export$d7e1f420b25549ff = /* @__PURE__ */ (0, import_react92.forwardRef)((props, forwardedRef) => {
    const portalContext = $cb5cc270b50c6fcd$var$usePortalContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    const _a5 = props, { forceMount = portalContext.forceMount } = _a5, contentProps = __objRest(_a5, ["forceMount"]);
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    return /* @__PURE__ */ (0, import_react92.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
      present: forceMount || context.open
    }, context.modal ? /* @__PURE__ */ (0, import_react92.createElement)($cb5cc270b50c6fcd$var$PopoverContentModal, _extends({}, contentProps, {
      ref: forwardedRef
    })) : /* @__PURE__ */ (0, import_react92.createElement)($cb5cc270b50c6fcd$var$PopoverContentNonModal, _extends({}, contentProps, {
      ref: forwardedRef
    })));
  });
  var $cb5cc270b50c6fcd$var$PopoverContentModal = /* @__PURE__ */ (0, import_react92.forwardRef)((props, forwardedRef) => {
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    const contentRef = (0, import_react92.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, contentRef);
    const isRightClickOutsideRef = (0, import_react92.useRef)(false);
    (0, import_react92.useEffect)(() => {
      const content = contentRef.current;
      if (content)
        return hideOthers(content);
    }, []);
    return /* @__PURE__ */ (0, import_react92.createElement)(Combination_default, {
      as: $5e63c961fc1ce211$export$8c6ed5c666ac1360,
      allowPinchZoom: true
    }, /* @__PURE__ */ (0, import_react92.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, props, {
      ref: composedRefs,
      trapFocus: context.open,
      disableOutsidePointerEvents: true,
      onCloseAutoFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onCloseAutoFocus, (event) => {
        var _context$triggerRef$c;
        event.preventDefault();
        if (!isRightClickOutsideRef.current)
          (_context$triggerRef$c = context.triggerRef.current) === null || _context$triggerRef$c === void 0 || _context$triggerRef$c.focus();
      }),
      onPointerDownOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownOutside, (event) => {
        const originalEvent = event.detail.originalEvent;
        const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
        const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
        isRightClickOutsideRef.current = isRightClick;
      }, {
        checkForDefaultPrevented: false
      }),
      onFocusOutside: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
        props.onFocusOutside,
        (event) => event.preventDefault(),
        {
          checkForDefaultPrevented: false
        }
      )
    })));
  });
  var $cb5cc270b50c6fcd$var$PopoverContentNonModal = /* @__PURE__ */ (0, import_react92.forwardRef)((props, forwardedRef) => {
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, props.__scopePopover);
    const hasInteractedOutsideRef = (0, import_react92.useRef)(false);
    const hasPointerDownOutsideRef = (0, import_react92.useRef)(false);
    return /* @__PURE__ */ (0, import_react92.createElement)($cb5cc270b50c6fcd$var$PopoverContentImpl, _extends({}, props, {
      ref: forwardedRef,
      trapFocus: false,
      disableOutsidePointerEvents: false,
      onCloseAutoFocus: (event) => {
        var _props$onCloseAutoFoc;
        (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
        if (!event.defaultPrevented) {
          var _context$triggerRef$c2;
          if (!hasInteractedOutsideRef.current)
            (_context$triggerRef$c2 = context.triggerRef.current) === null || _context$triggerRef$c2 === void 0 || _context$triggerRef$c2.focus();
          event.preventDefault();
        }
        hasInteractedOutsideRef.current = false;
        hasPointerDownOutsideRef.current = false;
      },
      onInteractOutside: (event) => {
        var _props$onInteractOuts, _context$triggerRef$c3;
        (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
        if (!event.defaultPrevented) {
          hasInteractedOutsideRef.current = true;
          if (event.detail.originalEvent.type === "pointerdown")
            hasPointerDownOutsideRef.current = true;
        }
        const target = event.target;
        const targetIsTrigger = (_context$triggerRef$c3 = context.triggerRef.current) === null || _context$triggerRef$c3 === void 0 ? void 0 : _context$triggerRef$c3.contains(target);
        if (targetIsTrigger)
          event.preventDefault();
        if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current)
          event.preventDefault();
      }
    }));
  });
  var $cb5cc270b50c6fcd$var$PopoverContentImpl = /* @__PURE__ */ (0, import_react92.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopePopover, trapFocus, onOpenAutoFocus, onCloseAutoFocus, disableOutsidePointerEvents, onEscapeKeyDown, onPointerDownOutside, onFocusOutside, onInteractOutside } = _a5, contentProps = __objRest(_a5, ["__scopePopover", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus", "disableOutsidePointerEvents", "onEscapeKeyDown", "onPointerDownOutside", "onFocusOutside", "onInteractOutside"]);
    const context = $cb5cc270b50c6fcd$var$usePopoverContext($cb5cc270b50c6fcd$var$CONTENT_NAME, __scopePopover);
    const popperScope = $cb5cc270b50c6fcd$var$usePopperScope(__scopePopover);
    $3db38b7d1fb3fe6a$export$b7ece24a22aeda8c();
    return /* @__PURE__ */ (0, import_react92.createElement)($d3863c46a17e8a28$export$20e40289641fbbb6, {
      asChild: true,
      loop: true,
      trapped: trapFocus,
      onMountAutoFocus: onOpenAutoFocus,
      onUnmountAutoFocus: onCloseAutoFocus
    }, /* @__PURE__ */ (0, import_react92.createElement)($5cb92bef7577960e$export$177fb62ff3ec1f22, {
      asChild: true,
      disableOutsidePointerEvents,
      onInteractOutside,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onDismiss: () => context.onOpenChange(false)
    }, /* @__PURE__ */ (0, import_react92.createElement)($cf1ac5d9fe0e8206$export$7c6e2c02157bb7d22, _extends({
      "data-state": $cb5cc270b50c6fcd$var$getState(context.open),
      role: "dialog",
      id: context.contentId
    }, popperScope, contentProps, {
      ref: forwardedRef,
      style: __spreadProps(__spreadValues({}, contentProps.style), {
        "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
        "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
        "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
        "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
        "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
      })
    }))));
  });
  function $cb5cc270b50c6fcd$var$getState(open) {
    return open ? "open" : "closed";
  }
  var $cb5cc270b50c6fcd$export$be92b6f5f03c0fe9 = $cb5cc270b50c6fcd$export$5b6b19405a83ff9d;
  var $cb5cc270b50c6fcd$export$41fb9f06171c75f4 = $cb5cc270b50c6fcd$export$7dacb05d26466c3;
  var $cb5cc270b50c6fcd$export$602eac185826482c = $cb5cc270b50c6fcd$export$dd679ffb4362d2d4;
  var $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2 = $cb5cc270b50c6fcd$export$d7e1f420b25549ff;

  // ../../../packages/ui/src/lib/components/ActionsMenu.tsx
  var import_react93 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/primitives/Popover.tsx
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var Popover = ({ id, children, onOpenChange }) => {
    const [isOpen, handleOpenChange] = useMenuIsOpen(id, onOpenChange);
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)($cb5cc270b50c6fcd$export$be92b6f5f03c0fe9, { onOpenChange: handleOpenChange, open: isOpen, children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)("div", { className: "tlui-popover", children }) });
  };
  var PopoverTrigger = ({ children, disabled, "data-wd": dataWd }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)($cb5cc270b50c6fcd$export$41fb9f06171c75f4, { "data-wd": dataWd, disabled, asChild: true, dir: "ltr", children });
  };
  var PopoverContent = ({ side, children, align = "center", sideOffset = 8, alignOffset = 0 }) => {
    const container = useContainer();
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)($cb5cc270b50c6fcd$export$602eac185826482c, { dir: "ltr", container, children: /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
      $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2,
      {
        className: "tlui-popover__content",
        side,
        sideOffset,
        align,
        alignOffset,
        dir: "ltr",
        children
      }
    ) });
  };

  // ../../../packages/ui/src/lib/components/ActionsMenu.tsx
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var ActionsMenu = (0, import_react93.memo)(function ActionsMenu2() {
    const msg2 = useTranslation();
    const container = useContainer();
    const menuSchema = useActionsMenuSchema();
    const isReadonly = useReadonly();
    function getActionMenuItem(item) {
      if (isReadonly && !item.readonlyOk)
        return null;
      switch (item.type) {
        case "item": {
          const { id, icon, label, kbd: kbd2, onSelect } = item.actionItem;
          return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
            Button,
            {
              className: "tlui-button-grid__button",
              "data-wd": `menu-item.${item.id}`,
              icon,
              title: label ? kbd2 ? `${msg2(label)} ${kbdStr(kbd2)}` : `${msg2(label)}` : kbd2 ? `${kbdStr(kbd2)}` : "",
              onClick: () => onSelect("actions-menu"),
              disabled: item.disabled
            },
            id
          );
        }
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(Popover, { id: "actions menu", children: [
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(PopoverTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
        Button,
        {
          className: "tlui-menu__trigger",
          "data-wd": "main.action-menu",
          icon: "dots-vertical",
          title: msg2("actions-menu.title"),
          smallIcon: true
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsx)($cb5cc270b50c6fcd$export$602eac185826482c, { dir: "ltr", container, children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
        $cb5cc270b50c6fcd$export$7c6e2c02157bb7d2,
        {
          className: "tlui-popover__content",
          side: "bottom",
          dir: "ltr",
          sideOffset: 6,
          children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("div", { className: "tlui-actions-menu tlui-button-grid__four", children: menuSchema.map(getActionMenuItem) })
        }
      ) })
    ] });
  });

  // ../../../packages/ui/src/lib/components/DuplicateButton.tsx
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var DuplicateButton = track(function DuplicateButton2() {
    const app = useApp();
    const actions = useActions();
    const msg2 = useTranslation();
    const action = actions["duplicate"];
    const noSelected = app.selectedIds.length <= 0;
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
      Button,
      {
        icon: action.icon,
        onClick: () => action.onSelect("quick-actions"),
        disabled: noSelected,
        title: `${msg2(action.label)} ${kbdStr(action.kbd)}`,
        smallIcon: true
      }
    );
  });

  // ../../../packages/ui/src/lib/components/Menu.tsx
  var React58 = __toESM(require_react());
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  var Menu = React58.memo(function Menu2() {
    const msg2 = useTranslation();
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)(Root, { id: "main menu", children: [
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
        Button,
        {
          className: "tlui-menu__trigger",
          "data-wd": "main.menu",
          title: msg2("menu.title"),
          icon: "menu"
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(Content, { alignOffset: 0, sideOffset: 6, children: /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(MenuContent, {}) })
    ] });
  });
  function MenuContent() {
    const app = useApp();
    const msg2 = useTranslation();
    const menuSchema = useMenuSchema();
    const breakpoint = useBreakpoint();
    const isReadonly = useReadonly();
    const { paste } = useMenuClipboardEvents("menu");
    function getMenuItem(app2, item, parent, depth) {
      switch (item.type) {
        case "custom": {
          if (isReadonly && !item.readonlyOk)
            return null;
          if (item.id === "LANGUAGE_MENU") {
            return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(LanguageMenu, {}, "item");
          }
          if (item.id === "MENU_PASTE") {
            return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
              Item,
              {
                "data-wd": `menu-item.${item.id}`,
                kbd: "$v",
                label: "action.paste",
                disabled: item.disabled,
                onMouseDown: () => {
                  var _a5;
                  if (app2.isSafari && ((_a5 = navigator.clipboard) == null ? void 0 : _a5.read)) {
                    navigator.clipboard.read().then((clipboardItems) => {
                      paste(clipboardItems);
                    });
                  }
                },
                onClick: () => {
                  var _a5;
                  if (app2.isSafari) {
                  } else if ((_a5 = navigator.clipboard) == null ? void 0 : _a5.read) {
                    navigator.clipboard.read().then((clipboardItems) => {
                      paste(clipboardItems);
                    });
                  }
                },
                onPointerUp: preventDefault
              },
              item.id
            );
          }
          return null;
        }
        case "group": {
          if (isReadonly && !item.readonlyOk)
            return null;
          return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
            Group,
            {
              size: depth <= 1 ? "medium" : breakpoint < 3 || (parent == null ? void 0 : parent.type) === "submenu" && depth > 2 ? "tiny" : "medium",
              children: item.children.map((child) => getMenuItem(app2, child, item, depth + 1))
            },
            item.id
          );
        }
        case "submenu": {
          if (isReadonly && !item.readonlyOk)
            return null;
          return /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)(Sub, { id: `main menu ${parent ? parent.id + " " : ""}${item.id}`, children: [
            /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(SubTrigger, { label: item.label, "data-wd": `menu-item.${item.id}` }),
            /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(SubContent, { sideOffset: -4, alignOffset: -1, children: item.children.map((child) => getMenuItem(app2, child, item, depth + 1)) })
          ] }, item.id);
        }
        case "item": {
          if (isReadonly && !item.readonlyOk)
            return null;
          const { id, checkbox, menuLabel, label, onSelect, kbd: kbd2 } = item.actionItem;
          const labelToUse = menuLabel != null ? menuLabel : label;
          const labelStr = labelToUse ? msg2(labelToUse) : void 0;
          if (checkbox) {
            return /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)(
              CheckboxItem,
              {
                onSelect: () => onSelect("menu"),
                title: labelStr ? labelStr : "",
                checked: item.checked,
                disabled: item.disabled,
                children: [
                  labelStr && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("span", { children: labelStr }),
                  kbd2 && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(Kbd, { children: kbd2 })
                ]
              },
              id
            );
          }
          return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
            Item,
            {
              "data-wd": `menu-item.${item.id}`,
              kbd: kbd2,
              label: labelToUse,
              onClick: () => onSelect("menu"),
              disabled: item.disabled
            },
            id
          );
        }
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(import_jsx_runtime88.Fragment, { children: menuSchema.map((item) => getMenuItem(app, item, null, 0)) });
  }

  // ../../../packages/ui/src/lib/components/PageMenu/PageMenu.tsx
  var import_react96 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/PageMenu/PageItemInput.tsx
  var import_react94 = __toESM(require_react());
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var PageItemInput = function PageItemInput2({
    name,
    id,
    isCurrentPage
  }) {
    const app = useApp();
    const rInput = (0, import_react94.useRef)(null);
    const handleChange = (0, import_react94.useCallback)(
      (value) => {
        app.renamePage(id, value ? value : "New Page", true);
      },
      [app, id]
    );
    const handleComplete = (0, import_react94.useCallback)(
      (value) => {
        app.mark("rename page");
        app.renamePage(id, value || "New Page", false);
      },
      [app, id]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(
      Input,
      {
        className: "tlui-page-menu__item__input",
        ref: (el) => rInput.current = el,
        defaultValue: name,
        onValueChange: handleChange,
        onComplete: handleComplete,
        onCancel: handleComplete,
        shouldManuallyMaintainScrollPositionWhenFocused: true,
        autofocus: isCurrentPage,
        autoselect: true
      }
    );
  };

  // ../../../packages/ui/src/lib/components/PageMenu/PageItemSubmenu.tsx
  var import_react95 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/PageMenu/edit-pages-shared.ts
  var onMovePage = (app, id, from, to) => {
    let index2;
    const pages = app.pages;
    const below = from > to ? pages[to - 1] : pages[to];
    const above = from > to ? pages[to] : pages[to + 1];
    if (below && !above) {
      index2 = getIndexAbove(below.index);
    } else if (!below && above) {
      index2 = getIndexBelow(pages[0].index);
    } else {
      index2 = getIndexBetween(below.index, above.index);
    }
    if (index2 !== pages[from].index) {
      app.mark("moving page");
      app.updatePage({
        id,
        index: index2
      });
    }
  };

  // ../../../packages/ui/src/lib/components/PageMenu/PageItemSubmenu.tsx
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  var PageItemSubmenu = track(function PageItemSubmenu2({
    index: index2,
    listSize,
    item,
    onRename
  }) {
    const app = useApp();
    const msg2 = useTranslation();
    const pages = app.pages;
    const onDuplicate = (0, import_react95.useCallback)(() => {
      app.mark("creating page");
      const newId = TLPage.createId();
      app.duplicatePage(item.id, newId);
    }, [app, item]);
    const onMoveUp = (0, import_react95.useCallback)(() => {
      onMovePage(app, item.id, index2, index2 - 1);
    }, [app, item, index2]);
    const onMoveDown = (0, import_react95.useCallback)(() => {
      onMovePage(app, item.id, index2, index2 + 1);
    }, [app, item, index2]);
    const onDelete = (0, import_react95.useCallback)(() => {
      app.mark("deleting page");
      app.deletePage(item.id);
    }, [app, item]);
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)(Root, { id: "page item submenu", children: [
      /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Button, { title: msg2("page-menu.submenu.title"), icon: "dots-vertical" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)(Content, { alignOffset: 0, children: [
        /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)(Group, { children: [
          onRename && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)($d08ef79370b62062$export$6d08773d2e66f8f2, { dir: "ltr", onSelect: onRename, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Button, { className: "tlui-menu__button", label: "page-menu.submenu.rename" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
            $d08ef79370b62062$export$6d08773d2e66f8f2,
            {
              dir: "ltr",
              onSelect: onDuplicate,
              disabled: pages.length >= MAX_PAGES,
              asChild: true,
              children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Button, { className: "tlui-menu__button", label: "page-menu.submenu.duplicate-page" })
            }
          ),
          index2 > 0 && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)($d08ef79370b62062$export$6d08773d2e66f8f2, { dir: "ltr", onSelect: onMoveUp, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Button, { className: "tlui-menu__button", label: "page-menu.submenu.move-up" }) }),
          index2 < listSize - 1 && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)($d08ef79370b62062$export$6d08773d2e66f8f2, { dir: "ltr", onSelect: onMoveDown, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Button, { className: "tlui-menu__button", label: "page-menu.submenu.move-down" }) })
        ] }),
        listSize > 1 && /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Group, { children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)($d08ef79370b62062$export$6d08773d2e66f8f2, { dir: "ltr", onSelect: onDelete, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(Button, { className: "tlui-menu__button", label: "page-menu.submenu.delete" }) }) })
      ] })
    ] });
  });

  // ../../../packages/ui/src/lib/components/PageMenu/PageMenu.tsx
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var PageMenu = function PageMenu2() {
    const app = useApp();
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const ITEM_HEIGHT = breakpoint < 5 ? 36 : 40;
    const rSortableContainer = (0, import_react96.useRef)(null);
    const pages = useValue("pages", () => app.pages, [app]);
    const currentPage = useValue("currentPage", () => app.currentPage, [app]);
    const isReadonlyMode = useValue("isReadonlyMode", () => app.isReadOnly, [app]);
    const maxPageCountReached = useValue("maxPageCountReached", () => app.pages.length >= MAX_PAGES, [
      app
    ]);
    const isCoarsePointer = useValue("isCoarsePointer", () => app.isCoarsePointer, [app]);
    const [isEditing, setIsEditing] = (0, import_react96.useState)(false);
    const toggleEditing = (0, import_react96.useCallback)(() => {
      if (isReadonlyMode)
        return;
      setIsEditing((s3) => !s3);
    }, [isReadonlyMode]);
    const [isOpen, setIsOpen] = (0, import_react96.useState)(false);
    const handleOpenChange = (0, import_react96.useCallback)((isOpen2) => {
      setIsOpen(isOpen2);
      setIsEditing(false);
    }, []);
    const rMutables = (0, import_react96.useRef)({
      isPointing: false,
      status: "idle",
      pointing: null,
      startY: 0,
      startIndex: 0,
      dragIndex: 0
    });
    const [sortablePositionItems, setSortablePositionItems] = (0, import_react96.useState)(
      Object.fromEntries(
        pages.map((page, i3) => [page.id, { y: i3 * ITEM_HEIGHT, offsetY: 0, isSelected: false }])
      )
    );
    (0, import_react96.useLayoutEffect)(() => {
      setSortablePositionItems(
        Object.fromEntries(
          pages.map((page, i3) => [page.id, { y: i3 * ITEM_HEIGHT, offsetY: 0, isSelected: false }])
        )
      );
    }, [ITEM_HEIGHT, pages]);
    (0, import_react96.useEffect)(() => {
      if (!isOpen)
        return;
      requestAnimationFrame(() => {
        const elm = document.querySelector(
          `[data-wd="page-menu-item-${currentPage.id}"]`
        );
        if (elm) {
          const container = rSortableContainer.current;
          if (!container)
            return;
          const elmTopPosition = elm.offsetTop;
          const containerScrollTopPosition = container.scrollTop;
          if (elmTopPosition < containerScrollTopPosition) {
            container.scrollTo({ top: elmTopPosition });
          }
          const elmBottomPosition = elmTopPosition + ITEM_HEIGHT;
          const containerScrollBottomPosition = container.scrollTop + container.offsetHeight;
          if (elmBottomPosition > containerScrollBottomPosition) {
            container.scrollTo({ top: elmBottomPosition - container.offsetHeight });
          }
        }
      });
    }, [ITEM_HEIGHT, currentPage, isOpen]);
    const handlePointerDown = (0, import_react96.useCallback)(
      (e2) => {
        const { clientY, currentTarget } = e2;
        const {
          dataset: { id, index: index2 }
        } = currentTarget;
        if (!id || !index2)
          return;
        const mut = rMutables.current;
        e2.currentTarget.setPointerCapture(e2.pointerId);
        mut.status = "pointing";
        mut.pointing = { id, index: +index2 };
        const current = sortablePositionItems[id];
        const dragY = current.y;
        mut.startY = clientY;
        mut.startIndex = Math.max(0, Math.min(Math.round(dragY / ITEM_HEIGHT), pages.length - 1));
      },
      [ITEM_HEIGHT, pages.length, sortablePositionItems]
    );
    const handlePointerMove = (0, import_react96.useCallback)(
      (e2) => {
        const mut = rMutables.current;
        if (mut.status === "pointing") {
          const { clientY } = e2;
          const offset = clientY - mut.startY;
          if (Math.abs(offset) > 5) {
            mut.status = "dragging";
          }
        }
        if (mut.status === "dragging") {
          const { clientY } = e2;
          const offsetY = clientY - mut.startY;
          const current = sortablePositionItems[mut.pointing.id];
          const { startIndex, pointing } = mut;
          const dragY = current.y + offsetY;
          const dragIndex = Math.max(0, Math.min(Math.round(dragY / ITEM_HEIGHT), pages.length - 1));
          const next = __spreadValues({}, sortablePositionItems);
          next[pointing.id] = {
            y: current.y,
            offsetY,
            isSelected: true
          };
          if (dragIndex !== mut.dragIndex) {
            mut.dragIndex = dragIndex;
            for (let i3 = 0; i3 < pages.length; i3++) {
              const item = pages[i3];
              if (item.id === mut.pointing.id) {
                continue;
              }
              let { y: y3 } = next[item.id];
              if (dragIndex === startIndex) {
                y3 = i3 * ITEM_HEIGHT;
              } else if (dragIndex < startIndex) {
                if (dragIndex <= i3 && i3 < startIndex) {
                  y3 = (i3 + 1) * ITEM_HEIGHT;
                } else {
                  y3 = i3 * ITEM_HEIGHT;
                }
              } else if (dragIndex > startIndex) {
                if (dragIndex >= i3 && i3 > startIndex) {
                  y3 = (i3 - 1) * ITEM_HEIGHT;
                } else {
                  y3 = i3 * ITEM_HEIGHT;
                }
              }
              if (y3 !== next[item.id].y) {
                next[item.id] = { y: y3, offsetY: 0, isSelected: true };
              }
            }
          }
          setSortablePositionItems(next);
        }
      },
      [ITEM_HEIGHT, pages, sortablePositionItems]
    );
    const handlePointerUp = (0, import_react96.useCallback)(
      (e2) => {
        const mut = rMutables.current;
        if (mut.status === "dragging") {
          const { id, index: index2 } = mut.pointing;
          onMovePage(app, id, index2, mut.dragIndex);
        }
        e2.currentTarget.releasePointerCapture(e2.pointerId);
        mut.status = "idle";
      },
      [app]
    );
    const handleKeyDown = (0, import_react96.useCallback)(
      (e2) => {
        const mut = rMutables.current;
        if (e2.key === "Escape") {
          if (mut.status === "dragging") {
            setSortablePositionItems(
              Object.fromEntries(
                pages.map((page, i3) => [
                  page.id,
                  { y: i3 * ITEM_HEIGHT, offsetY: 0, isSelected: false }
                ])
              )
            );
          }
          mut.status = "idle";
        }
      },
      [ITEM_HEIGHT, pages]
    );
    const handleCreatePageClick = (0, import_react96.useCallback)(() => {
      if (isReadonlyMode)
        return;
      app.mark("creating page");
      const newPageId = TLPage.createId();
      app.createPage(msg2("page-menu.new-page-initial-name"), newPageId);
      setIsEditing(true);
    }, [app, msg2, isReadonlyMode]);
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(Popover, { id: "page menu", onOpenChange: handleOpenChange, open: isOpen, children: [
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(PopoverTrigger, { children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
        Button,
        {
          className: "tlui-page-menu__trigger tlui-menu__trigger",
          "data-wd": "main.page-menu",
          icon: "chevron-down",
          title: currentPage.name,
          children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "tlui-page-menu__name", children: currentPage.name })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(PopoverContent, { side: "bottom", align: "start", sideOffset: 6, children: /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "tlui-page-menu__wrapper", children: [
        /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)("div", { className: "tlui-page-menu__header", children: [
          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "tlui-page-menu__header__title", children: msg2("page-menu.title") }),
          !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(import_jsx_runtime91.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
              Button,
              {
                "data-wd": "page-menu.edit",
                title: msg2(isEditing ? "page-menu.edit-done" : "page-menu.edit-start"),
                icon: isEditing ? "check" : "edit",
                onClick: toggleEditing
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
              Button,
              {
                "data-wd": "page-menu.create",
                icon: "plus",
                title: msg2(
                  maxPageCountReached ? "page-menu.max-page-count-reached" : "page-menu.create-new-page"
                ),
                disabled: maxPageCountReached,
                onClick: handleCreatePageClick
              }
            )
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
          "div",
          {
            className: "tlui-page-menu__list tlui-menu__group",
            style: { height: ITEM_HEIGHT * pages.length + 4 },
            ref: rSortableContainer,
            children: pages.map((page, index2) => {
              var _a5;
              const position = (_a5 = sortablePositionItems[page.id]) != null ? _a5 : {
                position: index2 * 40,
                offsetY: 0
              };
              return isEditing ? /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(
                "div",
                {
                  "data-wd": `page-menu-item-${page.id}`,
                  className: "tlui-page_menu__item__sortable",
                  style: {
                    zIndex: page.id === currentPage.id ? 888 : index2,
                    transform: `translate(0px, ${position.y + position.offsetY}px)`
                  },
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
                      Button,
                      {
                        tabIndex: -1,
                        className: "tlui-page_menu__item__sortable__handle",
                        icon: "drag-handle-dots",
                        onPointerDown: handlePointerDown,
                        onPointerUp: handlePointerUp,
                        onPointerMove: handlePointerMove,
                        onKeyDown: handleKeyDown,
                        "data-id": page.id,
                        "data-index": index2
                      }
                    ),
                    breakpoint < 5 && isCoarsePointer ? (
                      // sigh, this is a workaround for iOS Safari
                      // because the device and the radix popover seem
                      // to be fighting over scroll position. Nothing
                      // else seems to work!
                      /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
                        Button,
                        {
                          className: "tlui-page-menu__item__button",
                          onClick: () => {
                            const name = window.prompt("Rename page", page.name);
                            if (name && name !== page.name) {
                              app.renamePage(page.id, name);
                            }
                          },
                          onDoubleClick: toggleEditing,
                          isChecked: page.id === currentPage.id,
                          children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("span", { children: page.name })
                        }
                      )
                    ) : /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
                      "div",
                      {
                        id: `page-menu-item-${page.id}`,
                        "data-wd": `page-menu-item-${page.id}`,
                        className: "tlui-page_menu__item__sortable__title",
                        style: { height: ITEM_HEIGHT },
                        children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
                          PageItemInput,
                          {
                            id: page.id,
                            name: page.name,
                            isCurrentPage: page.id === currentPage.id
                          }
                        )
                      }
                    ),
                    !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "tlui-page_menu__item__submenu", "data-isediting": isEditing, children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(PageItemSubmenu, { index: index2, item: page, listSize: pages.length }) })
                  ]
                },
                page.id + "_editing"
              ) : /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(
                "div",
                {
                  "data-wd": `page-menu-item-${page.id}`,
                  className: "tlui-page-menu__item",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime91.jsxs)(
                      Button,
                      {
                        className: "tlui-page-menu__item__button tlui-page-menu__item__button__checkbox",
                        onClick: () => app.setCurrentPageId(page.id),
                        onDoubleClick: toggleEditing,
                        isChecked: page.id === currentPage.id,
                        title: msg2("page-menu.go-to-page"),
                        children: [
                          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "tlui-page-menu__item__button__check", children: page.id === currentPage.id && /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(Icon, { icon: "check" }) }),
                          /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("span", { children: page.name })
                        ]
                      }
                    ),
                    !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime91.jsx)("div", { className: "tlui-page_menu__item__submenu", children: /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(
                      PageItemSubmenu,
                      {
                        index: index2,
                        item: page,
                        listSize: pages.length,
                        onRename: () => {
                          if (app.isIos) {
                            const name = window.prompt("Rename page", page.name);
                            if (name && name !== page.name) {
                              app.renamePage(page.id, name);
                            }
                          } else {
                            setIsEditing(true);
                            app.setCurrentPageId(page.id);
                          }
                        }
                      }
                    ) })
                  ]
                },
                page.id
              );
            })
          }
        )
      ] }) })
    ] });
  };

  // ../../../packages/ui/src/lib/components/RedoButton.tsx
  var import_react97 = __toESM(require_react());
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  var RedoButton = (0, import_react97.memo)(function RedoButton2() {
    const msg2 = useTranslation();
    const canRedo = useCanRedo();
    const actions = useActions();
    const redo = actions["redo"];
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
      Button,
      {
        "data-wd": "main.redo",
        icon: redo.icon,
        title: `${msg2(redo.label)} ${kbdStr(redo.kbd)}`,
        disabled: !canRedo,
        onClick: () => redo.onSelect("quick-actions"),
        smallIcon: true
      }
    );
  });

  // ../../../packages/ui/src/lib/components/TrashButton.tsx
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  var TrashButton = track(function TrashButton2() {
    const app = useApp();
    const actions = useActions();
    const msg2 = useTranslation();
    const action = actions["delete"];
    const isReadonly = useReadonly();
    if (isReadonly)
      return null;
    const noSelected = app.selectedIds.length <= 0;
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
      Button,
      {
        icon: action.icon,
        onClick: () => action.onSelect("quick-actions"),
        disabled: noSelected,
        title: `${msg2(action.label)} ${kbdStr(action.kbd)}`,
        smallIcon: true
      }
    );
  });

  // ../../../packages/ui/src/lib/components/UndoButton.tsx
  var import_react98 = __toESM(require_react());
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  var UndoButton = (0, import_react98.memo)(function UndoButton2() {
    const msg2 = useTranslation();
    const canUndo = useCanUndo();
    const actions = useActions();
    const undo = actions["undo"];
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
      Button,
      {
        "data-wd": "main.undo",
        icon: undo.icon,
        title: `${msg2(undo.label)} ${kbdStr(undo.kbd)}`,
        disabled: !canUndo,
        onClick: () => undo.onSelect("quick-actions"),
        smallIcon: true
      }
    );
  });

  // ../../../packages/ui/src/lib/components/MenuZone.tsx
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  var MenuZone = track(function MenuZone2() {
    const app = useApp();
    const breakpoint = useBreakpoint();
    const isReadonly = useReadonly();
    const showQuickActions = !isReadonly && !app.isInAny("hand", "zoom", "eraser");
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("div", { className: "tlui-menu-zone", children: /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)("div", { className: "tlui-menu-zone__controls", children: [
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(Menu, {}),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("div", { className: "tlui-menu-zone__divider" }),
      /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(PageMenu, {}),
      breakpoint >= 5 && showQuickActions && /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(import_jsx_runtime95.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("div", { className: "tlui-menu-zone__divider" }),
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(UndoButton, {}),
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(RedoButton, {}),
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(TrashButton, {}),
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(DuplicateButton, {}),
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ActionsMenu, {})
      ] })
    ] }) });
  });

  // ../../../packages/ui/src/lib/components/NavigationZone/NavigationZone.tsx
  var import_react100 = __toESM(require_react());

  // ../../../packages/ui/src/lib/hooks/useLocalStorageState.ts
  var import_react99 = __toESM(require_react());
  function useLocalStorageState(key, defaultValue) {
    const [state, setState] = import_react99.default.useState(defaultValue);
    import_react99.default.useLayoutEffect(() => {
      const value = localStorage.getItem(key);
      if (value) {
        try {
          setState(JSON.parse(value));
        } catch (e2) {
          console.error(`Could not restore value ${key} from local storage.`);
        }
      }
    }, [key]);
    const updateValue = import_react99.default.useCallback(
      (setter) => {
        setState((s3) => {
          const value = typeof setter === "function" ? setter(s3) : setter;
          localStorage.setItem(key, JSON.stringify(value));
          return value;
        });
      },
      [key]
    );
    return [state, updateValue];
  }

  // ../../../packages/ui/src/lib/components/NavigationZone/Minimap.tsx
  var React60 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/NavigationZone/MinimapManager.ts
  var MinimapManager = class {
    constructor(app, dpr) {
      this.app = app;
      this.dpr = dpr;
      __publicField(this, "colors", {
        shapeFill: "rgba(144, 144, 144, .1)",
        selectFill: "#2f80ed",
        viewportFill: "rgba(144, 144, 144, .1)"
      });
      __publicField(this, "id", uniqueId());
      __publicField(this, "cvs", null);
      __publicField(this, "pageBounds", []);
      __publicField(this, "collaborators", []);
      __publicField(this, "canvasScreenBounds", new Box2d());
      __publicField(this, "canvasPageBounds", new Box2d());
      __publicField(this, "contentPageBounds", new Box2d());
      __publicField(this, "contentScreenBounds", new Box2d());
      __publicField(this, "originPagePoint", new Vec2d());
      __publicField(this, "originPageCenter", new Vec2d());
      __publicField(this, "isInViewport", false);
      __publicField(this, "debug", false);
      __publicField(this, "updateContentScreenBounds", () => {
        const { contentScreenBounds, contentPageBounds: content, canvasScreenBounds: canvas } = this;
        let { x: x3, y: y3, w: w3, h: h3 } = contentScreenBounds;
        if (content.w > content.h) {
          const sh = canvas.w / (content.w / content.h);
          if (sh > canvas.h) {
            x3 = (canvas.w - canvas.w * (canvas.h / sh)) / 2;
            y3 = 0;
            w3 = canvas.w * (canvas.h / sh);
            h3 = canvas.h;
          } else {
            x3 = 0;
            y3 = (canvas.h - sh) / 2;
            w3 = canvas.w;
            h3 = sh;
          }
        } else if (content.w < content.h) {
          const sw = canvas.h / (content.h / content.w);
          x3 = (canvas.w - sw) / 2;
          y3 = 0;
          w3 = sw;
          h3 = canvas.h;
        } else {
          x3 = canvas.h / 2;
          y3 = 0;
          w3 = canvas.h;
          h3 = canvas.h;
        }
        contentScreenBounds.set(x3, y3, w3, h3);
      });
      /** Get the canvas's true bounds converted to page bounds. */
      __publicField(this, "updateCanvasPageBounds", () => {
        const { canvasPageBounds, canvasScreenBounds, contentPageBounds, contentScreenBounds } = this;
        canvasPageBounds.set(
          0,
          0,
          contentPageBounds.width / (contentScreenBounds.width / canvasScreenBounds.width),
          contentPageBounds.height / (contentScreenBounds.height / canvasScreenBounds.height)
        );
        canvasPageBounds.center = contentPageBounds.center;
      });
      __publicField(this, "getScreenPoint", (x3, y3) => {
        const { canvasScreenBounds } = this;
        const screenX = (x3 - canvasScreenBounds.minX) * this.dpr;
        const screenY = (y3 - canvasScreenBounds.minY) * this.dpr;
        return { x: screenX, y: screenY };
      });
      __publicField(this, "getPagePoint", (x3, y3) => {
        const { contentPageBounds, contentScreenBounds, canvasPageBounds } = this;
        const { x: screenX, y: screenY } = this.getScreenPoint(x3, y3);
        return {
          x: canvasPageBounds.minX + screenX * contentPageBounds.width / contentScreenBounds.width,
          y: canvasPageBounds.minY + screenY * contentPageBounds.height / contentScreenBounds.height,
          z: 1
        };
      });
      __publicField(this, "minimapScreenPointToPagePoint", (x3, y3, shiftKey = false, clampToBounds = false) => {
        var _a5, _b2, _c, _d;
        const { app } = this;
        const { viewportPageBounds } = app;
        let { x: px, y: py } = this.getPagePoint(x3, y3);
        if (clampToBounds) {
          const shapesPageBounds = this.app.allShapesCommonBounds;
          const vpPageBounds = viewportPageBounds;
          const minX = ((_a5 = shapesPageBounds == null ? void 0 : shapesPageBounds.minX) != null ? _a5 : 0) - vpPageBounds.width / 2;
          const maxX = ((_b2 = shapesPageBounds == null ? void 0 : shapesPageBounds.maxX) != null ? _b2 : 0) + vpPageBounds.width / 2;
          const minY = ((_c = shapesPageBounds == null ? void 0 : shapesPageBounds.minY) != null ? _c : 0) - vpPageBounds.height / 2;
          const maxY = ((_d = shapesPageBounds == null ? void 0 : shapesPageBounds.maxY) != null ? _d : 0) + vpPageBounds.height / 2;
          const lx = Math.max(0, minX + vpPageBounds.width - px);
          const rx = Math.max(0, -(maxX - vpPageBounds.width - px));
          const ly = Math.max(0, minY + vpPageBounds.height - py);
          const ry = Math.max(0, -(maxY - vpPageBounds.height - py));
          const ql = Math.max(0, lx - rx);
          const qr = Math.max(0, rx - lx);
          const qt = Math.max(0, ly - ry);
          const qb = Math.max(0, ry - ly);
          if (ql && ql > qr) {
            px += ql / 2;
          } else if (qr) {
            px -= qr / 2;
          }
          if (qt && qt > qb) {
            py += qt / 2;
          } else if (qb) {
            py -= qb / 2;
          }
          px = clamp(px, minX, maxX);
          py = clamp(py, minY, maxY);
        }
        if (shiftKey) {
          const { originPagePoint } = this;
          const dx = Math.abs(px - originPagePoint.x);
          const dy = Math.abs(py - originPagePoint.y);
          if (dx > dy) {
            py = originPagePoint.y;
          } else {
            px = originPagePoint.x;
          }
        }
        return { x: px, y: py };
      });
      __publicField(this, "render", () => {
        const { cvs, pageBounds } = this;
        this.updateCanvasPageBounds();
        const { app, canvasScreenBounds, canvasPageBounds, contentPageBounds, contentScreenBounds } = this;
        const { width: cw, height: ch } = canvasScreenBounds;
        const { viewportPageBounds, selectedIds } = app;
        if (!cvs || !pageBounds) {
          return;
        }
        const ctx = cvs.getContext("2d");
        if (!ctx) {
          throw new Error("Minimap (shapes): Could not get context");
        }
        ctx.resetTransform();
        ctx.globalAlpha = 1;
        ctx.clearRect(0, 0, cw, ch);
        const sx = contentScreenBounds.width / contentPageBounds.width;
        const sy = contentScreenBounds.height / contentPageBounds.height;
        ctx.translate((cw - contentScreenBounds.width) / 2, (ch - contentScreenBounds.height) / 2);
        ctx.scale(sx, sy);
        ctx.translate(-contentPageBounds.minX, -contentPageBounds.minY);
        const rx = 8 / sx;
        const ry = 8 / sx;
        const ax = 1 / sx;
        const ay = 1 / sx;
        const bx = rx / 4;
        const by = ry / 4;
        const shapesPath = new Path2D();
        const selectedPath = new Path2D();
        const { shapeFill, selectFill, viewportFill } = this.colors;
        let pb;
        for (let i3 = 0, n3 = pageBounds.length; i3 < n3; i3++) {
          pb = pageBounds[i3];
          MinimapManager.roundedRect(
            selectedIds.includes(pb.id) ? selectedPath : shapesPath,
            pb.minX,
            pb.minY,
            pb.width,
            pb.height,
            clamp(rx, ax, pb.width / bx),
            clamp(ry, ay, pb.height / by)
          );
        }
        ctx.fillStyle = shapeFill;
        ctx.fill(shapesPath);
        ctx.fillStyle = selectFill;
        ctx.fill(selectedPath);
        if (this.debug) {
          const commonBounds = Box2d.Common(pageBounds);
          const { minX, minY, width, height } = commonBounds;
          ctx.strokeStyle = "green";
          ctx.lineWidth = 2 / sx;
          ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);
        }
        {
          const { brush } = app;
          if (brush) {
            const { x: x3, y: y3, w: w3, h: h3 } = brush;
            ctx.beginPath();
            MinimapManager.sharpRect(ctx, x3, y3, w3, h3);
            ctx.closePath();
            ctx.fillStyle = viewportFill;
            ctx.fill();
          }
        }
        {
          const { minX, minY, width, height } = viewportPageBounds;
          ctx.beginPath();
          const rx2 = 12 / sx;
          const ry2 = 12 / sx;
          MinimapManager.roundedRect(
            ctx,
            minX,
            minY,
            width,
            height,
            Math.min(width / 4, rx2),
            Math.min(height / 4, ry2)
          );
          ctx.closePath();
          ctx.fillStyle = viewportFill;
          ctx.fill();
          if (this.debug) {
            ctx.strokeStyle = "orange";
            ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);
          }
        }
        const px = 2.5 / sx;
        const py = 2.5 / sy;
        const { currentPageId } = app;
        let collaborator;
        for (let i3 = 0; i3 < this.collaborators.length; i3++) {
          collaborator = this.collaborators[i3];
          const instance = collaborator.lastUsedInstanceId ? app.store.get(collaborator.lastUsedInstanceId) : null;
          if ((instance == null ? void 0 : instance.currentPageId) !== currentPageId) {
            continue;
          }
          ctx.beginPath();
          ctx.ellipse(
            clamp(collaborator.cursor.x, canvasPageBounds.minX + px, canvasPageBounds.maxX - px),
            clamp(collaborator.cursor.y, canvasPageBounds.minY + py, canvasPageBounds.maxY - py),
            5 / sx,
            5 / sy,
            0,
            0,
            PI2
          );
          ctx.fillStyle = collaborator.color;
          ctx.fill();
        }
        if (this.debug) {
          ctx.lineWidth = 2 / sx;
          {
            const { minX, minY, width, height } = contentPageBounds;
            ctx.strokeStyle = "red";
            ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);
          }
          {
            const { minX, minY, width, height } = canvasPageBounds;
            ctx.strokeStyle = "blue";
            ctx.strokeRect(minX + 1 / sx, minY + 1 / sy, width - 2 / sx, height - 2 / sy);
          }
        }
      });
    }
    setDpr(dpr) {
      this.dpr = +dpr.toFixed(2);
    }
    static roundedRect(ctx, x3, y3, width, height, rx, ry) {
      if (rx < 1 && ry < 1) {
        ctx.rect(x3, y3, width, height);
        return;
      }
      ctx.moveTo(x3 + rx, y3);
      ctx.lineTo(x3 + width - rx, y3);
      ctx.quadraticCurveTo(x3 + width, y3, x3 + width, y3 + ry);
      ctx.lineTo(x3 + width, y3 + height - ry);
      ctx.quadraticCurveTo(x3 + width, y3 + height, x3 + width - rx, y3 + height);
      ctx.lineTo(x3 + rx, y3 + height);
      ctx.quadraticCurveTo(x3, y3 + height, x3, y3 + height - ry);
      ctx.lineTo(x3, y3 + ry);
      ctx.quadraticCurveTo(x3, y3, x3 + rx, y3);
    }
    static sharpRect(ctx, x3, y3, width, height, _rx, _ry) {
      ctx.rect(x3, y3, width, height);
    }
  };

  // ../../../packages/ui/src/lib/components/NavigationZone/Minimap.tsx
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  var COLLABORATOR_INACTIVITY_TIMEOUT2 = 1e4;
  var useActivePresences2 = () => {
    const app = useApp();
    const time = useAtom("time", Date.now());
    React60.useEffect(() => {
      const interval = setInterval(() => time.set(Date.now()), 1e3 * 5);
      return () => clearInterval(interval);
    }, [time]);
    return React60.useMemo(
      () => app.store.query.records("user_presence", () => ({
        lastActivityTimestamp: { gt: time.value - COLLABORATOR_INACTIVITY_TIMEOUT2 },
        userId: { neq: app.userId }
      })),
      [app, time]
    );
  };
  var Minimap = track(function Minimap2({
    shapeFill,
    selectFill,
    viewportFill
  }) {
    const app = useApp();
    const rCanvas = React60.useRef(null);
    const container = useContainer();
    const rPointing = React60.useRef(false);
    const minimap = React60.useMemo(() => new MinimapManager(app, app.devicePixelRatio), [app]);
    const isDarkMode = app.userDocumentSettings.isDarkMode;
    React60.useEffect(() => {
      const raf2 = requestAnimationFrame(() => {
        const style = getComputedStyle(container);
        minimap.colors = {
          shapeFill: style.getPropertyValue(shapeFill).trim(),
          selectFill: style.getPropertyValue(selectFill).trim(),
          viewportFill: style.getPropertyValue(viewportFill).trim()
        };
        minimap.render();
      });
      return () => {
        cancelAnimationFrame(raf2);
      };
    }, [container, selectFill, shapeFill, viewportFill, minimap, isDarkMode]);
    const onDoubleClick = React60.useCallback(
      (e2) => {
        if (!app.shapeIds.size)
          return;
        const { x: x3, y: y3 } = minimap.minimapScreenPointToPagePoint(e2.clientX, e2.clientY, false, false);
        const clampedPoint = minimap.minimapScreenPointToPagePoint(e2.clientX, e2.clientY, false, true);
        minimap.originPagePoint.setTo(clampedPoint);
        minimap.originPageCenter.setTo(app.viewportPageBounds.center);
        app.centerOnPoint(x3, y3, { duration: ANIMATION_MEDIUM_MS });
      },
      [app, minimap]
    );
    const onPointerDown = React60.useCallback(
      (e2) => {
        e2.currentTarget.setPointerCapture(e2.pointerId);
        if (!app.shapeIds.size)
          return;
        rPointing.current = true;
        minimap.isInViewport = false;
        const { x: x3, y: y3 } = minimap.minimapScreenPointToPagePoint(e2.clientX, e2.clientY, false, false);
        const clampedPoint = minimap.minimapScreenPointToPagePoint(e2.clientX, e2.clientY, false, true);
        const _vpPageBounds = app.viewportPageBounds;
        minimap.originPagePoint.setTo(clampedPoint);
        minimap.originPageCenter.setTo(_vpPageBounds.center);
        minimap.isInViewport = _vpPageBounds.containsPoint(clampedPoint);
        if (!minimap.isInViewport) {
          app.centerOnPoint(x3, y3, { duration: ANIMATION_MEDIUM_MS });
        }
      },
      [app, minimap]
    );
    const onPointerMove = React60.useCallback(
      (e2) => {
        if (rPointing.current) {
          const { x: x3, y: y3 } = minimap.minimapScreenPointToPagePoint(
            e2.clientX,
            e2.clientY,
            e2.shiftKey,
            true
          );
          if (minimap.isInViewport) {
            const delta = Vec2d.Sub({ x: x3, y: y3 }, minimap.originPagePoint);
            const center = Vec2d.Add(minimap.originPageCenter, delta);
            app.centerOnPoint(center.x, center.y);
            return;
          }
          app.centerOnPoint(x3, y3);
        }
        const pagePoint = minimap.getPagePoint(e2.clientX, e2.clientY);
        const screenPoint = app.pageToScreen(pagePoint.x, pagePoint.y);
        const info = __spreadProps(__spreadValues({
          type: "pointer",
          target: "canvas",
          name: "pointer_move"
        }, getPointerInfo2(e2)), {
          point: screenPoint,
          isPen: app.isPenMode
        });
        app.dispatch(info);
      },
      [app, minimap]
    );
    const onPointerUp = React60.useCallback((_e) => {
      rPointing.current = false;
    }, []);
    const onWheel = React60.useCallback(
      (e2) => {
        const offset = normalizeWheel(e2);
        app.dispatch({
          type: "wheel",
          name: "wheel",
          delta: offset,
          shiftKey: e2.shiftKey,
          altKey: e2.altKey,
          ctrlKey: e2.metaKey || e2.ctrlKey
        });
      },
      [app]
    );
    useQuickReactor(
      "update dpr",
      () => {
        const { devicePixelRatio } = app;
        minimap.setDpr(devicePixelRatio);
        const canvas = rCanvas.current;
        const rect = canvas.getBoundingClientRect();
        const width = rect.width * devicePixelRatio;
        const height = rect.height * devicePixelRatio;
        canvas.width = width;
        canvas.height = height;
        minimap.canvasScreenBounds.set(rect.x, rect.y, width, height);
        minimap.cvs = rCanvas.current;
      },
      [app, minimap]
    );
    const presences = useActivePresences2();
    useQuickReactor(
      "minimap render when pagebounds or collaborators changes",
      () => {
        const { devicePixelRatio, viewportPageBounds, allShapesCommonBounds } = app;
        devicePixelRatio;
        minimap.contentPageBounds = allShapesCommonBounds ? Box2d.Expand(allShapesCommonBounds, viewportPageBounds) : viewportPageBounds;
        minimap.updateContentScreenBounds();
        const allShapeBounds = [];
        app.shapeIds.forEach((id) => {
          let pageBounds = app.getPageBoundsById(id);
          const pageMask = app.getPageMaskById(id);
          if (pageMask) {
            const intersection = intersectPolygonPolygon(pageMask, pageBounds.corners);
            if (!intersection) {
              return;
            }
            pageBounds = Box2d.FromPoints(intersection);
          }
          if (pageBounds) {
            pageBounds.id = id;
            allShapeBounds.push(pageBounds);
          }
        });
        minimap.pageBounds = allShapeBounds;
        minimap.collaborators = presences.value;
        minimap.render();
      },
      [app, minimap]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("div", { className: "tlui-minimap", children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
      "canvas",
      {
        ref: rCanvas,
        className: "tlui-minimap__canvas",
        onDoubleClick,
        onPointerMove,
        onPointerDown,
        onPointerUp,
        onWheel
      }
    ) });
  });
  function getPointerInfo2(e2) {
    ;
    e2.isKilled = true;
    return {
      point: {
        x: e2.clientX,
        y: e2.clientY,
        z: e2.pressure
      },
      shiftKey: e2.shiftKey,
      altKey: e2.altKey,
      ctrlKey: e2.metaKey || e2.ctrlKey,
      pointerId: e2.pointerId,
      button: e2.button,
      isPen: e2.pointerType === "pen"
    };
  }

  // ../../../packages/ui/src/lib/components/NavigationZone/ZoomMenu.tsx
  var React61 = __toESM(require_react());
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  var ZoomMenu = track(function ZoomMenu2() {
    const app = useApp();
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const zoom = app.zoomLevel;
    const hasShapes = app.shapeIds.size > 0;
    const hasSelected = app.selectedIds.length > 0;
    const isZoomedTo100 = app.zoomLevel === 1;
    const handleDoubleClick = React61.useCallback(() => {
      app.resetZoom(app.viewportScreenCenter, { duration: ANIMATION_MEDIUM_MS });
    }, [app]);
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(Root, { id: "zoom", children: [
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
        Button,
        {
          title: `${msg2("navigation-zone.zoom")}`,
          "data-wd": "minimap.zoom-menu",
          className: breakpoint < 5 ? "tlui-zoom-menu__button" : "tlui-zoom-menu__button__pct",
          onDoubleClick: handleDoubleClick,
          icon: breakpoint < 4 ? "zoom-in" : void 0,
          children: breakpoint < 4 ? null : /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)("span", { style: { flexGrow: 0, textAlign: "center" }, children: [
            Math.floor(zoom * 100),
            "%"
          ] })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(Content, { side: "top", align: "start", alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(Group, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(ZoomMenuItem, { action: "zoom-in", "data-wd": "minimap.zoom-menu.zoom-in", noClose: true }),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(ZoomMenuItem, { action: "zoom-out", "data-wd": "minimap.zoom-menu.zoom-out", noClose: true }),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          ZoomMenuItem,
          {
            action: "zoom-to-100",
            "data-wd": "minimap.zoom-menu.zoom-to-100",
            noClose: true,
            disabled: isZoomedTo100
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          ZoomMenuItem,
          {
            action: "zoom-to-fit",
            disabled: !hasShapes,
            "data-wd": "minimap.zoom-menu.zoom-to-fit",
            noClose: true
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
          ZoomMenuItem,
          {
            action: "zoom-to-selection",
            disabled: !hasSelected,
            "data-wd": "minimap.zoom-menu.zoom-to-selection",
            noClose: true
          }
        )
      ] }) })
    ] });
  });
  function ZoomMenuItem(props) {
    const { action, disabled = false, noClose = false } = props;
    const actions = useActions();
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
      Item,
      {
        label: actions[action].label,
        kbd: actions[action].kbd,
        "data-wd": props["data-wd"],
        onClick: () => actions[action].onSelect("zoom-menu"),
        noClose,
        disabled
      }
    );
  }

  // ../../../packages/ui/src/lib/components/NavigationZone/NavigationZone.tsx
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  var NavigationZone = (0, import_react100.memo)(function NavigationZone2() {
    const actions = useActions();
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const [collapsed, setCollapsed] = useLocalStorageState("minimap", true);
    const toggleMinimap = (0, import_react100.useCallback)(() => {
      setCollapsed((s3) => !s3);
    }, [setCollapsed]);
    if (breakpoint < 4) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)("div", { className: "tlui-navigation-zone", children: [
      /* @__PURE__ */ (0, import_jsx_runtime98.jsx)("div", { className: "tlui-navigation-zone__controls", children: breakpoint < 6 ? /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(ZoomMenu, {}) : collapsed ? /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(import_jsx_runtime98.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(ZoomMenu, {}),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
          Button,
          {
            title: msg2("navigation-zone.toggle-minimap"),
            className: "tlui-navigation-zone__toggle",
            "data-wd": "minimap.toggle",
            onClick: toggleMinimap,
            icon: collapsed ? "chevrons-ne" : "chevrons-sw"
          }
        )
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(import_jsx_runtime98.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
          Button,
          {
            icon: "minus",
            "data-wd": "minimap.zoom-out",
            title: `${msg2(actions["zoom-out"].label)} ${kbdStr(actions["zoom-out"].kbd)}`,
            onClick: () => actions["zoom-out"].onSelect("navigation-zone")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(ZoomMenu, {}),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
          Button,
          {
            icon: "plus",
            "data-wd": "minimap.zoom-in",
            title: `${msg2(actions["zoom-in"].label)} ${kbdStr(actions["zoom-in"].kbd)}`,
            onClick: () => actions["zoom-in"].onSelect("navigation-zone")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
          Button,
          {
            title: msg2("navigation-zone.toggle-minimap"),
            className: "tlui-navigation-zone__toggle",
            onClick: toggleMinimap,
            icon: collapsed ? "chevrons-ne" : "chevrons-sw"
          }
        )
      ] }) }),
      breakpoint >= 6 && !collapsed && /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
        Minimap,
        {
          viewportFill: "--color-muted-1",
          selectFill: "--color-selected",
          shapeFill: "--color-text-3"
        }
      )
    ] });
  });

  // ../../../packages/ui/src/lib/components/PenModeToggle.tsx
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  var ExitPenMode = track(function ExitPenMode2() {
    const app = useApp();
    const isPenMode = app.isPenMode;
    const actions = useActions();
    if (!isPenMode)
      return null;
    const action = actions["exit-pen-mode"];
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
      Button,
      {
        label: action.label,
        iconLeft: action.icon,
        onClick: () => action.onSelect("helper-buttons")
      }
    );
  });

  // ../../../packages/ui/src/lib/components/StopFollowing.tsx
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  var StopFollowing = track(function ExitPenMode3() {
    const app = useApp();
    const actions = useActions();
    if (!app.instanceState.followingUserId) {
      return null;
    }
    const action = actions["stop-following"];
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
      Button,
      {
        label: action.label,
        iconLeft: action.icon,
        onClick: () => action.onSelect("people-menu")
      }
    );
  });

  // ../../../packages/ui/src/lib/components/StylePanel/StylePanel.tsx
  var import_react105 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/primitives/ButtonPicker.tsx
  var import_classnames15 = __toESM(require_classnames());
  var React62 = __toESM(require_react());
  var import_react101 = __toESM(require_react());
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  function _ButtonPicker(props) {
    const {
      items,
      title,
      styleType,
      value = null,
      onValueChange,
      columns = clamp(items.length, 2, 4)
    } = props;
    const app = useApp();
    const msg2 = useTranslation();
    const rPointing = (0, import_react101.useRef)(false);
    const {
      handleButtonClick,
      handleButtonPointerDown,
      handleButtonPointerEnter,
      handleButtonPointerUp
    } = React62.useMemo(() => {
      const handlePointerUp = () => {
        rPointing.current = false;
        window.removeEventListener("pointerup", handlePointerUp);
      };
      const handleButtonClick2 = (e2) => {
        const { id } = e2.currentTarget.dataset;
        if (value === id)
          return;
        app.mark("point picker item");
        onValueChange(items.find((i3) => i3.id === id), false);
      };
      const handleButtonPointerDown2 = (e2) => {
        const { id } = e2.currentTarget.dataset;
        app.mark("point picker item");
        onValueChange(items.find((i3) => i3.id === id), true);
        rPointing.current = true;
        window.addEventListener("pointerup", handlePointerUp);
      };
      const handleButtonPointerEnter2 = (e2) => {
        if (!rPointing.current)
          return;
        const { id } = e2.currentTarget.dataset;
        onValueChange(items.find((i3) => i3.id === id), true);
      };
      const handleButtonPointerUp2 = (e2) => {
        const { id } = e2.currentTarget.dataset;
        onValueChange(items.find((i3) => i3.id === id), false);
      };
      return {
        handleButtonClick: handleButtonClick2,
        handleButtonPointerDown: handleButtonPointerDown2,
        handleButtonPointerEnter: handleButtonPointerEnter2,
        handleButtonPointerUp: handleButtonPointerUp2
      };
    }, [app, value, onValueChange, items]);
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
      "div",
      {
        className: (0, import_classnames15.default)("tlui-button-grid", {
          "tlui-button-grid__two": columns === 2,
          "tlui-button-grid__three": columns === 3,
          "tlui-button-grid__four": columns === 4
        }),
        children: items.map((item) => /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
          Button,
          {
            "data-id": item.id,
            "data-wd": `${props["data-wd"]}.${item.id}`,
            "aria-label": item.id,
            "data-state": value === item.id ? "hinted" : void 0,
            title: title + " \u2014 " + msg2(`${styleType}-style.${item.id}`),
            className: (0, import_classnames15.default)("tlui-button-grid__button"),
            style: item.type === "color" ? { color: `var(--palette-${item.id})` } : void 0,
            onPointerEnter: handleButtonPointerEnter,
            onPointerDown: handleButtonPointerDown,
            onPointerUp: handleButtonPointerUp,
            onClick: handleButtonClick,
            icon: item.icon
          },
          item.id
        ))
      }
    );
  }
  var ButtonPicker = React62.memo(_ButtonPicker);

  // ../../../node_modules/@radix-ui/react-slider/dist/index.module.js
  var import_react103 = __toESM(require_react());

  // ../../../node_modules/@radix-ui/number/dist/index.module.js
  function $ae6933e535247d3d$export$7d15b64cf5a3a4c4(value, [min2, max]) {
    return Math.min(max, Math.max(min2, value));
  }

  // ../../../node_modules/@radix-ui/react-use-previous/dist/index.module.js
  var import_react102 = __toESM(require_react());
  function $010c2913dbd2fe3d$export$5cae361ad82dce8b(value) {
    const ref = (0, import_react102.useRef)({
      value,
      previous: value
    });
    return (0, import_react102.useMemo)(() => {
      if (ref.current.value !== value) {
        ref.current.previous = ref.current.value;
        ref.current.value = value;
      }
      return ref.current.previous;
    }, [
      value
    ]);
  }

  // ../../../node_modules/@radix-ui/react-slider/dist/index.module.js
  var $faa2e61a3361514f$var$PAGE_KEYS = [
    "PageUp",
    "PageDown"
  ];
  var $faa2e61a3361514f$var$ARROW_KEYS = [
    "ArrowUp",
    "ArrowDown",
    "ArrowLeft",
    "ArrowRight"
  ];
  var $faa2e61a3361514f$var$BACK_KEYS = {
    "from-left": [
      "Home",
      "PageDown",
      "ArrowDown",
      "ArrowLeft"
    ],
    "from-right": [
      "Home",
      "PageDown",
      "ArrowDown",
      "ArrowRight"
    ],
    "from-bottom": [
      "Home",
      "PageDown",
      "ArrowDown",
      "ArrowLeft"
    ],
    "from-top": [
      "Home",
      "PageDown",
      "ArrowUp",
      "ArrowLeft"
    ]
  };
  var $faa2e61a3361514f$var$SLIDER_NAME = "Slider";
  var [$faa2e61a3361514f$var$Collection, $faa2e61a3361514f$var$useCollection, $faa2e61a3361514f$var$createCollectionScope] = $e02a7d9cb1dc128c$export$c74125a8e3af6bb2($faa2e61a3361514f$var$SLIDER_NAME);
  var [$faa2e61a3361514f$var$createSliderContext, $faa2e61a3361514f$export$ef72632d7b901f97] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($faa2e61a3361514f$var$SLIDER_NAME, [
    $faa2e61a3361514f$var$createCollectionScope
  ]);
  var [$faa2e61a3361514f$var$SliderProvider, $faa2e61a3361514f$var$useSliderContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME);
  var $faa2e61a3361514f$export$472062a354075cee = /* @__PURE__ */ (0, import_react103.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { name, min: min2 = 0, max = 100, step = 1, orientation = "horizontal", disabled = false, minStepsBetweenThumbs = 0, defaultValue = [
      min2
    ], value: value1, onValueChange = () => {
    }, onValueCommit = () => {
    }, inverted = false } = _a5, sliderProps = __objRest(_a5, ["name", "min", "max", "step", "orientation", "disabled", "minStepsBetweenThumbs", "defaultValue", "value", "onValueChange", "onValueCommit", "inverted"]);
    const [slider, setSlider] = (0, import_react103.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setSlider(node)
    );
    const thumbRefs = (0, import_react103.useRef)(/* @__PURE__ */ new Set());
    const valueIndexToChangeRef = (0, import_react103.useRef)(0);
    const isHorizontal = orientation === "horizontal";
    const isFormControl = slider ? Boolean(slider.closest("form")) : true;
    const SliderOrientation = isHorizontal ? $faa2e61a3361514f$var$SliderHorizontal : $faa2e61a3361514f$var$SliderVertical;
    const [values = [], setValues] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: value1,
      defaultProp: defaultValue,
      onChange: (value) => {
        var _thumbs$valueIndexToC;
        const thumbs = [
          ...thumbRefs.current
        ];
        (_thumbs$valueIndexToC = thumbs[valueIndexToChangeRef.current]) === null || _thumbs$valueIndexToC === void 0 || _thumbs$valueIndexToC.focus();
        onValueChange(value);
      }
    });
    const valuesBeforeSlideStartRef = (0, import_react103.useRef)(values);
    function handleSlideStart(value) {
      const closestIndex = $faa2e61a3361514f$var$getClosestValueIndex(values, value);
      updateValues(value, closestIndex);
    }
    function handleSlideMove(value) {
      updateValues(value, valueIndexToChangeRef.current);
    }
    function handleSlideEnd() {
      const prevValue = valuesBeforeSlideStartRef.current[valueIndexToChangeRef.current];
      const nextValue = values[valueIndexToChangeRef.current];
      const hasChanged = nextValue !== prevValue;
      if (hasChanged)
        onValueCommit(values);
    }
    function updateValues(value, atIndex, { commit } = {
      commit: false
    }) {
      const decimalCount = $faa2e61a3361514f$var$getDecimalCount(step);
      const snapToStep = $faa2e61a3361514f$var$roundValue(Math.round((value - min2) / step) * step + min2, decimalCount);
      const nextValue = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(snapToStep, [
        min2,
        max
      ]);
      setValues((prevValues = []) => {
        const nextValues = $faa2e61a3361514f$var$getNextSortedValues(prevValues, nextValue, atIndex);
        if ($faa2e61a3361514f$var$hasMinStepsBetweenValues(nextValues, minStepsBetweenThumbs * step)) {
          valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
          const hasChanged = String(nextValues) !== String(prevValues);
          if (hasChanged && commit)
            onValueCommit(nextValues);
          return hasChanged ? nextValues : prevValues;
        } else
          return prevValues;
      });
    }
    return /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$SliderProvider, {
      scope: props.__scopeSlider,
      disabled,
      min: min2,
      max,
      valueIndexToChangeRef,
      thumbs: thumbRefs.current,
      values,
      orientation
    }, /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$Collection.Provider, {
      scope: props.__scopeSlider
    }, /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$Collection.Slot, {
      scope: props.__scopeSlider
    }, /* @__PURE__ */ (0, import_react103.createElement)(SliderOrientation, _extends({
      "aria-disabled": disabled,
      "data-disabled": disabled ? "" : void 0
    }, sliderProps, {
      ref: composedRefs,
      onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(sliderProps.onPointerDown, () => {
        if (!disabled)
          valuesBeforeSlideStartRef.current = values;
      }),
      min: min2,
      max,
      inverted,
      onSlideStart: disabled ? void 0 : handleSlideStart,
      onSlideMove: disabled ? void 0 : handleSlideMove,
      onSlideEnd: disabled ? void 0 : handleSlideEnd,
      onHomeKeyDown: () => !disabled && updateValues(min2, 0, {
        commit: true
      }),
      onEndKeyDown: () => !disabled && updateValues(max, values.length - 1, {
        commit: true
      }),
      onStepKeyDown: ({ event, direction: stepDirection }) => {
        if (!disabled) {
          const isPageKey = $faa2e61a3361514f$var$PAGE_KEYS.includes(event.key);
          const isSkipKey = isPageKey || event.shiftKey && $faa2e61a3361514f$var$ARROW_KEYS.includes(event.key);
          const multiplier = isSkipKey ? 10 : 1;
          const atIndex = valueIndexToChangeRef.current;
          const value = values[atIndex];
          const stepInDirection = step * multiplier * stepDirection;
          updateValues(value + stepInDirection, atIndex, {
            commit: true
          });
        }
      }
    })))), isFormControl && values.map(
      (value, index2) => /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$BubbleInput, {
        key: index2,
        name: name ? name + (values.length > 1 ? "[]" : "") : void 0,
        value
      })
    ));
  });
  var [$faa2e61a3361514f$var$SliderOrientationProvider, $faa2e61a3361514f$var$useSliderOrientationContext] = $faa2e61a3361514f$var$createSliderContext($faa2e61a3361514f$var$SLIDER_NAME, {
    startEdge: "left",
    endEdge: "right",
    size: "width",
    direction: 1
  });
  var $faa2e61a3361514f$var$SliderHorizontal = /* @__PURE__ */ (0, import_react103.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { min: min2, max, dir, inverted, onSlideStart, onSlideMove, onSlideEnd, onStepKeyDown } = _a5, sliderProps = __objRest(_a5, ["min", "max", "dir", "inverted", "onSlideStart", "onSlideMove", "onSlideEnd", "onStepKeyDown"]);
    const [slider, setSlider] = (0, import_react103.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setSlider(node)
    );
    const rectRef = (0, import_react103.useRef)();
    const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
    const isDirectionLTR = direction === "ltr";
    const isSlidingFromLeft = isDirectionLTR && !inverted || !isDirectionLTR && inverted;
    function getValueFromPointer(pointerPosition) {
      const rect = rectRef.current || slider.getBoundingClientRect();
      const input = [
        0,
        rect.width
      ];
      const output = isSlidingFromLeft ? [
        min2,
        max
      ] : [
        max,
        min2
      ];
      const value = $faa2e61a3361514f$var$linearScale(input, output);
      rectRef.current = rect;
      return value(pointerPosition - rect.left);
    }
    return /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$SliderOrientationProvider, {
      scope: props.__scopeSlider,
      startEdge: isSlidingFromLeft ? "left" : "right",
      endEdge: isSlidingFromLeft ? "right" : "left",
      direction: isSlidingFromLeft ? 1 : -1,
      size: "width"
    }, /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$SliderImpl, _extends({
      dir: direction,
      "data-orientation": "horizontal"
    }, sliderProps, {
      ref: composedRefs,
      style: __spreadProps(__spreadValues({}, sliderProps.style), {
        ["--radix-slider-thumb-transform"]: "translateX(-50%)"
      }),
      onSlideStart: (event) => {
        const value = getValueFromPointer(event.clientX);
        onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);
      },
      onSlideMove: (event) => {
        const value = getValueFromPointer(event.clientX);
        onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);
      },
      onSlideEnd: () => {
        rectRef.current = void 0;
        onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();
      },
      onStepKeyDown: (event) => {
        const slideDirection = isSlidingFromLeft ? "from-left" : "from-right";
        const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);
        onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({
          event,
          direction: isBackKey ? -1 : 1
        });
      }
    })));
  });
  var $faa2e61a3361514f$var$SliderVertical = /* @__PURE__ */ (0, import_react103.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { min: min2, max, inverted, onSlideStart, onSlideMove, onSlideEnd, onStepKeyDown } = _a5, sliderProps = __objRest(_a5, ["min", "max", "inverted", "onSlideStart", "onSlideMove", "onSlideEnd", "onStepKeyDown"]);
    const sliderRef = (0, import_react103.useRef)(null);
    const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, sliderRef);
    const rectRef = (0, import_react103.useRef)();
    const isSlidingFromBottom = !inverted;
    function getValueFromPointer(pointerPosition) {
      const rect = rectRef.current || sliderRef.current.getBoundingClientRect();
      const input = [
        0,
        rect.height
      ];
      const output = isSlidingFromBottom ? [
        max,
        min2
      ] : [
        min2,
        max
      ];
      const value = $faa2e61a3361514f$var$linearScale(input, output);
      rectRef.current = rect;
      return value(pointerPosition - rect.top);
    }
    return /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$SliderOrientationProvider, {
      scope: props.__scopeSlider,
      startEdge: isSlidingFromBottom ? "bottom" : "top",
      endEdge: isSlidingFromBottom ? "top" : "bottom",
      size: "height",
      direction: isSlidingFromBottom ? 1 : -1
    }, /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$SliderImpl, _extends({
      "data-orientation": "vertical"
    }, sliderProps, {
      ref,
      style: __spreadProps(__spreadValues({}, sliderProps.style), {
        ["--radix-slider-thumb-transform"]: "translateY(50%)"
      }),
      onSlideStart: (event) => {
        const value = getValueFromPointer(event.clientY);
        onSlideStart === null || onSlideStart === void 0 || onSlideStart(value);
      },
      onSlideMove: (event) => {
        const value = getValueFromPointer(event.clientY);
        onSlideMove === null || onSlideMove === void 0 || onSlideMove(value);
      },
      onSlideEnd: () => {
        rectRef.current = void 0;
        onSlideEnd === null || onSlideEnd === void 0 || onSlideEnd();
      },
      onStepKeyDown: (event) => {
        const slideDirection = isSlidingFromBottom ? "from-bottom" : "from-top";
        const isBackKey = $faa2e61a3361514f$var$BACK_KEYS[slideDirection].includes(event.key);
        onStepKeyDown === null || onStepKeyDown === void 0 || onStepKeyDown({
          event,
          direction: isBackKey ? -1 : 1
        });
      }
    })));
  });
  var $faa2e61a3361514f$var$SliderImpl = /* @__PURE__ */ (0, import_react103.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeSlider, onSlideStart, onSlideMove, onSlideEnd, onHomeKeyDown, onEndKeyDown, onStepKeyDown } = _a5, sliderProps = __objRest(_a5, ["__scopeSlider", "onSlideStart", "onSlideMove", "onSlideEnd", "onHomeKeyDown", "onEndKeyDown", "onStepKeyDown"]);
    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$SLIDER_NAME, __scopeSlider);
    return /* @__PURE__ */ (0, import_react103.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({}, sliderProps, {
      ref: forwardedRef,
      onKeyDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onKeyDown, (event) => {
        if (event.key === "Home") {
          onHomeKeyDown(event);
          event.preventDefault();
        } else if (event.key === "End") {
          onEndKeyDown(event);
          event.preventDefault();
        } else if ($faa2e61a3361514f$var$PAGE_KEYS.concat($faa2e61a3361514f$var$ARROW_KEYS).includes(event.key)) {
          onStepKeyDown(event);
          event.preventDefault();
        }
      }),
      onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
        const target = event.target;
        target.setPointerCapture(event.pointerId);
        event.preventDefault();
        if (context.thumbs.has(target))
          target.focus();
        else
          onSlideStart(event);
      }),
      onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, (event) => {
        const target = event.target;
        if (target.hasPointerCapture(event.pointerId))
          onSlideMove(event);
      }),
      onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event) => {
        const target = event.target;
        if (target.hasPointerCapture(event.pointerId)) {
          target.releasePointerCapture(event.pointerId);
          onSlideEnd(event);
        }
      })
    }));
  });
  var $faa2e61a3361514f$var$TRACK_NAME = "SliderTrack";
  var $faa2e61a3361514f$export$105594979f116971 = /* @__PURE__ */ (0, import_react103.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeSlider } = _a5, trackProps = __objRest(_a5, ["__scopeSlider"]);
    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$TRACK_NAME, __scopeSlider);
    return /* @__PURE__ */ (0, import_react103.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
      "data-disabled": context.disabled ? "" : void 0,
      "data-orientation": context.orientation
    }, trackProps, {
      ref: forwardedRef
    }));
  });
  var $faa2e61a3361514f$var$RANGE_NAME = "SliderRange";
  var $faa2e61a3361514f$export$a5cf38a7a000fe77 = /* @__PURE__ */ (0, import_react103.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeSlider } = _a5, rangeProps = __objRest(_a5, ["__scopeSlider"]);
    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);
    const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$RANGE_NAME, __scopeSlider);
    const ref = (0, import_react103.useRef)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref);
    const valuesCount = context.values.length;
    const percentages = context.values.map(
      (value) => $faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max)
    );
    const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
    const offsetEnd = 100 - Math.max(...percentages);
    return /* @__PURE__ */ (0, import_react103.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
      "data-orientation": context.orientation,
      "data-disabled": context.disabled ? "" : void 0
    }, rangeProps, {
      ref: composedRefs,
      style: __spreadProps(__spreadValues({}, props.style), {
        [orientation.startEdge]: offsetStart + "%",
        [orientation.endEdge]: offsetEnd + "%"
      })
    }));
  });
  var $faa2e61a3361514f$var$THUMB_NAME = "SliderThumb";
  var $faa2e61a3361514f$export$2c1b491743890dec = /* @__PURE__ */ (0, import_react103.forwardRef)((props, forwardedRef) => {
    const getItems = $faa2e61a3361514f$var$useCollection(props.__scopeSlider);
    const [thumb, setThumb] = (0, import_react103.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setThumb(node)
    );
    const index2 = (0, import_react103.useMemo)(
      () => thumb ? getItems().findIndex(
        (item) => item.ref.current === thumb
      ) : -1,
      [
        getItems,
        thumb
      ]
    );
    return /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$SliderThumbImpl, _extends({}, props, {
      ref: composedRefs,
      index: index2
    }));
  });
  var $faa2e61a3361514f$var$SliderThumbImpl = /* @__PURE__ */ (0, import_react103.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeSlider, index: index2 } = _a5, thumbProps = __objRest(_a5, ["__scopeSlider", "index"]);
    const context = $faa2e61a3361514f$var$useSliderContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);
    const orientation = $faa2e61a3361514f$var$useSliderOrientationContext($faa2e61a3361514f$var$THUMB_NAME, __scopeSlider);
    const [thumb, setThumb] = (0, import_react103.useState)(null);
    const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
      forwardedRef,
      (node) => setThumb(node)
    );
    const size = $db6c3485150b8e66$export$1ab7ae714698c4b8(thumb);
    const value = context.values[index2];
    const percent = value === void 0 ? 0 : $faa2e61a3361514f$var$convertValueToPercentage(value, context.min, context.max);
    const label = $faa2e61a3361514f$var$getLabel(index2, context.values.length);
    const orientationSize = size === null || size === void 0 ? void 0 : size[orientation.size];
    const thumbInBoundsOffset = orientationSize ? $faa2e61a3361514f$var$getThumbInBoundsOffset(orientationSize, percent, orientation.direction) : 0;
    (0, import_react103.useEffect)(() => {
      if (thumb) {
        context.thumbs.add(thumb);
        return () => {
          context.thumbs.delete(thumb);
        };
      }
    }, [
      thumb,
      context.thumbs
    ]);
    return /* @__PURE__ */ (0, import_react103.createElement)("span", {
      style: {
        transform: "var(--radix-slider-thumb-transform)",
        position: "absolute",
        [orientation.startEdge]: `calc(${percent}% + ${thumbInBoundsOffset}px)`
      }
    }, /* @__PURE__ */ (0, import_react103.createElement)($faa2e61a3361514f$var$Collection.ItemSlot, {
      scope: props.__scopeSlider
    }, /* @__PURE__ */ (0, import_react103.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
      role: "slider",
      "aria-label": props["aria-label"] || label,
      "aria-valuemin": context.min,
      "aria-valuenow": value,
      "aria-valuemax": context.max,
      "aria-orientation": context.orientation,
      "data-orientation": context.orientation,
      "data-disabled": context.disabled ? "" : void 0,
      tabIndex: context.disabled ? void 0 : 0
    }, thumbProps, {
      ref: composedRefs,
      style: value === void 0 ? {
        display: "none"
      } : props.style,
      onFocus: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onFocus, () => {
        context.valueIndexToChangeRef.current = index2;
      })
    }))));
  });
  var $faa2e61a3361514f$var$BubbleInput = (props) => {
    const _a5 = props, { value } = _a5, inputProps = __objRest(_a5, ["value"]);
    const ref = (0, import_react103.useRef)(null);
    const prevValue = $010c2913dbd2fe3d$export$5cae361ad82dce8b(value);
    (0, import_react103.useEffect)(() => {
      const input = ref.current;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(inputProto, "value");
      const setValue = descriptor.set;
      if (prevValue !== value && setValue) {
        const event = new Event("input", {
          bubbles: true
        });
        setValue.call(input, value);
        input.dispatchEvent(event);
      }
    }, [
      prevValue,
      value
    ]);
    return /* @__PURE__ */ (0, import_react103.createElement)("input", _extends({
      style: {
        display: "none"
      }
    }, inputProps, {
      ref,
      defaultValue: value
    }));
  };
  function $faa2e61a3361514f$var$getNextSortedValues(prevValues = [], nextValue, atIndex) {
    const nextValues = [
      ...prevValues
    ];
    nextValues[atIndex] = nextValue;
    return nextValues.sort(
      (a3, b3) => a3 - b3
    );
  }
  function $faa2e61a3361514f$var$convertValueToPercentage(value, min2, max) {
    const maxSteps = max - min2;
    const percentPerStep = 100 / maxSteps;
    return percentPerStep * (value - min2);
  }
  function $faa2e61a3361514f$var$getLabel(index2, totalValues) {
    if (totalValues > 2)
      return `Value ${index2 + 1} of ${totalValues}`;
    else if (totalValues === 2)
      return [
        "Minimum",
        "Maximum"
      ][index2];
    else
      return void 0;
  }
  function $faa2e61a3361514f$var$getClosestValueIndex(values, nextValue) {
    if (values.length === 1)
      return 0;
    const distances = values.map(
      (value) => Math.abs(value - nextValue)
    );
    const closestDistance = Math.min(...distances);
    return distances.indexOf(closestDistance);
  }
  function $faa2e61a3361514f$var$getThumbInBoundsOffset(width, left, direction) {
    const halfWidth = width / 2;
    const halfPercent = 50;
    const offset = $faa2e61a3361514f$var$linearScale([
      0,
      halfPercent
    ], [
      0,
      halfWidth
    ]);
    return (halfWidth - offset(left) * direction) * direction;
  }
  function $faa2e61a3361514f$var$getStepsBetweenValues(values) {
    return values.slice(0, -1).map(
      (value, index2) => values[index2 + 1] - value
    );
  }
  function $faa2e61a3361514f$var$hasMinStepsBetweenValues(values, minStepsBetweenValues) {
    if (minStepsBetweenValues > 0) {
      const stepsBetweenValues = $faa2e61a3361514f$var$getStepsBetweenValues(values);
      const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
      return actualMinStepsBetweenValues >= minStepsBetweenValues;
    }
    return true;
  }
  function $faa2e61a3361514f$var$linearScale(input, output) {
    return (value) => {
      if (input[0] === input[1] || output[0] === output[1])
        return output[0];
      const ratio = (output[1] - output[0]) / (input[1] - input[0]);
      return output[0] + ratio * (value - input[0]);
    };
  }
  function $faa2e61a3361514f$var$getDecimalCount(value) {
    return (String(value).split(".")[1] || "").length;
  }
  function $faa2e61a3361514f$var$roundValue(value, decimalCount) {
    const rounder = Math.pow(10, decimalCount);
    return Math.round(value * rounder) / rounder;
  }
  var $faa2e61a3361514f$export$be92b6f5f03c0fe9 = $faa2e61a3361514f$export$472062a354075cee;
  var $faa2e61a3361514f$export$13921ac0cc260818 = $faa2e61a3361514f$export$105594979f116971;
  var $faa2e61a3361514f$export$9a58ef0d7ad3278c = $faa2e61a3361514f$export$a5cf38a7a000fe77;
  var $faa2e61a3361514f$export$6521433ed15a34db = $faa2e61a3361514f$export$2c1b491743890dec;

  // ../../../packages/ui/src/lib/components/primitives/Slider.tsx
  var import_react104 = __toESM(require_react());
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  function Slider(props) {
    const { title, steps, value, label, onValueChange } = props;
    const app = useApp();
    const msg2 = useTranslation();
    const handleValueChange = (0, import_react104.useCallback)(
      (value2) => {
        onValueChange(value2[0], true);
      },
      [onValueChange]
    );
    const handlePointerDown = (0, import_react104.useCallback)(() => {
      app.mark("click slider");
    }, [app]);
    const handlePointerUp = (0, import_react104.useCallback)(() => {
      if (!value)
        return;
      onValueChange(value, false);
    }, [value, onValueChange]);
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsx)("div", { className: "tlui-slider__container", children: /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(
      $faa2e61a3361514f$export$be92b6f5f03c0fe9,
      {
        "data-wd": props["data-wd"],
        className: "tlui-slider",
        "area-label": "Opacity",
        dir: "ltr",
        min: 0,
        max: steps,
        step: 1,
        value: value ? [value] : void 0,
        onPointerDown: handlePointerDown,
        onValueChange: handleValueChange,
        onPointerUp: handlePointerUp,
        title: title + " \u2014 " + msg2(label),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime102.jsx)($faa2e61a3361514f$export$13921ac0cc260818, { className: "tlui-slider__track", dir: "ltr", children: value !== null && /* @__PURE__ */ (0, import_jsx_runtime102.jsx)($faa2e61a3361514f$export$9a58ef0d7ad3278c, { className: "tlui-slider__range", dir: "ltr" }) }),
          value !== null && /* @__PURE__ */ (0, import_jsx_runtime102.jsx)($faa2e61a3361514f$export$6521433ed15a34db, { className: "tlui-slider__thumb", dir: "ltr" })
        ]
      }
    ) });
  }

  // ../../../packages/ui/src/lib/components/StylePanel/DoubleDropdownPicker.tsx
  var import_classnames16 = __toESM(require_classnames());
  var React63 = __toESM(require_react());
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  var DoubleDropdownPicker = React63.memo(function DoubleDropdownPicker2({
    "data-wd": dataWd,
    label,
    labelA,
    labelB,
    itemsA,
    itemsB,
    styleTypeA,
    styleTypeB,
    valueA,
    valueB,
    onValueChange
  }) {
    const msg2 = useTranslation();
    const iconA = React63.useMemo(
      () => {
        var _a5, _b2;
        return (_b2 = (_a5 = itemsA.find((item) => item.id === valueA)) == null ? void 0 : _a5.icon) != null ? _b2 : "mixed";
      },
      [itemsA, valueA]
    );
    const iconB = React63.useMemo(
      () => {
        var _a5, _b2;
        return (_b2 = (_a5 = itemsB.find((item) => item.id === valueB)) == null ? void 0 : _a5.icon) != null ? _b2 : "mixed";
      },
      [itemsB, valueB]
    );
    if (valueA === void 0 && valueB === void 0)
      return null;
    const startWdPrefix = `${dataWd}.start`;
    const endWdPrefix = `${dataWd}.end`;
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)("div", { className: "tlui-style-panel__double-select-picker", children: [
      /* @__PURE__ */ (0, import_jsx_runtime103.jsx)("div", { title: msg2(label), className: "tlui-style-panel__double-select-picker-label", children: msg2(label) }),
      /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(Root, { id: `style panel ${styleTypeA}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
          Button,
          {
            "data-wd": startWdPrefix,
            title: msg2(labelA) + " \u2014 " + (valueA === null ? msg2("style-panel.mixed") : msg2(`${styleTypeA}-style.${valueA}`)),
            icon: iconA,
            invertIcon: true,
            smallIcon: true
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Content, { side: "bottom", align: "end", sideOffset: 0, alignOffset: -2, children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
          "div",
          {
            className: (0, import_classnames16.default)("tlui-button-grid", {
              "tlui-button-grid__two": itemsA.length < 4,
              "tlui-button-grid__four": itemsA.length >= 4
            }),
            children: itemsA.map((item) => {
              return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
                Item,
                {
                  className: "tlui-button-grid__button",
                  title: msg2(labelA) + " \u2014 " + msg2(`${styleTypeA}-style.${item.id}`),
                  "data-wd": `${startWdPrefix}.${item.id}`,
                  icon: item.icon,
                  onClick: () => onValueChange(item, false),
                  invertIcon: true
                },
                item.id
              );
            })
          }
        ) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime103.jsxs)(Root, { id: `style panel ${styleTypeB}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
          Button,
          {
            "data-wd": endWdPrefix,
            title: msg2(labelB) + " \u2014 " + (valueB === null ? msg2("style-panel.mixed") : msg2(`${styleTypeB}-style.${valueB}`)),
            icon: iconB,
            smallIcon: true
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(Content, { side: "bottom", align: "end", sideOffset: 0, alignOffset: -2, children: /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
          "div",
          {
            className: (0, import_classnames16.default)("tlui-button-grid", {
              "tlui-button-grid__two": itemsA.length < 4,
              "tlui-button-grid__four": itemsA.length >= 4
            }),
            children: itemsB.map((item) => {
              return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
                Item,
                {
                  className: "tlui-button-grid__button",
                  title: msg2(labelB) + " \u2014 " + msg2(`${styleTypeB}-style.${item.id}`),
                  "data-wd": `${endWdPrefix}.${item.id}`,
                  icon: item.icon,
                  onClick: () => onValueChange(item, false)
                },
                item.id
              );
            })
          }
        ) })
      ] })
    ] });
  });

  // ../../../packages/ui/src/lib/components/StylePanel/DropdownPicker.tsx
  var import_classnames17 = __toESM(require_classnames());
  var React64 = __toESM(require_react());
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  var DropdownPicker = React64.memo(function DropdownPicker2({
    id,
    items,
    styleType,
    label,
    value,
    onValueChange,
    "data-wd": dataWd
  }) {
    const msg2 = useTranslation();
    const icon = React64.useMemo(() => {
      var _a5;
      return (_a5 = items.find((item) => item.id === value)) == null ? void 0 : _a5.icon;
    }, [items, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(Root, { id: `style panel ${id}`, children: [
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)($d08ef79370b62062$export$41fb9f06171c75f4, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
        Button,
        {
          "data-wd": dataWd,
          title: value === null ? msg2("style-panel.mixed") : msg2(`${styleType}-style.${value}`),
          label,
          icon: icon != null ? icon : "mixed"
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(Content, { side: "left", align: "center", alignOffset: 0, children: /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
        "div",
        {
          className: (0, import_classnames17.default)("tlui-button-grid", {
            "tlui-button-grid__two": items.length < 4,
            "tlui-button-grid__four": items.length >= 4
          }),
          children: items.map((item) => {
            return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
              Item,
              {
                className: "tlui-button-grid__button",
                "data-wd": `${dataWd}.${item.id}`,
                title: msg2(`${styleType}-style.${item.id}`),
                icon: item.icon,
                onClick: () => onValueChange(item, false)
              },
              item.id
            );
          })
        }
      ) })
    ] });
  });

  // ../../../packages/ui/src/lib/components/StylePanel/StylePanel.tsx
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  var StylePanel = function StylePanel2({ isMobile }) {
    const app = useApp();
    const props = useValue("props", () => app.props, [app]);
    const handlePointerOut = (0, import_react105.useCallback)(() => {
      if (!isMobile) {
        app.isChangingStyle = false;
      }
    }, [app, isMobile]);
    if (!props)
      return null;
    const { geo, arrowheadEnd, arrowheadStart, spline, font } = props;
    const hideGeo = geo === void 0;
    const hideArrowHeads = arrowheadEnd === void 0 && arrowheadStart === void 0;
    const hideSpline = spline === void 0;
    const hideText = font === void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)("div", { className: "tlui-style-panel", "data-ismobile": isMobile, onPointerLeave: handlePointerOut, children: [
      /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(CommonStylePickerSet, { props }),
      !hideText && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(TextStylePickerSet, { props }),
      !(hideGeo && hideArrowHeads && hideSpline) && /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel styles", children: [
        /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(GeoStylePickerSet, { props }),
        /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(ArrowheadStylePickerSet, { props }),
        /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(SplineStylePickerSet, { props })
      ] })
    ] });
  };
  var { styles } = App;
  function useStyleChangeCallback() {
    const app = useApp();
    return import_react105.default.useCallback(
      (item, squashing) => {
        app.batch(() => {
          app.setProp(item.type, item.id, false, squashing);
          app.isChangingStyle = true;
        });
      },
      [app]
    );
  }
  function CommonStylePickerSet({ props }) {
    const app = useApp();
    const msg2 = useTranslation();
    const handleValueChange = useStyleChangeCallback();
    const handleOpacityValueChange = import_react105.default.useCallback(
      (value, ephemeral) => {
        const item = styles.opacity[value];
        app.setProp(item.type, item.id, ephemeral);
        app.isChangingStyle = true;
      },
      [app]
    );
    const { color, fill, dash, size, opacity } = props;
    if (color === void 0 && fill === void 0 && dash === void 0 && size === void 0 && opacity === void 0) {
      return null;
    }
    const showPickers = fill || dash || size;
    const opacityIndex = styles.opacity.findIndex((s3) => s3.id === opacity);
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)("div", { className: "tlui-style-panel__section__common", "aria-label": "style panel styles", children: [
        color === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
          ButtonPicker,
          {
            title: msg2("style-panel.color"),
            styleType: "color",
            "data-wd": "style.color",
            items: styles.color,
            value: color,
            onValueChange: handleValueChange
          }
        ),
        opacity === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
          Slider,
          {
            "data-wd": "style.opacity",
            value: opacityIndex >= 0 ? opacityIndex : styles.opacity.length - 1,
            label: opacity ? `opacity-style.${opacity}` : "style-panel.mixed",
            onValueChange: handleOpacityValueChange,
            steps: styles.opacity.length - 1,
            title: msg2("style-panel.opacity")
          }
        )
      ] }),
      showPickers && /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel styles", children: [
        fill === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
          ButtonPicker,
          {
            title: msg2("style-panel.fill"),
            styleType: "fill",
            "data-wd": "style.fill",
            items: styles.fill,
            value: fill,
            onValueChange: handleValueChange
          }
        ),
        dash === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
          ButtonPicker,
          {
            title: msg2("style-panel.dash"),
            styleType: "dash",
            "data-wd": "style.dash",
            items: styles.dash,
            value: dash,
            onValueChange: handleValueChange
          }
        ),
        size === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
          ButtonPicker,
          {
            title: msg2("style-panel.size"),
            styleType: "size",
            "data-wd": "style.size",
            items: styles.size,
            value: size,
            onValueChange: handleValueChange
          }
        )
      ] })
    ] });
  }
  function TextStylePickerSet({ props }) {
    const msg2 = useTranslation();
    const handleValueChange = useStyleChangeCallback();
    const { font, align } = props;
    if (font === void 0 && align === void 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)("div", { className: "tlui-style-panel__section", "aria-label": "style panel text", children: [
      font === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
        ButtonPicker,
        {
          title: msg2("style-panel.font"),
          styleType: "font",
          "data-wd": "font",
          items: styles.font,
          value: font,
          onValueChange: handleValueChange
        }
      ),
      align === void 0 ? null : /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)("div", { className: "tlui-style-panel__row", children: [
        /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
          ButtonPicker,
          {
            title: msg2("style-panel.align"),
            styleType: "align",
            "data-wd": "align",
            items: styles.align,
            value: align,
            onValueChange: handleValueChange
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
          Button,
          {
            title: msg2("style-panel.position"),
            "data-wd": "position",
            icon: "align-center-center",
            disabled: true
          }
        )
      ] })
    ] });
  }
  function GeoStylePickerSet({ props }) {
    const handleValueChange = useStyleChangeCallback();
    const { geo } = props;
    if (geo === void 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
      DropdownPicker,
      {
        id: "geo",
        label: "style-panel.geo",
        styleType: "geo",
        "data-wd": "style-panel.geo",
        items: styles.geo,
        value: geo,
        onValueChange: handleValueChange
      }
    );
  }
  function SplineStylePickerSet({ props }) {
    const handleValueChange = useStyleChangeCallback();
    const { spline } = props;
    if (spline === void 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
      DropdownPicker,
      {
        id: "spline",
        label: "style-panel.spline",
        styleType: "spline",
        "data-wd": "style.spline",
        items: styles.spline,
        value: spline,
        onValueChange: handleValueChange
      }
    );
  }
  function ArrowheadStylePickerSet({ props }) {
    const handleValueChange = useStyleChangeCallback();
    const { arrowheadEnd, arrowheadStart } = props;
    if (arrowheadEnd === void 0 && arrowheadStart === void 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
      DoubleDropdownPicker,
      {
        label: "style-panel.arrowheads",
        styleTypeA: "arrowheadStart",
        "data-wd": "style.arrowheads",
        itemsA: styles.arrowheadStart,
        valueA: arrowheadStart,
        styleTypeB: "arrowheadEnd",
        itemsB: styles.arrowheadEnd,
        valueB: arrowheadEnd,
        onValueChange: handleValueChange,
        labelA: "style-panel.arrowhead-start",
        labelB: "style-panel.arrowhead-end"
      }
    );
  }

  // ../../../packages/ui/src/lib/components/Toasts.tsx
  var React66 = __toESM(require_react());
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());
  function Toast({ toast }) {
    var _a5, _b2;
    const { removeToast } = useToasts();
    const msg2 = useTranslation();
    const onOpenChange = (isOpen) => {
      if (!isOpen) {
        removeToast(toast.id);
      }
    };
    const hasActions = toast.actions && toast.actions.length > 0;
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(
      $054eb8030ebde76e$export$be92b6f5f03c0fe9,
      {
        onOpenChange,
        className: "tlui-toast__container",
        duration: toast.keepOpen ? Infinity : 5e3,
        children: [
          toast.icon && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("div", { className: "tlui-toast__icon", children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Icon, { icon: toast.icon }) }),
          /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "tlui-toast__main", children: [
            /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "tlui-toast__content", children: [
              /* @__PURE__ */ (0, import_jsx_runtime106.jsx)($054eb8030ebde76e$export$f99233281efd08a0, { className: "tlui-toast__title", children: toast.title }),
              /* @__PURE__ */ (0, import_jsx_runtime106.jsx)($054eb8030ebde76e$export$393edc798c47379d, { className: "tlui-toast__description", children: toast.description })
            ] }),
            toast.actions && /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)("div", { className: "tlui-toast__actions", children: [
              toast.actions.map((action, i3) => /* @__PURE__ */ (0, import_jsx_runtime106.jsx)($054eb8030ebde76e$export$e19cd5f9376f8cee, { altText: action.label, asChild: true, onClick: action.onClick, children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
                Button,
                {
                  className: action.type === "warn" ? "tlui-button__warning" : "tlui-button__primary",
                  children: action.label
                }
              ) }, i3)),
              hasActions && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)($054eb8030ebde76e$export$f39c2d165cd861fe, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Button, { className: "tlui-toast__close", style: { marginLeft: "auto" }, children: (_a5 = toast.closeLabel) != null ? _a5 : msg2("toast.close") }) })
            ] })
          ] }),
          !hasActions && /* @__PURE__ */ (0, import_jsx_runtime106.jsx)($054eb8030ebde76e$export$f39c2d165cd861fe, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Button, { className: "tlui-toast__close", children: (_b2 = toast.closeLabel) != null ? _b2 : msg2("toast.close") }) })
        ]
      }
    );
  }
  function _Toasts() {
    const { toasts } = useToasts();
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(import_jsx_runtime106.Fragment, { children: toasts.map((toast) => /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(Toast, { toast }, toast.id)) });
  }
  var Toasts = React66.memo(_Toasts);
  function ToastViewport() {
    const { toasts } = useToasts();
    const [hasToasts, setHasToasts] = React66.useState(false);
    React66.useEffect(() => {
      let cancelled = false;
      if (toasts.length) {
        setHasToasts(true);
      } else {
        setTimeout(() => {
          if (!cancelled) {
            setHasToasts(false);
          }
        }, 1e3);
      }
      return () => {
        cancelled = true;
      };
    }, [toasts.length, setHasToasts]);
    if (!hasToasts)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)($054eb8030ebde76e$export$6192c2425ecfd989, { className: "tlui-toast__viewport" });
  }

  // ../../../packages/ui/src/lib/components/Toolbar/Toolbar.tsx
  var import_classnames19 = __toESM(require_classnames());
  var import_react107 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/MobileStylePanel.tsx
  var import_react106 = __toESM(require_react());
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  function MobileStylePanel() {
    const app = useApp();
    const msg2 = useTranslation();
    const currentColor = useValue(
      "current color",
      () => {
        const { props } = app;
        return props ? props.color ? app.getCssColor(props.color) : null : "var(--color-muted-1)";
      },
      [app]
    );
    const disableStylePanel = useValue(
      "isHandOrEraserToolActive",
      () => app.isInAny("hand", "zoom", "eraser"),
      [app]
    );
    const handleStylesOpenChange = (0, import_react106.useCallback)(
      (isOpen) => {
        if (!isOpen) {
          app.isChangingStyle = false;
        }
      },
      [app]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(Popover, { id: "style menu", onOpenChange: handleStylesOpenChange, children: [
      /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(PopoverTrigger, { disabled: disableStylePanel, children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
        Button,
        {
          className: "tlui-toolbar__tools__button tlui-toolbar__styles__button tlui-popover__trigger",
          "data-wd": "mobile.styles",
          style: { color: currentColor != null ? currentColor : "var(--color-text)" },
          title: msg2("style-panel.title"),
          children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(Icon, { icon: currentColor ? "blob" : "mixed" })
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(PopoverContent, { side: "top", align: "end", children: /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(StylePanel, { isMobile: true }) })
    ] });
  }

  // ../../../packages/ui/src/lib/components/Toolbar/ToggleToolLockedButton.tsx
  var import_classnames18 = __toESM(require_classnames());
  var import_jsx_runtime108 = __toESM(require_jsx_runtime());
  var ToggleToolLockedButton = function ToggleToolLockedButton2({
    activeToolId
  }) {
    const app = useApp();
    const breakpoint = useBreakpoint();
    const msg2 = useTranslation();
    const isToolLocked = useValue("is tool locked", () => app.instanceState.isToolLocked, [app]);
    const isLockable = !(activeToolId === "select" || activeToolId === "hand" || activeToolId === "draw" || activeToolId === "eraser" || activeToolId === "text" || activeToolId === "zoom");
    if (!isLockable)
      return null;
    return /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(
      Button,
      {
        title: msg2("action.toggle-tool-lock"),
        className: (0, import_classnames18.default)("tlui-toolbar__lock-button", {
          "tlui-toolbar__lock-button__mobile": breakpoint < 5
        }),
        icon: isToolLocked ? "lock" : "unlock",
        onClick: () => app.updateInstanceState({ isToolLocked: !isToolLocked }),
        smallIcon: true
      }
    );
  };

  // ../../../packages/ui/src/lib/components/Toolbar/Toolbar.tsx
  var import_jsx_runtime109 = __toESM(require_jsx_runtime());
  var Toolbar = function Toolbar2() {
    const app = useApp();
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const rMostRecentlyActiveDropdownItem = import_react107.default.useRef(void 0);
    const isReadOnly = useReadonly();
    const toolbarItems = useToolbarSchema();
    const activeToolId = useValue("current tool id", () => app.currentToolId, [app]);
    const isHandTool = activeToolId === "hand";
    const geoState = useValue("geo", () => app.props ? app.props.geo : void 0, [app]);
    const showEditingTools = !isReadOnly;
    const showExtraActions = !(isReadOnly || isHandTool);
    const getTitle = (item) => item.label ? `${msg2(item.label)} ${item.kbd ? kbdStr(item.kbd) : ""}` : "";
    const activeToolbarItem = toolbarItems.find((item) => {
      return isActiveToolItem(item.toolItem, activeToolId, geoState);
    });
    const { itemsInPanel, itemsInDropdown, dropdownFirstItem } = import_react107.default.useMemo(() => {
      const itemsInPanel2 = [];
      const itemsInDropdown2 = [];
      let dropdownFirstItem2;
      const overflowIndex = Math.min(8, 5 + breakpoint);
      for (let i3 = 4; i3 < toolbarItems.length; i3++) {
        const item = toolbarItems[i3];
        if (i3 < overflowIndex) {
          itemsInPanel2.push(item);
        } else {
          if (item === activeToolbarItem) {
            dropdownFirstItem2 = item;
          }
          itemsInDropdown2.push(item);
        }
      }
      if (dropdownFirstItem2) {
      } else {
        if (!rMostRecentlyActiveDropdownItem.current) {
          rMostRecentlyActiveDropdownItem.current = itemsInDropdown2[0];
        }
        dropdownFirstItem2 = rMostRecentlyActiveDropdownItem.current;
        if (!itemsInDropdown2.includes(dropdownFirstItem2)) {
          dropdownFirstItem2 = itemsInDropdown2[0];
        }
      }
      rMostRecentlyActiveDropdownItem.current = dropdownFirstItem2;
      if (itemsInDropdown2.length <= 2) {
        itemsInPanel2.push(...itemsInDropdown2);
        itemsInDropdown2.length = 0;
      }
      return { itemsInPanel: itemsInPanel2, itemsInDropdown: itemsInDropdown2, dropdownFirstItem: dropdownFirstItem2 };
    }, [toolbarItems, activeToolbarItem, breakpoint]);
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("div", { className: "tlui-toolbar", children: /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: "tlui-toolbar__inner", children: [
      /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: "tlui-toolbar__left", children: [
        !isReadOnly && /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(
          "div",
          {
            className: (0, import_classnames19.default)("tlui-toolbar__extras", {
              "tlui-toolbar__extras__hidden": !showExtraActions
            }),
            children: [
              breakpoint < 5 && /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)("div", { className: "tlui-toolbar__extras__controls", children: [
                /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(UndoButton, {}),
                /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(RedoButton, {}),
                /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(TrashButton, {}),
                /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(DuplicateButton, {}),
                /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(ActionsMenu, {})
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(ToggleToolLockedButton, { activeToolId })
            ]
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(
          "div",
          {
            className: (0, import_classnames19.default)("tlui-toolbar__tools", {
              "tlui-toolbar__tools__mobile": breakpoint < 5
            }),
            children: [
              toolbarItems.slice(0, 2).map(({ toolItem }) => {
                return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
                  ToolbarButton,
                  {
                    item: toolItem,
                    title: getTitle(toolItem),
                    isSelected: isActiveToolItem(toolItem, activeToolId, geoState)
                  },
                  toolItem.id
                );
              }),
              showEditingTools && /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(import_jsx_runtime109.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("div", { className: "tlui-toolbar__divider" }),
                toolbarItems.slice(2, 4).map(({ toolItem }) => /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
                  ToolbarButton,
                  {
                    item: toolItem,
                    title: getTitle(toolItem),
                    isSelected: isActiveToolItem(toolItem, activeToolId, geoState)
                  },
                  toolItem.id
                )),
                /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("div", { className: "tlui-toolbar__divider" }),
                itemsInPanel.map(({ toolItem }) => /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
                  ToolbarButton,
                  {
                    item: toolItem,
                    title: getTitle(toolItem),
                    isSelected: isActiveToolItem(toolItem, activeToolId, geoState)
                  },
                  toolItem.id
                )),
                itemsInDropdown.length ? /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(import_jsx_runtime109.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
                    ToolbarButton,
                    {
                      item: dropdownFirstItem.toolItem,
                      title: getTitle(dropdownFirstItem.toolItem),
                      isSelected: isActiveToolItem(
                        dropdownFirstItem.toolItem,
                        activeToolId,
                        geoState
                      )
                    },
                    dropdownFirstItem.toolItem.id
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(Root, { id: "toolbar overflow", modal: false, children: [
                    /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(Trigger, { children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
                      Button,
                      {
                        className: "tlui-toolbar__tools__button tlui-toolbar__overflow",
                        icon: "chevron-up",
                        "data-wd": "tools.more",
                        title: msg2("tool-panel.more")
                      }
                    ) }),
                    /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(Content, { side: "top", align: "center", children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(OverflowToolsContent, { toolbarItems: itemsInDropdown }) })
                  ] })
                ] }) : null
              ] })
            ]
          }
        )
      ] }),
      breakpoint < 5 && !isReadOnly && /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("div", { className: "tlui-toolbar__tools", children: /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(MobileStylePanel, {}) })
    ] }) });
  };
  var OverflowToolsContent = track(function OverflowToolsContent2({
    toolbarItems
  }) {
    const msg2 = useTranslation();
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)("div", { className: "tlui-button-grid__four tlui-button-grid__reverse", children: toolbarItems.map(({ toolItem: { id, meta, kbd: kbd2, label, onSelect, icon } }) => {
      var _a5;
      return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
        Item,
        {
          className: "tlui-button-grid__button",
          "data-wd": `tools.${id}`,
          "data-tool": id,
          "data-geo": (_a5 = meta == null ? void 0 : meta.geo) != null ? _a5 : "",
          "aria-label": label,
          onClick: () => onSelect("toolbar"),
          title: label ? `${msg2(label)} ${kbd2 ? kbdStr(kbd2) : ""}` : "",
          icon
        },
        id
      );
    }) });
  });
  function ToolbarButton({
    item,
    title,
    isSelected
  }) {
    var _a5, _b2;
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
      Button,
      {
        className: "tlui-toolbar__tools__button",
        "data-wd": `tools.${item.id}`,
        "data-tool": item.id,
        "data-geo": (_b2 = (_a5 = item.meta) == null ? void 0 : _a5.geo) != null ? _b2 : "",
        "aria-label": item.label,
        title,
        icon: item.icon,
        "data-state": isSelected ? "selected" : void 0,
        onClick: () => item.onSelect("toolbar"),
        onTouchStart: (e2) => {
          preventDefault(e2);
          item.onSelect("toolbar");
        }
      }
    );
  }
  var isActiveToolItem = (item, activeToolId, geoState) => {
    var _a5, _b2;
    return ((_a5 = item.meta) == null ? void 0 : _a5.geo) ? activeToolId === "geo" && geoState === ((_b2 = item.meta) == null ? void 0 : _b2.geo) : activeToolId === item.id;
  };

  // ../../../packages/ui/src/lib/hooks/useAppEvents.ts
  var import_react108 = __toESM(require_react());
  function useAppEvents() {
    const app = useApp();
    const { addToast } = useToasts();
    (0, import_react108.useEffect)(() => {
      function handleMaxShapes({ name, count }) {
        addToast({
          title: "Maximum Shapes Reached",
          description: `You've reached the maximum number of shapes allowed on ${name} (${count}). Please delete some shapes or move to a different page to continue.`
        });
      }
      app.addListener("max-shapes", handleMaxShapes);
      return () => {
        app.removeListener("max-shapes", handleMaxShapes);
      };
    }, [app, addToast]);
  }

  // ../../../packages/ui/src/lib/TldrawUi.tsx
  var import_jsx_runtime110 = __toESM(require_jsx_runtime());
  var TldrawUi = import_react109.default.memo(function TldrawUi2(_a5) {
    var _b2 = _a5, {
      shareZone,
      renderDebugMenuItems,
      children,
      hideUi
    } = _b2, rest = __objRest(_b2, [
      "shareZone",
      "renderDebugMenuItems",
      "children",
      "hideUi"
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(TldrawUiContextProvider, __spreadProps(__spreadValues({}, rest), { children: /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
      TldrawUiInner,
      {
        hideUi,
        shareZone,
        renderDebugMenuItems,
        children
      }
    ) }));
  });
  var TldrawUiInner = import_react109.default.memo(function TldrawUiInner2(_a5) {
    var _b2 = _a5, {
      children,
      hideUi
    } = _b2, rest = __objRest(_b2, [
      "children",
      "hideUi"
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)(import_jsx_runtime110.Fragment, { children: [
      children,
      hideUi ? null : /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(TldrawUiContent, __spreadValues({}, rest))
    ] });
  });
  var TldrawUiContent = import_react109.default.memo(function TldrawUI({
    shareZone,
    renderDebugMenuItems
  }) {
    const app = useApp();
    const msg2 = useTranslation();
    const breakpoint = useBreakpoint();
    const isReadonlyMode = useValue("isReadOnlyMode", () => app.isReadOnly, []);
    const isFocusMode = useValue("isFocusMode", () => app.instanceState.isFocusMode, []);
    const isDebugMode = useValue("isDebugMode", () => app.instanceState.isDebugMode, []);
    useNativeClipboardEvents();
    useAppEvents();
    const { "toggle-focus-mode": toggleFocus } = useActions();
    return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)($054eb8030ebde76e$export$f5d03d415824e0e, { children: /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)(
      "main",
      {
        "data-tldraw-area": "active-drawing",
        className: (0, import_classnames20.default)("tlui-layout", {
          "tlui-layout__mobile": breakpoint < 5
        }),
        children: [
          isFocusMode ? /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("div", { className: "tlui-layout__top", children: /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
            Button,
            {
              className: "tlui-focus-button",
              title: `${msg2("focus-mode.toggle-focus-mode")}`,
              icon: "dot",
              onClick: () => toggleFocus.onSelect("menu")
            }
          ) }) : /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)(import_jsx_runtime110.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)("div", { className: "tlui-layout__top", children: [
              /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)("div", { className: "tlui-layout__top__left", children: [
                /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(MenuZone, {}),
                /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)("div", { className: "tlui-helper-buttons", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ExitPenMode, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(BackToContent, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(StopFollowing, {})
                ] })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)("div", { className: "tlui-layout__top__right", children: [
                shareZone && /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("div", { className: "tlui-share-zone", draggable: false, children: shareZone }),
                breakpoint >= 5 && !isReadonlyMode && /* @__PURE__ */ (0, import_jsx_runtime110.jsx)("div", { className: "tlui-style-panel__wrapper", children: /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(StylePanel, {}) })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)("div", { className: "tlui-layout__bottom", children: [
              /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)("div", { className: "tlui-layout__bottom__main", children: [
                /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(NavigationZone, {}),
                /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(Toolbar, {}),
                breakpoint >= 4 && /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(HelpMenu, {})
              ] }),
              isDebugMode && /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(DebugPanel, { renderDebugMenuItems: renderDebugMenuItems != null ? renderDebugMenuItems : null })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(Toasts, {}),
          /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(Dialogs, {}),
          /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(ToastViewport, {})
        ]
      }
    ) });
  });

  // ../../../node_modules/@radix-ui/react-context-menu/dist/index.module.js
  var import_react110 = __toESM(require_react());
  var $1b0217ee4a91d156$var$CONTEXT_MENU_NAME = "ContextMenu";
  var [$1b0217ee4a91d156$var$createContextMenuContext, $1b0217ee4a91d156$export$1059331f43ddcc82] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($1b0217ee4a91d156$var$CONTEXT_MENU_NAME, [
    $6cc32821e9371a1c$export$4027731b685e72eb
  ]);
  var $1b0217ee4a91d156$var$useMenuScope = $6cc32821e9371a1c$export$4027731b685e72eb();
  var [$1b0217ee4a91d156$var$ContextMenuProvider, $1b0217ee4a91d156$var$useContextMenuContext] = $1b0217ee4a91d156$var$createContextMenuContext($1b0217ee4a91d156$var$CONTEXT_MENU_NAME);
  var $1b0217ee4a91d156$export$8dc6765e8be191c7 = (props) => {
    const { __scopeContextMenu, children, onOpenChange, dir, modal = true } = props;
    const [open1, setOpen] = (0, import_react110.useState)(false);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const handleOpenChangeProp = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onOpenChange);
    const handleOpenChange = (0, import_react110.useCallback)((open) => {
      setOpen(open);
      handleOpenChangeProp(open);
    }, [
      handleOpenChangeProp
    ]);
    return /* @__PURE__ */ (0, import_react110.createElement)($1b0217ee4a91d156$var$ContextMenuProvider, {
      scope: __scopeContextMenu,
      open: open1,
      onOpenChange: handleOpenChange,
      modal
    }, /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$be92b6f5f03c0fe9, _extends({}, menuScope, {
      dir,
      open: open1,
      onOpenChange: handleOpenChange,
      modal
    }), children));
  };
  var $1b0217ee4a91d156$var$TRIGGER_NAME = "ContextMenuTrigger";
  var $1b0217ee4a91d156$export$be6fc7b1d5b0beb9 = /* @__PURE__ */ (0, import_react110.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeContextMenu, disabled = false } = _a5, triggerProps = __objRest(_a5, ["__scopeContextMenu", "disabled"]);
    const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$TRIGGER_NAME, __scopeContextMenu);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const pointRef = (0, import_react110.useRef)({
      x: 0,
      y: 0
    });
    const virtualRef = (0, import_react110.useRef)({
      getBoundingClientRect: () => DOMRect.fromRect(__spreadValues({
        width: 0,
        height: 0
      }, pointRef.current))
    });
    const longPressTimerRef = (0, import_react110.useRef)(0);
    const clearLongPress = (0, import_react110.useCallback)(
      () => window.clearTimeout(longPressTimerRef.current),
      []
    );
    const handleOpen = (event) => {
      pointRef.current = {
        x: event.clientX,
        y: event.clientY
      };
      context.onOpenChange(true);
    };
    (0, import_react110.useEffect)(
      () => clearLongPress,
      [
        clearLongPress
      ]
    );
    (0, import_react110.useEffect)(
      () => void (disabled && clearLongPress()),
      [
        disabled,
        clearLongPress
      ]
    );
    return /* @__PURE__ */ (0, import_react110.createElement)(import_react110.Fragment, null, /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$b688253958b8dfe7, _extends({}, menuScope, {
      virtualRef
    })), /* @__PURE__ */ (0, import_react110.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.span, _extends({
      "data-state": context.open ? "open" : "closed",
      "data-disabled": disabled ? "" : void 0
    }, triggerProps, {
      ref: forwardedRef,
      style: __spreadValues({
        WebkitTouchCallout: "none"
      }, props.style),
      onContextMenu: disabled ? props.onContextMenu : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onContextMenu, (event) => {
        clearLongPress();
        handleOpen(event);
        event.preventDefault();
      }),
      onPointerDown: disabled ? props.onPointerDown : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, $1b0217ee4a91d156$var$whenTouchOrPen((event) => {
        clearLongPress();
        longPressTimerRef.current = window.setTimeout(
          () => handleOpen(event),
          700
        );
      })),
      onPointerMove: disabled ? props.onPointerMove : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
      onPointerCancel: disabled ? props.onPointerCancel : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerCancel, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress)),
      onPointerUp: disabled ? props.onPointerUp : $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, $1b0217ee4a91d156$var$whenTouchOrPen(clearLongPress))
    })));
  });
  var $1b0217ee4a91d156$export$14afd0be83e45060 = (props) => {
    const _a5 = props, { __scopeContextMenu } = _a5, portalProps = __objRest(_a5, ["__scopeContextMenu"]);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$602eac185826482c, _extends({}, menuScope, portalProps));
  };
  var $1b0217ee4a91d156$var$CONTENT_NAME = "ContextMenuContent";
  var $1b0217ee4a91d156$export$572205900c9369e = /* @__PURE__ */ (0, import_react110.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeContextMenu } = _a5, contentProps = __objRest(_a5, ["__scopeContextMenu"]);
    const context = $1b0217ee4a91d156$var$useContextMenuContext($1b0217ee4a91d156$var$CONTENT_NAME, __scopeContextMenu);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const hasInteractedOutsideRef = (0, import_react110.useRef)(false);
    return /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$7c6e2c02157bb7d2, _extends({}, menuScope, contentProps, {
      ref: forwardedRef,
      side: "right",
      sideOffset: 2,
      align: "start",
      onCloseAutoFocus: (event) => {
        var _props$onCloseAutoFoc;
        (_props$onCloseAutoFoc = props.onCloseAutoFocus) === null || _props$onCloseAutoFoc === void 0 || _props$onCloseAutoFoc.call(props, event);
        if (!event.defaultPrevented && hasInteractedOutsideRef.current)
          event.preventDefault();
        hasInteractedOutsideRef.current = false;
      },
      onInteractOutside: (event) => {
        var _props$onInteractOuts;
        (_props$onInteractOuts = props.onInteractOutside) === null || _props$onInteractOuts === void 0 || _props$onInteractOuts.call(props, event);
        if (!event.defaultPrevented && !context.modal)
          hasInteractedOutsideRef.current = true;
      },
      style: __spreadProps(__spreadValues({}, props.style), {
        "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
        "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
        "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
        "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
        "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
      })
    }));
  });
  var $1b0217ee4a91d156$export$9860523b0fcdd664 = /* @__PURE__ */ (0, import_react110.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeContextMenu } = _a5, groupProps = __objRest(_a5, ["__scopeContextMenu"]);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$eb2fcfdbd7ba97d4, _extends({}, menuScope, groupProps, {
      ref: forwardedRef
    }));
  });
  var $1b0217ee4a91d156$export$16a26dc176a49100 = /* @__PURE__ */ (0, import_react110.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeContextMenu } = _a5, itemProps = __objRest(_a5, ["__scopeContextMenu"]);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$6d08773d2e66f8f2, _extends({}, menuScope, itemProps, {
      ref: forwardedRef
    }));
  });
  var $1b0217ee4a91d156$export$b6adbe51d5d8b7ec = /* @__PURE__ */ (0, import_react110.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeContextMenu } = _a5, checkboxItemProps = __objRest(_a5, ["__scopeContextMenu"]);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$16ce288f89fa631c, _extends({}, menuScope, checkboxItemProps, {
      ref: forwardedRef
    }));
  });
  var $1b0217ee4a91d156$export$5bc21d1c00c4b201 = (props) => {
    const { __scopeContextMenu, children, onOpenChange, open: openProp, defaultOpen } = props;
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    const [open, setOpen] = $71cd76cc60e0454e$export$6f32135080cb4c3({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$d7a01e11500dfb6f, _extends({}, menuScope, {
      open,
      onOpenChange: setOpen
    }), children);
  };
  var $1b0217ee4a91d156$export$30b2b5c64556d316 = /* @__PURE__ */ (0, import_react110.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeContextMenu } = _a5, triggerItemProps = __objRest(_a5, ["__scopeContextMenu"]);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$2ea8a7a591ac5eac, _extends({}, menuScope, triggerItemProps, {
      ref: forwardedRef
    }));
  });
  var $1b0217ee4a91d156$export$2c967063bd2dc512 = /* @__PURE__ */ (0, import_react110.forwardRef)((props, forwardedRef) => {
    const _a5 = props, { __scopeContextMenu } = _a5, subContentProps = __objRest(_a5, ["__scopeContextMenu"]);
    const menuScope = $1b0217ee4a91d156$var$useMenuScope(__scopeContextMenu);
    return /* @__PURE__ */ (0, import_react110.createElement)($6cc32821e9371a1c$export$6d4de93b380beddf, _extends({}, menuScope, subContentProps, {
      ref: forwardedRef,
      style: __spreadProps(__spreadValues({}, props.style), {
        "--radix-context-menu-content-transform-origin": "var(--radix-popper-transform-origin)",
        "--radix-context-menu-content-available-width": "var(--radix-popper-available-width)",
        "--radix-context-menu-content-available-height": "var(--radix-popper-available-height)",
        "--radix-context-menu-trigger-width": "var(--radix-popper-anchor-width)",
        "--radix-context-menu-trigger-height": "var(--radix-popper-anchor-height)"
      })
    }));
  });
  function $1b0217ee4a91d156$var$whenTouchOrPen(handler) {
    return (event) => event.pointerType !== "mouse" ? handler(event) : void 0;
  }
  var $1b0217ee4a91d156$export$be92b6f5f03c0fe9 = $1b0217ee4a91d156$export$8dc6765e8be191c7;
  var $1b0217ee4a91d156$export$41fb9f06171c75f4 = $1b0217ee4a91d156$export$be6fc7b1d5b0beb9;
  var $1b0217ee4a91d156$export$602eac185826482c = $1b0217ee4a91d156$export$14afd0be83e45060;
  var $1b0217ee4a91d156$export$7c6e2c02157bb7d2 = $1b0217ee4a91d156$export$572205900c9369e;
  var $1b0217ee4a91d156$export$eb2fcfdbd7ba97d4 = $1b0217ee4a91d156$export$9860523b0fcdd664;
  var $1b0217ee4a91d156$export$6d08773d2e66f8f2 = $1b0217ee4a91d156$export$16a26dc176a49100;
  var $1b0217ee4a91d156$export$16ce288f89fa631c = $1b0217ee4a91d156$export$b6adbe51d5d8b7ec;
  var $1b0217ee4a91d156$export$d7a01e11500dfb6f = $1b0217ee4a91d156$export$5bc21d1c00c4b201;
  var $1b0217ee4a91d156$export$2ea8a7a591ac5eac = $1b0217ee4a91d156$export$30b2b5c64556d316;
  var $1b0217ee4a91d156$export$6d4de93b380beddf = $1b0217ee4a91d156$export$2c967063bd2dc512;

  // ../../../packages/ui/src/lib/components/ContextMenu.tsx
  var import_classnames21 = __toESM(require_classnames());
  var React69 = __toESM(require_react());

  // ../../../packages/ui/src/lib/components/MoveToPageMenu.tsx
  var import_jsx_runtime111 = __toESM(require_jsx_runtime());
  var MoveToPageMenu = track(function MoveToPageMenu2() {
    const app = useApp();
    const container = useContainer();
    const pages = app.pages;
    const currentPageId = app.currentPageId;
    const msg2 = useTranslation();
    const { addToast } = useToasts();
    return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)($1b0217ee4a91d156$export$d7a01e11500dfb6f, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)($1b0217ee4a91d156$export$2ea8a7a591ac5eac, { dir: "ltr", asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
        Button,
        {
          className: "tlui-menu__button",
          label: "context-menu.move-to-page",
          "data-wd": "menu-item.move-to-page",
          icon: "chevron-right"
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)($1b0217ee4a91d156$export$602eac185826482c, { container, dir: "ltr", children: /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)($1b0217ee4a91d156$export$6d4de93b380beddf, { className: "tlui-menu", sideOffset: -4, collisionPadding: 4, children: [
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          $1b0217ee4a91d156$export$eb2fcfdbd7ba97d4,
          {
            dir: "ltr",
            className: "tlui-menu__group",
            "data-wd": `menu-item.pages`,
            children: pages.map((page) => /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              $1b0217ee4a91d156$export$6d08773d2e66f8f2,
              {
                disabled: currentPageId === page.id,
                onSelect: () => {
                  app.mark("move_shapes_to_page");
                  app.moveShapesToPage(app.selectedIds, page.id);
                  const toPage = app.getPageById(page.id);
                  if (toPage) {
                    addToast({
                      title: "Changed Page",
                      description: `Moved to ${toPage.name}.`,
                      actions: [
                        {
                          label: "Go Back",
                          type: "primary",
                          onClick: () => {
                            app.mark("change-page");
                            app.setCurrentPageId(currentPageId);
                          }
                        }
                      ]
                    });
                  }
                },
                asChild: true,
                children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
                  Button,
                  {
                    title: page.name,
                    className: "tlui-menu__button tlui-context-menu__move-to-page__name",
                    children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("span", { children: page.name })
                  }
                )
              },
              page.id
            ))
          },
          "pages"
        ),
        /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
          $1b0217ee4a91d156$export$eb2fcfdbd7ba97d4,
          {
            dir: "ltr",
            className: "tlui-menu__group",
            "data-wd": `menu-item.new-page`,
            children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
              $1b0217ee4a91d156$export$6d08773d2e66f8f2,
              {
                onSelect: () => {
                  app.mark("move_shapes_to_page");
                  const newPageId = TLPage.createId();
                  const ids = app.selectedIds;
                  const oldPageId = app.currentPageId;
                  app.batch(() => {
                    app.createPage("Page 1", newPageId);
                    app.setCurrentPageId(oldPageId);
                    app.moveShapesToPage(ids, newPageId);
                  });
                },
                asChild: true,
                children: /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
                  Button,
                  {
                    title: msg2("context.pages.new-page"),
                    className: "tlui-menu__button tlui-context-menu__move-to-page__name",
                    children: msg2("context.pages.new-page")
                  }
                )
              },
              "new-page"
            )
          },
          "new-page"
        )
      ] }) })
    ] });
  });

  // ../../../packages/ui/src/lib/components/ContextMenu.tsx
  var import_jsx_runtime112 = __toESM(require_jsx_runtime());
  var ContextMenu = function ContextMenu2({ children }) {
    const app = useApp();
    const contextMenuSchema = useContextMenuSchema();
    const [_, handleOpenChange] = useMenuIsOpen("context menu");
    const isReadonly = useReadonly();
    const noItemsToShow = contextMenuSchema.length === 0 || isReadonly && contextMenuSchema.every((item) => !item.readonlyOk);
    const selectToolActive = useValue("isSelectToolActive", () => app.currentToolId === "select", [
      app
    ]);
    const disabled = !selectToolActive || noItemsToShow;
    return /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)($1b0217ee4a91d156$export$be92b6f5f03c0fe9, { dir: "ltr", onOpenChange: handleOpenChange, children: [
      /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
        $1b0217ee4a91d156$export$41fb9f06171c75f4,
        {
          onContextMenu: disabled ? preventDefault : void 0,
          dir: "ltr",
          disabled,
          children
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(ContextMenuContent, {})
    ] });
  };
  function ContextMenuContent() {
    const app = useApp();
    const msg2 = useTranslation();
    const menuSchema = useContextMenuSchema();
    const [_, handleSubOpenChange] = useMenuIsOpen("context menu sub");
    const isReadonly = useReadonly();
    const { paste } = useMenuClipboardEvents("context-menu");
    const breakpoint = useBreakpoint();
    const container = useContainer();
    const [disableClicks, setDisableClicks] = React69.useState(false);
    function getContextMenuItem(app2, item, parent, depth) {
      if (isReadonly && !item.readonlyOk)
        return null;
      switch (item.type) {
        case "custom": {
          switch (item.id) {
            case "MENU_PASTE": {
              return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)($1b0217ee4a91d156$export$6d08773d2e66f8f2, { children: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
                Button,
                {
                  className: "tlui-menu__button",
                  "data-wd": `menu-item.${item.id}`,
                  kbd: "$v",
                  label: "action.paste",
                  disabled: item.disabled,
                  onClick: () => {
                    if (!app2.isSafari || app2.isSafari && app2.isIos) {
                      navigator.clipboard.read().then((clipboardItems) => {
                        paste(clipboardItems, app2.inputs.currentPagePoint);
                      });
                    }
                  },
                  onMouseDown: () => {
                    if (app2.isSafari && !app2.isIos) {
                      navigator.clipboard.read().then((clipboardItems) => {
                        paste(clipboardItems, app2.inputs.currentPagePoint);
                      });
                    }
                  }
                }
              ) }, item.id);
            }
            case "MOVE_TO_PAGE_MENU": {
              return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(MoveToPageMenu, {}, item.id);
            }
          }
          break;
        }
        case "group": {
          return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
            $1b0217ee4a91d156$export$eb2fcfdbd7ba97d4,
            {
              dir: "ltr",
              className: (0, import_classnames21.default)("tlui-menu__group", {
                "tlui-menu__group__small": (parent == null ? void 0 : parent.type) === "submenu"
              }),
              "data-wd": `menu-item.${item.id}`,
              children: item.children.map((child) => getContextMenuItem(app2, child, item, depth + 1))
            },
            item.id
          );
        }
        case "submenu": {
          return /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)($1b0217ee4a91d156$export$d7a01e11500dfb6f, { onOpenChange: handleSubOpenChange, children: [
            /* @__PURE__ */ (0, import_jsx_runtime112.jsx)($1b0217ee4a91d156$export$2ea8a7a591ac5eac, { dir: "ltr", disabled: item.disabled, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
              Button,
              {
                className: "tlui-menu__button",
                label: item.label,
                "data-wd": `menu-item.${item.id}`,
                icon: "chevron-right"
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime112.jsx)($1b0217ee4a91d156$export$602eac185826482c, { container, dir: "ltr", children: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)($1b0217ee4a91d156$export$6d4de93b380beddf, { className: "tlui-menu", sideOffset: -4, collisionPadding: 4, children: item.children.map((child) => getContextMenuItem(app2, child, item, depth + 1)) }) })
          ] }, item.id);
        }
        case "item": {
          if (isReadonly && !item.readonlyOk)
            return null;
          const { id, checkbox, contextMenuLabel, label, onSelect, kbd: kbd2, icon } = item.actionItem;
          const labelToUse = contextMenuLabel != null ? contextMenuLabel : label;
          const labelStr = labelToUse ? msg2(labelToUse) : void 0;
          if (checkbox) {
            return /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)(
              $1b0217ee4a91d156$export$16ce288f89fa631c,
              {
                className: "tlui-button tlui-menu__button tlui-menu__checkbox-item",
                dir: "ltr",
                disabled: item.disabled,
                onSelect: (e2) => {
                  onSelect("context-menu");
                  preventDefault(e2);
                },
                title: labelStr ? labelStr : void 0,
                checked: item.checked,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
                    "div",
                    {
                      className: "tlui-menu__checkbox-item__check",
                      style: {
                        transformOrigin: "75% center",
                        transform: `scale(${item.checked ? 1 : 0.5})`,
                        opacity: item.checked ? 1 : 0.5
                      },
                      children: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(Icon, { small: true, icon: item.checked ? "check" : "checkbox-empty" })
                    }
                  ),
                  labelStr && /* @__PURE__ */ (0, import_jsx_runtime112.jsx)("span", { children: labelStr }),
                  kbd2 && /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(Kbd, { children: kbd2 })
                ]
              },
              id
            );
          }
          return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)($1b0217ee4a91d156$export$6d08773d2e66f8f2, { dir: "ltr", asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
            Button,
            {
              className: "tlui-menu__button",
              "data-wd": `menu-item.${id}`,
              kbd: kbd2,
              label: labelToUse,
              disabled: item.disabled,
              iconLeft: breakpoint < 3 && depth > 2 ? icon : void 0,
              onClick: () => {
                if (disableClicks) {
                  setDisableClicks(false);
                } else {
                  onSelect("context-menu");
                }
              }
            }
          ) }, id);
        }
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime112.jsx)($1b0217ee4a91d156$export$602eac185826482c, { dir: "ltr", container, children: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
      $1b0217ee4a91d156$export$7c6e2c02157bb7d2,
      {
        className: "tlui-menu scrollable",
        alignOffset: -4,
        collisionPadding: 4,
        onContextMenu: preventDefault,
        children: menuSchema.map((item) => getContextMenuItem(app, item, null, 0))
      }
    ) });
  }

  // ../../../packages/ui/src/lib/components/HTMLCanvas.tsx
  var React70 = __toESM(require_react());
  var import_jsx_runtime113 = __toESM(require_jsx_runtime());
  var HTMLCanvas = track(function HTMLCanvas2() {
    const app = useApp();
    const rCanvas = React70.useRef(null);
    const camera = app.camera;
    const shapes = app.shapesArray;
    if (rCanvas.current) {
      const cvs = rCanvas.current;
      const ctx = cvs.getContext("2d");
      ctx.resetTransform();
      ctx.clearRect(0, 0, cvs.width, cvs.height);
      const path = new Path2D();
      ctx.translate(camera.x, camera.y);
      for (const shape of shapes) {
        const bounds = app.getPageBounds(shape);
        path.rect(bounds.minX, bounds.minY, bounds.width, bounds.height);
      }
      ctx.fillStyle = "#cccccc";
      ctx.fill(path);
      for (const shape of shapes) {
        ctx.save();
        const corners = app.getPageCorners(shape);
        corners.forEach((corner) => dot(ctx, corner.x, corner.y, "red"));
        ctx.restore();
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
      "canvas",
      {
        ref: rCanvas,
        width: app.viewportScreenBounds.width,
        height: app.viewportScreenBounds.height,
        style: { width: "100%", height: "100%" }
      }
    );
  });
  function dot(ctx, x3, y3, color = "#000") {
    ctx.save();
    ctx.beginPath();
    ctx.ellipse(x3, y3, 4, 4, 0, 0, Math.PI * 2);
    ctx.fillStyle = color;
    ctx.fill();
    ctx.restore();
  }

  // ../../../packages/ui/src/lib/hooks/useHighDpiCanvas.ts
  var import_react111 = __toESM(require_react());

  // ../../../node_modules/hotkeys-js/dist/hotkeys.esm.js
  var isff = typeof navigator !== "undefined" ? navigator.userAgent.toLowerCase().indexOf("firefox") > 0 : false;
  function addEvent(object2, event, method, useCapture) {
    if (object2.addEventListener) {
      object2.addEventListener(event, method, useCapture);
    } else if (object2.attachEvent) {
      object2.attachEvent("on".concat(event), function() {
        method(window.event);
      });
    }
  }
  function getMods(modifier, key) {
    var mods = key.slice(0, key.length - 1);
    for (var i3 = 0; i3 < mods.length; i3++) {
      mods[i3] = modifier[mods[i3].toLowerCase()];
    }
    return mods;
  }
  function getKeys(key) {
    if (typeof key !== "string")
      key = "";
    key = key.replace(/\s/g, "");
    var keys = key.split(",");
    var index2 = keys.lastIndexOf("");
    for (; index2 >= 0; ) {
      keys[index2 - 1] += ",";
      keys.splice(index2, 1);
      index2 = keys.lastIndexOf("");
    }
    return keys;
  }
  function compareArray(a1, a22) {
    var arr1 = a1.length >= a22.length ? a1 : a22;
    var arr2 = a1.length >= a22.length ? a22 : a1;
    var isIndex = true;
    for (var i3 = 0; i3 < arr1.length; i3++) {
      if (arr2.indexOf(arr1[i3]) === -1)
        isIndex = false;
    }
    return isIndex;
  }
  var _keyMap = {
    backspace: 8,
    "\u232B": 8,
    tab: 9,
    clear: 12,
    enter: 13,
    "\u21A9": 13,
    return: 13,
    esc: 27,
    escape: 27,
    space: 32,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    del: 46,
    delete: 46,
    ins: 45,
    insert: 45,
    home: 36,
    end: 35,
    pageup: 33,
    pagedown: 34,
    capslock: 20,
    num_0: 96,
    num_1: 97,
    num_2: 98,
    num_3: 99,
    num_4: 100,
    num_5: 101,
    num_6: 102,
    num_7: 103,
    num_8: 104,
    num_9: 105,
    num_multiply: 106,
    num_add: 107,
    num_enter: 108,
    num_subtract: 109,
    num_decimal: 110,
    num_divide: 111,
    "\u21EA": 20,
    ",": 188,
    ".": 190,
    "/": 191,
    "`": 192,
    "-": isff ? 173 : 189,
    "=": isff ? 61 : 187,
    ";": isff ? 59 : 186,
    "'": 222,
    "[": 219,
    "]": 221,
    "\\": 220
  };
  var _modifier = {
    // shiftKey
    "\u21E7": 16,
    shift: 16,
    // altKey
    "\u2325": 18,
    alt: 18,
    option: 18,
    // ctrlKey
    "\u2303": 17,
    ctrl: 17,
    control: 17,
    // metaKey
    "\u2318": 91,
    cmd: 91,
    command: 91
  };
  var modifierMap = {
    16: "shiftKey",
    18: "altKey",
    17: "ctrlKey",
    91: "metaKey",
    shiftKey: 16,
    ctrlKey: 17,
    altKey: 18,
    metaKey: 91
  };
  var _mods = {
    16: false,
    18: false,
    17: false,
    91: false
  };
  var _handlers = {};
  for (k2 = 1; k2 < 20; k2++) {
    _keyMap["f".concat(k2)] = 111 + k2;
  }
  var k2;
  var _downKeys = [];
  var winListendFocus = false;
  var _scope = "all";
  var elementHasBindEvent = [];
  var code = function code2(x3) {
    return _keyMap[x3.toLowerCase()] || _modifier[x3.toLowerCase()] || x3.toUpperCase().charCodeAt(0);
  };
  var getKey = function getKey2(x3) {
    return Object.keys(_keyMap).find(function(k2) {
      return _keyMap[k2] === x3;
    });
  };
  var getModifier = function getModifier2(x3) {
    return Object.keys(_modifier).find(function(k2) {
      return _modifier[k2] === x3;
    });
  };
  function setScope(scope) {
    _scope = scope || "all";
  }
  function getScope() {
    return _scope || "all";
  }
  function getPressedKeyCodes() {
    return _downKeys.slice(0);
  }
  function getPressedKeyString() {
    return _downKeys.map(function(c3) {
      return getKey(c3) || getModifier(c3) || String.fromCharCode(c3);
    });
  }
  function filter(event) {
    var target = event.target || event.srcElement;
    var tagName = target.tagName;
    var flag = true;
    if (target.isContentEditable || (tagName === "INPUT" || tagName === "TEXTAREA" || tagName === "SELECT") && !target.readOnly) {
      flag = false;
    }
    return flag;
  }
  function isPressed(keyCode) {
    if (typeof keyCode === "string") {
      keyCode = code(keyCode);
    }
    return _downKeys.indexOf(keyCode) !== -1;
  }
  function deleteScope(scope, newScope) {
    var handlers;
    var i3;
    if (!scope)
      scope = getScope();
    for (var key in _handlers) {
      if (Object.prototype.hasOwnProperty.call(_handlers, key)) {
        handlers = _handlers[key];
        for (i3 = 0; i3 < handlers.length; ) {
          if (handlers[i3].scope === scope)
            handlers.splice(i3, 1);
          else
            i3++;
        }
      }
    }
    if (getScope() === scope)
      setScope(newScope || "all");
  }
  function clearModifier(event) {
    var key = event.keyCode || event.which || event.charCode;
    var i3 = _downKeys.indexOf(key);
    if (i3 >= 0) {
      _downKeys.splice(i3, 1);
    }
    if (event.key && event.key.toLowerCase() === "meta") {
      _downKeys.splice(0, _downKeys.length);
    }
    if (key === 93 || key === 224)
      key = 91;
    if (key in _mods) {
      _mods[key] = false;
      for (var k2 in _modifier) {
        if (_modifier[k2] === key)
          hotkeys[k2] = false;
      }
    }
  }
  function unbind(keysInfo) {
    if (typeof keysInfo === "undefined") {
      Object.keys(_handlers).forEach(function(key) {
        return delete _handlers[key];
      });
    } else if (Array.isArray(keysInfo)) {
      keysInfo.forEach(function(info) {
        if (info.key)
          eachUnbind(info);
      });
    } else if (typeof keysInfo === "object") {
      if (keysInfo.key)
        eachUnbind(keysInfo);
    } else if (typeof keysInfo === "string") {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      var scope = args[0], method = args[1];
      if (typeof scope === "function") {
        method = scope;
        scope = "";
      }
      eachUnbind({
        key: keysInfo,
        scope,
        method,
        splitKey: "+"
      });
    }
  }
  var eachUnbind = function eachUnbind2(_ref) {
    var key = _ref.key, scope = _ref.scope, method = _ref.method, _ref$splitKey = _ref.splitKey, splitKey = _ref$splitKey === void 0 ? "+" : _ref$splitKey;
    var multipleKeys = getKeys(key);
    multipleKeys.forEach(function(originKey) {
      var unbindKeys = originKey.split(splitKey);
      var len = unbindKeys.length;
      var lastKey = unbindKeys[len - 1];
      var keyCode = lastKey === "*" ? "*" : code(lastKey);
      if (!_handlers[keyCode])
        return;
      if (!scope)
        scope = getScope();
      var mods = len > 1 ? getMods(_modifier, unbindKeys) : [];
      _handlers[keyCode] = _handlers[keyCode].filter(function(record) {
        var isMatchingMethod = method ? record.method === method : true;
        return !(isMatchingMethod && record.scope === scope && compareArray(record.mods, mods));
      });
    });
  };
  function eventHandler(event, handler, scope, element) {
    if (handler.element !== element) {
      return;
    }
    var modifiersMatch;
    if (handler.scope === scope || handler.scope === "all") {
      modifiersMatch = handler.mods.length > 0;
      for (var y3 in _mods) {
        if (Object.prototype.hasOwnProperty.call(_mods, y3)) {
          if (!_mods[y3] && handler.mods.indexOf(+y3) > -1 || _mods[y3] && handler.mods.indexOf(+y3) === -1) {
            modifiersMatch = false;
          }
        }
      }
      if (handler.mods.length === 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91] || modifiersMatch || handler.shortcut === "*") {
        if (handler.method(event, handler) === false) {
          if (event.preventDefault)
            event.preventDefault();
          else
            event.returnValue = false;
          if (event.stopPropagation)
            event.stopPropagation();
          if (event.cancelBubble)
            event.cancelBubble = true;
        }
      }
    }
  }
  function dispatch(event, element) {
    var asterisk = _handlers["*"];
    var key = event.keyCode || event.which || event.charCode;
    if (!hotkeys.filter.call(this, event))
      return;
    if (key === 93 || key === 224)
      key = 91;
    if (_downKeys.indexOf(key) === -1 && key !== 229)
      _downKeys.push(key);
    ["ctrlKey", "altKey", "shiftKey", "metaKey"].forEach(function(keyName) {
      var keyNum = modifierMap[keyName];
      if (event[keyName] && _downKeys.indexOf(keyNum) === -1) {
        _downKeys.push(keyNum);
      } else if (!event[keyName] && _downKeys.indexOf(keyNum) > -1) {
        _downKeys.splice(_downKeys.indexOf(keyNum), 1);
      } else if (keyName === "metaKey" && event[keyName] && _downKeys.length === 3) {
        if (!(event.ctrlKey || event.shiftKey || event.altKey)) {
          _downKeys = _downKeys.slice(_downKeys.indexOf(keyNum));
        }
      }
    });
    if (key in _mods) {
      _mods[key] = true;
      for (var k2 in _modifier) {
        if (_modifier[k2] === key)
          hotkeys[k2] = true;
      }
      if (!asterisk)
        return;
    }
    for (var e2 in _mods) {
      if (Object.prototype.hasOwnProperty.call(_mods, e2)) {
        _mods[e2] = event[modifierMap[e2]];
      }
    }
    if (event.getModifierState && !(event.altKey && !event.ctrlKey) && event.getModifierState("AltGraph")) {
      if (_downKeys.indexOf(17) === -1) {
        _downKeys.push(17);
      }
      if (_downKeys.indexOf(18) === -1) {
        _downKeys.push(18);
      }
      _mods[17] = true;
      _mods[18] = true;
    }
    var scope = getScope();
    if (asterisk) {
      for (var i3 = 0; i3 < asterisk.length; i3++) {
        if (asterisk[i3].scope === scope && (event.type === "keydown" && asterisk[i3].keydown || event.type === "keyup" && asterisk[i3].keyup)) {
          eventHandler(event, asterisk[i3], scope, element);
        }
      }
    }
    if (!(key in _handlers))
      return;
    for (var _i = 0; _i < _handlers[key].length; _i++) {
      if (event.type === "keydown" && _handlers[key][_i].keydown || event.type === "keyup" && _handlers[key][_i].keyup) {
        if (_handlers[key][_i].key) {
          var record = _handlers[key][_i];
          var splitKey = record.splitKey;
          var keyShortcut = record.key.split(splitKey);
          var _downKeysCurrent = [];
          for (var a3 = 0; a3 < keyShortcut.length; a3++) {
            _downKeysCurrent.push(code(keyShortcut[a3]));
          }
          if (_downKeysCurrent.sort().join("") === _downKeys.sort().join("")) {
            eventHandler(event, record, scope, element);
          }
        }
      }
    }
  }
  function isElementBind(element) {
    return elementHasBindEvent.indexOf(element) > -1;
  }
  function hotkeys(key, option, method) {
    _downKeys = [];
    var keys = getKeys(key);
    var mods = [];
    var scope = "all";
    var element = document;
    var i3 = 0;
    var keyup = false;
    var keydown = true;
    var splitKey = "+";
    var capture = false;
    if (method === void 0 && typeof option === "function") {
      method = option;
    }
    if (Object.prototype.toString.call(option) === "[object Object]") {
      if (option.scope)
        scope = option.scope;
      if (option.element)
        element = option.element;
      if (option.keyup)
        keyup = option.keyup;
      if (option.keydown !== void 0)
        keydown = option.keydown;
      if (option.capture !== void 0)
        capture = option.capture;
      if (typeof option.splitKey === "string")
        splitKey = option.splitKey;
    }
    if (typeof option === "string")
      scope = option;
    for (; i3 < keys.length; i3++) {
      key = keys[i3].split(splitKey);
      mods = [];
      if (key.length > 1)
        mods = getMods(_modifier, key);
      key = key[key.length - 1];
      key = key === "*" ? "*" : code(key);
      if (!(key in _handlers))
        _handlers[key] = [];
      _handlers[key].push({
        keyup,
        keydown,
        scope,
        mods,
        shortcut: keys[i3],
        method,
        key: keys[i3],
        splitKey,
        element
      });
    }
    if (typeof element !== "undefined" && !isElementBind(element) && window) {
      elementHasBindEvent.push(element);
      addEvent(element, "keydown", function(e2) {
        dispatch(e2, element);
      }, capture);
      if (!winListendFocus) {
        winListendFocus = true;
        addEvent(window, "focus", function() {
          _downKeys = [];
        }, capture);
      }
      addEvent(element, "keyup", function(e2) {
        dispatch(e2, element);
        clearModifier(e2);
      }, capture);
    }
  }
  function trigger(shortcut) {
    var scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "all";
    Object.keys(_handlers).forEach(function(key) {
      var dataList = _handlers[key].filter(function(item) {
        return item.scope === scope && item.shortcut === shortcut;
      });
      dataList.forEach(function(data) {
        if (data && data.method) {
          data.method();
        }
      });
    });
  }
  var _api = {
    getPressedKeyString,
    setScope,
    getScope,
    deleteScope,
    getPressedKeyCodes,
    isPressed,
    filter,
    trigger,
    unbind,
    keyMap: _keyMap,
    modifier: _modifier,
    modifierMap
  };
  for (a3 in _api) {
    if (Object.prototype.hasOwnProperty.call(_api, a3)) {
      hotkeys[a3] = _api[a3];
    }
  }
  var a3;
  if (typeof window !== "undefined") {
    _hotkeys = window.hotkeys;
    hotkeys.noConflict = function(deep) {
      if (deep && window.hotkeys === hotkeys) {
        window.hotkeys = _hotkeys;
      }
      return hotkeys;
    };
    window.hotkeys = hotkeys;
  }
  var _hotkeys;

  // ../../../packages/ui/src/lib/hooks/useKeyboardShortcuts.ts
  var import_react112 = __toESM(require_react());

  // src/utils/vscode.ts
  var vscode = acquireVsCodeApi();

  // src/utils/openUrl.ts
  function openUrl(url) {
    vscode.postMessage({
      type: "vscode:open-window",
      data: { url, target: "_blank" }
    });
  }

  // src/utils/links.ts
  var GITHUB_URL = "https://github.com/tldraw/tldraw";
  var linksMenuGroup = menuGroup(
    "links",
    menuItem({
      id: "github",
      label: "help-menu.github",
      readonlyOk: true,
      icon: "github",
      onSelect() {
        openUrl(GITHUB_URL);
      }
    }),
    menuItem({
      id: "twitter",
      label: "help-menu.twitter",
      icon: "twitter",
      readonlyOk: true,
      onSelect() {
        openUrl("https://twitter.com/tldraw");
      }
    }),
    menuItem({
      id: "discord",
      label: "help-menu.discord",
      icon: "discord",
      readonlyOk: true,
      onSelect() {
        openUrl("https://discord.gg/SBBEVCA4PG");
      }
    }),
    menuItem({
      id: "about",
      label: "help-menu.about",
      icon: "external-link",
      readonlyOk: true,
      onSelect() {
        openUrl("https://www.tldraw.dev");
      }
    })
  );
  var linksUiOverrides = {
    helpMenu(app, schema) {
      schema.push(linksMenuGroup);
      return schema;
    },
    menu(app, schema, { isMobile }) {
      if (isMobile) {
        schema.push(linksMenuGroup);
      }
      return schema;
    }
  };

  // ../../../packages/tlsync-client/src/lib/alerts.ts
  function showCantWriteToIndexDbAlert() {
    window.alert(
      `Oops! We could not save changes to your browser's storage. We now need to reload the page and try again.

Keep seeing this message?
\u2022 If you're using tldraw in a private or "incognito" window, try loading tldraw in a regular window or in a different browser.
\u2022 If your hard disk is full, try clearing up some space and then reload the page.`
    );
  }
  function showCantReadFromIndexDbAlert() {
    window.alert(
      `Oops! We could not access to your browser's storage\u2014and the app won't work correctly without that. We now need to reload the page and try again.

Keep seeing this message?
\u2022 If you're using tldraw in a private or "incognito" window, try loading tldraw in a regular window or in a different browser.`
    );
  }

  // ../../../node_modules/idb/build/wrap-idb-value.js
  var instanceOfAny = (object2, constructors) => constructors.some((c3) => object2 instanceof c3);
  var idbProxyableTypes;
  var cursorAdvanceMethods;
  function getIdbProxyableTypes() {
    return idbProxyableTypes || (idbProxyableTypes = [
      IDBDatabase,
      IDBObjectStore,
      IDBIndex,
      IDBCursor,
      IDBTransaction
    ]);
  }
  function getCursorAdvanceMethods() {
    return cursorAdvanceMethods || (cursorAdvanceMethods = [
      IDBCursor.prototype.advance,
      IDBCursor.prototype.continue,
      IDBCursor.prototype.continuePrimaryKey
    ]);
  }
  var cursorRequestMap = /* @__PURE__ */ new WeakMap();
  var transactionDoneMap = /* @__PURE__ */ new WeakMap();
  var transactionStoreNamesMap = /* @__PURE__ */ new WeakMap();
  var transformCache = /* @__PURE__ */ new WeakMap();
  var reverseTransformCache = /* @__PURE__ */ new WeakMap();
  function promisifyRequest(request) {
    const promise = new Promise((resolve, reject) => {
      const unlisten = () => {
        request.removeEventListener("success", success);
        request.removeEventListener("error", error);
      };
      const success = () => {
        resolve(wrap(request.result));
        unlisten();
      };
      const error = () => {
        reject(request.error);
        unlisten();
      };
      request.addEventListener("success", success);
      request.addEventListener("error", error);
    });
    promise.then((value) => {
      if (value instanceof IDBCursor) {
        cursorRequestMap.set(value, request);
      }
    }).catch(() => {
    });
    reverseTransformCache.set(promise, request);
    return promise;
  }
  function cacheDonePromiseForTransaction(tx) {
    if (transactionDoneMap.has(tx))
      return;
    const done = new Promise((resolve, reject) => {
      const unlisten = () => {
        tx.removeEventListener("complete", complete);
        tx.removeEventListener("error", error);
        tx.removeEventListener("abort", error);
      };
      const complete = () => {
        resolve();
        unlisten();
      };
      const error = () => {
        reject(tx.error || new DOMException("AbortError", "AbortError"));
        unlisten();
      };
      tx.addEventListener("complete", complete);
      tx.addEventListener("error", error);
      tx.addEventListener("abort", error);
    });
    transactionDoneMap.set(tx, done);
  }
  var idbProxyTraps = {
    get(target, prop, receiver) {
      if (target instanceof IDBTransaction) {
        if (prop === "done")
          return transactionDoneMap.get(target);
        if (prop === "objectStoreNames") {
          return target.objectStoreNames || transactionStoreNamesMap.get(target);
        }
        if (prop === "store") {
          return receiver.objectStoreNames[1] ? void 0 : receiver.objectStore(receiver.objectStoreNames[0]);
        }
      }
      return wrap(target[prop]);
    },
    set(target, prop, value) {
      target[prop] = value;
      return true;
    },
    has(target, prop) {
      if (target instanceof IDBTransaction && (prop === "done" || prop === "store")) {
        return true;
      }
      return prop in target;
    }
  };
  function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
  }
  function wrapFunction(func) {
    if (func === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype)) {
      return function(storeNames, ...args) {
        const tx = func.call(unwrap(this), storeNames, ...args);
        transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
        return wrap(tx);
      };
    }
    if (getCursorAdvanceMethods().includes(func)) {
      return function(...args) {
        func.apply(unwrap(this), args);
        return wrap(cursorRequestMap.get(this));
      };
    }
    return function(...args) {
      return wrap(func.apply(unwrap(this), args));
    };
  }
  function transformCachableValue(value) {
    if (typeof value === "function")
      return wrapFunction(value);
    if (value instanceof IDBTransaction)
      cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes()))
      return new Proxy(value, idbProxyTraps);
    return value;
  }
  function wrap(value) {
    if (value instanceof IDBRequest)
      return promisifyRequest(value);
    if (transformCache.has(value))
      return transformCache.get(value);
    const newValue = transformCachableValue(value);
    if (newValue !== value) {
      transformCache.set(value, newValue);
      reverseTransformCache.set(newValue, value);
    }
    return newValue;
  }
  var unwrap = (value) => reverseTransformCache.get(value);

  // ../../../node_modules/idb/build/index.js
  function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = wrap(request);
    if (upgrade) {
      request.addEventListener("upgradeneeded", (event) => {
        upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);
      });
    }
    if (blocked) {
      request.addEventListener("blocked", (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion,
        event.newVersion,
        event
      ));
    }
    openPromise.then((db) => {
      if (terminated)
        db.addEventListener("close", () => terminated());
      if (blocking) {
        db.addEventListener("versionchange", (event) => blocking(event.oldVersion, event.newVersion, event));
      }
    }).catch(() => {
    });
    return openPromise;
  }
  function deleteDB(name, { blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) {
      request.addEventListener("blocked", (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion,
        event
      ));
    }
    return wrap(request).then(() => void 0);
  }
  var readMethods = ["get", "getKey", "getAll", "getAllKeys", "count"];
  var writeMethods = ["put", "add", "delete", "clear"];
  var cachedMethods = /* @__PURE__ */ new Map();
  function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === "string")) {
      return;
    }
    if (cachedMethods.get(prop))
      return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, "");
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (
      // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
      !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || readMethods.includes(targetFuncName))
    ) {
      return;
    }
    const method = function(storeName, ...args) {
      return __async(this, null, function* () {
        const tx = this.transaction(storeName, isWrite ? "readwrite" : "readonly");
        let target2 = tx.store;
        if (useIndex)
          target2 = target2.index(args.shift());
        return (yield Promise.all([
          target2[targetFuncName](...args),
          isWrite && tx.done
        ]))[0];
      });
    };
    cachedMethods.set(prop, method);
    return method;
  }
  replaceTraps((oldTraps) => __spreadProps(__spreadValues({}, oldTraps), {
    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop)
  }));

  // ../../../packages/tlsync-client/src/lib/persistence-constants.ts
  var tabIdKey = "TLDRAW_TAB_ID_v2";
  var window2 = globalThis.window;
  function iOS() {
    if (!window2)
      return false;
    return ["iPad Simulator", "iPhone Simulator", "iPod Simulator", "iPad", "iPhone", "iPod"].includes(
      window2.navigator.platform
    ) || // iPad on iOS 13 detection
    window2.navigator.userAgent.includes("Mac") && "ontouchend" in document;
  }
  var USER_DATA_KEY = "TLDRAW_USER_DATA_v2";
  var _a2;
  var globalUserData = atom(
    "globalUserData",
    (_a2 = JSON.parse((window2 == null ? void 0 : window2.localStorage.getItem(USER_DATA_KEY)) || "null")) != null ? _a2 : TLUser.create({})
  );
  react("set global user data", () => {
    if (window2) {
      window2.localStorage.setItem(USER_DATA_KEY, JSON.stringify(globalUserData.value));
    }
  });
  function subscribeToUserData(store) {
    const userId = globalUserData.value.id;
    return store.listen(({ changes }) => {
      for (const record of Object.values(changes.added)) {
        if (record.typeName === "user" && userId === record.id) {
          globalUserData.set(record);
        }
      }
      for (const [_, record] of Object.values(changes.updated)) {
        if (record.typeName === "user" && userId === record.id) {
          globalUserData.set(record);
        }
      }
    });
  }
  var defaultDocumentKey = "TLDRAW_DEFAULT_DOCUMENT_NAME_v2";
  var _a3;
  var DEFAULT_DOCUMENT_NAME = (_a3 = window2 == null ? void 0 : window2.localStorage.getItem(defaultDocumentKey)) != null ? _a3 : uniqueId();
  window2 == null ? void 0 : window2.localStorage.setItem(defaultDocumentKey, DEFAULT_DOCUMENT_NAME);
  var STORE_PREFIX = "TLDRAW_DOCUMENT_v2";
  var _a4, _b;
  var TAB_ID = (_b = (_a4 = window2 == null ? void 0 : window2[tabIdKey]) != null ? _a4 : window2 == null ? void 0 : window2.sessionStorage[tabIdKey]) != null ? _b : TLInstance.createId();
  if (window2) {
    window2[tabIdKey] = TAB_ID;
    if (iOS()) {
      window2.sessionStorage[tabIdKey] = TAB_ID;
    } else {
      delete window2.sessionStorage[tabIdKey];
    }
  }
  window2 == null ? void 0 : window2.addEventListener("beforeunload", () => {
    window2.sessionStorage[tabIdKey] = TAB_ID;
  });
  var dbNameIndexKey = "TLDRAW_DB_NAME_INDEX_v2";
  function getAllIndexDbNames() {
    var _a5;
    const result = (_a5 = JSON.parse((window2 == null ? void 0 : window2.localStorage.getItem(dbNameIndexKey)) || "[]")) != null ? _a5 : [];
    if (!Array.isArray(result)) {
      return [];
    }
    return result;
  }
  function addDbName(name) {
    const all = new Set(getAllIndexDbNames());
    all.add(name);
    window2 == null ? void 0 : window2.localStorage.setItem(dbNameIndexKey, JSON.stringify([...all]));
  }

  // ../../../packages/tlsync-client/src/lib/indexedDb.ts
  function withDb(storeId, cb) {
    return __async(this, null, function* () {
      addDbName(storeId);
      const db = yield openDB(storeId, 2, {
        upgrade(database) {
          if (!database.objectStoreNames.contains("records")) {
            database.createObjectStore("records");
          }
          database.createObjectStore("schema");
        }
      });
      try {
        return yield cb(db);
      } finally {
        db.close();
      }
    });
  }
  function loadDataFromStore(universalPersistenceKey, opts) {
    return __async(this, null, function* () {
      const storeId = STORE_PREFIX + universalPersistenceKey;
      if (!getAllIndexDbNames().includes(storeId))
        return void 0;
      return yield withDb(storeId, (db) => __async(this, null, function* () {
        var _a5;
        if ((_a5 = opts == null ? void 0 : opts.didCancel) == null ? void 0 : _a5.call(opts))
          return void 0;
        const tx = db.transaction(["records", "schema"], "readonly");
        const recordsStore = tx.objectStore("records");
        const schemaStore = tx.objectStore("schema");
        return {
          records: yield recordsStore.getAll(),
          schema: yield schemaStore.get("schema")
        };
      }));
    });
  }
  function storeChangesInIndexedDb(universalPersistenceKey, schema, changes, opts) {
    return __async(this, null, function* () {
      const storeId = STORE_PREFIX + universalPersistenceKey;
      yield withDb(storeId, (db) => __async(this, null, function* () {
        var _a5;
        const tx = db.transaction(["records", "schema"], "readwrite");
        const recordsStore = tx.objectStore("records");
        const schemaStore = tx.objectStore("schema");
        for (const [id, record] of Object.entries(changes.added)) {
          yield recordsStore.put(record, id);
        }
        for (const [_prev, updated] of Object.values(changes.updated)) {
          yield recordsStore.put(updated, updated.id);
        }
        for (const id of Object.keys(changes.removed)) {
          yield recordsStore.delete(id);
        }
        schemaStore.put(schema.serialize(), "schema");
        if ((_a5 = opts == null ? void 0 : opts.didCancel) == null ? void 0 : _a5.call(opts))
          return tx.abort();
        yield tx.done;
      }));
    });
  }
  function storeSnapshotInIndexedDb(universalPersistenceKey, schema, snapshot, opts) {
    return __async(this, null, function* () {
      const storeId = STORE_PREFIX + universalPersistenceKey;
      yield withDb(storeId, (db) => __async(this, null, function* () {
        var _a5;
        const tx = db.transaction(["records", "schema"], "readwrite");
        const recordsStore = tx.objectStore("records");
        const schemaStore = tx.objectStore("schema");
        yield recordsStore.clear();
        for (const [id, record] of Object.entries(snapshot)) {
          yield recordsStore.put(record, id);
        }
        schemaStore.put(schema.serialize(), "schema");
        if ((_a5 = opts == null ? void 0 : opts.didCancel) == null ? void 0 : _a5.call(opts))
          return tx.abort();
        yield tx.done;
      }));
    });
  }

  // ../../../packages/tlsync-client/src/lib/TLLocalSyncClient.ts
  var PERSIST_THROTTLE_MS = 350;
  var PERSIST_RETRY_THROTTLE_MS = 1e4;
  var msg = (msg2) => msg2;
  var BroadcastChannelMock = class {
    constructor(_name) {
      __publicField(this, "onmessage");
    }
    postMessage(_msg) {
    }
    close() {
    }
  };
  var BC = typeof BroadcastChannel === "undefined" ? BroadcastChannelMock : BroadcastChannel;
  var TLLocalSyncClient = class {
    constructor(store, {
      universalPersistenceKey,
      onLoad,
      onLoadError
    }, channel = new BC(`tldraw-tab-sync-${universalPersistenceKey}`)) {
      this.store = store;
      this.channel = channel;
      __publicField(this, "disposables", /* @__PURE__ */ new Set());
      __publicField(this, "diffQueue", []);
      __publicField(this, "didDispose", false);
      __publicField(this, "shouldDoFullDBWrite", true);
      __publicField(this, "isReloading", false);
      __publicField(this, "universalPersistenceKey");
      __publicField(this, "serializedSchema");
      __publicField(this, "isDebugging", false);
      __publicField(this, "initTime", Date.now());
      __publicField(this, "isPersisting", false);
      __publicField(this, "didLastWriteError", false);
      __publicField(this, "scheduledPersistTimeout", null);
      if (typeof window !== "undefined") {
        ;
        window.tlsync = this;
      }
      this.universalPersistenceKey = universalPersistenceKey;
      this.serializedSchema = this.store.schema.serialize();
      this.disposables.add(
        // Set up a subscription to changes from the store: When
        // the store changes (and if the change was made by the user)
        // then immediately send the diff to other tabs via postMessage
        // and schedule a persist.
        store.listen(({ changes, source }) => {
          this.debug("changes", changes, source);
          if (source === "user") {
            this.diffQueue.push(changes);
            this.channel.postMessage(
              msg({
                type: "diff",
                instanceId: this.store.props.instanceId,
                changes,
                schema: this.serializedSchema
              })
            );
            this.schedulePersist();
          }
        })
      );
      this.connect(onLoad, onLoadError);
    }
    debug(...args) {
      if (this.isDebugging) {
        console.debug(...args);
      }
    }
    connect(onLoad, onLoadError) {
      return __async(this, null, function* () {
        var _a5;
        this.debug("connecting");
        let data;
        try {
          data = yield loadDataFromStore(this.universalPersistenceKey);
        } catch (error) {
          onLoadError(error);
          showCantReadFromIndexDbAlert();
          if (typeof window !== "undefined") {
            window.location.reload();
          }
          return;
        }
        this.debug("loaded data from store", data, "didDispose", this.didDispose);
        if (this.didDispose)
          return;
        try {
          if (data) {
            const snapshot = Object.fromEntries(data.records.map((r3) => [r3.id, r3]));
            const migrationResult = this.store.schema.migrateStoreSnapshot(
              snapshot,
              (_a5 = data.schema) != null ? _a5 : this.store.schema.serializeEarliestVersion()
            );
            if (migrationResult.type === "error") {
              console.error("failed to migrate store", migrationResult);
              onLoadError(new Error(`Failed to migrate store: ${migrationResult.reason}`));
              return;
            }
            this.store.mergeRemoteChanges(() => {
              this.store.put(Object.values(migrationResult.value), "initialize");
            });
          }
          this.channel.onmessage = ({ data: data2 }) => {
            var _a6, _b2, _c;
            this.debug("got message", data2);
            const msg2 = data2;
            const comparison = compareSchemas(
              this.serializedSchema,
              (_a6 = msg2.schema) != null ? _a6 : this.store.schema.serializeEarliestVersion()
            );
            if (comparison === -1) {
              const timeSinceInit = Date.now() - this.initTime;
              if (timeSinceInit < 5e3) {
                onLoadError(new Error("Schema mismatch, please close other tabs and reload the page"));
                return;
              }
              this.debug("reloading");
              this.isReloading = true;
              (_c = (_b2 = window == null ? void 0 : window.location) == null ? void 0 : _b2.reload) == null ? void 0 : _c.call(_b2);
              return;
            } else if (comparison === 1) {
              this.debug("telling them to reload");
              this.channel.postMessage({ type: "announce", schema: this.serializedSchema });
              this.shouldDoFullDBWrite = true;
              this.persistIfNeeded();
              return;
            }
            if (msg2.type === "diff") {
              this.debug("applying diff");
              const doesDeleteInstance = hasOwnProperty(
                msg2.changes.removed,
                this.store.props.instanceId
              );
              transact(() => {
                this.store.mergeRemoteChanges(() => {
                  this.store.applyDiff(msg2.changes);
                });
                if (doesDeleteInstance) {
                  this.store.ensureStoreIsUsable();
                }
              });
            }
          };
          this.channel.postMessage({ type: "announce", schema: this.serializedSchema });
          this.disposables.add(() => {
            this.channel.close();
          });
          onLoad(this);
        } catch (e2) {
          this.debug("error loading data from store", e2);
          if (this.didDispose)
            return;
          onLoadError(e2);
          return;
        }
      });
    }
    close() {
      this.debug("closing");
      this.didDispose = true;
      this.disposables.forEach((d3) => d3());
    }
    /**
     * Schedule a persist. Persists don't happen immediately: they are throttled to avoid writing too
     * often, and will retry if failed.
     *
     * @internal
     */
    schedulePersist() {
      this.debug("schedulePersist", this.scheduledPersistTimeout);
      if (this.scheduledPersistTimeout)
        return;
      this.scheduledPersistTimeout = setTimeout(
        () => {
          this.scheduledPersistTimeout = null;
          this.persistIfNeeded();
        },
        this.didLastWriteError ? PERSIST_RETRY_THROTTLE_MS : PERSIST_THROTTLE_MS
      );
    }
    /**
     * Persist to indexeddb only under certain circumstances:
     *
     * - If we're not already persisting
     * - If we're not reloading the page
     * - And we have something to persist (a full db write scheduled or changes in the diff queue)
     *
     * @internal
     */
    persistIfNeeded() {
      this.debug("persistIfNeeded", {
        isPersisting: this.isPersisting,
        isReloading: this.isReloading,
        shouldDoFullDBWrite: this.shouldDoFullDBWrite,
        diffQueueLength: this.diffQueue.length,
        storeIsPossiblyCorrupt: this.store.isPossiblyCorrupted()
      });
      if (this.scheduledPersistTimeout) {
        clearTimeout(this.scheduledPersistTimeout);
        this.scheduledPersistTimeout = null;
      }
      if (this.isPersisting)
        return;
      if (this.isReloading)
        return;
      if (this.store.isPossiblyCorrupted())
        return;
      if (this.shouldDoFullDBWrite || this.diffQueue.length > 0) {
        this.doPersist();
      }
    }
    /**
     * Actually persist to indexeddb. If the write fails, then we'll retry with a full db write after
     * a short delay.
     */
    doPersist() {
      return __async(this, null, function* () {
        assert(!this.isPersisting, "persist already in progress");
        this.isPersisting = true;
        this.debug("doPersist start");
        const diffQueue = this.diffQueue;
        this.diffQueue = [];
        try {
          if (this.shouldDoFullDBWrite) {
            this.shouldDoFullDBWrite = false;
            yield storeSnapshotInIndexedDb(
              this.universalPersistenceKey,
              this.store.schema,
              this.store.serialize(),
              {
                didCancel: () => this.didDispose
              }
            );
          } else {
            const diffs = squashRecordDiffs(diffQueue);
            yield storeChangesInIndexedDb(this.universalPersistenceKey, this.store.schema, diffs);
          }
          this.didLastWriteError = false;
        } catch (e2) {
          this.shouldDoFullDBWrite = true;
          this.didLastWriteError = true;
          console.error("failed to store changes in indexed db", e2);
          showCantWriteToIndexDbAlert();
          if (typeof window !== "undefined") {
            window.location.reload();
          }
        }
        this.isPersisting = false;
        this.debug("doPersist end");
        this.schedulePersist();
      });
    }
  };

  // ../../../packages/tlsync-client/src/lib/hardReset.ts
  function hardReset() {
    return __async(this, arguments, function* ({ shouldReload = true } = {}) {
      sessionStorage.clear();
      yield Promise.all(getAllIndexDbNames().map((db) => deleteDB(db)));
      localStorage.clear();
      if (shouldReload) {
        window.location.reload();
      }
    });
  }
  if (typeof window !== "undefined") {
    if (false) {
      ;
      window.hardReset = hardReset;
    }
    ;
    window.__tldraw__hardReset = hardReset;
  }

  // ../../../packages/tlsync-client/src/lib/hooks/useLocalSyncClient.ts
  var import_react113 = __toESM(require_react());
  function useLocalSyncClient({
    universalPersistenceKey,
    instanceId,
    userId,
    config = TldrawEditorConfig.default
  }) {
    var _a5;
    const [state, setState] = (0, import_react113.useState)(null);
    (0, import_react113.useEffect)(() => {
      const id = uniqueId();
      setState({
        id,
        syncedStore: { status: "loading" }
      });
      const setSyncedStore = (syncedStore) => {
        setState((prev) => {
          if ((prev == null ? void 0 : prev.id) === id) {
            return { id, syncedStore };
          }
          return prev;
        });
      };
      const store = config.createStore({ userId, instanceId });
      const client = new TLLocalSyncClient(store, {
        universalPersistenceKey,
        onLoad() {
          setSyncedStore({ status: "synced", store });
        },
        onLoadError(err) {
          setSyncedStore({ status: "error", error: err });
        }
      });
      const userDataUnsubcribe = subscribeToUserData(store);
      return () => {
        setState((prevState) => (prevState == null ? void 0 : prevState.id) === id ? null : prevState);
        userDataUnsubcribe();
        client.close();
      };
    }, [instanceId, universalPersistenceKey, config, userId]);
    return (_a5 = state == null ? void 0 : state.syncedStore) != null ? _a5 : { status: "loading" };
  }

  // ../../../packages/assets/embed-icons/codepen.png
  var codepen_default = "./codepen-F75FYE3V.png";

  // ../../../packages/assets/embed-icons/codesandbox.png
  var codesandbox_default = "./codesandbox-XTXJ37KO.png";

  // ../../../packages/assets/embed-icons/excalidraw.png
  var excalidraw_default = "./excalidraw-XL4NHOJW.png";

  // ../../../packages/assets/embed-icons/felt.png
  var felt_default = "./felt-YAXTMYRP.png";

  // ../../../packages/assets/embed-icons/figma.png
  var figma_default = "./figma-YEX4AS3Y.png";

  // ../../../packages/assets/embed-icons/github_gist.png
  var github_gist_default = "./github_gist-J3DR2ZDJ.png";

  // ../../../packages/assets/embed-icons/google_calendar.png
  var google_calendar_default = "./google_calendar-VTOZMTEN.png";

  // ../../../packages/assets/embed-icons/google_maps.png
  var google_maps_default = "./google_maps-HALB726N.png";

  // ../../../packages/assets/embed-icons/google_slides.png
  var google_slides_default = "./google_slides-RNWJX3XY.png";

  // ../../../packages/assets/embed-icons/observable.png
  var observable_default = "./observable-ZMVDXS6P.png";

  // ../../../packages/assets/embed-icons/replit.png
  var replit_default = "./replit-AW7ECK7S.png";

  // ../../../packages/assets/embed-icons/scratch.png
  var scratch_default = "./scratch-OEIUFB7O.png";

  // ../../../packages/assets/embed-icons/spotify.png
  var spotify_default = "./spotify-NDV5KDHT.png";

  // ../../../packages/assets/embed-icons/tldraw.png
  var tldraw_default = "./tldraw-DTFBW7TG.png";

  // ../../../packages/assets/embed-icons/vimeo.png
  var vimeo_default = "./vimeo-XELEUQDY.png";

  // ../../../packages/assets/embed-icons/youtube.png
  var youtube_default = "./youtube-WXNPHK6F.png";

  // ../../../packages/assets/fonts/IBMPlexMono-Medium.woff2
  var IBMPlexMono_Medium_default = "data:font/woff2;base64,";

  // ../../../packages/assets/fonts/IBMPlexSans-Medium.woff2
  var IBMPlexSans_Medium_default = "data:font/woff2;base64,";

  // ../../../packages/assets/fonts/IBMPlexSerif-Medium.woff2
  var IBMPlexSerif_Medium_default = "data:font/woff2;base64,";

  // ../../../packages/assets/fonts/Shantell_Sans-Normal-SemiBold.woff2
  var Shantell_Sans_Normal_SemiBold_default = "data:font/woff2;base64,";

  // ../../../packages/assets/icons/icon/align-bottom-center.svg
  var align_bottom_center_default = "./align-bottom-center-CSBP6QTZ.svg";

  // ../../../packages/assets/icons/icon/align-bottom-left.svg
  var align_bottom_left_default = "./align-bottom-left-AHNIB445.svg";

  // ../../../packages/assets/icons/icon/align-bottom-right.svg
  var align_bottom_right_default = "./align-bottom-right-IHPBZBXI.svg";

  // ../../../packages/assets/icons/icon/align-bottom.svg
  var align_bottom_default = "./align-bottom-R257ONEK.svg";

  // ../../../packages/assets/icons/icon/align-center-center.svg
  var align_center_center_default = "./align-center-center-VCLNOO2W.svg";

  // ../../../packages/assets/icons/icon/align-center-horizontal.svg
  var align_center_horizontal_default = "./align-center-horizontal-5VHTDUMJ.svg";

  // ../../../packages/assets/icons/icon/align-center-left.svg
  var align_center_left_default = "./align-center-left-42VN7ECS.svg";

  // ../../../packages/assets/icons/icon/align-center-right.svg
  var align_center_right_default = "./align-center-right-4FGKFC5X.svg";

  // ../../../packages/assets/icons/icon/align-center-vertical.svg
  var align_center_vertical_default = "./align-center-vertical-GMWASLGB.svg";

  // ../../../packages/assets/icons/icon/align-left.svg
  var align_left_default = "./align-left-5HEFCE7W.svg";

  // ../../../packages/assets/icons/icon/align-right.svg
  var align_right_default = "./align-right-72DPSEA4.svg";

  // ../../../packages/assets/icons/icon/align-top-center.svg
  var align_top_center_default = "./align-top-center-GCY6SXO6.svg";

  // ../../../packages/assets/icons/icon/align-top-left.svg
  var align_top_left_default = "./align-top-left-QX3PPIRZ.svg";

  // ../../../packages/assets/icons/icon/align-top-right.svg
  var align_top_right_default = "./align-top-right-KZH6VKZS.svg";

  // ../../../packages/assets/icons/icon/align-top.svg
  var align_top_default = "./align-top-EGCVQVP7.svg";

  // ../../../packages/assets/icons/icon/arrow-left.svg
  var arrow_left_default = "./arrow-left-WXBKOZZ3.svg";

  // ../../../packages/assets/icons/icon/arrowhead-arrow.svg
  var arrowhead_arrow_default = "./arrowhead-arrow-HVXKBQ5X.svg";

  // ../../../packages/assets/icons/icon/arrowhead-bar.svg
  var arrowhead_bar_default = "./arrowhead-bar-3CTU5K5M.svg";

  // ../../../packages/assets/icons/icon/arrowhead-diamond.svg
  var arrowhead_diamond_default = "./arrowhead-diamond-NK2JB2H3.svg";

  // ../../../packages/assets/icons/icon/arrowhead-dot.svg
  var arrowhead_dot_default = "./arrowhead-dot-EZWTRDT6.svg";

  // ../../../packages/assets/icons/icon/arrowhead-none.svg
  var arrowhead_none_default = "./arrowhead-none-V2X57KDJ.svg";

  // ../../../packages/assets/icons/icon/arrowhead-square.svg
  var arrowhead_square_default = "./arrowhead-square-YRMYHYGM.svg";

  // ../../../packages/assets/icons/icon/arrowhead-triangle-inverted.svg
  var arrowhead_triangle_inverted_default = "./arrowhead-triangle-inverted-K4DOKJE3.svg";

  // ../../../packages/assets/icons/icon/arrowhead-triangle.svg
  var arrowhead_triangle_default = "./arrowhead-triangle-KBOFPZWU.svg";

  // ../../../packages/assets/icons/icon/aspect-ratio.svg
  var aspect_ratio_default = "./aspect-ratio-TLDHMBOA.svg";

  // ../../../packages/assets/icons/icon/avatar.svg
  var avatar_default = "./avatar-SR2HBC7K.svg";

  // ../../../packages/assets/icons/icon/blob.svg
  var blob_default = "./blob-SNMNIYW3.svg";

  // ../../../packages/assets/icons/icon/bring-forward.svg
  var bring_forward_default = "./bring-forward-ORK5HVGK.svg";

  // ../../../packages/assets/icons/icon/bring-to-front.svg
  var bring_to_front_default = "./bring-to-front-6GSLYX2K.svg";

  // ../../../packages/assets/icons/icon/check.svg
  var check_default = "./check-MJKLH5SR.svg";

  // ../../../packages/assets/icons/icon/checkbox-checked.svg
  var checkbox_checked_default = "./checkbox-checked-5PBUY3Y7.svg";

  // ../../../packages/assets/icons/icon/checkbox-empty.svg
  var checkbox_empty_default = "./checkbox-empty-TQVZAZ6A.svg";

  // ../../../packages/assets/icons/icon/chevron-down.svg
  var chevron_down_default = "./chevron-down-AEDWWYCO.svg";

  // ../../../packages/assets/icons/icon/chevron-left.svg
  var chevron_left_default = "./chevron-left-YCK4SACI.svg";

  // ../../../packages/assets/icons/icon/chevron-right.svg
  var chevron_right_default = "./chevron-right-EFDMDQQM.svg";

  // ../../../packages/assets/icons/icon/chevron-up.svg
  var chevron_up_default = "./chevron-up-Y35TAHPL.svg";

  // ../../../packages/assets/icons/icon/chevrons-ne.svg
  var chevrons_ne_default = "./chevrons-ne-S5YHLDEF.svg";

  // ../../../packages/assets/icons/icon/chevrons-sw.svg
  var chevrons_sw_default = "./chevrons-sw-AS5SQCAQ.svg";

  // ../../../packages/assets/icons/icon/clipboard-copied.svg
  var clipboard_copied_default = "./clipboard-copied-NRCIIFUH.svg";

  // ../../../packages/assets/icons/icon/clipboard-copy.svg
  var clipboard_copy_default = "./clipboard-copy-IDTLWT5R.svg";

  // ../../../packages/assets/icons/icon/code.svg
  var code_default = "./code-PAX667R5.svg";

  // ../../../packages/assets/icons/icon/collab.svg
  var collab_default = "./collab-AWBOOTTN.svg";

  // ../../../packages/assets/icons/icon/color.svg
  var color_default = "./color-C2MERTHH.svg";

  // ../../../packages/assets/icons/icon/comment.svg
  var comment_default = "./comment-PZLNENXF.svg";

  // ../../../packages/assets/icons/icon/cross-2.svg
  var cross_2_default = "./cross-2-WTELNK2S.svg";

  // ../../../packages/assets/icons/icon/cross.svg
  var cross_default = "./cross-XALPFMSI.svg";

  // ../../../packages/assets/icons/icon/dash-dashed.svg
  var dash_dashed_default = "./dash-dashed-T4FQN6V6.svg";

  // ../../../packages/assets/icons/icon/dash-dotted.svg
  var dash_dotted_default = "./dash-dotted-S6I3OK6V.svg";

  // ../../../packages/assets/icons/icon/dash-draw.svg
  var dash_draw_default = "./dash-draw-J433ABMT.svg";

  // ../../../packages/assets/icons/icon/dash-solid.svg
  var dash_solid_default = "./dash-solid-A2CYPN3Y.svg";

  // ../../../packages/assets/icons/icon/discord.svg
  var discord_default = "./discord-GTFVFCES.svg";

  // ../../../packages/assets/icons/icon/distribute-horizontal.svg
  var distribute_horizontal_default = "./distribute-horizontal-VVKJEIWP.svg";

  // ../../../packages/assets/icons/icon/distribute-vertical.svg
  var distribute_vertical_default = "./distribute-vertical-KIBWN6LC.svg";

  // ../../../packages/assets/icons/icon/dot.svg
  var dot_default = "./dot-JIBX5YKB.svg";

  // ../../../packages/assets/icons/icon/dots-horizontal.svg
  var dots_horizontal_default = "./dots-horizontal-TJ5CT2HQ.svg";

  // ../../../packages/assets/icons/icon/dots-vertical.svg
  var dots_vertical_default = "./dots-vertical-HFP5CX3R.svg";

  // ../../../packages/assets/icons/icon/drag-handle-dots.svg
  var drag_handle_dots_default = "./drag-handle-dots-5SIPN6GZ.svg";

  // ../../../packages/assets/icons/icon/duplicate.svg
  var duplicate_default = "./duplicate-7PYPTSEE.svg";

  // ../../../packages/assets/icons/icon/edit.svg
  var edit_default = "./edit-UMAZLCJY.svg";

  // ../../../packages/assets/icons/icon/external-link.svg
  var external_link_default = "./external-link-BMQKUVXV.svg";

  // ../../../packages/assets/icons/icon/file.svg
  var file_default = "./file-LTENAHJE.svg";

  // ../../../packages/assets/icons/icon/fill-none.svg
  var fill_none_default = "./fill-none-QXN252XI.svg";

  // ../../../packages/assets/icons/icon/fill-pattern.svg
  var fill_pattern_default = "./fill-pattern-ZQVGLBIQ.svg";

  // ../../../packages/assets/icons/icon/fill-semi.svg
  var fill_semi_default = "./fill-semi-3TBWK7BX.svg";

  // ../../../packages/assets/icons/icon/fill-solid.svg
  var fill_solid_default = "./fill-solid-CM3AOVVJ.svg";

  // ../../../packages/assets/icons/icon/follow.svg
  var follow_default = "./follow-SO6ZXSIY.svg";

  // ../../../packages/assets/icons/icon/following.svg
  var following_default = "./following-3XSTNMGV.svg";

  // ../../../packages/assets/icons/icon/font-draw.svg
  var font_draw_default = "./font-draw-3A77N2BF.svg";

  // ../../../packages/assets/icons/icon/font-mono.svg
  var font_mono_default = "./font-mono-ZGMLFTH2.svg";

  // ../../../packages/assets/icons/icon/font-sans.svg
  var font_sans_default = "./font-sans-IBKENC3S.svg";

  // ../../../packages/assets/icons/icon/font-serif.svg
  var font_serif_default = "./font-serif-H5DCWABA.svg";

  // ../../../packages/assets/icons/icon/geo-arrow-down.svg
  var geo_arrow_down_default = "./geo-arrow-down-MKGVU75B.svg";

  // ../../../packages/assets/icons/icon/geo-arrow-left.svg
  var geo_arrow_left_default = "./geo-arrow-left-PIJP74PH.svg";

  // ../../../packages/assets/icons/icon/geo-arrow-right.svg
  var geo_arrow_right_default = "./geo-arrow-right-M65DKF6Q.svg";

  // ../../../packages/assets/icons/icon/geo-arrow-up.svg
  var geo_arrow_up_default = "./geo-arrow-up-5IN7Z4LD.svg";

  // ../../../packages/assets/icons/icon/geo-check-box.svg
  var geo_check_box_default = "./geo-check-box-IL7YZFE5.svg";

  // ../../../packages/assets/icons/icon/geo-diamond.svg
  var geo_diamond_default = "./geo-diamond-4TYP6MOF.svg";

  // ../../../packages/assets/icons/icon/geo-ellipse.svg
  var geo_ellipse_default = "./geo-ellipse-Q23XPT2V.svg";

  // ../../../packages/assets/icons/icon/geo-hexagon.svg
  var geo_hexagon_default = "./geo-hexagon-XMFBQVVM.svg";

  // ../../../packages/assets/icons/icon/geo-octagon.svg
  var geo_octagon_default = "./geo-octagon-YJ44SLUA.svg";

  // ../../../packages/assets/icons/icon/geo-oval.svg
  var geo_oval_default = "./geo-oval-SYOXXWFS.svg";

  // ../../../packages/assets/icons/icon/geo-pentagon.svg
  var geo_pentagon_default = "./geo-pentagon-43OK57W2.svg";

  // ../../../packages/assets/icons/icon/geo-rectangle.svg
  var geo_rectangle_default = "./geo-rectangle-FI77PTXK.svg";

  // ../../../packages/assets/icons/icon/geo-rhombus-2.svg
  var geo_rhombus_2_default = "./geo-rhombus-2-CPKCBYZS.svg";

  // ../../../packages/assets/icons/icon/geo-rhombus.svg
  var geo_rhombus_default = "./geo-rhombus-V3CIWP3W.svg";

  // ../../../packages/assets/icons/icon/geo-star.svg
  var geo_star_default = "./geo-star-RJCHP24Q.svg";

  // ../../../packages/assets/icons/icon/geo-trapezoid.svg
  var geo_trapezoid_default = "./geo-trapezoid-KQL3QW3P.svg";

  // ../../../packages/assets/icons/icon/geo-triangle.svg
  var geo_triangle_default = "./geo-triangle-XQNOYI6T.svg";

  // ../../../packages/assets/icons/icon/geo-x-box.svg
  var geo_x_box_default = "./geo-x-box-HGEG6XBE.svg";

  // ../../../packages/assets/icons/icon/github.svg
  var github_default = "./github-RDJM6DMJ.svg";

  // ../../../packages/assets/icons/icon/group.svg
  var group_default = "./group-JGT3FVEG.svg";

  // ../../../packages/assets/icons/icon/hidden.svg
  var hidden_default = "./hidden-EADDQTOH.svg";

  // ../../../packages/assets/icons/icon/image.svg
  var image_default = "./image-EUCUCPPZ.svg";

  // ../../../packages/assets/icons/icon/info-circle.svg
  var info_circle_default = "./info-circle-P6JHAA4T.svg";

  // ../../../packages/assets/icons/icon/leading.svg
  var leading_default = "./leading-MBFJWTTL.svg";

  // ../../../packages/assets/icons/icon/link.svg
  var link_default = "./link-52VYRTL2.svg";

  // ../../../packages/assets/icons/icon/lock-small.svg
  var lock_small_default = "./lock-small-2MVIZCHG.svg";

  // ../../../packages/assets/icons/icon/lock.svg
  var lock_default = "./lock-SW5QRVCW.svg";

  // ../../../packages/assets/icons/icon/menu.svg
  var menu_default = "./menu-CPW3VEJN.svg";

  // ../../../packages/assets/icons/icon/minus.svg
  var minus_default = "./minus-6LPEEEM3.svg";

  // ../../../packages/assets/icons/icon/mixed.svg
  var mixed_default = "./mixed-AHWYMJE7.svg";

  // ../../../packages/assets/icons/icon/pack.svg
  var pack_default = "./pack-EIZVYEVQ.svg";

  // ../../../packages/assets/icons/icon/page.svg
  var page_default = "./page-ZUNLFK67.svg";

  // ../../../packages/assets/icons/icon/plus.svg
  var plus_default = "./plus-EPRFWZ4V.svg";

  // ../../../packages/assets/icons/icon/question-mark-circle.svg
  var question_mark_circle_default = "./question-mark-circle-XHRXDOE6.svg";

  // ../../../packages/assets/icons/icon/question-mark.svg
  var question_mark_default = "./question-mark-W645ZCFD.svg";

  // ../../../packages/assets/icons/icon/redo.svg
  var redo_default = "./redo-K6YZSD6B.svg";

  // ../../../packages/assets/icons/icon/reset-zoom.svg
  var reset_zoom_default = "./reset-zoom-ZLHUIWNH.svg";

  // ../../../packages/assets/icons/icon/rotate-ccw.svg
  var rotate_ccw_default = "./rotate-ccw-FU4E7RON.svg";

  // ../../../packages/assets/icons/icon/rotate-cw.svg
  var rotate_cw_default = "./rotate-cw-BJSZSRHL.svg";

  // ../../../packages/assets/icons/icon/ruler.svg
  var ruler_default = "./ruler-NYH6HO34.svg";

  // ../../../packages/assets/icons/icon/search.svg
  var search_default = "./search-NXQFUKLM.svg";

  // ../../../packages/assets/icons/icon/send-backward.svg
  var send_backward_default = "./send-backward-EACD3M2B.svg";

  // ../../../packages/assets/icons/icon/send-to-back.svg
  var send_to_back_default = "./send-to-back-EJSAMA6K.svg";

  // ../../../packages/assets/icons/icon/settings-horizontal.svg
  var settings_horizontal_default = "./settings-horizontal-PU4HGHHB.svg";

  // ../../../packages/assets/icons/icon/settings-vertical-1.svg
  var settings_vertical_1_default = "./settings-vertical-1-24HP5CDI.svg";

  // ../../../packages/assets/icons/icon/settings-vertical.svg
  var settings_vertical_default = "./settings-vertical-BPYUUUAQ.svg";

  // ../../../packages/assets/icons/icon/share-1.svg
  var share_1_default = "./share-1-G7XIMHPX.svg";

  // ../../../packages/assets/icons/icon/share-2.svg
  var share_2_default = "./share-2-LB4XZCZM.svg";

  // ../../../packages/assets/icons/icon/size-extra-large.svg
  var size_extra_large_default = "./size-extra-large-L4T2H4MR.svg";

  // ../../../packages/assets/icons/icon/size-large.svg
  var size_large_default = "./size-large-W4KDQJNO.svg";

  // ../../../packages/assets/icons/icon/size-medium.svg
  var size_medium_default = "./size-medium-I7S2MCK6.svg";

  // ../../../packages/assets/icons/icon/size-small.svg
  var size_small_default = "./size-small-RNHTL6ZK.svg";

  // ../../../packages/assets/icons/icon/spline-cubic.svg
  var spline_cubic_default = "./spline-cubic-UXHEP6GI.svg";

  // ../../../packages/assets/icons/icon/spline-line.svg
  var spline_line_default = "./spline-line-EH2NJTGI.svg";

  // ../../../packages/assets/icons/icon/stack-horizontal.svg
  var stack_horizontal_default = "./stack-horizontal-KHHCBUXI.svg";

  // ../../../packages/assets/icons/icon/stack-vertical.svg
  var stack_vertical_default = "./stack-vertical-K3UYO556.svg";

  // ../../../packages/assets/icons/icon/stretch-horizontal.svg
  var stretch_horizontal_default = "./stretch-horizontal-O4PJOCNI.svg";

  // ../../../packages/assets/icons/icon/stretch-vertical.svg
  var stretch_vertical_default = "./stretch-vertical-NFU642RD.svg";

  // ../../../packages/assets/icons/icon/text-align-center.svg
  var text_align_center_default = "./text-align-center-NW5IGQZD.svg";

  // ../../../packages/assets/icons/icon/text-align-justify.svg
  var text_align_justify_default = "./text-align-justify-6B4B3UTH.svg";

  // ../../../packages/assets/icons/icon/text-align-left.svg
  var text_align_left_default = "./text-align-left-QJDWTFIL.svg";

  // ../../../packages/assets/icons/icon/text-align-right.svg
  var text_align_right_default = "./text-align-right-AWHH4ZWF.svg";

  // ../../../packages/assets/icons/icon/tool-arrow.svg
  var tool_arrow_default = "./tool-arrow-OWX4B7S3.svg";

  // ../../../packages/assets/icons/icon/tool-embed.svg
  var tool_embed_default = "./tool-embed-BGTKSDSH.svg";

  // ../../../packages/assets/icons/icon/tool-eraser.svg
  var tool_eraser_default = "./tool-eraser-6MM27NOP.svg";

  // ../../../packages/assets/icons/icon/tool-frame.svg
  var tool_frame_default = "./tool-frame-XDCS2VOF.svg";

  // ../../../packages/assets/icons/icon/tool-hand.svg
  var tool_hand_default = "./tool-hand-EAE5EAA2.svg";

  // ../../../packages/assets/icons/icon/tool-highlighter.svg
  var tool_highlighter_default = "./tool-highlighter-AIZKI5CN.svg";

  // ../../../packages/assets/icons/icon/tool-line.svg
  var tool_line_default = "./tool-line-UTQVG34M.svg";

  // ../../../packages/assets/icons/icon/tool-media.svg
  var tool_media_default = "./tool-media-EUCUCPPZ.svg";

  // ../../../packages/assets/icons/icon/tool-note.svg
  var tool_note_default = "./tool-note-QJOEKCF3.svg";

  // ../../../packages/assets/icons/icon/tool-pencil.svg
  var tool_pencil_default = "./tool-pencil-BSFYMW7W.svg";

  // ../../../packages/assets/icons/icon/tool-pointer.svg
  var tool_pointer_default = "./tool-pointer-YPWFLMHG.svg";

  // ../../../packages/assets/icons/icon/tool-text.svg
  var tool_text_default = "./tool-text-23UD26ZV.svg";

  // ../../../packages/assets/icons/icon/trash.svg
  var trash_default = "./trash-2SG6GG6P.svg";

  // ../../../packages/assets/icons/icon/triangle-down.svg
  var triangle_down_default = "./triangle-down-WWGDWHTE.svg";

  // ../../../packages/assets/icons/icon/triangle-up.svg
  var triangle_up_default = "./triangle-up-W2RPUBB3.svg";

  // ../../../packages/assets/icons/icon/twitter.svg
  var twitter_default = "./twitter-LG52VQSV.svg";

  // ../../../packages/assets/icons/icon/undo.svg
  var undo_default = "./undo-3DFGMHOZ.svg";

  // ../../../packages/assets/icons/icon/ungroup.svg
  var ungroup_default = "./ungroup-LF5HAADT.svg";

  // ../../../packages/assets/icons/icon/unlock-small.svg
  var unlock_small_default = "./unlock-small-5TT2XZKU.svg";

  // ../../../packages/assets/icons/icon/unlock.svg
  var unlock_default = "./unlock-4QZDZP67.svg";

  // ../../../packages/assets/icons/icon/visible.svg
  var visible_default = "./visible-2VDOMDS5.svg";

  // ../../../packages/assets/icons/icon/warning-triangle.svg
  var warning_triangle_default = "./warning-triangle-XMI6G2GK.svg";

  // ../../../packages/assets/icons/icon/zoom-in.svg
  var zoom_in_default = "./zoom-in-LZHUWGO6.svg";

  // ../../../packages/assets/icons/icon/zoom-out.svg
  var zoom_out_default = "./zoom-out-WIBPXGGZ.svg";

  // ../../../packages/assets/translations/ar.json
  var ar_default = "./ar-VOSRY4W4.json";

  // ../../../packages/assets/translations/ca.json
  var ca_default = "./ca-NZIXUUUM.json";

  // ../../../packages/assets/translations/da.json
  var da_default = "./da-LPPYLI6B.json";

  // ../../../packages/assets/translations/de.json
  var de_default = "./de-5BD6WGEY.json";

  // ../../../packages/assets/translations/en.json
  var en_default = "./en-PVCBWCM4.json";

  // ../../../packages/assets/translations/es.json
  var es_default = "./es-JLD5SLUL.json";

  // ../../../packages/assets/translations/fa.json
  var fa_default = "./fa-XJUTEWT7.json";

  // ../../../packages/assets/translations/fi.json
  var fi_default = "./fi-5XD6N2AX.json";

  // ../../../packages/assets/translations/fr.json
  var fr_default = "./fr-T7Y7TWDV.json";

  // ../../../packages/assets/translations/gl.json
  var gl_default = "./gl-R7SP2OGE.json";

  // ../../../packages/assets/translations/he.json
  var he_default = "./he-EOVECWK2.json";

  // ../../../packages/assets/translations/hi-in.json
  var hi_in_default = "./hi-in-TPBLGCVY.json";

  // ../../../packages/assets/translations/hu.json
  var hu_default = "./hu-RWQGTMFT.json";

  // ../../../packages/assets/translations/it.json
  var it_default = "./it-4PH4C55E.json";

  // ../../../packages/assets/translations/ja.json
  var ja_default = "./ja-LNIENWNB.json";

  // ../../../packages/assets/translations/ko-kr.json
  var ko_kr_default = "./ko-kr-KR4STE5N.json";

  // ../../../packages/assets/translations/ku.json
  var ku_default = "./ku-YDV2MT34.json";

  // ../../../packages/assets/translations/languages.json
  var languages_default = "./languages-W42A3KLE.json";

  // ../../../packages/assets/translations/main.json
  var main_default = "./main-CDT52CVI.json";

  // ../../../packages/assets/translations/my.json
  var my_default = "./my-F6IIYM24.json";

  // ../../../packages/assets/translations/ne.json
  var ne_default = "./ne-GQHITCAM.json";

  // ../../../packages/assets/translations/no.json
  var no_default = "./no-IAKVOKY6.json";

  // ../../../packages/assets/translations/pl.json
  var pl_default = "./pl-AC4KFR3W.json";

  // ../../../packages/assets/translations/pt-br.json
  var pt_br_default = "./pt-br-RXGTOYMH.json";

  // ../../../packages/assets/translations/pt-pt.json
  var pt_pt_default = "./pt-pt-K2243WHY.json";

  // ../../../packages/assets/translations/ro.json
  var ro_default = "./ro-5ZHBLSMT.json";

  // ../../../packages/assets/translations/ru.json
  var ru_default = "./ru-LKXK7C3F.json";

  // ../../../packages/assets/translations/sv.json
  var sv_default = "./sv-EDIPKQSY.json";

  // ../../../packages/assets/translations/te.json
  var te_default = "./te-AJVYJ424.json";

  // ../../../packages/assets/translations/th.json
  var th_default = "./th-TNSAMBXT.json";

  // ../../../packages/assets/translations/tr.json
  var tr_default = "./tr-KR4RQMSL.json";

  // ../../../packages/assets/translations/uk.json
  var uk_default = "./uk-NUOI6P36.json";

  // ../../../packages/assets/translations/vi.json
  var vi_default = "./vi-4JSRDEJ5.json";

  // ../../../packages/assets/translations/zh-cn.json
  var zh_cn_default = "./zh-cn-BHBINMCV.json";

  // ../../../packages/assets/translations/zh-tw.json
  var zh_tw_default = "./zh-tw-DFQP5PF3.json";

  // ../../../packages/assets/imports.js
  function formatAssetUrl(assetUrl, format = {}) {
    const assetUrlString = typeof assetUrl === "string" ? assetUrl : assetUrl.src;
    if (typeof format === "function")
      return format(assetUrlString);
    const { baseUrl = "" } = format;
    if (assetUrlString.startsWith("data:"))
      return assetUrlString;
    if (assetUrlString.match(/^https?:\/\//))
      return assetUrlString;
    return `${baseUrl.replace(/\/$/, "")}/${assetUrlString.replace(/^\.?\//, "")}`;
  }
  function getAssetUrlsByImport(opts) {
    return {
      fonts: {
        monospace: formatAssetUrl(IBMPlexMono_Medium_default, opts),
        sansSerif: formatAssetUrl(IBMPlexSans_Medium_default, opts),
        serif: formatAssetUrl(IBMPlexSerif_Medium_default, opts),
        draw: formatAssetUrl(Shantell_Sans_Normal_SemiBold_default, opts)
      },
      icons: {
        "align-bottom-center": formatAssetUrl(align_bottom_center_default, opts),
        "align-bottom-left": formatAssetUrl(align_bottom_left_default, opts),
        "align-bottom-right": formatAssetUrl(align_bottom_right_default, opts),
        "align-bottom": formatAssetUrl(align_bottom_default, opts),
        "align-center-center": formatAssetUrl(align_center_center_default, opts),
        "align-center-horizontal": formatAssetUrl(align_center_horizontal_default, opts),
        "align-center-left": formatAssetUrl(align_center_left_default, opts),
        "align-center-right": formatAssetUrl(align_center_right_default, opts),
        "align-center-vertical": formatAssetUrl(align_center_vertical_default, opts),
        "align-left": formatAssetUrl(align_left_default, opts),
        "align-right": formatAssetUrl(align_right_default, opts),
        "align-top-center": formatAssetUrl(align_top_center_default, opts),
        "align-top-left": formatAssetUrl(align_top_left_default, opts),
        "align-top-right": formatAssetUrl(align_top_right_default, opts),
        "align-top": formatAssetUrl(align_top_default, opts),
        "arrow-left": formatAssetUrl(arrow_left_default, opts),
        "arrowhead-arrow": formatAssetUrl(arrowhead_arrow_default, opts),
        "arrowhead-bar": formatAssetUrl(arrowhead_bar_default, opts),
        "arrowhead-diamond": formatAssetUrl(arrowhead_diamond_default, opts),
        "arrowhead-dot": formatAssetUrl(arrowhead_dot_default, opts),
        "arrowhead-none": formatAssetUrl(arrowhead_none_default, opts),
        "arrowhead-square": formatAssetUrl(arrowhead_square_default, opts),
        "arrowhead-triangle-inverted": formatAssetUrl(arrowhead_triangle_inverted_default, opts),
        "arrowhead-triangle": formatAssetUrl(arrowhead_triangle_default, opts),
        "aspect-ratio": formatAssetUrl(aspect_ratio_default, opts),
        avatar: formatAssetUrl(avatar_default, opts),
        blob: formatAssetUrl(blob_default, opts),
        "bring-forward": formatAssetUrl(bring_forward_default, opts),
        "bring-to-front": formatAssetUrl(bring_to_front_default, opts),
        check: formatAssetUrl(check_default, opts),
        "checkbox-checked": formatAssetUrl(checkbox_checked_default, opts),
        "checkbox-empty": formatAssetUrl(checkbox_empty_default, opts),
        "chevron-down": formatAssetUrl(chevron_down_default, opts),
        "chevron-left": formatAssetUrl(chevron_left_default, opts),
        "chevron-right": formatAssetUrl(chevron_right_default, opts),
        "chevron-up": formatAssetUrl(chevron_up_default, opts),
        "chevrons-ne": formatAssetUrl(chevrons_ne_default, opts),
        "chevrons-sw": formatAssetUrl(chevrons_sw_default, opts),
        "clipboard-copied": formatAssetUrl(clipboard_copied_default, opts),
        "clipboard-copy": formatAssetUrl(clipboard_copy_default, opts),
        code: formatAssetUrl(code_default, opts),
        collab: formatAssetUrl(collab_default, opts),
        color: formatAssetUrl(color_default, opts),
        comment: formatAssetUrl(comment_default, opts),
        "cross-2": formatAssetUrl(cross_2_default, opts),
        cross: formatAssetUrl(cross_default, opts),
        "dash-dashed": formatAssetUrl(dash_dashed_default, opts),
        "dash-dotted": formatAssetUrl(dash_dotted_default, opts),
        "dash-draw": formatAssetUrl(dash_draw_default, opts),
        "dash-solid": formatAssetUrl(dash_solid_default, opts),
        discord: formatAssetUrl(discord_default, opts),
        "distribute-horizontal": formatAssetUrl(distribute_horizontal_default, opts),
        "distribute-vertical": formatAssetUrl(distribute_vertical_default, opts),
        dot: formatAssetUrl(dot_default, opts),
        "dots-horizontal": formatAssetUrl(dots_horizontal_default, opts),
        "dots-vertical": formatAssetUrl(dots_vertical_default, opts),
        "drag-handle-dots": formatAssetUrl(drag_handle_dots_default, opts),
        duplicate: formatAssetUrl(duplicate_default, opts),
        edit: formatAssetUrl(edit_default, opts),
        "external-link": formatAssetUrl(external_link_default, opts),
        file: formatAssetUrl(file_default, opts),
        "fill-none": formatAssetUrl(fill_none_default, opts),
        "fill-pattern": formatAssetUrl(fill_pattern_default, opts),
        "fill-semi": formatAssetUrl(fill_semi_default, opts),
        "fill-solid": formatAssetUrl(fill_solid_default, opts),
        follow: formatAssetUrl(follow_default, opts),
        following: formatAssetUrl(following_default, opts),
        "font-draw": formatAssetUrl(font_draw_default, opts),
        "font-mono": formatAssetUrl(font_mono_default, opts),
        "font-sans": formatAssetUrl(font_sans_default, opts),
        "font-serif": formatAssetUrl(font_serif_default, opts),
        "geo-arrow-down": formatAssetUrl(geo_arrow_down_default, opts),
        "geo-arrow-left": formatAssetUrl(geo_arrow_left_default, opts),
        "geo-arrow-right": formatAssetUrl(geo_arrow_right_default, opts),
        "geo-arrow-up": formatAssetUrl(geo_arrow_up_default, opts),
        "geo-check-box": formatAssetUrl(geo_check_box_default, opts),
        "geo-diamond": formatAssetUrl(geo_diamond_default, opts),
        "geo-ellipse": formatAssetUrl(geo_ellipse_default, opts),
        "geo-hexagon": formatAssetUrl(geo_hexagon_default, opts),
        "geo-octagon": formatAssetUrl(geo_octagon_default, opts),
        "geo-oval": formatAssetUrl(geo_oval_default, opts),
        "geo-pentagon": formatAssetUrl(geo_pentagon_default, opts),
        "geo-rectangle": formatAssetUrl(geo_rectangle_default, opts),
        "geo-rhombus-2": formatAssetUrl(geo_rhombus_2_default, opts),
        "geo-rhombus": formatAssetUrl(geo_rhombus_default, opts),
        "geo-star": formatAssetUrl(geo_star_default, opts),
        "geo-trapezoid": formatAssetUrl(geo_trapezoid_default, opts),
        "geo-triangle": formatAssetUrl(geo_triangle_default, opts),
        "geo-x-box": formatAssetUrl(geo_x_box_default, opts),
        github: formatAssetUrl(github_default, opts),
        group: formatAssetUrl(group_default, opts),
        hidden: formatAssetUrl(hidden_default, opts),
        image: formatAssetUrl(image_default, opts),
        "info-circle": formatAssetUrl(info_circle_default, opts),
        leading: formatAssetUrl(leading_default, opts),
        link: formatAssetUrl(link_default, opts),
        "lock-small": formatAssetUrl(lock_small_default, opts),
        lock: formatAssetUrl(lock_default, opts),
        menu: formatAssetUrl(menu_default, opts),
        minus: formatAssetUrl(minus_default, opts),
        mixed: formatAssetUrl(mixed_default, opts),
        pack: formatAssetUrl(pack_default, opts),
        page: formatAssetUrl(page_default, opts),
        plus: formatAssetUrl(plus_default, opts),
        "question-mark-circle": formatAssetUrl(question_mark_circle_default, opts),
        "question-mark": formatAssetUrl(question_mark_default, opts),
        redo: formatAssetUrl(redo_default, opts),
        "reset-zoom": formatAssetUrl(reset_zoom_default, opts),
        "rotate-ccw": formatAssetUrl(rotate_ccw_default, opts),
        "rotate-cw": formatAssetUrl(rotate_cw_default, opts),
        ruler: formatAssetUrl(ruler_default, opts),
        search: formatAssetUrl(search_default, opts),
        "send-backward": formatAssetUrl(send_backward_default, opts),
        "send-to-back": formatAssetUrl(send_to_back_default, opts),
        "settings-horizontal": formatAssetUrl(settings_horizontal_default, opts),
        "settings-vertical-1": formatAssetUrl(settings_vertical_1_default, opts),
        "settings-vertical": formatAssetUrl(settings_vertical_default, opts),
        "share-1": formatAssetUrl(share_1_default, opts),
        "share-2": formatAssetUrl(share_2_default, opts),
        "size-extra-large": formatAssetUrl(size_extra_large_default, opts),
        "size-large": formatAssetUrl(size_large_default, opts),
        "size-medium": formatAssetUrl(size_medium_default, opts),
        "size-small": formatAssetUrl(size_small_default, opts),
        "spline-cubic": formatAssetUrl(spline_cubic_default, opts),
        "spline-line": formatAssetUrl(spline_line_default, opts),
        "stack-horizontal": formatAssetUrl(stack_horizontal_default, opts),
        "stack-vertical": formatAssetUrl(stack_vertical_default, opts),
        "stretch-horizontal": formatAssetUrl(stretch_horizontal_default, opts),
        "stretch-vertical": formatAssetUrl(stretch_vertical_default, opts),
        "text-align-center": formatAssetUrl(text_align_center_default, opts),
        "text-align-justify": formatAssetUrl(text_align_justify_default, opts),
        "text-align-left": formatAssetUrl(text_align_left_default, opts),
        "text-align-right": formatAssetUrl(text_align_right_default, opts),
        "tool-arrow": formatAssetUrl(tool_arrow_default, opts),
        "tool-embed": formatAssetUrl(tool_embed_default, opts),
        "tool-eraser": formatAssetUrl(tool_eraser_default, opts),
        "tool-frame": formatAssetUrl(tool_frame_default, opts),
        "tool-hand": formatAssetUrl(tool_hand_default, opts),
        "tool-highlighter": formatAssetUrl(tool_highlighter_default, opts),
        "tool-line": formatAssetUrl(tool_line_default, opts),
        "tool-media": formatAssetUrl(tool_media_default, opts),
        "tool-note": formatAssetUrl(tool_note_default, opts),
        "tool-pencil": formatAssetUrl(tool_pencil_default, opts),
        "tool-pointer": formatAssetUrl(tool_pointer_default, opts),
        "tool-text": formatAssetUrl(tool_text_default, opts),
        trash: formatAssetUrl(trash_default, opts),
        "triangle-down": formatAssetUrl(triangle_down_default, opts),
        "triangle-up": formatAssetUrl(triangle_up_default, opts),
        twitter: formatAssetUrl(twitter_default, opts),
        undo: formatAssetUrl(undo_default, opts),
        ungroup: formatAssetUrl(ungroup_default, opts),
        "unlock-small": formatAssetUrl(unlock_small_default, opts),
        unlock: formatAssetUrl(unlock_default, opts),
        visible: formatAssetUrl(visible_default, opts),
        "warning-triangle": formatAssetUrl(warning_triangle_default, opts),
        "zoom-in": formatAssetUrl(zoom_in_default, opts),
        "zoom-out": formatAssetUrl(zoom_out_default, opts)
      },
      translations: {
        ar: formatAssetUrl(ar_default, opts),
        ca: formatAssetUrl(ca_default, opts),
        da: formatAssetUrl(da_default, opts),
        de: formatAssetUrl(de_default, opts),
        en: formatAssetUrl(en_default, opts),
        es: formatAssetUrl(es_default, opts),
        fa: formatAssetUrl(fa_default, opts),
        fi: formatAssetUrl(fi_default, opts),
        fr: formatAssetUrl(fr_default, opts),
        gl: formatAssetUrl(gl_default, opts),
        he: formatAssetUrl(he_default, opts),
        "hi-in": formatAssetUrl(hi_in_default, opts),
        hu: formatAssetUrl(hu_default, opts),
        it: formatAssetUrl(it_default, opts),
        ja: formatAssetUrl(ja_default, opts),
        "ko-kr": formatAssetUrl(ko_kr_default, opts),
        ku: formatAssetUrl(ku_default, opts),
        languages: formatAssetUrl(languages_default, opts),
        main: formatAssetUrl(main_default, opts),
        my: formatAssetUrl(my_default, opts),
        ne: formatAssetUrl(ne_default, opts),
        no: formatAssetUrl(no_default, opts),
        pl: formatAssetUrl(pl_default, opts),
        "pt-br": formatAssetUrl(pt_br_default, opts),
        "pt-pt": formatAssetUrl(pt_pt_default, opts),
        ro: formatAssetUrl(ro_default, opts),
        ru: formatAssetUrl(ru_default, opts),
        sv: formatAssetUrl(sv_default, opts),
        te: formatAssetUrl(te_default, opts),
        th: formatAssetUrl(th_default, opts),
        tr: formatAssetUrl(tr_default, opts),
        uk: formatAssetUrl(uk_default, opts),
        vi: formatAssetUrl(vi_default, opts),
        "zh-cn": formatAssetUrl(zh_cn_default, opts),
        "zh-tw": formatAssetUrl(zh_tw_default, opts)
      },
      embedIcons: {
        codepen: formatAssetUrl(codepen_default, opts),
        codesandbox: formatAssetUrl(codesandbox_default, opts),
        excalidraw: formatAssetUrl(excalidraw_default, opts),
        felt: formatAssetUrl(felt_default, opts),
        figma: formatAssetUrl(figma_default, opts),
        github_gist: formatAssetUrl(github_gist_default, opts),
        google_calendar: formatAssetUrl(google_calendar_default, opts),
        google_maps: formatAssetUrl(google_maps_default, opts),
        google_slides: formatAssetUrl(google_slides_default, opts),
        observable: formatAssetUrl(observable_default, opts),
        replit: formatAssetUrl(replit_default, opts),
        scratch: formatAssetUrl(scratch_default, opts),
        spotify: formatAssetUrl(spotify_default, opts),
        tldraw: formatAssetUrl(tldraw_default, opts),
        vimeo: formatAssetUrl(vimeo_default, opts),
        youtube: formatAssetUrl(youtube_default, opts)
      }
    };
  }

  // src/app.tsx
  var import_react116 = __toESM(require_react());

  // ../../../packages/file-format/src/lib/file.ts
  var LATEST_TLDRAW_FILE_FORMAT_VERSION = 1;
  var tldrawFileValidator = validation_exports.object({
    tldrawFileFormatVersion: validation_exports.nonZeroInteger,
    schema: validation_exports.object({
      schemaVersion: validation_exports.positiveInteger,
      storeVersion: validation_exports.positiveInteger,
      recordVersions: validation_exports.dict(
        validation_exports.string,
        validation_exports.object({
          version: validation_exports.positiveInteger,
          subTypeVersions: validation_exports.dict(validation_exports.string, validation_exports.positiveInteger).optional(),
          subTypeKey: validation_exports.string.optional()
        })
      )
    }),
    records: validation_exports.arrayOf(
      validation_exports.object({
        id: validation_exports.string,
        typeName: validation_exports.string
      }).allowUnknownProperties()
    )
  });
  function isV1File(data) {
    var _a5;
    try {
      if ((_a5 = data.document) == null ? void 0 : _a5.version) {
        return true;
      }
      return false;
    } catch (e2) {
      return false;
    }
  }
  function parseTldrawJsonFile({
    config,
    json,
    userId,
    instanceId
  }) {
    let data;
    try {
      data = tldrawFileValidator.validate(JSON.parse(json));
    } catch (e2) {
      try {
        data = JSON.parse(json);
        if (isV1File(data)) {
          return Result.err({ type: "v1File", data });
        }
      } catch (e3) {
      }
      return Result.err({ type: "notATldrawFile", cause: e2 });
    }
    if (data.tldrawFileFormatVersion > LATEST_TLDRAW_FILE_FORMAT_VERSION) {
      return Result.err({
        type: "fileFormatVersionTooNew",
        version: data.tldrawFileFormatVersion
      });
    }
    let migrationResult;
    try {
      const storeSnapshot = Object.fromEntries(data.records.map((r3) => [r3.id, r3]));
      migrationResult = config.storeSchema.migrateStoreSnapshot(storeSnapshot, data.schema);
    } catch (e2) {
      return Result.err({ type: "invalidRecords", cause: e2 });
    }
    if (migrationResult.type === "error") {
      return Result.err({ type: "migrationFailed", reason: migrationResult.reason });
    }
    try {
      return Result.ok(config.createStore({ initialData: migrationResult.value, userId, instanceId }));
    } catch (e2) {
      return Result.err({ type: "invalidRecords", cause: e2 });
    }
  }
  function serializeTldrawJson(store) {
    return __async(this, null, function* () {
      const recordsToSave = [];
      for (const record of store.allRecords()) {
        switch (record.typeName) {
          case "asset":
            if (record.type !== "bookmark" && record.props.src && !record.props.src.startsWith("data:")) {
              let assetSrcToSave;
              try {
                assetSrcToSave = yield fileToBase64(yield (yield fetch(record.props.src)).blob());
              } catch (e2) {
                assetSrcToSave = record.props.src;
              }
              recordsToSave.push(__spreadProps(__spreadValues({}, record), {
                props: __spreadProps(__spreadValues({}, record.props), {
                  src: assetSrcToSave
                })
              }));
            } else {
              recordsToSave.push(record);
            }
            break;
          default:
            recordsToSave.push(record);
            break;
        }
      }
      return JSON.stringify({
        tldrawFileFormatVersion: LATEST_TLDRAW_FILE_FORMAT_VERSION,
        schema: store.schema.serialize(),
        records: recordsToSave
      });
    });
  }
  function parseAndLoadDocument(app, document2, msg2, addToast, onV1FileLoad, forceDarkMode) {
    return __async(this, null, function* () {
      const parseFileResult = parseTldrawJsonFile({
        config: TldrawEditorConfig.default,
        json: document2,
        instanceId: app.instanceId,
        userId: app.userId
      });
      if (!parseFileResult.ok) {
        let description;
        switch (parseFileResult.error.type) {
          case "notATldrawFile":
            app.annotateError(parseFileResult.error.cause, {
              origin: "file-system.open.parse",
              willCrashApp: false,
              tags: { parseErrorType: parseFileResult.error.type }
            });
            reportError(parseFileResult.error.cause);
            description = msg2("file-system.file-open-error.not-a-tldraw-file");
            break;
          case "fileFormatVersionTooNew":
            description = msg2("file-system.file-open-error.file-format-version-too-new");
            break;
          case "migrationFailed":
            if (parseFileResult.error.reason === "target-version-too-new" /* TargetVersionTooNew */) {
              description = msg2("file-system.file-open-error.file-format-version-too-new");
            } else {
              description = msg2("file-system.file-open-error.generic-corrupted-file");
            }
            break;
          case "invalidRecords":
            app.annotateError(parseFileResult.error.cause, {
              origin: "file-system.open.parse",
              willCrashApp: false,
              tags: { parseErrorType: parseFileResult.error.type }
            });
            reportError(parseFileResult.error.cause);
            description = msg2("file-system.file-open-error.generic-corrupted-file");
            break;
          case "v1File": {
            buildFromV1Document(app, parseFileResult.error.data.document);
            onV1FileLoad == null ? void 0 : onV1FileLoad();
            return;
          }
          default:
            exhaustiveSwitchError(parseFileResult.error, "type");
        }
        addToast({
          title: msg2("file-system.file-open-error.title"),
          description
        });
        return;
      }
      app.replaceStoreContentsWithRecordsForOtherDocument(parseFileResult.value.allRecords());
      if (forceDarkMode)
        app.setDarkMode(true);
    });
  }

  // src/ChangeResponder.tsx
  var import_react114 = __toESM(require_react());
  var ChangeResponder = ({
    syncedStore,
    userId,
    instanceId
  }) => {
    const app = useApp();
    const { addToast, clearToasts, msg: msg2 } = useDefaultHelpers();
    import_react114.default.useEffect(() => {
      function handleMessage({ data: message }) {
        switch (message.type) {
          case "vscode:revert": {
            parseAndLoadDocument(app, message.data.fileContents, msg2, addToast);
            break;
          }
        }
      }
      window.addEventListener("message", handleMessage);
      return () => {
        clearToasts();
        window.removeEventListener("message", handleMessage);
      };
    }, [app, userId, instanceId, msg2, addToast, clearToasts]);
    import_react114.default.useEffect(() => {
      const handleChange = debounce(() => __async(void 0, null, function* () {
        if (syncedStore.store) {
          vscode.postMessage({
            type: "vscode:editor-updated",
            data: {
              fileContents: yield serializeTldrawJson(syncedStore.store)
            }
          });
        }
      }), 250);
      vscode.postMessage({
        type: "vscode:editor-loaded"
      });
      app.on("change-history", handleChange);
      return () => {
        handleChange();
        app.off("change-history", handleChange);
      };
    }, [app, syncedStore, userId, instanceId]);
    return null;
  };

  // src/FileOpen.tsx
  var import_react115 = __toESM(require_react());
  function FileOpen({
    userId,
    fileContents,
    instanceId,
    forceDarkMode
  }) {
    const app = useApp();
    const { msg: msg2, addToast, clearToasts } = useDefaultHelpers();
    const [isFileLoaded, setIsFileLoaded] = import_react115.default.useState(false);
    import_react115.default.useEffect(() => {
      if (isFileLoaded)
        return;
      function onV1FileLoad() {
        vscode.postMessage({
          type: "vscode:v1-file-opened",
          data: {
            description: msg2("vscode.file-open.desc"),
            backup: msg2("vscode.file-open.backup"),
            backupSaved: msg2("vscode.file-open.backup-saved"),
            backupFailed: msg2("vscode.file-open.backup-failed"),
            dontAskAgain: msg2("vscode.file-open.dont-show-again"),
            open: msg2("vscode.file-open.open")
          }
        });
      }
      function loadFile() {
        return __async(this, null, function* () {
          yield parseAndLoadDocument(app, fileContents, msg2, addToast, onV1FileLoad, forceDarkMode);
        });
      }
      loadFile();
      setIsFileLoaded(true);
      return () => {
        clearToasts();
      };
    }, [
      fileContents,
      app,
      userId,
      instanceId,
      addToast,
      msg2,
      clearToasts,
      forceDarkMode,
      isFileLoaded
    ]);
    return null;
  }

  // src/FullPageMessage.tsx
  var import_jsx_runtime114 = __toESM(require_jsx_runtime());
  function FullPageMessage({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(
      "div",
      {
        style: {
          backgroundColor: "var(--vscode-editor-background)",
          color: "var(--vscode-editor-foreground)",
          position: "fixed",
          top: "50%",
          left: "50%",
          WebkitTransform: "translate(-50%, -50%)",
          transform: "translate(-50%, -50%)"
        },
        children
      }
    );
  }

  // src/utils/rpc.ts
  var SimpleRpcError = class extends Error {
    constructor(id, data) {
      super(`Failed ${id}`);
      __publicField(this, "id");
      __publicField(this, "data");
      this.id = id;
      this.data = data;
    }
  };
  function rpc(id, data, opts = { timeout: 5 * 1e3 }) {
    const { timeout } = opts;
    const type = id + "/request";
    const uuid = nanoid();
    return new Promise((resolve, reject) => {
      const inMessage = {
        uuid,
        type,
        data
      };
      vscode.postMessage(inMessage);
      const handler = ({ data: response }) => {
        if (uuid === response.uuid) {
          return;
        }
        const cleanup = () => {
          window.removeEventListener("message", handler);
        };
        if (response.type === `${id}/response`) {
          cleanup();
          resolve(response.data);
        }
        if (response.type === `${id}/error`) {
          cleanup();
          reject(new SimpleRpcError(id, response.data));
        }
        setTimeout(() => {
          cleanup();
          reject(new SimpleRpcError(id, { timeout: true }));
        }, timeout);
      };
      window.addEventListener("message", handler);
    });
  }

  // src/utils/bookmarks.ts
  function onCreateBookmarkFromUrlFallback(url) {
    return __async(this, null, function* () {
      var _a5, _b2, _c;
      const meta = {
        image: "",
        title: "",
        description: ""
      };
      try {
        const resp = yield fetch(url, { method: "GET", mode: "no-cors" });
        const html = yield resp.text();
        const doc = new DOMParser().parseFromString(html, "text/html");
        meta.image = (_a5 = doc.head.querySelector('meta[property="og:image"]')) == null ? void 0 : _a5.getAttribute("content");
        meta.title = (_b2 = doc.head.querySelector('meta[property="og:title"]')) == null ? void 0 : _b2.getAttribute("content");
        meta.description = (_c = doc.head.querySelector('meta[property="og:description"]')) == null ? void 0 : _c.getAttribute("content");
        return meta;
      } catch (error) {
        console.error(error);
      }
      return meta;
    });
  }
  function onCreateBookmarkFromUrl(url) {
    return __async(this, null, function* () {
      try {
        const data = yield rpc("vscode:bookmark", { url });
        return {
          title: data.title || "",
          description: data.description || "",
          image: data.image || ""
        };
      } catch (error) {
        return onCreateBookmarkFromUrlFallback(url);
      }
    });
  }

  // src/app.tsx
  var import_jsx_runtime115 = __toESM(require_jsx_runtime());
  setRuntimeOverrides({
    openWindow: (url, target) => {
      vscode.postMessage({
        type: "vscode:open-window",
        data: {
          url,
          target
        }
      });
    },
    refreshPage: () => {
      vscode.postMessage({
        type: "vscode:refresh-page"
      });
    },
    hardReset: () => __async(void 0, null, function* () {
      var _a5;
      yield (_a5 = window.__tldraw__hardReset) == null ? void 0 : _a5.call(window);
      vscode.postMessage({
        type: "vscode:hard-reset"
      });
    })
  });
  var handleError = (error) => {
    console.error(error.message);
  };
  function WrappedTldrawEditor() {
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("div", { className: "tldraw--editor", children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
      ErrorBoundary,
      {
        fallback: () => /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(FullPageMessage, { children: "Fallback" }),
        onError: handleError,
        children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawWrapper, {})
      }
    ) });
  }
  var menuOverrides = {
    menu: (_app, schema, _helpers) => {
      schema.forEach((item) => {
        if (item.id === "menu" && item.type === "group") {
          item.children = item.children.filter((menuItem2) => {
            if (menuItem2.id === "file" && menuItem2.type === "submenu") {
              return false;
            }
            return true;
          });
        }
      });
      return schema;
    }
  };
  var TldrawWrapper = () => {
    const [tldrawInnerProps, setTldrawInnerProps] = (0, import_react116.useState)(null);
    (0, import_react116.useEffect)(() => {
      function handleMessage({ data: message }) {
        switch (message.type) {
          case "vscode:opened-file": {
            setTldrawInnerProps({
              assetSrc: message.data.assetSrc,
              fileContents: message.data.fileContents,
              uri: message.data.uri,
              userId: message.data.userId,
              isDarkMode: message.data.isDarkMode
            });
            window.removeEventListener("message", handleMessage);
            break;
          }
        }
      }
      window.addEventListener("message", handleMessage);
      vscode.postMessage({ type: "vscode:ready-to-receive-file" });
      return () => {
        window.removeEventListener("message", handleMessage);
      };
    }, [setTldrawInnerProps]);
    return tldrawInnerProps === null ? /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(FullPageMessage, { children: "Loading" }) : /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(TldrawInner, __spreadValues({}, tldrawInnerProps));
  };
  function TldrawInner({ uri, assetSrc, userId, isDarkMode, fileContents }) {
    const instanceId = TAB_ID;
    const syncedStore = useLocalSyncClient({
      universalPersistenceKey: uri,
      instanceId,
      userId
    });
    const assetUrls = (0, import_react116.useMemo)(() => getAssetUrlsByImport({ baseUrl: assetSrc }), [assetSrc]);
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
      TldrawEditor,
      {
        assetUrls,
        instanceId: TAB_ID,
        userId,
        store: syncedStore,
        onCreateBookmarkFromUrl,
        autoFocus: true,
        children: /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(TldrawUi, { assetUrls, overrides: [menuOverrides, linksUiOverrides], children: [
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
            FileOpen,
            {
              instanceId,
              userId,
              fileContents,
              forceDarkMode: isDarkMode
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(ChangeResponder, { syncedStore, userId, instanceId }),
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(ContextMenu, { children: /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(Canvas, {}) })
        ] })
      }
    );
  }

  // src/index.tsx
  var import_jsx_runtime116 = __toESM(require_jsx_runtime());
  import_client.default.createRoot(document.getElementById("root")).render(
    /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(React73.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(WrappedTldrawEditor, {}) })
  );
})();
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
